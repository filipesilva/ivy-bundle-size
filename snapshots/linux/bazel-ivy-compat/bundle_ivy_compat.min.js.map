{"version":3,"sources":["../../../../../../../../../../../../../external/ngdeps/node_modules/tslib/tslib.es6.js","../../../../../../../packages/core/src/util/decorators.ts","../../../src/di/metadata.ts","../../../../../../../../packages/core/src/di/interface/injector.ts","../../../../../../../packages/core/src/util/property.ts","../../../../../../../../packages/core/src/di/interface/defs.ts","../../../../../../../packages/core/src/util/stringify.ts","../../../src/di/forward_ref.ts","../../../../../../../packages/core/src/util/global.ts","../../../src/di/injector_compatibility.ts","../../../../../../../packages/core/src/interface/type.ts","../../../src/di/jit/injectable.ts","../../../src/di/util.ts","../../../src/di/injection_token.ts","../../../src/di/injector.ts","../../../../../../../packages/core/src/util/errors.ts","../../../src/di/scope.ts","../../../src/di/r3_injector.ts","../../../src/metadata/di.ts","../../../src/render3/interfaces/injector.ts","../../../src/change_detection/constants.ts","../../../src/render3/fields.ts","../../../src/metadata/view.ts","../../../src/render3/empty.ts","../../../src/render3/interfaces/container.ts","../../../src/render3/interfaces/context.ts","../../../src/render3/interfaces/view.ts","../../../src/render3/onchanges_util.ts","../../../src/render3/util.ts","../../../src/render3/definition.ts","../../../../../../../packages/core/src/util/closure.ts","../../../src/render3/state.ts","../../../src/render3/hooks.ts","../../../src/render3/di.ts","../../../src/render3/context_discovery.ts","../../../src/render3/discovery_utils.ts","../../../../../../../packages/core/src/util/is_dev_mode.ts","../../../src/sanitization/inert_body.ts","../../../src/sanitization/url_sanitizer.ts","../../../src/sanitization/html_sanitizer.ts","../../../src/sanitization/security.ts","../../../src/sanitization/style_sanitizer.ts","../../../../../../../packages/core/src/util/lang.ts","../../../../../../../packages/core/src/util/symbol.ts","../../../../../../../packages/core/src/util/comparison.ts","../../../src/change_detection/change_detection_util.ts","../../../src/render3/tokens.ts","../../../src/render3/interfaces/renderer.ts","../../../src/render3/node_manipulation.ts","../../../src/render3/styling/util.ts","../../../src/render3/styling/class_and_style_bindings.ts","../../../src/render3/instructions.ts","../../../src/render3/component.ts","../../../src/linker/component_factory.ts","../../../src/render3/view_engine_compatibility.ts","../../../src/linker/component_factory_resolver.ts","../../../src/linker/ng_module_factory.ts","../../../src/render3/view_ref.ts","../../../src/linker/element_ref.ts","../../../src/render/api.ts","../../../src/version.ts","../../../src/render3/component_ref.ts","../../../src/render3/ng_module_ref.ts","../../../../../external/rxjs/internal/util/isFunction.ts","../../../../../external/rxjs/internal/config.ts","../../../../../external/rxjs/internal/util/hostReportError.ts","../../../../../external/rxjs/internal/Observer.ts","../../../../../external/rxjs/internal/util/isArray.ts","../../../../../external/rxjs/internal/util/isObject.ts","../../../../../external/rxjs/internal/util/errorObject.ts","../../../../../external/rxjs/internal/util/tryCatch.ts","../../../../../external/rxjs/internal/util/UnsubscriptionError.ts","../../../../../external/rxjs/internal/Subscription.ts","../../../../../external/rxjs/internal/symbol/rxSubscriber.ts","../../../../../external/rxjs/internal/Subscriber.ts","../../../../../external/rxjs/internal/symbol/observable.ts","../../../../../external/rxjs/internal/util/noop.ts","../../../../../external/rxjs/internal/Observable.ts","../../../../../external/rxjs/internal/util/toSubscriber.ts","../../../../../external/rxjs/internal/util/canReportError.ts","../../../../../external/rxjs/internal/util/pipe.ts","../../../../../external/rxjs/internal/util/ObjectUnsubscribedError.ts","../../../../../external/rxjs/internal/SubjectSubscription.ts","../../../../../external/rxjs/internal/Subject.ts","../../../../../external/rxjs/internal/operators/refCount.ts","../../../../../external/rxjs/internal/observable/ConnectableObservable.ts","../../../../../external/rxjs/internal/util/subscribeToArray.ts","../../../../../external/rxjs/internal/observable/fromArray.ts","../../../../../external/rxjs/internal/util/identity.ts","../../../../../external/rxjs/internal/util/EmptyError.ts","../../../../../external/rxjs/internal/operators/map.ts","../../../../../external/rxjs/internal/OuterSubscriber.ts","../../../../../external/rxjs/internal/InnerSubscriber.ts","../../../../../external/rxjs/internal/util/subscribeToPromise.ts","../../../../../external/rxjs/internal/symbol/iterator.ts","../../../../../external/rxjs/internal/util/subscribeToIterable.ts","../../../../../external/rxjs/internal/util/subscribeToObservable.ts","../../../../../external/rxjs/internal/util/isArrayLike.ts","../../../../../external/rxjs/internal/util/isPromise.ts","../../../../../external/rxjs/internal/util/subscribeTo.ts","../../../../../external/rxjs/internal/operators/mergeMap.ts","../../../../../external/rxjs/internal/util/subscribeToResult.ts","../../../src/event_emitter.ts","../../../src/linker/template_ref.ts","../../../../../external/rxjs/internal/operators/multicast.ts","../../../../../external/rxjs/internal/operators/share.ts","../../../src/application_init.ts","../../../src/application_tokens.ts","../../../src/console.ts","../../../src/errors.ts","../../../src/error_handler.ts","../../../src/profile/wtf_impl.ts","../../../src/linker/compiler.ts","../../../src/profile/profile.ts","../../../../../../../packages/core/src/util/microtask.ts","../../../src/zone/ng_zone.ts","../../../src/application_ref.ts","../../../src/testability/testability.ts","../../../../../external/rxjs/internal/observable/merge.ts","../../../../../external/rxjs/internal/util/isScheduler.ts","../../../../../external/rxjs/internal/operators/mergeAll.ts","../../../../../external/rxjs/internal/observable/from.ts","../../../../../external/rxjs/internal/util/isInteropObservable.ts","../../../../../external/rxjs/internal/observable/fromObservable.ts","../../../../../external/rxjs/internal/observable/fromPromise.ts","../../../../../external/rxjs/internal/util/isIterable.ts","../../../../../external/rxjs/internal/observable/fromIterable.ts","../../../src/linker/view_container_ref.ts","../../../src/change_detection/change_detector_ref.ts","../../../src/debug/debug_node.ts","../../../src/change_detection/differs/default_iterable_differ.ts","../../../src/change_detection/differs/default_keyvalue_differ.ts","../../../src/change_detection/differs/iterable_differs.ts","../../../src/change_detection/differs/keyvalue_differs.ts","../../../src/change_detection/change_detection.ts","../../../src/platform_core_providers.ts","../../../src/i18n/tokens.ts","../../../src/application_module.ts","../../../../common/src/location/platform_location.ts","../../../../common/src/i18n/locale_en.ts","../../../../common/src/i18n/locale_data.ts","../../../../common/src/i18n/currencies.ts","../../../../common/src/i18n/locale_data_api.ts","../../../../common/src/i18n/format_date.ts","../../../../common/src/i18n/format_number.ts","../../../../common/src/i18n/localization.ts","../../../../common/src/directives/ng_class.ts","../../../../common/src/directives/ng_component_outlet.ts","../../../../common/src/directives/ng_for_of.ts","../../../../common/src/directives/ng_if.ts","../../../../common/src/directives/ng_switch.ts","../../../../common/src/directives/ng_plural.ts","../../../../common/src/directives/ng_style.ts","../../../../common/src/directives/ng_template_outlet.ts","../../../../common/src/directives/index.ts","../../../../common/src/pipes/invalid_pipe_argument_error.ts","../../../../common/src/pipes/deprecated/number_pipe.ts","../../../../common/src/pipes/async_pipe.ts","../../../../common/src/pipes/case_conversion_pipes.ts","../../../../common/src/pipes/date_pipe.ts","../../../../common/src/pipes/i18n_plural_pipe.ts","../../../../common/src/pipes/i18n_select_pipe.ts","../../../../common/src/pipes/json_pipe.ts","../../../../common/src/pipes/keyvalue_pipe.ts","../../../../common/src/pipes/number_pipe.ts","../../../../common/src/pipes/slice_pipe.ts","../../../../common/src/pipes/index.ts","../../../../common/src/common_module.ts","../../../../common/src/dom_tokens.ts","../../../../common/src/platform_id.ts","../../../../platform-browser/src/dom/dom_adapter.ts","../../../../platform-browser/src/browser/browser_adapter.ts","../../../../common/src/cookie.ts","../../../../platform-browser/src/browser/generic_browser_adapter.ts","../../../../platform-browser/src/dom/dom_tokens.ts","../../../../platform-browser/src/browser/location/history.ts","../../../../platform-browser/src/browser/location/browser_platform_location.ts","../../../../platform-browser/src/browser/server-transition.ts","../../../../platform-browser/src/browser/testability.ts","../../../../platform-browser/src/dom/util.ts","../../../../platform-browser/src/dom/debug/ng_probe.ts","../../../../platform-browser/src/dom/events/event_manager.ts","../../../../platform-browser/src/dom/shared_styles_host.ts","../../../../platform-browser/src/dom/dom_renderer.ts","../../../../platform-browser/src/dom/events/dom_events.ts","../../../../platform-browser/src/security/dom_sanitization_service.ts","../../../../platform-browser/src/dom/events/hammer_gestures.ts","../../../../platform-browser/src/dom/events/key_events.ts","../../../../platform-browser/src/browser.ts","../../../../../../../../packages/core/test/bundling/hello_world_r2/index.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","PARAMETERS","makeParamDecorator","name","props","parentClass","metaCtor","makeMetadataCtor","ctor","args","_i","values","propName","ParamDecoratorFactory","annotationInstance","_a","bind","ParamDecorator","annotation","cls","unusedKey","index","parameters","defineProperty","ngMetadataName","annotationCls","Inject","token","Optional","Self","SkipSelf","InjectFlags","getClosureSafeProperty","objWithPropertyToExtract","key","Error","defineInjectable","opts","providedIn","factory","undefined","defineInjector","options","providers","imports","getInjectableDef","type","NG_INJECTABLE_DEF","getInjectorDef","NG_INJECTOR_DEF","ngInjectableDef","ngInjectorDef","stringify","map","join","overriddenName","res","toString","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","fn","_injectImplementation","__window","window","__self","self","WorkerGlobalScope","_global","global","_currentInjector","setCurrentInjector","injector","former","setInjectImplementation","impl","previous","inject","flags","Default","injectInjectorOnly","injectRootLimpMode","get","notFoundValue","injectableDef","injectArgs","types","arg","isArray","j","meta","Function","String","InjectionToken","_desc","__NG_ELEMENT_ID__","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","INJECTOR","NullInjector","Injector","parent","StaticInjector","NULL","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","slice","USE_VALUE","provide","useValue","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","source","records","_records","Map","set","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","resolveProvider","computeDeps","providerDeps","annotations","useExisting","useFactory","useClass","multi","multiProvider","multiProviderMixError","record","tryResolveToken","resolveToken","depRecords","depRecord","childRecord","unshift","tokenPath","message","formatError","tokens","forEach","v","text","obj","charAt","substr","context","parts","JSON","replace","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","APP_ROOT","NOT_YET","EMPTY_ARRAY","getNullInjector","R3Injector","def","additionalProviders","_this","injectorDefTypes","Set","onDestroy","destroyed","dedupStack","deepForEach","injectorDef","processInjectorType","processProvider","makeRecord","isRootInjector","has","defType","destroy","assertNotDestroyed","service","ngOnDestroy","clear","previousInjector","couldBeInjectableType","injectableDefInScope","injectableDefOrInjectorDefFactory","hydrate","defOrWrappedDef","parents","ngModule","isDuplicate","add","imported","defProviders","injectorType_1","ngModuleType","isTypeProvider","providerToRecord","providerToFactory","isValueProvider","isExistingProvider","isFactoryProvider","classRef_1","ngModuleDetail","hasDeps","existing","multiRecord_1","hasOnDestroy","paramLength","fill","input","NodeInjectorFactory","ChangeDetectionStrategy","NG_COMPONENT_DEF","ngComponentDef","NG_DIRECTIVE_DEF","ngDirectiveDef","NG_PIPE_DEF","ngPipeDef","NG_MODULE_DEF","ngModuleDef","NG_ELEMENT_ID","ViewEncapsulation","EMPTY_OBJ","ACTIVE_INDEX","VIEWS","NATIVE","LCONTAINER_LENGTH","MONKEY_PATCH_KEY_NAME","TNODE","PARENT_INJECTOR","INJECTOR_BLOOM_PARENT_SIZE","NO_PARENT_INJECTOR","FactoryPrototype","isViewProvider","isProvider","injectImplementation","resolving","canSeeViewProviders","injectImpl","TVIEW","FLAGS","PARENT","NEXT","QUERIES","HOST","HOST_NODE","BINDING_INDEX","CLEANUP","CONTEXT","RENDERER_FACTORY","RENDERER","SANITIZER","TAIL","CONTAINER_INDEX","DECLARATION_VIEW","HEADER_OFFSET","unwrapOnChangesDirectiveWrapper","isOnChangesDirectiveWrapper","isExactInstanceOf","getPrototypeOf","OnChangesDirectiveWrapper","instance","seenProps","changes","renderStringify","readElementValue","getNativeByTNode","tNode","hostView","getTNode","view","data","getComponentViewByIndex","nodeIndex","slotValue","isComponent","isComponentDef","template","isLContainer","isRootView","target","readPatchedData","readPatchedLView","lView","hasParentInjector","parentLocation","getParentInjectorIndex","getParentInjectorViewOffset","getParentInjectorView","location","startView","viewOffset","parentView","defaultScheduler","requestAnimationFrame","setTimeout","findComponentView","rootTNode","_renderCompCount","defineComponent","componentDefinition","typePrototype","declaredInputs","providersResolver","consts","vars","ngContentSelectors","hostBindings","contentQueries","contentQueriesRefresh","inputs","outputs","exportAs","onChanges","ngOnChanges","onInit","ngOnInit","doCheck","ngDoCheck","afterContentInit","ngAfterContentInit","afterContentChecked","ngAfterContentChecked","afterViewInit","ngAfterViewInit","afterViewChecked","ngAfterViewChecked","onPush","changeDetection","OnPush","directiveDefs","pipeDefs","selectors","viewQuery","features","encapsulation","Emulated","id","styles","_","noSideEffects","directiveTypes","directives","feature","pipeTypes","pipes","invertObject","extractDirectiveDef","extractPipeDef","getComponentDef","getDirectiveDef","getPipeDef","defineNgModule","bootstrap","declarations","exports","transitiveCompileScopes","secondary","newLookup","minifiedKey","publicName","declaredName","previousOrParentTNode","isParent","defineDirective","definePipe","pipeDef","pure","executeHooks","currentView","firstPassHooks","checkHooks","checkNoChangesMode","hooksToCall","callHooks","arr","directiveIndex","hook","isOnChangesHook","directiveOrWrappedDirective","directive","getLView","getPreviousOrParentTNode","setPreviousOrParentTNode","setTNodeAndViewData","getIsParent","setIsParent","isCreationMode","getCheckNoChangesMode","setCheckNoChangesMode","mode","firstTemplatePass","getFirstTemplatePass","setFirstTemplatePass","enterView","newView","hostTNode","oldView","leaveView","tView","viewHooks","viewCheckHooks","bindingStartIndex","includeViewProviders","setIncludeViewProviders","oldValue","BLOOM_MASK","BLOOM_SIZE","nextNgElementId","insertBloom","footer","getInjectorIndex","injectorIndex","getParentInjectorLocation","getOrCreateInjectable","bloomHash","bloomHashBitOrFactory","charCodeAt","tokenId","savePreviousOrParentTNode","saveLView","NodeInjector","previousTView","hostTElementNode","Host","shouldSearchParent","bloomHasToken","searchTokensOnInjector","NOT_FOUND","moduleInjector","currentTView","injectableIdx","locateDirectiveOrProvider","canAccessViewProviders","isHostSpecialCase","nodeProviderIndexes","providerIndexes","tInjectables","injectablesStart","directivesStart","directiveStart","cptViewProvidersCount","endIndex","directiveEnd","providerTokenOrDef","dirDef","getNodeInjectable","tData","lData","isFactory","previousIncludeViewProviders","previousInjectImplementation","destroyHooks","injectorView","b6","b5","isFirstHostTNode","_tNode","_lView","createLContext","native","component","localRefs","attachPatchData","findViaNativeElement","firstChild","traverseNextElement","child","findViaComponent","componentInstance","componentIndices","components","elementComponentIndex","loadLContext","throwOnNotFound","getLContext","mpValue","isComponentInstance","isDirectiveInstance","findViaDirective","directiveInstance","directiveIndexEnd","getDirectivesAtNodeIndex","includeComponents","directiveStartIndex","existingCtx","rElement","parent_1","parentNode","parentContext","loadLContextFromNode","node","Node","isBrowserEvents","listener","useCapture","sortListeners","a","_devMode","_runModeLocked","isDevMode","InertBodyHelper","defaultDoc","inertDocument","implementation","createHTMLDocument","inertBodyElement","body","inertHtml","createElement","appendChild","innerHTML","querySelector","getInertBodyElement","isDOMParserAvailable","DOMParser","getInertBodyElement_DOMParser","getInertBodyElement_InertDocument","getInertBodyElement_XHR","html","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","removeChild","parseFromString","templateEl","documentMode","stripCustomNsAttrs","el","elAttrs","attributes","attrName","item","removeAttribute","childNode","nodeType","ELEMENT_NODE","nextSibling","SAFE_URL_PATTERN","DATA_URL_PATTERN","_sanitizeUrl","url","match","console","warn","tagSet","tags","_b","tslib_1.__values","split","_c","merge","sets","sets_1","sets_1_1","inertBodyHelper","VOID_ELEMENTS","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","VALID_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","SanitizingHtmlSerializer","sanitizedSomething","buf","sanitizeChildren","current","elementValid","startElement","TEXT_NODE","chars","nodeValue","endElement","checkClobberedElement","element","srcset","tagName","nodeName","toLowerCase","elAttr","lower","trim","encodeEntities","nextNode","compareDocumentPosition","DOCUMENT_POSITION_CONTAINED_BY","outerHTML","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","getTemplateContent","isTemplateElement","content","SecurityContext","Sanitizer","SAFE_STYLE_VALUE","RegExp","URL_RE","isPromise","then","_symbolIterator","getSymbolIterator","Symbol_1","keys","getOwnPropertyNames","looseIdentical","isNaN","WrappedValue","wrapped","wrap","unwrap","isWrapped","isJsObject","isJsObject$1","NO_CHANGE","isProceduralRenderer","renderer","domRendererFactory3","createRenderer","hostElement","rendererType","document","embeddedView","containerHostIndex","getContainerRenderParent","tViewNode","container","getLContainer","nativeParentNode","projectionNodeStack","walkTNodeTree","viewToWalk","action","renderParent","beforeNode","projectionNodeIndex","nextTNode","executeNodeAction","nodeOrContainer","lContainer","componentView","head","projection","nativeInsertBefore","nativeRemoveChild","destroyNode","addRemoveViewFromContainer","insertMode","insertView","containerIndex","views","splice","detachView","removeIndex","detached","viewToDetach","removeView","getLViewChild","childIndex","destroyLView","destroyViewTree","rootView","cleanUpView","viewOrContainer","getParentState","state","executeOnDestroys","removeListeners","tCleanup","cleanup","lCleanup","idxOrTargetGetter","useCaptureOrSubIdx","removeEventListener","unsubscribe","cleanupFn","insertBefore","childEl","childTNode","getRenderParent","getHighestElementOrICUContainer","getHostNative","parentTNode","getBeforeNodeForView","containerNative","viewTNode","getStylingContext","viewData","storageIndex","wrapper","isStylingContext","stylingTemplate","allocStylingContext","templateStyleContext","createEmptyStylingContext","sanitizer","initialStyles","initialClasses","isClassBasedValue","getValue","getProp","refreshDescendantViews","executeInitHooks","initHooks","refreshDynamicEmbeddedViews","container_1","dynamicViewData","renderEmbeddedTemplate","refreshContentQueries","directiveDefIdx","contentHooks","contentCheckHooks","setHostBindings","expandoInstructions","bindingRootIndex","expandoStartIndex","currentDirectiveIndex","currentElementIndex","instruction","providerCount","refreshChildComponents","viewAttached","syncViewWithBlueprint","componentTView","blueprint","checkView","createLView","parentLView","rendererFactory","createNodeAtIndex","attrs","adjustedIndex","createTNode","createViewNode","viewToRender","_isParent","_previousOrParentTNode","tickRootContext","getRootContext","viewOrComponent","getRootView","namespaceHTML","getRenderFlags","renderComponentOrTemplate","templateFn","normalExecutionPath","begin","end","_currentNamespace","createTView","viewIndex","initialViewLength","createViewBlueprint","changesHooks","directiveRegistry","pipeRegistry","tViews","tParent","localNames","initialInputs","addToViewTree","adjustedHostIndex","rootContext","rootComponent","detectChangesInternal","detectChangesInRootView","hostTView","createViewQuery","updateViewQuery","directiveInject","CLEAN_PROMISE","Promise","resolve","createRootContext","scheduler","playerHandler","clean","LifecycleHooksFeature","rootTView","dirIndex","registerPreOrderHooks","directiveDef","registerPostOrderHooks","R3ElementRef","R3TemplateRef","R3ViewContainerRef","ComponentRef","ComponentFactory","_NullComponentFactoryResolver","resolveComponentFactory","noComponentFactoryError","ComponentFactoryResolver","ComponentFactoryBoundToModule","_super","selector","componentType","tslib_1.__extends","projectableNodes","rootSelectorOrNode","NgModuleRef","NgModuleFactory","ViewRef","_context","_componentIndex","_appRef","_viewContainerRef","_tViewNode","collectNativeNodes","result","tNodeChild","_lookUpContext","detach","callback","storeCleanupFn","getCleanup","getTViewCleanup","markForCheck","markViewDirty","reattach","detectChanges","checkNoChanges","getComponentViewByInstance","attachToViewContainerRef","vcRef","detachFromAppRef","attachToAppRef","appRef","RootViewRef","_view","checkNoChangesInRootView","createElementRef","ElementRefToken","ElementRef_","ElementRef","nativeElement","SWITCH_ELEMENT_REF_FACTORY","injectElementRef","RendererFactory2","RendererStyleFlags2","Renderer2","SWITCH_RENDERER2_FACTORY","injectRenderer2","getOrCreateRenderer2","VERSION","Version","full","major","minor","patch","ComponentFactoryResolver$1","ComponentFactoryResolver$$1","componentDef","viewEngine_ComponentFactoryResolver","toRefArray","array","nonMinified","templateName","ROOT_CONTEXT","SCHEDULER","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","ComponentFactory$1","ComponentFactory$$1","isInternalRootView","rootViewInjector","createChainedInjector","hostRNode","elementCreate","overriddenRenderer","rendererToUse","createElementNS","locateHostElement","elementOrSelector","defaultRenderer","selectRootElement","rootFlags","setAttribute","tElementNode","rootLView","oldLView","createRootComponentView","rNode","resetComponentState","getOrCreateTView","ngPrivateData","diPublicInInjector","bloomAdd","bloomBit","mask","getOrCreateNodeInjectorForNode","existingInjectorIndex","parentLoc","parentIndex","parentData","initNodeFlags","numberOfDirectives","queueComponentIndexForCheck","nodeList","firstTNode","previousTNode","createRootComponent","hostFeatures","instantiateRootComponent","generateExpandoInstructionBlock","directiveCount","elementIndex","baseResolveDirective","directiveFactory","nodeInjectorFactory","postProcessBaseDirective","componentRef","viewEngine_ElementRef","viewEngine_ComponentFactory","ComponentRef$1","ComponentRef$$1","_rootLView","destroyCbs","changeDetectorRef","viewEngine_ComponentRef","COMPONENT_FACTORY_RESOLVER","viewEngine_NgModuleRef","NgModuleRef$1","NgModuleRef$$1","_parent","_bootstrapComponents","getNgModuleDef","throwNotFound","_r3Injector","createInjector","injectFlags","NgModuleFactory$1","NgModuleFactory$$1","moduleType","parentInjector","viewEngine_NgModuleFactory","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","useDeprecatedSynchronousErrorHandling","hostReportError","err","empty","closed","complete","isObject","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","UnsubscriptionError","Subscription","_parents","_subscriptions","_unsubscribe","hasErrors","len","remove","flattenUnsubscriptionErrors","sub","teardown","subscription","_addParent","tmp","subscriptions","subscriptionIndex","reduce","errs","rxSubscriber","Math","random","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","emptyObserver","SafeSubscriber","rxSubscriberSymbol","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable","noop$1","Observable","subscribe","_isScalar","_subscribe","lift","operator","sink","toSubscriber","nextOrObserver","_trySubscribe","canReportError","observer","promiseCtor","getPromiseCtor","reject","Symbol_observable","pipe","operations","pipeFromArray","fns","piped","prev","noop","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","copy","asObservable","refCount","refCountOperatorFunction","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","connectableObservableDescriptor","writable","subscribeToArray","fromArray","schedule","identity","MapOperator","project","thisArg","MapSubscriber","count","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","subscribeToPromise","promise","getSymbolIterator$1","subscribeToIterable","iterable","Symbol_iterator","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise$1","subscribeTo","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","subscribeToResult","outerSubscriber","shift","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","TemplateRef","SWITCH_TEMPLATE_REF_FACTORY","injectTemplateRef","TemplateRefToken","createTemplateRef","TemplateRef_","_declarationParentView","elementRef","_tView","_renderer","_queries","_injectorIndex","createEmbeddedView","createEmbeddedViewAndNode","declarationView","queries","createView","viewRef","hostContainer","MulticastOperator","shareSubjectFactory","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","runInitializers","asyncInitPromises","initResult","all","catch","ApplicationInitStatus_Factory","APP_ID","APP_ID_RANDOM_PROVIDER","_appIdRandomProviderFactory","_randomChar","fromCharCode","floor","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","log","Console_Factory","getOriginalError","defaultErrorLogger","trace","events","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","getDebugContext","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler_compileModuleSync__POST_R3__","NgModuleFactoryR3","Compiler_compileModuleSync","Compiler_compileModuleAsync","Compiler_compileModuleAndAllComponentsSync__POST_R3__","Compiler_compileModuleAndAllComponentsSync","Compiler_compileModuleAndAllComponentsAsync","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","Compiler_Factory","wtfEnabled","detectWTF","wtf","noopScope","arg0","arg1","wtfCreateScope","createScope","signature","wtfLeave","leave","scope","returnValue","leaveScope","scheduleMicroTask","Zone","NgZone","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","zone","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","noop$2","_platform","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","pop","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","filter","updateCb","macroTasks","creationLocation","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","Testability_Factory","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","delete","unregisterAllApplications","getTestability","elem","getAllTestabilities","from","getAllRootElements","findTestabilityInTree","findInAncestors","TestabilityRegistry_Factory","_NoopGetTestability","registry","ALLOW_MULTIPLE_PLATFORMS","NgProbeToken","createPlatformFactory","parentPlatformFactory","desc","marker","extraProviders","platform","getPlatform","injectedProviders","createPlatform","PlatformRef","inits","init","assertPlatform","requiredToken","_injector","_modules","_destroyListeners","_destroyed","bootstrapModuleFactory","moduleFactory","ngZone","getNgZone","ngZoneOption","ngZoneInjector","moduleRef","exceptionHandler","_callAndReportToErrorHandler","errorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","compileNgModuleFactory__POST_R3__","R3NgModuleFactory","compileNgModuleFactory","ApplicationRef","f","ngDoBootstrap","module","PlatformRef_Factory","dst","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","tick","isCurrentlyStable","stableSub","unstableSub","merge$1","observables","last","isScheduler","mergeAll","mergeMap","resultSelector","isInteropObservable","fromObservable","fromPromise","isIterable","fromIterable","mapOperation","ii","share","multicast","subjectOrSubjectFactory","multicastOperatorFunction","componentOrFactory","componentFactory","compRef","_unloadComponent","_loadComponent","_tickScope","attachView","ApplicationRef_Factory","list","ViewContainerRef","SWITCH_VIEW_CONTAINER_REF_FACTORY","injectViewContainerRef","ViewContainerRefToken","createContainerRef","ViewContainerRef_","_lContainer","_hostTNode","_hostView","_viewRefs","getParentInjectorTNode","startTNode","parentTNode_1","templateRef","adjustedIdx","_adjustIndex","createComponent","ngModuleRef","contextInjector","insert","move","newIndex","containerHost","commentNode","createComment","hostNative","nativeNextSibling","createLContainer","isForViewContainerRef","ChangeDetectorRef","SWITCH_CHANGE_DETECTOR_REF_FACTORY","injectChangeDetectorRef","createViewRef","componentIndex","hostComponentView","DebugNode__POST_R3__","nativeNode","DebugElement__POST_R3__","getInjector","getComponent","getComponentAtNodeIndex","getContext","getListeners","listeners","firstParam","secondParam","name_1","listenerElement","useCaptureOrIndx","sort","getLocalRefs","discoverLocalRefs","localIndex","getInjectionTokens","providerTokens","eAttrs","attr","classes","lContext","lNode","className","eClasses","classList","styleName","eStyles","style","getPropertyValue","childNodes","children","getDebugNode__POST_R3__","query","predicate","queryAll","matches","_queryNodeChildrenR3","queryAllNodes","triggerEventHandler","eventName","eventObj","elementsOnly","getDebugNode","DefaultIterableDifferFactory","supports","isListLikeIterable","trackByFn","DefaultIterableDiffer","trackByIdentity","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","_trackByFn","forEachItem","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","check","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","iterateListLike$1","iterateListLike","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","IterableChangeRecord_","reinsertRecord","_addToMoves","_addToRemovals","_unlink","prevRecord","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","atOrAfterIndex","duplicates","recordList","size","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_mapHead","_appendAfter","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","_forEach","_maybeAddToChanges","_getOrCreateRecordForKey","_insertBeforeOrAppend","previousValue","currentValue","before","record_1","KeyValueChangeRecord_","_addToAdditions","newValue","_addToChanges","k","IterableDiffers","factories","copied","extend","find","getTypeNameForDebugging","KeyValueDiffers","kv","keyValDiff","defaultIterableDiffers","defaultKeyValueDiffers","platformCore","LOCALE_ID","APPLICATION_MODULE_PROVIDERS","zoneSchedulerFactory","queue","_keyValueDiffersFactory","_localeFactory","locale","ApplicationModule","PlatformLocation","u","localeEn","plural","abs","LOCALE_DATA","CURRENCIES_EN","ADP","AFN","ALL","AMD","AOA","ARS","AUD","BAM","BBD","BDT","BHD","BIF","BMD","BND","BOB","BRL","BSD","BWP","BYN","BYR","BZD","CAD","CHF","CLF","CLP","CNY","COP","CRC","CUC","CUP","CZK","DJF","DKK","DOP","EGP","ESP","EUR","FJD","FKP","GBP","GEL","GIP","GNF","GTQ","GYD","HKD","HNL","HRK","HUF","IDR","ILS","INR","IQD","IRR","ISK","ITL","JMD","JOD","JPY","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LTL","LUF","LVL","LYD","MGA","MGF","MMK","MNT","MRO","MUR","MXN","MYR","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PHP","PKR","PLN","PYG","RON","RSD","RUB","RUR","RWF","SBD","SEK","SGD","SHP","SLL","SOS","SRD","SSP","STD","STN","SYP","THB","TMM","TND","TOP","TRL","TRY","TTD","TWD","TZS","UAH","UGX","USD","UYI","UYU","UZS","VEF","VND","VUV","XAF","XCD","XOF","XPF","YER","ZAR","ZMK","ZMW","ZWD","NumberFormatStyle","Plural","FormStyle","TranslationWidth","FormatWidth","NumberSymbol","getLocaleDateFormat","width","getLastDefinedValue","findLocaleData","getLocaleTimeFormat","getLocaleDateTimeFormat","getLocaleNumberSymbol","symbol","CurrencyDecimal","Decimal","CurrencyGroup","Group","getLocaleNumberFormat","checkFullData","extractTime","time","hours","minutes","normalizedLocale","parentLocale","ISO8601_DATE_REGEX","NAMED_FORMATS","DATE_FORMATS_SPLIT","ZoneWidth","DateType","TranslationType","formatDateTime","str","opt_values","padNumber","num","digits","minusSign","negWrap","neg","strNum","dateGetter","date","part","getDatePart","FullYear","getFullYear","Month","getMonth","Date","getDate","Hours","getHours","Minutes","getMinutes","Seconds","getSeconds","FractionalSeconds","getMilliseconds","Day","getDay","formatFractionalSeconds","milliseconds","localeMinus","MinusSign","dateStrGetter","form","extended","Format","getDateTranslation","Months","getLocaleMonthNames","formStyle","Days","getLocaleDayNames","DayPeriods","currentHours_1","currentMinutes_1","result_1","rules","getLocaleExtraDayPeriodRules","rule","dayPeriods_1","getLocaleExtraDayPeriods","hoursTo","getLocaleDayPeriods","Eras","getLocaleEraNames","timeZoneGetter","ceil","Short","ShortGMT","Long","Extended","JANUARY","THURSDAY","weekGetter","monthBased","nbDaysBefore1stDayOfMonth","today","firstThurs","getFirstThursdayOfYear","year","firstDayOfYear","getThursdayThisWeek","datetime","getTime","round","DATE_FORMATS","timezoneToOffset","timezone","fallback","requestedTimezoneOffset","parse","isDate$1","valueOf","NUMBER_FORMAT_REGEXP","MAX_DIGITS","DECIMAL_SEP","ZERO_CHAR","PATTERN_SEP","GROUP_SEP","DIGIT_CHAR","formatNumberToLocaleString","pattern","groupSymbol","decimalSymbol","digitsInfo","isPercent","formattedText","isZero","isFinite","parsedNumber","parseNumber","integerLen","zeros","numStr","exponent","search","toPercent","fractionLen","minInt","minFraction","minFrac","maxFraction","maxFrac","minIntPart","minFractionPart","maxFractionPart","parseIntAutoRadix","roundNumber","fractionSize","min","max","roundAt","digit","dropTrailingZeros","minLen","carry","reduceRight","decimals","every","groups","lgSize","gSize","Exponential","Infinity","negPre","negSuf","posPre","posSuf","parseNumberFormat","format","patternParts","positive","negative","positiveParts","lastIndexOf","integer","fraction","ch","trunkLen","pos","parseInt","NgLocalization","DEPRECATED_PLURAL_FN","getPluralCategory$1","cases","ngLocalization","getPluralCategory","NgLocaleLocalization","deprecatedPluralFn","getLocalePluralCase","Zero","One","Two","Few","Many","NgLocaleLocalization_Factory","NgClass","_iterableDiffers","_keyValueDiffers","_ngEl","_initialClasses","_removeClasses","_applyClasses","_rawClass","_iterableDiffer","_keyValueDiffer","iterableChanges","_applyIterableChanges","keyValueChanges","_applyKeyValueChanges","_toggleClass","rawClassVal","klass","enabled","addClass","removeClass","NgClass_Factory","ngClass","NgComponentOutlet","_componentRef","_moduleRef","ngComponentOutlet","elInjector","ngComponentOutletInjector","ngComponentOutletNgModuleFactory","parentModule","componentFactoryResolver","ngComponentOutletContent","NgComponentOutlet_Factory","NgForOfContext","$implicit","ngForOf","even","NgForOf","_viewContainer","_template","_differs","_ngForOfDirty","_differ","_ngForOf","ngForTrackBy","getTypeName","_applyChanges","insertTuples","adjustedPreviousIndex","tuple","RecordViewTuple","_perViewChange","ilen","ngTemplateContextGuard","dir","ctx","NgForOf_Factory","ngForTemplate","NgIf","NgIfContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","condition","ngIf","_updateView","assertTemplate","ngTemplateGuard_ngIf","expr","NgIf_Factory","ngIfThen","ngIfElse","property","SwitchView","_templateRef","_created","enforceState","created","NgSwitch","_defaultUsed","_caseCount","_lastCaseCheckIndex","_lastCasesMatched","_ngSwitch","_updateDefaultCases","_addCase","_addDefault","_defaultViews","_matchCase","matched","useDefault","NgSwitch_Factory","ngSwitch","NgSwitchCase","viewContainer","ngSwitchCase","NgSwitchCase_Factory","NgSwitchDefault","NgSwitchDefault_Factory","NgPlural","_localization","_caseViews","_switchValue","addCase","switchView","_clearViews","_activateView","_activeView","NgPlural_Factory","ngPlural","NgPluralCase","isANumber","NgPluralCase_Factory","injectAttribute","attrNameToInject","injectAttributeImpl","NgStyle","_ngStyle","_setStyle","nameAndUnit","unit","setStyle","removeStyle","NgStyle_Factory","ngStyle","NgTemplateOutlet","_viewRef","ngTemplateOutletContext","ngTemplateOutlet","_shouldRecreateView","_updateExistingContext","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","NgTemplateOutlet_Factory","COMMON_DIRECTIVES","ObservableStrategy","createSubscription","async","updateLatestValue","dispose","_promiseStrategy","PromiseStrategy","_observableStrategy","AsyncPipe","_ref","_latestValue","_latestReturnedValue","_subscription","_obj","_strategy","_dispose","transform","_selectStrategy","_updateLatestValue","ɵisPromise","isObservable","ɵisObservable","invalidPipeArgumentError","AsyncPipe_Factory","LowerCasePipe","LowerCasePipe_Factory","unicodeWordMatch","TitleCasePipe","txt","toUpperCase","TitleCasePipe_Factory","UpperCasePipe","UpperCasePipe_Factory","DatePipe","formatDate","toDate","isDate","parsedNb","parseFloat","test","val","isoStringToDate","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","h","ms","getNamedFormat","localeId","getLocaleId","formatValue","Medium","Full","shortTime","shortDate","mediumTime","mediumDate","longTime","longDate","fullTime","fullDate","exec","dateTimezoneOffset","getTimezoneOffset","convertTimezoneToLocal","reverse","reverseValue","addDateMinutes","setMinutes","dateFormatter","getDateFormatter","formatter","Abbreviated","Wide","Narrow","Standalone","DatePipe_Factory","_INTERPOLATION_REGEXP","I18nPluralPipe","pluralMap","I18nPluralPipe_Factory","I18nSelectPipe","mapping","I18nSelectPipe_Factory","JsonPipe","JsonPipe_Factory","KeyValuePipe","differs","keyValues","compareFn","defaultComparator","differ","differChanges","makeKeyValuePair","KeyValuePipe_Factory","keyValueA","keyValueB","aString","bString","DecimalPipe","_locale","isEmpty","formatNumber","strToNumber","DecimalPipe_Factory","PercentPipe","formatPercent","Percent","PercentSign","PercentPipe_Factory","CurrencyPipe","currencyCode","display","currency","getCurrencySymbol","code","getLocaleCurrencies","symbolNarrow","formatCurrency","Currency","getNumberOfCurrencyDigits","CurrencyPipe_Factory","isEmpty$1","SlicePipe","start","SlicePipe_Factory","COMMON_PIPES","CommonModule","DOCUMENT","PLATFORM_SERVER_ID","_DOM","getDOM","nodeContains","_attrToPropMap","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","","contains","urlParsingNode","BrowserDomAdapter","templateHtml","makeCurrent","setRootDomAdapter","adapter","hasProperty","setProperty","getProperty","methodName","logError","logGroup","group","logGroupEnd","groupEnd","nodeA","nodeB","querySelectorAll","on","evt","addEventListener","onAndCancel","dispatchEvent","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","isPrevented","defaultPrevented","getInnerHTML","getOuterHTML","parentElement","childNodesAsList","clearNodes","replaceChild","newChild","oldChild","ref","insertAllBefore","nodes","insertAfter","setInnerHTML","getText","textContent","setText","setValue","getChecked","checked","setChecked","createTemplate","doc","ns","createTextNode","createScriptTag","attrValue","createStyleElement","css","createShadowRoot","getShadowRoot","shadowRoot","getHost","host","clone","cloneNode","getElementsByClassName","getElementsByTagName","hasClass","styleValue","stylename","getStyle","hasStyle","attributeMap","attrib","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttributeNS","templateAwareRoot","createHtmlDocument","getBoundingClientRect","top","bottom","left","right","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","msMatchesSelector","webkitMatchesSelector","isTextNode","isCommentNode","COMMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","getEventKey","event","keyIdentifier","startsWith","getGlobalEventTarget","getHistory","history","getLocation","getBaseHref","href","getBaseElementHref","baseElement","relativePath","pathname","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","supportsCookies","getCookie","cookieStr","encodeURIComponent","cookie","eqIndex","_d","cookieValue","decodeURIComponent","parseCookieValue","setCookie","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","resolveAndSetHref","baseUrl","supportsDOMEvents","supportsNativeShadowDOM","getAnimationPrefix","getTransitionEnd","supportsAnimation","DomAdapter","resourceLoaderType","commonDOCUMENT","supportsState","pushState","BrowserPlatformLocation","_doc","_init","_history","getBaseHrefFromDOM","onPopState","onHashChange","newPath","hash","replaceState","forward","back","BrowserPlatformLocation_Factory","TRANSITION_ID","SERVER_TRANSITION_PROVIDERS","appInitializerFactory","transitionId","dom","BrowserGetTestability","setTestabilityGetter","getter","testabilities","didWork","decrement","didWork_","exportNgVar","COMPILED","CORE_TOKENS","core.ApplicationRef","core.NgZone","inspectNativeElement","core.getDebugNode","ELEMENT_PROBE_PROVIDERS","core.APP_INITIALIZER","_createNgProbe","coreTokens","_ngProbeTokensToMap","core.NgProbeToken","core.Optional","EVENT_MANAGER_PLUGINS","EventManager","plugins","_eventNameToPlugin","manager","_plugins","handler","_findPluginFor","addGlobalEventListener","getZone","plugin","plugin_1","EventManager_Factory","EventManagerPlugin","SharedStylesHost","_stylesSet","addStyles","additions","onStylesAdded","getAllStyles","SharedStylesHost_Factory","DomSharedStylesHost","_hostNodes","_styleNodes","_addStylesToHost","styleEl","addHost","hostNode","removeHost","styleNode","DomSharedStylesHost_Factory","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","COMPONENT_REGEX","HOST_ATTR","CONTENT_ATTR","flattenStyles","compId","decoratePreventDefault","eventHandler","DomRendererFactory2","eventManager","sharedStylesHost","rendererByCompId","DefaultDomRenderer2","EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDom","ShadowDomRenderer","DomRendererFactory2_Factory","namespace","createText","refChild","selectorOrNode","preserveContent","namespaceUri","DashCase","Important","removeProperty","checkNoSyntheticProp","listen","AT_CHARCODE","nameKind","blackListedMap","contentAttr","shimContentAttribute","componentShortId","hostAttr","shimHostAttribute","hostEl","attachShadow","nodeOrShadowRoot","__symbol__","ADD_EVENT_LISTENER","REMOVE_EVENT_LISTENER","symbolNames","stopSymbol","DomSanitizer","isBlackListedEvent","globalListener","symbolName","taskDatas","taskData","copiedTasks","DomEventsPlugin","platformId","isPlatformServer","patchEvent","Event","stopImmediatePropagation","globalListenerRegistered","root","callbackRegistered","underlyingRemove","found","DomEventsPlugin_Factory","EVENT_NAMES","pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown","pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout","press","pressup","rotate","rotatestart","rotatemove","rotateend","rotatecancel","swipe","swipeleft","swiperight","swipeup","swipedown","tap","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","overrides","buildHammer","mc","Hammer","enable","HammerGestureConfig_Factory","HammerGesturesPlugin","_config","loader","isCustomEvent","cancelRegistration_1","deregister_1","off","HammerGesturesPlugin_Factory","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","alt","altKey","control","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","domEventName","_normalizeKey","fullKey","modifierName","getEventFullKey","modifierGetter","keyName","KeyEventsPlugin_Factory","DomSanitizerImpl","sanitize","NONE","HTML","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","_sanitizeHtml","unsafeHtmlInput","unsafeHtml","mXSSAttempts","parsedHtml","safeHtml","STYLE","SafeStyleImpl","_sanitizeStyle","urlMatch","hasBalancedQuotes","outsideSingle","outsideDouble","c","SCRIPT","SafeScriptImpl","URL","SafeResourceUrlImpl","SafeUrlImpl","RESOURCE_URL","expectedType","SafeValueImpl","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","DomSanitizerImpl_Factory","BROWSER_SANITIZATION_PROVIDERS","platformBrowser","initDomAdapter","_document","BROWSER_MODULE_PROVIDERS","BrowserModule","withServerTransition","params","appId","HelloWorldComponent","HelloWorldComponent_Factory","HelloWorldComponent_Template","rf","textNative","HelloWorldModule","enableProdMode"],"mappings":"oCAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,iBAChBC,wBAA2BC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAAO,EAA0BR,EAAGC,GAEzB,SAAAQ,IAAgBC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAAD,EAAkBE,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAGhC,SAAAI,EAkEyBC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEJ,KAAKG,IAEjBI,KAAM,WAEF,OADIJ,GAAKP,GAAKO,EAAEJ,SAAQI,OAAI,IACnBK,MAAOL,GAAKA,EAAEP,KAAMa,MAAON,KAKhD,SAAAO,EAAuBP,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBQ,EAAYC,EAA3BhB,EAAIQ,EAAEJ,KAAKG,GAAOU,KACtB,IACI,WAAc,IAANhB,GAAgBA,KAAM,MAAQc,EAAIf,EAAEW,QAAQE,MAAMI,EAAGC,KAAKH,EAAEH,OAExE,MAAOO,GAASH,GAAMG,MAAOA,WAEzB,IACQJ,IAAMA,EAAEF,OAASL,EAAIR,EAAU,SAAIQ,EAAEJ,KAAKJ,WAExC,GAAIgB,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAAG,IACI,IAAK,IAAIH,KAASjB,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CiB,EAAKA,EAAGI,OAAOP,EAAOZ,UAAUF,KACpC,OAAOiB,ECpGJ,IACMK,EAAa,iBAwD1B,SAAAC,EACIC,EAAcC,EAAiCC,GACjD,IAAMC,EAbR,SAAAC,EAA0BH,GACxB,OAAO,SAAAI,QAAc,IAAAC,KAAAC,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAAD,EAAAC,GAAA7B,UAAA6B,GACnB,GAAIN,EAAO,CACT,IAAMO,EAASP,EAAKpB,WAAA,EAAAe,EAAIU,IACxB,IAAK,IAAMG,KAAYD,EACrBxC,KAAKyC,GAAYD,EAAOC,KAQbL,CAAiBH,GAClC,SAAAS,QAA+B,MAAAJ,KAAAC,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAAD,EAAAC,GAAA7B,UAAA6B,GAC7B,GAAIvC,gBAAgB0C,EAElB,OADAP,EAAStB,MAAMb,KAAMsC,GACdtC,KAET,IAAM2C,EAAkB,KAAOC,EAAMF,GAAsBG,KAAAhC,MAAA+B,EAAAhB,QAAA,GAAIU,KAG/D,OADMQ,EAAgBC,WAAaJ,EAC5BG,EAEP,SAAAA,EAAwBE,EAAUC,EAAgBC,GAShD,IANA,IAAMC,EAAaH,EAAInD,eAAeiC,GACjCkB,EAAYlB,GACbtC,OAAO4D,eAAeJ,EAAKlB,GAAaV,WAAYU,GAIjDqB,EAAWxC,QAAUuC,GAC1BC,EAAWzB,KAAK,MAIlB,OADCyB,EAAWD,GAASC,EAAWD,QAAcxB,KAAKiB,GAC5CK,GAQX,OALId,IACFQ,EAAsBxC,UAAYV,OAAOW,OAAO+B,EAAYhC,YAE9DwC,EAAsBxC,UAAUmD,eAAiBrB,EAC3CU,EAAuBY,cAAgBZ,EACtCA,ECxEF,IAAMa,EAA0BxB,EAAmB,SAAU,SAACyB,GAAe,OAAEA,MAAKA,KAoC9EC,EAA8B1B,EAAmB,YAuCjD2B,EAAsB3B,EAAmB,QAuCzC4B,EAA8B5B,EAAmB,YC7JlD6B,EAAZ,SAAYA,UAGVA,EAAAA,EAAA,QAAA,GAAA,UAMAA,EAAAA,EAAA,KAAA,GAAA,OAEAA,EAAAA,EAAA,KAAA,GAAA,OAEAA,EAAAA,EAAA,SAAA,GAAA,WAEAA,EAAAA,EAAA,SAAA,GAAA,WAfUA,EAAZ,KCNA,SAAAC,EAA0CC,GACxC,IAAK,IAAIC,KAAOD,EACd,GAAIA,EAAyBC,KAASF,EACpC,OAAOE,EAGX,MAAMC,MAAM,qDCmHd,SAAAC,EAAoCC,GAIlC,OACEC,WAAYD,EAAKC,YAAqB,KAAMC,QAASF,EAAKE,QAAShD,WAAOiD,GAwB9E,SAAAC,EAA+BC,GAE7B,OACEH,QAASG,EAAQH,QAASI,UAAWD,EAAQC,cAAiBC,QAASF,EAAQE,aASnF,SAAAC,EAAoCC,GAClC,OAAOA,GAAQA,EAAK9E,eAAe+E,GAAsBD,EAAaC,GAAqB,KAQ7F,SAAAC,EAAkCF,GAChC,OAAOA,GAAQA,EAAK9E,eAAeiF,GAAoBH,EAAaG,GAAmB,KAGlF,IAAMF,EAAoBf,GAAwBkB,gBAAiBlB,IAC7DiB,EAAkBjB,GAAwBmB,cAAenB,IChLtE,SAAAoB,EAA0BzB,GACxB,GAAqB,iBAAVA,EACT,OAAOA,EAGT,GAAIA,aAAiB7D,MACnB,MAAO,IAAM6D,EAAM0B,IAAID,GAAWE,KAAK,MAAQ,IAGjD,GAAa,MAAT3B,EACF,MAAO,GAAKA,EAGd,GAAIA,EAAM4B,eACR,MAAO,GAAG5B,EAAM4B,eAGlB,GAAI5B,EAAMxB,KACR,MAAO,GAAGwB,EAAMxB,KAGlB,IAAMqD,EAAM7B,EAAM8B,WAElB,GAAW,MAAPD,EACF,MAAO,GAAKA,EAGd,IAAME,EAAeF,EAAIG,QAAQ,MACjC,OAAyB,IAAlBD,EAAsBF,EAAMA,EAAII,UAAU,EAAGF,GCXtD,IAAMG,EAAkB7B,GAAwB6B,gBAAiB7B,IAcjE,SAAA8B,EAA2BC,GAGzB,OAFMA,EAAcF,gBAAkBC,EAChCC,EAAcN,SAAW,WAAa,OAAOL,EAAUjF,SACrC4F,EAgB1B,SAAAC,EAAqClB,GACnC,IAAMmB,EAAUnB,EAChB,MAAkB,mBAAPmB,GAAqBA,EAAGjG,eAAe6F,IAC9CI,EAAGJ,kBAAoBC,EAClBG,IAEAnB,EClDX,IC4BIoB,ED5BEC,EAA6B,oBAAXC,QAA0BA,OAC5CC,EAAyB,oBAATC,MAAqD,oBAAtBC,mBACjDD,gBAAgBC,mBAAqBD,KAKnCE,EAJ6B,oBAAXC,QAA0BA,QAICN,GAAYE,ECI3DK,OAA4ClC,EAEhD,SAAAmC,EAAmCC,GACjC,IAAMC,EAASH,EAEf,OADAA,EAAmBE,EACZC,EAkBT,SAAAC,EACIC,GAEF,IAAMC,EAAWd,EAEjB,OADAA,EAAwBa,EACjBC,EAoCT,SAAAC,EAA0BtD,EAAmCuD,GAC3D,YAD2D,IAAAA,IAAAA,EAAQnD,EAAYoD,UACvEjB,GA/BV,SAAAkB,EACIzD,EAAmCuD,GACrC,QADqC,IAAAA,IAAAA,EAAQnD,EAAYoD,cAChC3C,IAArBkC,EACF,MAAM,IAAIvC,MAAM,qDACX,OAAyB,OAArBuC,EACFW,EAAmB1D,OAAOa,EAAW0C,GAErCR,EAAiBY,IAAI3D,EAAOuD,EAAQnD,EAAYH,SAAW,UAAOY,EAAW0C,KAwBjCvD,EAAOuD,GAU9D,SAAAG,EACI1D,EAAmC4D,EAA8BL,GACnE,IAAMM,EAAuC3C,EAAiBlB,GAC9D,GAAI6D,GAA6C,QAA5BA,EAAclD,WACjC,YAA+BE,IAAxBgD,EAAcjG,MAAsBiG,EAAcjG,MAAQiG,EAAcjD,UACpCiD,EAAcjG,MAE3D,GAAI2F,EAAQnD,EAAYH,SAAU,OAAO,KACzC,QAAsBY,IAAlB+C,EAA6B,OAAOA,EACxC,MAAM,IAAIpD,MAAM,wBAAwBiB,EAAUzB,GAAM,KAG1D,SAAA8D,EAA2BC,GAEzB,IADA,IAAMjF,KACG9B,EAAI,EAAGA,EAAI+G,EAAM5G,OAAQH,IAAK,CACrC,IAAMgH,EAAMD,EAAM/G,GAClB,GAAIb,MAAM8H,QAAQD,GAAM,CACtB,GAAmB,IAAfA,EAAI7G,OACN,MAAM,IAAIqD,MAAM,wCAKlB,IAHA,IAAIW,OAA4BN,EAC5B0C,EAAqBnD,EAAYoD,QAE5BU,EAAI,EAAGA,EAAIF,EAAI7G,OAAQ+G,IAAK,CACnC,IAAMC,EAAOH,EAAIE,GACbC,aAAgBlE,GAAoC,aAAxBkE,EAAKtE,eACnC0D,GAASnD,EAAYH,SACZkE,aAAgBhE,GAAoC,aAAxBgE,EAAKtE,eAC1C0D,GAASnD,EAAYD,SACZgE,aAAgBjE,GAAgC,SAAxBiE,EAAKtE,eACtC0D,GAASnD,EAAYF,KAErBiB,EADSgD,aAAgBpE,EAClBoE,EAAKnE,MAELmE,EAIXrF,EAAKZ,KAAKoF,EAAOnC,EAAQoC,SAEzBzE,EAAKZ,KAAKoF,EAAOU,IAGrB,OAAOlF,EC7HWsF,SCiEgCC,OCnEAA,OADpD,ICqCAC,EAAA,WAME,SAAAA,EAAsBC,EAAexD,GAAfvE,KAAA+H,MAAAA,EAJb/H,KAAAqD,eAAiB,iBAQxBrD,KAAK+E,qBAAkBV,EACD,iBAAXE,EAIRvE,KAAagI,kBAAoBzD,OACbF,IAAZE,IACTvE,KAAK+E,gBAAkBd,GACrBE,WAAYI,EAAQJ,YAAc,OAClCC,QAASG,EAAQH,WAMzB,OADE0D,EAAA5H,UAAAoF,SAAA,WAAqB,MAAO,kBAAkBtF,KAAK+H,OACrDD,EAzBA,GC/BMG,EAAsB,IAAIzI,OACnB0I,EAAqBD,EAUrBE,EAAW,IAAIL,EACxB,YACC,GAGLM,EAAA,WAAA,SAAAA,KAWA,OAVEA,EAAAlI,UAAAiH,IAAA,SAAI3D,EAAY4D,GACd,QADc,IAAAA,IAAAA,EAAAa,GACVb,IAAkBa,EAKpB,MAAM,IAAIjE,MAAM,sCAAsCiB,EAAUzB,GAAM,KAExE,OAAO4D,GAEXgB,EAXA,GA6BAC,EAAA,WAAA,SAAAA,KAoDA,OArBSA,EAAAlI,OAAP,SACIoE,EACA+D,GACF,OAAI3I,MAAM8H,QAAQlD,GACT,IAAIgE,EAAehE,EAAS+D,GAE5B,IAAIC,EAAehE,EAAQC,UAAWD,EAAQ+D,OAAQ/D,EAAQvC,MAAQ,OApC1EqG,EAAAH,mBAAqBD,EACrBI,EAAAG,KAAiB,IAAIJ,EAwCrBC,EAAAtD,gBAAkBd,GACvBE,WAAY,MACZC,QAAS,WAAM,OAAA0C,EAAOqB,MAOjBE,EAAAL,mBAAqB,EAC9BK,EApDA,GAwDMI,EAAQ,SAAYrH,GACxB,OAAOA,GAEHsH,KACAC,EAAWF,EACXG,EAAoB,WACxB,OAAOjJ,MAAMO,UAAU2I,MAAMjI,KAAKF,YAEvBoI,EACTjF,GAAuCkF,QAASlB,OAAQmB,SAAUnF,IAShEoF,EAAgBZ,EAASG,KACzBU,EAAW,OACXC,EAAc,IAEpBZ,EAAA,WAME,SAAAA,EACI/D,EAA6B8D,EAAkCc,QAAlC,IAAAd,IAAAA,EAAAW,QAAkC,IAAAG,IAAAA,EAAA,MACjEpJ,KAAKsI,OAASA,EACdtI,KAAKoJ,OAASA,EACd,IAAMC,EAAUrJ,KAAKsJ,SAAW,IAAIC,IACpCF,EAAQG,IACJnB,GAAmB7E,MAAO6E,EAAUvC,GAAI2C,EAAOgB,KAAMf,EAAOtH,MAAOpB,KAAM0J,QAAQ,IACrFL,EAAQG,IACJrB,GAAmB3E,MAAO2E,EAAUrC,GAAI2C,EAAOgB,KAAMf,EAAOtH,MAAOpB,KAAM0J,QAAQ,IA6EzF,SAAAC,EAAqCN,EAA2BO,GAC9D,GAAIA,EAEF,IADAA,EAAW/D,EAAkB+D,cACLjK,MAEtB,IAAK,IAAIa,EAAI,EAAGA,EAAIoJ,EAASjJ,OAAQH,IACnCmJ,EAA4BN,EAASO,EAASpJ,QAE3C,CAAA,GAAwB,mBAAboJ,EAGhB,MAAMC,EAAY,+BAAgCD,GAC7C,IAAIA,GAAgC,iBAAbA,IAAyBA,EAASb,QA+B9D,MAAMc,EAAY,sBAAuBD,GA7BzC,IAAIpG,EAAQqC,EAAkB+D,EAASb,SACjCe,EA9CZ,SAAAC,EAAyBH,GACvB,IAAMH,EAiJR,SAAAO,EAAqBJ,GACnB,IAAIH,EAA2Bf,EACzBuB,EACDL,EAA0EH,KAC/E,GAAIQ,GAAgBA,EAAatJ,OAAQ,CACvC8I,KACA,IAAK,IAAIjJ,EAAI,EAAGA,EAAIyJ,EAAatJ,OAAQH,IAAK,CAC5C,IAAI+D,EAAO,EAEX,IADIf,EAAQqC,EAAkBoE,EAAazJ,eACtBb,MACnB,IAAK,IAAI+H,EAAI,EAAGwC,EAAc1G,EAAOkE,EAAIwC,EAAYvJ,OAAQ+G,IAAK,CAChE,IAAM3E,EAAamH,EAAYxC,GAC3B3E,aAAsBU,GAAYV,GAAcU,EAClDc,GAAiB,EACRxB,aAAsBY,GAAYZ,GAAcY,EACzDY,IAAoB,EACXxB,aAAsBW,GAAQX,GAAcW,EACrDa,IAAoB,EAEpBf,EADST,aAAsBQ,EACtBR,EAAsBS,MAEvBqC,EAAkB9C,GAIhC0G,EAAK/H,MAAM8B,MAAKA,EAAEe,QAAOA,UAEtB,GAAKqF,EAA8BO,YAAa,CACrD,IAAM3G,EACNiG,IAASjG,MADHA,EAAQqC,EAAmB+D,EAA8BO,aAC/C5F,QAAO,SAClB,KAAK0F,GAAkBnB,KAAac,GAEzC,MAAMC,EAAY,kBAAqBD,GAEzC,OAAOH,EAnLMO,CAAYJ,GACrB9D,EAAe2C,EACfrH,EAAasH,EACbgB,GAAkB,EAClBX,EAAUlD,EAAkB+D,EAASb,SACzC,GAAID,KAAac,EAEfxI,EAASwI,EAA2BZ,cAC/B,GAAKY,EAA6BQ,WACvCtE,EAAM8D,EAA6BQ,gBAC9B,GAAKR,EAA8BO,kBAEnC,GAAKP,EAAiCS,SAC3CX,GAAS,EACT5D,EAAKD,EAAmB+D,EAAiCS,cACpD,CAAA,GAAsB,mBAAXtB,EAIhB,MAAMc,EACF,sGACAD,GALJF,GAAS,EACT5D,EAAKiD,EAMP,OAAQU,KAAIA,EAAE3D,GAAEA,EAAE4D,OAAMA,EAAEtI,MAAKA,GAsBF2I,CAAgBH,GACzC,IAAuB,IAAnBA,EAASU,MAAgB,CAE3B,IAAIC,EAAkClB,EAAQlC,IAAI3D,GAClD,GAAI+G,GACF,GAAIA,EAAczE,KAAO8C,EACvB,MAAM4B,EAAsBhH,QAI9B6F,EAAQG,IAAIhG,EAAO+G,GACjB/G,MAAOoG,EAASb,QAChBU,QACAC,QAAQ,EACR5D,GAAI8C,EACJxH,MAAOsH,IAKX6B,EAAcd,KAAK/H,MAAM8B,MADzBA,EAAQoG,EACwBrF,QAAO,IAEzC,IAAMkG,EAASpB,EAAQlC,IAAI3D,GAC3B,GAAIiH,GAAUA,EAAO3E,IAAM8C,EACzB,MAAM4B,EAAsBhH,GAE9B6F,EAAQG,IAAIhG,EAAOsG,IArHrBH,CAA4BN,EAAS7E,GA0BzC,OArBE+D,EAAArI,UAAAiH,IAAA,SAAI3D,EAAY4D,EAAqBL,QAAA,IAAAA,IAAAA,EAAqBnD,EAAYoD,SACpE,IAAMyD,EAASzK,KAAKsJ,SAASnC,IAAI3D,GACjC,IACE,OAoHN,SAAAkH,EACIlH,EAAYiH,EAA4BpB,EAA2Bf,EACnElB,EAAoBL,GACtB,IACE,OAgBJ,SAAA4D,EACInH,EAAYiH,EAA4BpB,EAA2Bf,EACnElB,EAAoBL,SAClB3F,EACJ,IAAIqJ,GAAY1D,EAAQnD,EAAYD,SAqCvBoD,EAAQnD,EAAYF,OAC/BtC,EAAQkH,EAAOnB,IAAI3D,EAAO4D,EAAexD,EAAYoD,cAtCR,CAI7C,IADA5F,EAAQqJ,EAAOrJ,QACFuH,EACX,MAAM3E,MAAMmF,EAAc,uBACrB,GAAI/H,IAAUsH,EAAO,CAC1B+B,EAAOrJ,MAAQuH,EACf,IACIe,EAASe,EAAOf,OAChB5D,EAAK2E,EAAO3E,GACZ8E,EAAaH,EAAOhB,KACpBA,EAAOf,EACX,GAAIkC,EAAWjK,OAAQ,CACrB8I,KACA,IAAK,IAAIjJ,EAAI,EAAGA,EAAIoK,EAAWjK,OAAQH,IAAK,CAC1C,IAAMqK,EAA8BD,EAAWpK,GACzC+D,EAAUsG,EAAUtG,QACpBuG,EACK,EAAPvG,EAAkC8E,EAAQlC,IAAI0D,EAAUrH,YAASa,EACrEoF,EAAK/H,KAAKgJ,EAENG,EAAUrH,MAGVsH,EAEAzB,EAGCyB,GAAwB,EAAPvG,EAAqD+D,EAAhBW,EAChD,EAAP1E,EAAiC,KAAO8D,EAASH,mBACjDtE,EAAYoD,WAGpByD,EAAOrJ,MAAQA,EAAQsI,EAAM,KAAO9G,EAACkD,GAAUjD,KAAAhC,MAAA+B,EAAAhB,QAAA,GAAI6H,KAAQ3D,EAAGjF,WA3BpDwD,EA2B+DoF,IAK7E,OAAOrI,EA5DEuJ,CAAanH,EAAOiH,EAAQpB,EAASf,EAAQlB,EAAeL,GACnE,MAAOvF,GAWP,MATMA,aAAawC,QACjBxC,EAAI,IAAIwC,MAAMxC,KAEIA,EAAoB,gBAAIA,EAAoB,qBAC3DuJ,QAAQvH,GACTiH,GAAUA,EAAOrJ,OAASuH,IAE5B8B,EAAOrJ,MAAQsH,GAEXlH,GApIGkJ,CAAgBlH,EAAOiH,EAAQzK,KAAKsJ,SAAUtJ,KAAKsI,OAAQlB,EAAeL,GACjF,MAAOvF,GACP,IAAMwJ,EAAmBxJ,EAAoB,gBAO7C,MANIgC,EAAY,UACdwH,EAAUD,QAAQvH,EAAY,UAEhChC,EAAEyJ,QAAUC,EAAY,KAAO1J,EAAEyJ,QAASD,EAAWhL,KAAKoJ,QAC1D5H,EAAe,YAAIwJ,EACnBxJ,EAAoB,gBAAI,KAClBA,IAIV+G,EAAArI,UAAAoF,SAAA,WACE,IAAM6F,KAEN,OAFuCnL,KAAKsJ,SACpC8B,QAAQ,SAACC,EAAG7H,GAAU,OAAA2H,EAAOzJ,KAAKuD,EAAUzB,MAC7C,kBAAkB2H,EAAOhG,KAAK,MAAK,KAE9CoD,EAzCA,GAuFA,SAAAiC,EAA+BhH,GAC7B,OAAOqG,EAAY,mDAAoDrG,GA2JzE,SAAA0H,EAAqBI,EAAcC,EAAUnC,QAAA,IAAAA,IAAAA,EAAA,MAC3CkC,EAAOA,GAA2B,OAAnBA,EAAKE,OAAO,IAAeF,EAAKE,OAAO,IAAMrC,EAAcmC,EAAKG,OAAO,GAAKH,EAC3F,IAAII,EAAUzG,EAAUsG,GACxB,GAAIA,aAAe5L,MACjB+L,EAAUH,EAAIrG,IAAID,GAAWE,KAAK,aAC7B,GAAmB,iBAARoG,EAAkB,CAClC,IAAII,KACJ,IAAK,IAAI5H,KAAOwH,EACd,GAAIA,EAAI1L,eAAekE,GAAM,CAC3B,IAAI3C,EAAQmK,EAAIxH,GAChB4H,EAAMjK,KACFqC,EAAM,KAAwB,iBAAV3C,EAAqBwK,KAAK3G,UAAU7D,GAAS6D,EAAU7D,KAGnFsK,EAAU,IAAIC,EAAMxG,KAAK,MAAK,IAEhC,MAAO,uBAAsBiE,EAAS,IAAMA,EAAS,IAAM,IAAE,IAAIsC,EAAO,MAAMJ,EAAKO,QAAQ3C,EAAU,QAGvG,SAAAW,EAAqByB,EAAcC,GACjC,OAAO,IAAIvH,MAAMkH,EAAYI,EAAMC,IC9Y9B,IAAMO,EAAsB,iBACtBC,GAAuB,kBCMvBC,GAAW,IAAIlE,EACxB,4ECeEmE,MASAtD,MAEAuD,MAKFjD,QAAoC5E,EAExC,SAAA8H,KAIE,YAHsB9H,IAAlB4E,KACFA,GAAgB,IAAIb,GAEfa,GAyBT,IAAAmD,GAAA,WA2BE,SAAAA,EACIC,EAAwBC,EACfhE,GAFb,IAAAiE,EAAAvM,KAEaA,KAAAsI,OAAAA,EAzBLtI,KAAAqJ,QAAU,IAAIE,IAKdvJ,KAAAwM,iBAAmB,IAAIC,IAKvBzM,KAAA0M,UAAY,IAAID,IAWhBzM,KAAA2M,WAAY,EAOlB,IAAMC,KACNC,IAAaR,GAAM,SAAAS,GAAe,OAAAP,EAAKQ,oBAAoBD,KAAiBF,KAE5EN,GAAuBO,GACIP,EAAqB,SAAA1C,GAAY,OAAA2C,EAAKS,gBACbpD,EAAUyC,EAAKC,KAInEtM,KAAKqJ,QAAQG,IAAIrB,EAAU8E,QAAW5I,EAAWrE,OAIjDA,KAAKkN,eAAiBlN,KAAKqJ,QAAQ8D,IAAInB,IAGvChM,KAAKwM,iBAAiBpB,QAAQ,SAAAgC,GAAW,OAAAb,EAAKpF,IAAIiG,KA4NtD,OAnNEhB,EAAAlM,UAAAmN,QAAA,WACErN,KAAKsN,qBAGLtN,KAAK2M,WAAY,EACjB,IAEE3M,KAAK0M,UAAUtB,QAAQ,SAAAmC,GAAW,OAAAA,EAAQC,wBAG1CxN,KAAKqJ,QAAQoE,QACbzN,KAAK0M,UAAUe,QACfzN,KAAKwM,iBAAiBiB,UAI1BrB,EAAAlM,UAAAiH,IAAA,SACI3D,EAAkC4D,EAClCL,QADkC,IAAAK,IAAAA,EAAAc,QAClC,IAAAnB,IAAAA,EAAQnD,EAAYoD,SACtBhH,KAAKsN,qBAEL,IAAMI,EAAmBlH,EAAmBxG,MAC5C,IAEE,KAAM+G,EAAQnD,EAAYD,UAAW,CAEnC,IAAI8G,EAA8BzK,KAAKqJ,QAAQlC,IAAI3D,GACnD,QAAea,IAAXoG,EAAsB,CAGxB,IAAM4B,EAuShB,SAAAsB,EAA+BvM,GAC7B,MAAyB,mBAAVA,GACO,iBAAVA,GAAsBA,aAAiB0G,EAzS/B6F,CAAsBnK,IAAUkB,EAAiBlB,GACzD6I,GAAOrM,KAAK4N,qBAAqBvB,KAGnC5B,EAASwC,GAAWY,GAAkCrK,GAAQyI,IAC9DjM,KAAKqJ,QAAQG,IAAIhG,EAAOiH,IAI5B,QAAepG,IAAXoG,EACF,OAAOzK,KAAK8N,QAAQtK,EAAOiH,GAO/B,OADuB1D,EAAQnD,EAAYF,KAAsByI,KAAdnM,KAAKsI,QACpCnB,IAAI3D,EAAO4D,WAG/BZ,EAAmBkH,KAIftB,EAAAlM,UAAAoN,mBAAR,WACE,GAAItN,KAAK2M,UACP,MAAM,IAAI3I,MAAM,yCAQZoI,EAAAlM,UAAA6M,oBAAR,SACIgB,EACAC,EAA8BpB,GAFlC,IAAAL,EAAAvM,KAIE,GADA+N,EAAkBlI,EAAkBkI,GACpC,CAOA,IAAI1B,EAAMxH,EAAekJ,GAGnBE,EACM,MAAP5B,GAAiB0B,EAAmDE,eAAY5J,EAK/E+I,OACY/I,IAAb4J,EAA2BF,EAAwCE,EAUlEC,GAA+C,IAAjCtB,EAAWpH,QAAQ4H,GAIjC5I,OACYH,IAAb4J,GAA4BF,EAAmDvJ,WAChF0H,GASJ,QALiB7H,IAAb4J,IACF5B,EAAMxH,EAAeoJ,IAIZ,MAAP5B,EAAJ,CAWA,GANArM,KAAKwM,iBAAiB2B,IAAIf,GAC1BpN,KAAKqJ,QAAQG,IAAI4D,EAASH,GAAWZ,EAAIjI,QAAS6H,KAK/B,MAAfI,EAAI5H,UAAoByJ,EAAa,CAKvCtB,EAAWlL,KAAK0L,GAEhB,IACEP,GACIR,EAAI5H,QAAS,SAAA2J,GAAY,OAAA7B,EAAKQ,oBAAoBqB,EAAUJ,EAASpB,eAQ7E,IAAMyB,EAAehC,EAAI7H,UACzB,GAAoB,MAAhB6J,IAAyBH,EAAa,CACxC,IAAMI,EAAeP,EACrBlB,GACIwB,EAAc,SAAAzE,GAAY,OAAA2C,EAAKS,gBAAgBpD,EAAU0E,EAAcD,KAI7E,IAAME,EAAgBR,EAAmDE,SACzEpB,GAAYrI,EAAW,SAAAoF,GAAY,OAAA2C,EAAKS,gBAAgBpD,EAAU2E,EAAc/J,QAM1E4H,EAAAlM,UAAA8M,gBAAR,SACIpD,EAA0B2E,EAAiC/J,GAI7D,IAAIhB,EACAgL,GAFJ5E,EAAW/D,EAAkB+D,IAEEA,EAAW/D,EAAkB+D,GAAYA,EAASb,SAG3E0B,EAyEV,SAAAgE,EACI7E,EAA0B2E,EAAiC/J,GAC7D,IAAIJ,EAaN,SAAAsK,EACI9E,EAA0B2E,EAAkC/J,GAC9D,IAAIJ,OAAiCC,EACrC,GAAImK,GAAe5E,GACjB,OAAOiE,GAAkChI,EAAkB+D,IAE3D,GAAI+E,GAAgB/E,GAClBxF,EAAU,WAAM,OAAAyB,EAAkB+D,EAASZ,gBACtC,GA6CX,SAAA4F,EAA4BxN,GAC1B,SAAUA,IAAUA,EAA2B+I,aA9ClCyE,CAAmBhF,GAC5BxF,EAAU,WAAM,OAAA0C,EAAOjB,EAAkB+D,EAASO,oBAC7C,GA+CX,SAAA0E,EAA2BzN,GACzB,SAAUA,IAAUA,EAA0BgJ,YAhDjCyE,CAAkBjF,GAC3BxF,EAAU,WAAM,OAAAwF,EAASQ,WAAUvJ,MAAnB+I,EAAQhI,EAAe0F,EAAWsC,EAASH,iBACtD,CACL,IAAMqF,EAAWjJ,EACb+D,IACEA,EAAiDS,UAAYT,EAASb,UAC5E,IAAK+F,EAAU,CACb,IAAIC,EAAiB,GAMrB,MALIR,GAAgB/J,IAElBuK,EACI,6DAFmBvK,EAAUU,IAAI,SAAAmG,GAAK,OAAAA,GAAKzB,EAAW,IAAMA,EAAW,IAAM,QAEDzE,KAAK,MAAK,KAEtF,IAAInB,MACN,sCAAsCiB,EAAUsJ,GAAa,IAAMQ,GAEzE,IAuCN,SAAAC,EAAiB5N,GAEf,QAAUA,EAAcqI,KAzChBuF,CAAQpF,GAGV,OAAOiE,GAAkCiB,GAFzC1K,EAAU,WAAM,OAAA,IAAI,EAASvB,KAAAhC,MAAA,EAAAe,QAAA,GAAK0F,EAAWsC,EAASH,UAM5D,OAAOrF,EA9C8BsK,CAAkB9E,EAAU2E,EAAc/J,GAC/E,OAAImK,GAAgB/E,GACXqD,QAAW5I,EAAWuF,EAASZ,UAE/BiE,GAAW7I,EAAS6H,IA/EZwC,CAAiB7E,EAAU2E,EAAc/J,GAExD,GAAKgK,GAAe5E,KAAgC,IAAnBA,EAASU,MAgBnC,CACL,IAAM2E,EAAWjP,KAAKqJ,QAAQlC,IAAI3D,GAClC,GAAIyL,QAA+B5K,IAAnB4K,EAAS3E,MACvB,MAAM,IAAItG,MAAM,4BAA4BiB,EAAUzB,QAnBA,CAGxD,IAAI0L,EAAclP,KAAKqJ,QAAQlC,IAAI3D,GACnC,GAAI0L,GAEF,QAA0B7K,IAAtB6K,EAAY5E,MACd,MAAM,IAAItG,MAAM,4BAA4BR,EAAK,UAGnD0L,EAAcjC,QAAW5I,EAAW4H,IAAS,IACjC7H,QAAU,WAAM,OAAAkD,EAAW4H,EAAc5E,QACrDtK,KAAKqJ,QAAQG,IAAIhG,EAAO0L,GAE1B1L,EAAQoG,EACRsF,EAAY5E,MAAQ5I,KAAKkI,GAO3B5J,KAAKqJ,QAAQG,IAAIhG,EAAOiH,IAGlB2B,EAAAlM,UAAA4N,QAAR,SAAmBtK,EAAkCiH,GACnD,GAAIA,EAAOrJ,QAAUuH,GACnB,MAAM,IAAI3E,MAAM,yCAAyCiB,EAAUzB,IAQrE,OAPWiH,EAAOrJ,QAAU6K,KAC1BxB,EAAOrJ,MAAQuH,GACf8B,EAAOrJ,MAAQqJ,EAAOrG,WAEI,iBAAjBqG,EAAOrJ,OAAsBqJ,EAAOrJ,OA4HnD,SAAA+N,EAAsB/N,GACpB,MAAwB,iBAAVA,GAA+B,MAATA,GAAkBA,EAAoBoM,aAC3B,mBAApCpM,EAAoBoM,YA9H2B2B,CAAa1E,EAAOrJ,QAC1EpB,KAAK0M,UAAUyB,IAAI1D,EAAOrJ,OAErBqJ,EAAOrJ,OAGRgL,EAAAlM,UAAA0N,qBAAR,SAA6BvB,GAC3B,QAAKA,EAAIlI,aAE4B,iBAAnBkI,EAAIlI,WACM,QAAnBkI,EAAIlI,YAA4C,SAAnBkI,EAAIlI,YAAyBnE,KAAKkN,eAE/DlN,KAAKwM,iBAAiBW,IAAId,EAAIlI,cAG3CiI,EA5QA,GA8QA,SAAAyB,GAA2CrK,GACzC,IAAM6D,EAAgB3C,EAAiBlB,GACvC,GAAsB,OAAlB6D,EAAwB,CAC1B,IAAMyF,EAAcjI,EAAerB,GACnC,GAAoB,OAAhBsJ,EACF,OAAOA,EAAY1I,QACd,GAAIZ,aAAiBsE,EAC1B,MAAM,IAAI9D,MAAM,SAASiB,EAAUzB,GAAM,8CACpC,GAAIA,aAAiBoE,SAAU,CACpC,IAAMwH,EAAc5L,EAAM7C,OAC1B,GAAIyO,EAAc,EAAG,CACnB,IAAM9M,EAAiB,IAAI3C,MAAMyP,GAAaC,KAAK,KACnD,MAAM,IAAIrL,MACN,oCAAoCiB,EAAUzB,GAAM,MAAMlB,EAAK6C,KAAK,MAAK,MAE/E,OAAO,WAAM,OAAA,IAAK3B,GAEpB,MAAM,IAAIQ,MAAM,eAElB,OAAOqD,EAAcjD,QAsDvB,SAAA6I,GACI7I,EAAgChD,EAAekJ,GACjD,YADiD,IAAAA,IAAAA,GAAA,IAE/ClG,QAASA,EACThD,MAAOA,EACPkJ,MAAOA,UAAajG,GAIxB,SAAAwI,GAAwByC,EAAsBxJ,GAC5CwJ,EAAMlE,QAAQ,SAAAhK,GAAS,OAAAzB,MAAM8H,QAAQrG,GAASyL,GAAYzL,EAAO0E,GAAMA,EAAG1E,KAG5E,SAAAuN,GAAyBvN,GACvB,OAAOA,GAAyB,iBAATA,GAAqB0H,KAAa1H,EAW3D,SAAAoN,GAA+BpN,GAC7B,MAAwB,mBAAVA,ECjZT,ICmFPmO,GCnHYC,GAAZ,SAAYA,UAMVA,EAAAA,EAAA,OAAA,GAAA,SAMAA,EAAAA,EAAA,QAAA,GAAA,UAZUA,EAAZ,KCLaC,GAAmB5L,GAAwB6L,eAAgB7L,IAC3D8L,GAAmB9L,GAAwB+L,eAAgB/L,IAC3DgM,GAAchM,GAAwBiM,UAAWjM,IACjDkM,GAAgBlM,GAAwBmM,YAAanM,IASrDoM,GAAgBpM,GAAwBmE,kBAAmBnE,ICF5DqM,GAAZ,SAAYA,UASVA,EAAAA,EAAA,SAAA,GAAA,WASAA,EAAAA,EAAA,OAAA,GAAA,SAIAA,EAAAA,EAAA,KAAA,GAAA,OASAA,EAAAA,EAAA,UAAA,GAAA,YA/BUA,EAAZ,KCJaC,MACAjE,MCEAkE,GAAe,EACfC,GAAQ,EAGRC,GAAS,EAQTC,GAAoB,EChBpBC,GAAwB,gBNAxBC,GAAQ,EACRC,GAAkB,EAClBC,GAA6B,EAgB7BC,IAAgD,EAsNvDC,IArHNtB,GAmFE,SAAAA,GAIWnL,EAmBP0M,EAIOC,EACPC,GAxBOhR,KAAAoE,QAAAA,EAuBApE,KAAA+Q,WAAAA,EApGX/Q,KAAAiR,WAAY,EAsGVjR,KAAKkR,oBAAsBJ,EAC3B9Q,KAAKmR,WAAaH,IAIuB9Q,UO1NhCkR,GAAQ,EACRC,GAAQ,EACRC,GAAS,EACTC,GAAO,EACPC,GAAU,EACVC,GAAO,EACPC,GAAY,EACZC,GAAgB,EAChBC,GAAU,EACVC,GAAU,EACV1J,GAAW,GACX2J,GAAmB,GACnBC,GAAW,GACXC,GAAY,GACZC,GAAO,GACPC,GAAkB,GAElBC,GAAmB,GAEnBC,GAAgB,GCb7B,SAAAC,GAAmD9G,GACjD,OAVF,SAAA+G,EAA4C/G,GAC1C,OATF,SAAAgH,EAAqChH,EAAU5G,GAC7C,OAAc,MAAP4G,GAA6B,iBAAPA,GAAmB/L,OAAOgT,eAAejH,IAAQ5G,EAAKzE,UAQ5EqS,CAAkBhH,EAAKkH,IASvBH,CAA4B/G,GAAOA,EAAImH,SAAWnH,EAO3D,IAAAkH,GAAA,WAMA,OADE,SAAAA,EAAmBC,GAAA1S,KAAA0S,SAAAA,EAJnB1S,KAAA2S,UAAY,IAAIlG,IAChBzM,KAAA6G,YACA7G,KAAA4S,QAA8B,MAHhC,GCPA,SAAAC,GAAgCzR,GAC9B,MAAoB,mBAATA,EAA4BA,EAAMY,MAAQZ,EACjC,iBAATA,EAA0BA,EACxB,MAATA,EAAsB,GACN,iBAATA,GAA0C,mBAAdA,EAAMuD,KACpCvD,EAAMuD,KAAK3C,MAAQZ,EAAMuD,KAC3B,GAAKvD,EAkDd,SAAA0R,GAAiC1R,GAC/B,KAAOzB,MAAM8H,QAAQrG,IACnBA,EAAQA,EAAMqQ,IAEhB,OAAOrQ,EAWT,SAAA2R,GAAiCC,EAAcC,GAC7C,OAAOH,GAAiBG,EAASD,EAAM9P,QAGzC,SAAAgQ,GAAyBhQ,EAAeiQ,GAGtC,OAAOA,EAAK/B,IAAOgC,KAAKlQ,EAAQkP,IAGlC,SAAAiB,GAAwCC,EAAmBL,GAEzD,IAAMM,EAAYN,EAASK,GAC3B,OAAOC,EAAU5S,QAAUyR,GAAgBmB,EAAYA,EAAU9B,IAOnE,SAAA+B,GAA4BR,GAC1B,OAAmB,IAAA,EAAXA,EAAMjM,OAGhB,SAAA0M,GAAkCpH,GAChC,OAA6C,OAArCA,EAAwBqH,SAGlC,SAAAC,GAA6BvS,GAE3B,OAAOzB,MAAM8H,QAAQrG,IAAUA,EAAMT,SAAW4P,GAGlD,SAAAqD,GAA2BC,GACzB,OAA+C,IAA1B,IAAbA,EAAOxC,KA6BjB,SAAAyC,GAAgCD,GAE9B,OAAOA,EAAOrD,IAGhB,SAAAuD,GAAiCF,GAC/B,IAAMzS,EAAQ0S,GAAgBD,GAC9B,OAAIzS,EACKzB,MAAM8H,QAAQrG,GAASA,EAASA,EAAmB4S,MAErD,KAGT,SAAAC,GAAkCC,GAChC,OAAOA,IAAmBtD,GAG5B,SAAAuD,GAAuCD,GACrC,OAAwC,MAAhCA,EAGV,SAAAE,GAA4CF,GAC1C,OAAQA,GAAgC,GAY1C,SAAAG,GAAsCC,EAAoCC,GAOxE,IANA,IAAIC,EAAaJ,GAA4BE,GACzCG,EAAaF,EAKVC,EAAa,GAClBC,EAAaA,EAAWtC,IACxBqC,IAEF,OAAOC,EAuCF,IAAMC,IACyB,oBAA1BC,uBAAyCA,uBAChDC,YACE/R,KAAKyD,GAoBZ,SAAAuO,GAAkCb,GAGhC,IAFA,IAAIc,EAAYd,EAAMtC,IAEfoD,GAA2B,IAAdA,EAAUnQ,MAG5BmQ,GADAd,EAAQA,EAAM7B,KACIT,IAGpB,OAAOsC,ECxQT,IAAIe,GAAmB,EAiBvB,SAAAC,GAAmCC,GAyMjC,IAAMtQ,EAAOsQ,EAAoBtQ,KAC3BuQ,EAAgBvQ,EAAKzE,UACrBiV,KACA9I,GACJ1H,KAAMA,EACNyQ,kBAAmB,KACnBC,OAAQJ,EAAoBI,OAC5BC,KAAML,EAAoBK,KAC1BlR,QAAS6Q,EAAoB7Q,QAC7BsP,SAAUuB,EAAoBvB,UAAY,KAC1C6B,mBAAoBN,EAAoBM,mBACxCC,aAAcP,EAAoBO,cAAgB,KAClDC,eAAgBR,EAAoBQ,gBAAkB,KACtDC,sBAAuBT,EAAoBS,uBAAyB,KACpEP,eAAgBA,EAChBQ,OAAQ,KACRC,QAAS,KACTC,SAAUZ,EAAoBY,UAAY,KAC1CC,UAAWZ,EAAca,aAAe,KACxCC,OAAQd,EAAce,UAAY,KAClCC,QAAShB,EAAciB,WAAa,KACpCC,iBAAkBlB,EAAcmB,oBAAsB,KACtDC,oBAAqBpB,EAAcqB,uBAAyB,KAC5DC,cAAetB,EAAcuB,iBAAmB,KAChDC,iBAAkBxB,EAAcyB,oBAAsB,KACtDjK,UAAWwI,EAAc1H,aAAe,KACxCoJ,OAAQ3B,EAAoB4B,kBAAoBrH,GAAwBsH,OACxEC,cAAe,KACfC,SAAU,KACVC,UAAWhC,EAAoBgC,UAC/BC,UAAWjC,EAAoBiC,WAAa,KAC5CC,SAAUlC,EAAoBkC,UAAY,KAC1C/D,KAAM6B,EAAoB7B,SAG1BgE,cAAenC,EAAoBmC,eAAiBlH,GAAkBmH,SACtEC,GAAI,IACJC,OAAQtC,EAAoBsC,QAAUrL,GACtCsL,EAAG,MAkBL,OAhBAnL,EAAImL,ECvQN,SAAAC,EAA8B3R,GAC5B,MAAO,IAAMR,SAAUQ,GDsQf2R,CAAc,WACpB,IAAMC,EAAiBzC,EAAoB0C,WACrCC,EAAU3C,EAAoBkC,SAC9BU,EAAY5C,EAAoB6C,MACtCzL,EAAIiL,IAAMvC,KACV1I,EAAIsJ,OAASoC,GAAa9C,EAAoBU,OAAQR,GACtD9I,EAAIuJ,QAAUmC,GAAa9C,EAAoBW,SAC/CgC,GAAWA,EAAQxM,QAAQ,SAACtF,GAAO,OAAAA,EAAGuG,KACtCA,EAAI0K,cAAgBW,EAChB,WAAM,OAA2B,mBAAnBA,EAAgCA,IAAmBA,GACtDxS,IAAI8S,KACf,KACJ3L,EAAI2K,SAAWa,EACX,WAAM,OAAsB,mBAAdA,EAA2BA,IAAcA,GAAW3S,IAAI+S,KACtE,OAEC5L,EAGT,SAAA2L,GAAoCrT,GAMlC,OAJYuT,GAAgBvT,IAkV9B,SAAAwT,EAAmCxT,GACjC,OAAQA,EAAagL,KAAqB,KAnVLwI,CAAgBxT,GAOvD,SAAAsT,GAA+BtT,GAK7B,OA0UF,SAAAyT,EAA8BzT,GAC5B,OAAQA,EAAakL,KAAgB,KA/UzBuI,CAAWzT,GAOzB,SAAA0T,GAAkChM,GAShC,OAPE1H,KAAM0H,EAAI1H,KACV2T,UAAWjM,EAAIiM,WAAapM,GAC5BqM,aAAclM,EAAIkM,cAAgBrM,GAClCzH,QAAS4H,EAAI5H,SAAWyH,GACxBsM,QAASnM,EAAImM,SAAWtM,GACxBuM,wBAAyB,MA4D7B,SAAAV,GAAsBxM,EAAUmN,GAC9B,GAAW,MAAPnN,EAAa,OAAO4E,GACxB,IAAMwI,KACN,IAAK,IAAMC,KAAerN,EACxB,GAAIA,EAAI1L,eAAe+Y,GAAc,CACnC,IAAIC,EAAqBtN,EAAIqN,GACzBE,EAAeD,EACflZ,MAAM8H,QAAQoR,KAChBC,EAAeD,EAAW,GAC1BA,EAAaA,EAAW,IAE1BF,EAAUE,GAAcD,EACpBF,IACDA,EAAUG,GAAcC,GAI/B,OAAOH,EA+FF,IEzWHI,GAqBAC,GA6CAhF,GFuSSiF,GAAkBjE,GAiH/B,SAAAkE,GAA8BC,GAa5B,OACEnX,KAAMmX,EAAQnX,KACdoC,QAAS+U,EAAQ/U,QACjBgV,MAAuB,IAAjBD,EAAQC,KACd1M,UAAWyM,EAAQxU,KAAKzE,UAAUsN,aAAe,MAUrD,SAAA0K,GAAmCvT,GACjC,OAAQA,EAAa8K,KAAqB,KGnf5C,SAAA4J,GACIC,EAAoBC,EAAiCC,EACrDC,GACF,IAAIA,EAAJ,CAEA,IAAMC,EAAgC,EAAlBJ,EAAYjI,IAAqCkI,EAAiBC,EAClFE,GACFC,GAAUL,EAAaI,IAW3B,SAAAC,GAA0BL,EAAoBM,GAC5C,IAAK,IAAIpZ,EAAI,EAAGA,EAAIoZ,EAAIjZ,OAAQH,GAAK,EAAG,CACtC,IAAMqZ,EAAiBD,EAAIpZ,GACrBsZ,EAAOF,EAAIpZ,EAAI,GAEfuZ,EAAkBF,EAAiB,EACnCG,EACFV,EAAYS,GAAmBF,EAAiBA,GAC9CI,EAAY5H,GAAgC2H,GAElD,GAAID,EAAiB,CACnB,IAAMjE,EAAuCkE,EACvCpH,EAAUkD,EAAUlD,QACtBA,IACFkD,EAAUjP,SAAW+L,EACrBkD,EAAUlD,QAAU,KACpBkH,EAAKlZ,KAAKkV,EAAUpD,SAAUE,SAGhCkH,EAAKlZ,KAAKqZ,ID1DhB,SAAAC,KACE,OAAOlG,GAmBT,SAAAmG,KAEE,OAAOpB,GAGT,SAAAqB,GAAyCpH,GACvC+F,GAAwB/F,EAG1B,SAAAqH,GAAoCrH,EAAcG,GAChD4F,GAAwB/F,EACxBgB,GAAQb,EAUV,SAAAmH,KAEE,OAAOtB,GAGT,SAAAuB,GAA4BnZ,GAC1B4X,GAAW5X,EA2Bb,SAAAoZ,GAA+BrH,GAC7B,YAD6B,IAAAA,IAAAA,EAAAa,IACV,IAAA,EAAXb,EAAK9B,KA6Bf,IAAIoI,IAAqB,EAEzB,SAAAgB,KAEE,OAAOhB,GAGT,SAAAiB,GAAsCC,GACpClB,GAAqBkB,EAIvB,IAAIC,IAAoB,EAExB,SAAAC,KACE,OAAOD,GAGT,SAAAE,GAAqC1Z,GACnCwZ,GAAoBxZ,EA+BtB,SAAA2Z,GAA0BC,EAAgBC,GACxC,IAAMC,EAAUlH,GACZgH,IAEFJ,GADcI,EAAQ5J,IACIwJ,mBAQ5B,OAJA7B,GAAwBkC,EACxBjC,IAAW,EAEXhF,GAAuBgH,EAChBE,EAmCT,SAAAC,GAA0BH,GACxB,IAAMI,EAAQpH,GAAM5C,IACpB,GAAIoJ,GAAexG,IACjBA,GAAM3C,MAAU,OAEhB,IACEgI,GAAarF,GAAOoH,EAAMC,UAAWD,EAAME,eAAgB7B,YAG3DzF,GAAM3C,MAAU,GAChB2C,GAAM3C,KAAM,GACZ2C,GAAMrC,IAAiByJ,EAAMG,kBAGjCR,GAAUC,EAAS,ME3QrB,IAAIQ,IAAuB,EAE3B,SAAAC,GAAiCpQ,GAC/B,IAAMqQ,EAAWF,GAEjB,OADAA,GAAuBnQ,EAChBqQ,EAQT,IACMC,GAAaC,IAGfC,GAAkB,EA8FtB,SAAAC,GAAqBlC,EAAYmC,GAC/BnC,EAAIlY,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGqa,GAInC,SAAAC,GAAiChJ,EAAcC,GAC7C,OAA6B,IAAzBD,EAAMiJ,eAGLjJ,EAAM1K,QAAU0K,EAAM1K,OAAO2T,gBAAkBjJ,EAAMiJ,eAGH,MAAnDhJ,EAASD,EAAMiJ,cAAgBvL,KACzB,EAEDsC,EAAMiJ,cAUjB,SAAAC,GAA0ClJ,EAAcG,GACtD,GAAIH,EAAM1K,SAA0C,IAAhC0K,EAAM1K,OAAO2T,cAC/B,OAAOjJ,EAAM1K,OAAO2T,cAQtB,IAFA,IAAIhB,EAAY9H,EAAKzB,IACjB8C,EAAa,EACVyG,IAA0C,IAA7BA,EAAUgB,eAE5BhB,GADA9H,EAAOA,EAAKhB,KACOgB,EAAKzB,IAAa,KACrC8C,IAGF,OAAOyG,EACHA,EAAUgB,cAAiBzH,GAAU,IACpC,EAiFP,SAAA2H,GACInJ,EAAqEgB,EACrExQ,EAAmCuD,EACnCK,GACF,QAFqC,IAAAL,IAAAA,EAAqBnD,EAAYoD,SAElEgM,EAAO,CACT,IAAMoJ,EA+OV,SAAAC,EAAsC7Y,GAGpC,GAAqB,iBAAVA,EACT,OAAOA,EAAM8Y,WAAW,IAAM,EAEhC,IAAMC,EAA6B/Y,EAAcyM,IAEjD,MAA2B,iBAAZsM,GAAwBA,EAAU,EAAKA,EAAUZ,GAAaY,EAvPzDF,CAAsB7Y,GAGxC,GAAyB,mBAAd4Y,EAA0B,CACnC,IAAMI,EAA4BrC,KAC5BsC,EAAYvC,KAClBG,GAAoBrH,EAAOgB,GAC3B,IACE,IAAM5S,EAAQgb,IACd,GAAa,MAAThb,GAAmB2F,EAAQnD,EAAYH,SAGzC,OAAOrC,EAFP,MAAM,IAAI4C,MAAM,mBAAmB6O,GAAgBrP,GAAM,aAK3D6W,GAAoBmC,EAA2BC,SAE5C,GAAwB,iBAAbL,EAAuB,CACvC,IAAmB,IAAfA,EAEF,OAAO,IAAIM,GAAa1J,EAAOgB,GAOjC,IAAI2I,EAA4B,KAC5BV,EAAgBD,GAAiBhJ,EAAOgB,GACxCE,EAA2CtD,GAC3CgM,EACA7V,EAAQnD,EAAYiZ,KAAOhI,GAAkBb,GAAOtC,IAAa,KAoBrE,MAfuB,IAAnBuK,GAAwBlV,EAAQnD,EAAYD,YAC9CuQ,GAAoC,IAAnB+H,EAAuBC,GAA0BlJ,EAAOgB,GACjCA,EAAMiI,EAAgBvL,IAEzDoM,GAAmB/V,GAAO,IAG7B4V,EAAgB3I,EAAM5C,IACtB6K,EAAgB9H,GAAuBD,GACvCF,EAAQK,GAAsBH,EAAgBF,IAJ9CiI,GAAiB,IAUK,IAAnBA,GAAsB,CAC3B/H,EAAiBF,EAAMiI,EAAgBvL,IAGvC,IAAM0K,EAAQpH,EAAM5C,IACpB,GAAI2L,GAAcX,EAAWH,EAAeb,EAAMhI,MAAO,CAIvD,IAAMV,EAAmBsK,GACrBf,EAAejI,EAAOxQ,EAAOmZ,EAAe5V,EAAO6V,GACvD,GAAIlK,IAAauK,GACf,OAAOvK,EAGPoK,GACI/V,EAAOiN,EAAM5C,IAAOgC,KAAK6I,EAAgBxL,MAAWmM,IACxDG,GAAcX,EAAWH,EAAejI,IAG1C2I,EAAgBvB,EAChBa,EAAgB9H,GAAuBD,GACvCF,EAAQK,GAAsBH,EAAgBF,IAK9CiI,GAAiB,IAWzB,GALIlV,EAAQnD,EAAYH,eAA8BY,IAAlB+C,IAElCA,EAAgB,MAGsC,IAAnDL,GAASnD,EAAYF,KAAOE,EAAYiZ,OAAc,CACzD,IAAMK,EAAiBlJ,EAAM7L,IAC7B,OAAI+U,EACKA,EAAe/V,IAAI3D,EAAO4D,EAAeL,EAAQnD,EAAYH,UAE7DyD,EAAmB1D,EAAO4D,EAAeL,EAAQnD,EAAYH,UAGxE,GAAIsD,EAAQnD,EAAYH,SACtB,OAAO2D,EAEP,MAAM,IAAIpD,MAAM,4BAA4B6O,GAAgBrP,GAAM,KAItE,IAAMyZ,MAEN,SAAAD,GACIf,EAAuBjI,EAAcxQ,EACrCmZ,EAA6B5V,EAAoB6V,GACnD,IAAMO,EAAenJ,EAAM5C,IACrB4B,EAAQmK,EAAa/J,KAAK6I,EAAgBxL,IAwB1C2M,EAmBR,SAAAC,EACIrK,EAAcgB,EAAcxQ,EAAmC8Z,EAC/DC,GAcF,IAbA,IACMC,EAAsBxK,EAAMyK,gBAC5BC,EAFQ1J,EAAM5C,IAEOgC,KAErBuK,EAAsC,MAAnBH,EACnBI,EAAkB5K,EAAM6K,eAExBC,EACFN,GAAmB,GAIjBO,EAAWR,EAAoBI,EAAmBG,EANnC9K,EAAMgL,aAOlBxd,EAHL8c,EAAyBK,EAAmBA,EAAmBG,EAGvCtd,EAAIud,EAAUvd,IAAK,CAC7C,IAAMyd,EAAqBP,EAAald,GACxC,GAAIA,EAAIod,GAAmBpa,IAAUya,GACjCzd,GAAKod,GAAoBK,EAAyCtZ,OAASnB,EAC7E,OAAOhD,EAGX,GAAI+c,EAAmB,CACrB,IAAMW,EAASR,EAAaE,GAC5B,GAAIM,GAAUzK,GAAeyK,IAAWA,EAAOvZ,OAASnB,EACtD,OAAOoa,EAGX,OAAO,KA/CHP,CAA0BrK,EAAOgB,EAAOxQ,EAtBI,MAAjBmZ,EAQ1BnJ,GAAYR,IAAUwI,GAOtBmB,GAAiBQ,GAA2B,IAAVnK,EAAMrO,KAIlBoC,EAAQnD,EAAYiZ,MAASD,IAAqB5J,GAI7E,OAAsB,OAAlBoK,EACKe,GAAkBhB,EAAa/J,KAAMY,EAAOoJ,EAAepK,GAE3DiK,GAqDX,SAAAkB,GACIC,EAAcC,EAAcnb,EAAe8P,GAC7C,IAAI5R,EAAQid,EAAMnb,GAClB,Gd3PF,SAAAob,EAA0B/S,GAExB,OAAc,MAAPA,GAA6B,iBAAPA,GAAmB/L,OAAOgT,eAAejH,IAAQsF,GcyP1EyN,CAAUld,GAAQ,CACpB,IAAMgD,EAA+BhD,EACrC,GAAIgD,EAAQ6M,UACV,MAAM,IAAIjN,MAAM,oBAAoB6O,GAAgBuL,EAAMlb,KAE5D,IAAMqb,EAA+B9C,GAAwBrX,EAAQ8M,qBACrE9M,EAAQ6M,WAAY,EACpB,IAAIuN,OAA4B,EAC5Bpa,EAAQ+M,aACVqN,EAA+B7X,EAAwBvC,EAAQ+M,aAEjE,IAAMqL,EAA4BrC,KAC5BsC,EAAYvC,KAClBG,GAAoBrH,EAAOqL,GAC3B,IACEjd,EAAQid,EAAMnb,GAASkB,EAAQA,QAAQ,KAAMga,EAAOC,EAAOrL,GAC3D,IAAMoI,EAAQiD,EAAMjN,IAChBhQ,GAASgD,EAAQ2M,YAAc3P,EAAMoM,cACtC4N,EAAMqD,eAAiBrD,EAAMqD,kBAAoB/c,KAAKwB,EAAO9B,EAAMoM,qBAGlEpJ,EAAQ+M,YAAYxK,EAAwB6X,GAChD/C,GAAwB8C,GACxBna,EAAQ6M,WAAY,EACpBoJ,GAAoBmC,EAA2BC,SAGjDrb,EAAQiR,GAAgCjR,GAE1C,OAAOA,EA0BT,SAAA2b,GACIX,EAAmBH,EAAuByC,GAI5C,IAEMC,EAAiB,GAAZvC,EACLwC,EAAiB,GAAZxC,EAiBX,UAnBuB,IAAZA,EAUDuC,EAAMC,EAAKF,EAAazC,EAAgB,GAAKyC,EAAazC,EAAgB,GACpE2C,EAAKF,EAAazC,EAAgB,GAAKyC,EAAazC,EAAgB,GAE1E0C,EAAMC,EAAKF,EAAazC,EAAgB,GAAKyC,EAAazC,EAAgB,GACpE2C,EAAKF,EAAazC,EAAgB,GAAKyC,EAAazC,IAfvD,GAAKG,GAwBpB,SAAAU,GAA4B/V,EAAoB8X,GAC9C,QAAS9X,EAAQnD,EAAYF,MAAWqD,EAAQnD,EAAYiZ,MAAQgC,GAGtE,IAAAnC,GAAA,WACE,SAAAA,EACYoC,EACAC,GADA/e,KAAA8e,OAAAA,EACA9e,KAAA+e,OAAAA,EAKd,OAHErC,EAAAxc,UAAAiH,IAAA,SAAI3D,EAAY4D,GACd,OAAO+U,GAAsBnc,KAAK8e,OAAQ9e,KAAK+e,OAAQvb,OAAOa,EAAW+C,IAE7EsV,EARA,GCpcA,SAAAsC,GAAwBhL,EAAcV,EAAmB2L,GACvD,OACEjL,MAAKA,EACLV,UAASA,EACT2L,OAAMA,EACNC,eAAW7a,EACXsT,gBAAYtT,EACZ8a,eAAW9a,GAgCf,SAAA+a,GAAgCvL,EAAaT,GAC3CS,EAAOrD,IAAyB4C,EAclC,SAAAiM,GAA8BrL,EAAcH,GAE1C,IADA,IAAIb,EAAQgB,EAAM5C,IAAOkO,WAClBtM,GAAO,CAEZ,GADeD,GAAiBC,EAAOgB,KACxBH,EACb,OAAOb,EAAM9P,MAEf8P,EAAQuM,GAAoBvM,GAG9B,OAAQ,EAMV,SAAAuM,GAA6BvM,GAC3B,GAAIA,EAAMwM,MACR,OAAOxM,EAAMwM,MACR,GAAIxM,EAAM7R,KACf,OAAO6R,EAAM7R,KAKb,KAAO6R,EAAM1K,SAAW0K,EAAM1K,OAAOnH,MACnC6R,EAAQA,EAAM1K,OAEhB,OAAO0K,EAAM1K,QAAU0K,EAAM1K,OAAOnH,KAOxC,SAAAse,GAA0BzL,EAAc0L,GACtC,IAAMC,EAAmB3L,EAAM5C,IAAOwO,WACtC,GAAID,EACF,IAAK,IAAInf,EAAI,EAAGA,EAAImf,EAAiBhf,OAAQH,IAAK,CAChD,IAAMqf,EAAwBF,EAAiBnf,GAE/C,GADsB6S,GAAwBwM,EAAuB7L,GACnDnC,MAAa6N,EAC7B,OAAOG,OAMX,GAF0BxM,GAAwBjB,GAAe4B,GACzBnC,MAClB6N,EAGpB,OAAOtN,GAGX,OAAQ,ECpEV,SAAA0N,GAwB6BjM,EAAYkM,QAAA,IAAAA,IAAAA,GAAA,GACvC,IAAMrU,EDlKR,SAAAsU,EAA4BnM,GAC1B,IAAIoM,EAAUnM,GAAgBD,GAC9B,GAAIoM,GAGF,GAAItgB,MAAM8H,QAAQwY,GAAU,CAC1B,IAAMjM,EAAeiM,EACjB3M,OAAS,EACT4L,OAAiB7a,EACjBsT,OAAmCtT,EAEvC,GAiIN,SAAA6b,EAAoCxN,GAClC,OAAOA,GAAYA,EAASzS,aAAeyS,EAASzS,YAAYyP,eAlIxDwQ,CAAoBrM,GAAS,CAE/B,IAAkB,IADlBP,EAAYmM,GAAiBzL,EAAOH,IAElC,MAAM,IAAI7P,MAAM,2DAElBkb,EAAYrL,OACP,GA+Hb,SAAAsM,EAAoCzN,GAClC,OAAOA,GAAYA,EAASzS,aAAeyS,EAASzS,YAAY2P,eAhIjDuQ,CAAoBtM,GAAS,CAEtC,IAAkB,IADlBP,EAiMR,SAAA8M,EAA0BpM,EAAcqM,GAOtC,IADA,IAAIrN,EAAQgB,EAAM5C,IAAOkO,WAClBtM,GAAO,CAGZ,IAFA,IACMsN,EAAoBtN,EAAMgL,aACvBxd,EAFmBwS,EAAM6K,eAEArd,EAAI8f,EAAmB9f,IACvD,GAAI6R,GAAgC2B,EAAMxT,MAAQ6f,EAChD,OAAOrN,EAAM9P,MAGjB8P,EAAQuM,GAAoBvM,GAE9B,OAAQ,EAlNUoN,CAAiBpM,EAAOH,IAElC,MAAM,IAAI7P,MAAM,2DAElB2T,EAyNR,SAAA4I,EACIjN,EAAmBU,EAAcwM,GACnC,IAAMxN,EAAQgB,EAAM5C,IAAOgC,KAAKE,GAC5BmN,EAAsBzN,EAAM6K,eAChC,OAA2B,GAAvB4C,EAAiCvU,KAEhCsU,GAAgC,EAAXxN,EAAMjM,OAAgC0Z,IACzDzM,EAAMnL,MAAM4X,EAFOzN,EAAMgL,eA9NbuC,CAAyBjN,EAAWU,GAAO,QAGxD,IAAkB,IADlBV,EAAY+L,GAAqBrL,EAAOH,IAEtC,OAAO,KAQX,IACM6M,EAAc5M,GADdmL,EAASnM,GAAiBkB,EAAMV,KAEhC5H,EAAqBgV,IAAgB/gB,MAAM8H,QAAQiZ,GACrDA,EACA1B,GAAehL,EAAOV,EAAW2L,GASrC,GANIC,QAAmC7a,IAAtBqH,EAAQwT,YACvBxT,EAAQwT,UAAYA,EACpBE,GAAgB1T,EAAQwT,UAAWxT,IAIjCiM,QAAqCtT,IAAvBqH,EAAQiM,WAA0B,CAClDjM,EAAQiM,WAAaA,EACrB,IAAK,IAAInX,EAAI,EAAGA,EAAImX,EAAWhX,OAAQH,IACrC4e,GAAgBzH,EAAWnX,GAAIkL,GAInC0T,GAAgB1T,EAAQuT,OAAQvT,GAChCuU,EAAUvU,QASZ,IANA,IAAMiV,EAAW9M,EAKb+M,EAASD,EACNC,EAASA,EAAOC,YAAY,CACjC,IAAMC,EAAgBhN,GAAgB8M,GACtC,GAAIE,EAAe,CAUjB,GATI9M,OAAK,IAEPA,EADErU,MAAM8H,QAAQqZ,GACRA,EAEAA,EAAc9M,OAMtB,OAAO,KAGT,IAAM9Q,EAAQmc,GAAqBrL,EAAO2M,GAC1C,GAAIzd,GAAS,EAAG,CACd,IAAM+b,EAENG,GAFMH,EAASnM,GAAiBkB,EAAM9Q,IAChCwI,EAAUsT,GAAehL,EAAO9Q,EAAO+b,IAE7CgB,EAAUvU,EACV,QAKR,OAAQuU,GAAwB,KCuEhBD,CAAYnM,GAC5B,IAAKnI,GAAWqU,EACd,MAAM,IAAI/b,MAEM,qBAElB,OAAO0H,EA4CT,SAAAqV,GA6BqCC,GACnC,KAAMA,aAAgBC,MAAO,MAAM,IAAIjd,MAAM,kCAC7C,OAAO8b,GAAakB,GAUtB,SAAAE,GAAgCC,GAE9B,MAAsC,kBAAxBA,EAASC,WAyDzB,SAAAC,GAAuBC,EAAa/hB,GAClC,OAAI+hB,EAAEtf,MAAQzC,EAAEyC,KAAa,EACtBsf,EAAEtf,KAAOzC,EAAEyC,MAAQ,EAAI,ECjVhC,IAAIuf,IAAoB,EACpBC,IAA0B,EAW9B,SAAAC,KAEE,OADAD,IAAiB,EACVD,GCbT,IAAAG,GAAA,WAIE,SAAAA,EAAoBC,GAIlB,GAJkB3hB,KAAA2hB,WAAAA,EAClB3hB,KAAK4hB,cAAgB5hB,KAAK2hB,WAAWE,eAAeC,mBAAmB,sBACvE9hB,KAAK+hB,iBAAmB/hB,KAAK4hB,cAAcI,KAEd,MAAzBhiB,KAAK+hB,iBAA0B,CAGjC,IAAME,EAAYjiB,KAAK4hB,cAAcM,cAAc,QACnDliB,KAAK4hB,cAAcO,YAAYF,GAC/BjiB,KAAK+hB,iBAAmB/hB,KAAK4hB,cAAcM,cAAc,QACzDD,EAAUE,YAAYniB,KAAK+hB,kBAG7B/hB,KAAK+hB,iBAAiBK,UAAY,wDAC9BpiB,KAAK+hB,iBAAiBM,eAAkBriB,KAAK+hB,iBAAiBM,cAAc,QAOhFriB,KAAK+hB,iBAAiBK,UAClB,mEAOApiB,KAAKsiB,oBANLtiB,KAAK+hB,iBAAiBM,eAAiBriB,KAAK+hB,iBAAiBM,cAAc,YA6HnF,SAAAE,IACE,IACE,QAAUtc,OAAeuc,UACzB,MAAA5f,GACA,OAAO,GA5HD2f,GACyBviB,KAAKyiB,8BAMTziB,KAAK0iB,mCAlB9B1iB,KAAKsiB,oBAAsBtiB,KAAK2iB,wBA0HtC,OA1FUjB,EAAAxhB,UAAAyiB,wBAAR,SAAgCC,GAI9BA,EAAO,0BAA4BA,EAAO,UAC1C,IACEA,EAAOC,UAAUD,GACjB,MAAAhgB,GACA,OAAO,KAET,IAAMkgB,EAAM,IAAIC,eAChBD,EAAIE,aAAe,WACnBF,EAAIG,KAAK,MAAO,gCAAkCL,GAAM,GACxDE,EAAII,UAAK7e,GACT,IAAM2d,EAAwBc,EAAIK,SAASnB,KAE3C,OADAA,EAAKoB,YAAYpB,EAAK1C,YACf0C,GAQDN,EAAAxhB,UAAAuiB,8BAAR,SAAsCG,GAIpCA,EAAO,0BAA4BA,EAAO,UAC1C,IACE,IAAMZ,GAAO,IAAK/b,OACAuc,WACAa,gBAAgBT,EAAM,aACtBZ,KAElB,OADAA,EAAKoB,YAAYpB,EAAK1C,YACf0C,EACP,MAAApf,GACA,OAAO,OAUH8e,EAAAxhB,UAAAwiB,kCAAR,SAA0CE,GAExC,IAAMU,EAAatjB,KAAK4hB,cAAcM,cAAc,YACpD,MAAI,YAAaoB,GACfA,EAAWlB,UAAYQ,EAChBU,IAGTtjB,KAAK+hB,iBAAiBK,UAAYQ,EAI7B5iB,KAAK2hB,WAAmB4B,cAC3BvjB,KAAKwjB,mBAAmBxjB,KAAK+hB,kBAGxB/hB,KAAK+hB,mBAWNL,EAAAxhB,UAAAsjB,mBAAR,SAA2BC,GAGzB,IAFA,IAAMC,EAAUD,EAAGE,WAEVnjB,EAAIkjB,EAAQ/iB,OAAS,EAAG,EAAIH,EAAGA,IAAK,CAC3C,IACMojB,EADSF,EAAQG,KAAKrjB,GACFwB,KACT,cAAb4hB,GAAyD,IAA7BA,EAASpe,QAAQ,SAC/Cie,EAAGK,gBAAgBF,GAIvB,IADA,IAAIG,EAAYN,EAAGnE,WACZyE,GACDA,EAAUC,WAAa/C,KAAKgD,cAAcjkB,KAAKwjB,mBAAmBO,GACtEA,EAAYA,EAAUG,aAG5BxC,EA/IA,GCoBMyC,GAAmB,8DAMnBC,GACF,uIAEJ,SAAAC,GAA6BC,GAE3B,OADAA,EAAMzc,OAAOyc,IACLC,MAAMJ,KAAqBG,EAAIC,MAAMH,IAA0BE,GAEnE7C,MACF+C,QAAQC,KAAK,wCAAwCH,EAAG,sCAGnD,UAAYA,GCzCrB,SAAAI,GAAgBC,WACRtf,SACN,IAAgB,IAAAuf,EAAAC,EAAAF,EAAKG,MAAM,MAAIC,EAAAH,EAAAzjB,QAAA4jB,EAAA1jB,KAAA0jB,EAAAH,EAAAzjB,OAAEkE,EAArB0f,EAAA3jB,QAA8B,mGAC1C,OAAOiE,EAGT,SAAA2f,SAAe,QAAAC,KAAA1iB,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAA0iB,EAAA1iB,GAAA7B,UAAA6B,GACb,IAAM8C,SACN,IAAgB,IAAA6f,EAAAL,EAAAI,GAAIE,EAAAD,EAAA/jB,QAAAgkB,EAAA9jB,KAAA8jB,EAAAD,EAAA/jB,OAAE,CAAjB,IAAMZ,EAAC4kB,EAAA/jB,MACV,IAAK,IAAMiK,KAAK9K,EACVA,EAAEV,eAAewL,KAAIhG,EAAIgG,IAAK,qGAGtC,OAAOhG,EAST,IAuLI+f,GAvLEC,GAAgBX,GAAO,0BAIvBY,GAAkCZ,GAAO,kDACzCa,GAAmCb,GAAO,SAC1Cc,GACFR,GAAMO,GAAkCD,IAkB/BG,GACTT,GAAMK,GAhBaL,GACnBM,GACAZ,GACI,oMAKgBM,GACpBO,GACAb,GACI,+LAKkDc,IAG7CE,GAAYhB,GAAO,gEAGnBiB,GAAejB,GAAO,UAiBtBkB,GAAcZ,GAAMU,GAAWC,GAfzBjB,GACf,kdAoBJmB,GAAA,WAAA,SAAAA,IAGS7lB,KAAA8lB,oBAAqB,EACpB9lB,KAAA+lB,OA+FV,OA7FEF,EAAA3lB,UAAA8lB,iBAAA,SAAiBvC,GAMf,IAFA,IAAIwC,EAAgBxC,EAAGnE,WACnB4G,GAAe,EACZD,GASL,GARIA,EAAQjC,WAAa/C,KAAKgD,aAC5BiC,EAAelmB,KAAKmmB,aAAaF,GACxBA,EAAQjC,WAAa/C,KAAKmF,UACnCpmB,KAAKqmB,MAAMJ,EAAQK,WAGnBtmB,KAAK8lB,oBAAqB,EAExBI,GAAgBD,EAAQ3G,WAC1B2G,EAAUA,EAAQ3G,gBAGpB,KAAO2G,GAAS,CAEVA,EAAQjC,WAAa/C,KAAKgD,cAC5BjkB,KAAKumB,WAAWN,GAGlB,IAAI9kB,EAAOnB,KAAKwmB,sBAAsBP,EAASA,EAAQ/B,aAEvD,GAAI/iB,EAAM,CACR8kB,EAAU9kB,EACV,MAGF8kB,EAAUjmB,KAAKwmB,sBAAsBP,EAASA,EAAQpF,YAG1D,OAAO7gB,KAAK+lB,IAAI5gB,KAAK,KAWf0gB,EAAA3lB,UAAAimB,aAAR,SAAqBM,GACnB,IDtF2BC,ECsFrBC,EAAUF,EAAQG,SAASC,cACjC,IAAKpB,GAAe5lB,eAAe8mB,GAEjC,OADA3mB,KAAK8lB,oBAAqB,GACnB,EAET9lB,KAAK+lB,IAAIrkB,KAAK,KACd1B,KAAK+lB,IAAIrkB,KAAKilB,GAEd,IADA,IAAMjD,EAAU+C,EAAQ9C,WACfnjB,EAAI,EAAGA,EAAIkjB,EAAQ/iB,OAAQH,IAAK,CACvC,IAAMsmB,EAASpD,EAAQG,KAAKrjB,GACtBojB,EAAWkD,EAAS9kB,KACpB+kB,EAAQnD,EAASiD,cACvB,GAAKjB,GAAY/lB,eAAeknB,GAAhC,CAIA,IAAI3lB,EAAQ0lB,EAAS1lB,MAEjBskB,GAAUqB,KAAQ3lB,EAAQijB,GAAajjB,IACvCukB,GAAaoB,KDzGQL,ECyGuBtlB,EAAvBA,GDxG7BslB,EAAS7e,OAAO6e,IACF5B,MAAM,KAAK5f,IAAI,SAACwhB,GAAW,OAAArC,GAAaqC,EAAOM,UAAS7hB,KAAK,OCwGvEnF,KAAK+lB,IAAIrkB,KAAK,IAAKkiB,EAAU,KAAMqD,GAAe7lB,GAAQ,UAPxDpB,KAAK8lB,oBAAqB,EAU9B,OADA9lB,KAAK+lB,IAAIrkB,KAAK,MACP,GAGDmkB,EAAA3lB,UAAAqmB,WAAR,SAAmBN,GACjB,IAAMU,EAAUV,EAAQW,SAASC,cAC7BpB,GAAe5lB,eAAe8mB,KAAatB,GAAcxlB,eAAe8mB,KAC1E3mB,KAAK+lB,IAAIrkB,KAAK,MACd1B,KAAK+lB,IAAIrkB,KAAKilB,GACd3mB,KAAK+lB,IAAIrkB,KAAK,OAIVmkB,EAAA3lB,UAAAmmB,MAAR,SAAcA,GAAiBrmB,KAAK+lB,IAAIrkB,KAAKulB,GAAeZ,KAE5DR,EAAA3lB,UAAAsmB,sBAAA,SAAsBxF,EAAYkG,GAChC,GAAIA,IACClG,EAAKmG,wBAAwBD,GAC7BjG,KAAKmG,kCAAoCnG,KAAKmG,+BACjD,MAAM,IAAIpjB,MACN,6DAA8Dgd,EAAiBqG,WAErF,OAAOH,GAEXrB,EAnGA,GAsGMyB,GAAwB,kCAExBC,GAA0B,gBAQhC,SAAAN,GAAwB7lB,GACtB,OAAOA,EAAMyK,QAAQ,KAAM,SACtBA,QACGyb,GACA,SAAS/C,GAGP,MAAO,MAAyB,MAFrBA,EAAMjI,WAAW,GAEN,QADViI,EAAMjI,WAAW,GACmB,OAAU,OAAW,MAE1EzQ,QACG0b,GACA,SAAShD,GAAiB,MAAO,KAAOA,EAAMjI,WAAW,GAAK,MACjEzQ,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAqDrB,SAAA2b,GAAmC/D,GACjC,MAAO,YAAcA,GAIvB,SAAAgE,EAA2BhE,GACzB,OAAOA,EAAGO,WAAa/C,KAAKgD,cAAgC,aAAhBR,EAAGmD,SALsBa,CAAkBhE,GACnFA,EAAGiE,QACH,KC7PN,IAAYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,aAAA,GAAA,eANUA,EAAZ,KAcAC,GAAA,SAAAA,OCCMC,GAAmB,IAAIC,OACzB,8LAGA,KAoBEC,GAAS,mBC3Cf,SAAAC,GAA0Bzc,GAGxB,QAASA,GAA2B,mBAAbA,EAAI0c,KCJ7B,IAAIC,GAAuB,KAC3B,SAAAC,KACE,IAAKD,GAAiB,CACpB,IAAME,EAAS/hB,EAAgB,OAC/B,GAAI+hB,GAAUA,EAAOlnB,SACnBgnB,GAAkBE,EAAOlnB,cAIzB,IADA,IAAMmnB,EAAO7oB,OAAO8oB,oBAAoB/e,IAAIrJ,WACnCM,EAAI,EAAGA,EAAI6nB,EAAK1nB,SAAUH,EAAG,CACpC,IAAMuD,EAAMskB,EAAK7nB,GACL,YAARuD,GAA6B,SAARA,GACpBwF,IAAYrJ,UAAU6D,KAASwF,IAAIrJ,UAAmB,UACzDgoB,GAAkBnkB,IAK1B,OAAOmkB,GClBT,SAAAK,GAA+BjH,EAAQ/hB,GACrC,OAAO+hB,IAAM/hB,GAAkB,iBAAN+hB,GAA+B,iBAAN/hB,GAAkBipB,MAAMlH,IAAMkH,MAAMjpB,GCkCxF,IAAAkpB,GAAA,WAIE,SAAAA,EAAYrnB,GAAcpB,KAAK0oB,QAAUtnB,EAa3C,OAVSqnB,EAAAE,KAAP,SAAYvnB,GAA4B,OAAO,IAAIqnB,EAAarnB,IAMzDqnB,EAAAG,OAAP,SAAcxnB,GAAmB,OAAOqnB,EAAaI,UAAUznB,GAASA,EAAMsnB,QAAUtnB,GAGjFqnB,EAAAI,UAAP,SAAiBznB,GAAqC,OAAOA,aAAiBqnB,GAChFA,EAjBA,eAmBmCld,GACjC,QAAKud,GAAWvd,KACT5L,MAAM8H,QAAQ8D,MACdA,aAAehC,MACjB4e,OAAuB5c,GA+B9B,SAAAwd,GAA2BhoB,GACzB,OAAa,OAANA,IAA4B,mBAANA,GAAiC,iBAANA,GCxFnD,IAAMioB,MCqCb,SAAAC,GAAqCC,GAEnC,QAAWA,EAAuB,OAoD7B,IAAMC,IACXC,eAAgB,SAACC,EAA8BC,GACZ,OAAOC,uBCvFdvW,EAAkBwW,GAC9C,IAAqB,IAAjBxW,EAAM9P,MAAc,CAGtB,IAAMumB,EAAqBD,EAAatX,IACxC,OAAOuX,GAAsB,EAAID,EAAalY,IAAUmY,GAAsB,KAG9E,OAAOD,EAAalY,IAAU0B,EAAM1K,OAASpF,OASjD,SAAAwmB,GAAkCC,EAAsBxW,GACtD,IAAMyW,EAAYC,GAAcF,EAAWxW,GAC3C,OAAOyW,EAAYE,GAAiB3W,EAAKpB,IAAW6X,EAAUtZ,KAAW,KAsB3E,IAAMyZ,MAcN,SAAAC,GACIC,EAAmBC,EAA6BhB,EAChDiB,EAA+BC,GAKjC,IAJA,IAAMtV,EAAYmV,EAAW7Y,IAAO4P,KAChCqJ,GAAuB,EACvB/Q,EAAc2Q,EACdjX,EAAoB8B,EAAU0K,MAC3BxM,GAAO,CACZ,IAAIsX,EAAwB,KAC5B,GAAc,IAAVtX,EAAMrO,KAA4B,CACpC4lB,GACIL,EAAQhB,EAAUiB,EAAcpX,GAAiBC,EAAOsG,GAAc8Q,GAC1E,IAAMI,EAAkBlR,EAAYtG,EAAM9P,OACtCyQ,GAAa6W,IAEfD,GAAkBL,EAAQhB,EAAUiB,EAAcK,EAAgBla,IAAS8Z,QAExE,GAAc,IAAVpX,EAAMrO,KAA8B,CAC7C,IAAM8lB,EAAanR,EAActG,EAAM9P,OACvCqnB,GAAkBL,EAAQhB,EAAUiB,EAAcM,EAAWna,IAAS8Z,GAElEK,EAAWpa,IAAO1P,SAEpB2pB,GADAhR,EAAcmR,EAAWpa,IAAO,IACRe,IAAO4P,KAI/BoJ,EAAaK,EAAWna,UAErB,GAAc,IAAV0C,EAAMrO,KAA+B,CAC9C,IAAM+lB,EAAgB7V,GAAkByE,GAElCqR,EADgBD,EAAchZ,IAEjBkZ,WAA+B5X,EAAM4X,YAIxDb,KAAsBM,GAAuBrX,EAC7C+W,KAAsBM,GAAuB/Q,EACzCqR,IAEFL,GADAhR,EAAcoR,EAAcpZ,KACJF,IAAOgC,KAAKuX,EAAKznB,aAI3ConB,EAAYtX,EAAMwM,MAGpB,GAAkB,OAAd8K,EAeF,IAbmB,OAAftX,EAAM7R,MAA6B,EAAX6R,EAAMjM,QAChCuS,EAAcyQ,GAAoBM,KAClCrX,EAAQ+W,GAAoBM,MAE9BC,EAAYtX,EAAM7R,MASVmpB,GAAW,CAIjB,GAAc,QAFdtX,EAAQA,EAAM1K,QAAUgR,EAAYlI,IAAO4P,OAErBhO,IAAU8B,EAAW,OAAO,KAGpC,IAAV9B,EAAMrO,OAERylB,GADA9Q,EAAcA,EAAYhI,KACD0B,EAAM9P,OAAOoN,KAKtCga,EAFY,IAAVtX,EAAMrO,MAA2B2U,EAAY/H,KAC/C+H,EAAcA,EAAY/H,KACFH,IAAO4P,KAEnBhO,EAAM7R,KAIxB6R,EAAQsX,GAQZ,SAAAC,GACIL,EAA6BhB,EAAqB5gB,EAClD0Y,EAAmCoJ,GAC3B,IAANF,EACFW,GAAmB3B,EAAU5gB,EAAU0Y,EAAMoJ,GAAc,MAC5C,IAANF,EA6Xb,SAAAY,EAAkC5B,EAAqB5gB,EAAkBkX,GACvEyJ,GAAqBC,GAAYA,EAAS9F,YAAY9a,EAAoBkX,GACzClX,EAAO8a,YAAY5D,GA9XlDsL,CAAkB5B,EAAU5gB,EAAU0Y,GACvB,IAANkJ,GAERhB,EAAiC6B,YAAc/J,GAuBpD,SAAAgK,GACIf,EAAmBgB,EAAqBb,GAC1C,IAAMD,EAAeT,GAAyBO,EAAW7Y,IAAO4P,KAAmBiJ,GAE/EE,GAEFH,GACIC,EAAYgB,EAAU,EAAA,EAFThB,EAAWlY,IAGxBoY,EAAcC,GAiEtB,SAAAc,GACIlX,EAAcyW,EAAwBhW,EAAmBvR,EACzDioB,GACF,IAAMC,EAAQX,EAAWpa,IAErBnN,EAAQ,IAEVkoB,EAAMloB,EAAQ,GAAGqO,IAAQyC,GAGvB9Q,EAAQkoB,EAAMzqB,QAChBqT,EAAMzC,IAAQ6Z,EAAMloB,GACpBkoB,EAAMC,OAAOnoB,EAAO,EAAG8Q,KAEvBoX,EAAM1pB,KAAKsS,GACXA,EAAMzC,IAAQ,MAKZ4Z,GAAkB,IACpBnX,EAAM9B,IAAmBiZ,EACzBnX,EAAM1C,IAAUmD,GAIdT,EAAMxC,KACRwC,EAAMxC,IAAW0Z,WAAWhoB,GAI9B8Q,EAAM3C,KAAM,GAcd,SAAAia,GAA2Bb,EAAwBc,EAAqBC,GACtE,IAAMJ,EAAQX,EAAWpa,IACnBob,EAAeL,EAAMG,GAgB3B,OAfIA,EAAc,IAChBH,EAAMG,EAAc,GAAGha,IAAQka,EAAala,KAE9C6Z,EAAMC,OAAOE,EAAa,GACrBC,GACHR,GAA2BS,GAAc,GAGvCA,EAAaja,KACfia,EAAaja,IAAWka,aAE1BD,EAAavZ,KAAoB,EACjCuZ,EAAana,IAAU,KAEvBma,EAAapa,MAAU,GAChBoa,EAmBT,SAAAE,GAA8B3X,GAC5B,IAAM4X,EAAa5X,EAAM5C,IAAOwa,WAChC,OAAuB,IAAhBA,EAAoB,KAAO5X,EAAM4X,GAS1C,SAAAC,GAA6B1Y,GAC3B,IAAM+V,EAAW/V,EAAKpB,IAClBkX,GAAqBC,IAAaA,EAAS6B,aAC7Cf,GAAc7W,EAAI,EAA+B+V,EAAU,MAhJ/D,SAAA4C,EAAgCC,GAE9B,IAAoC,IAAhCA,EAAS3a,IAAOwa,WAClB,OAAOI,GAAYD,GAIrB,IAFA,IAAIE,EAAyCN,GAAcI,GAEpDE,GAAiB,CACtB,IAAI9qB,EAA8B,KAYlC,GAVI8qB,EAAgBtrB,QAAUyR,GAEf6Z,EACJ7a,IAAOwa,YAAc,IAAGzqB,EAAOwqB,GAD3BM,IAIKA,EACJ5b,IAAO1P,SAAQQ,EADX8qB,EAC4B5b,IAAO,IAG3C,MAARlP,EAAc,CAGhB,KAAO8qB,IAAoBA,EAAkB1a,KAAS0a,IAAoBF,GACxEC,GAAYC,GACZA,EAAkBC,GAAeD,EAAiBF,GAEpDC,GAAYC,GAAmBF,GAC/B5qB,EAAO8qB,GAAmBA,EAAkB1a,IAE9C0a,EAAkB9qB,GAoHpB2qB,CAAgB3Y,GAEhBA,EAAK9B,KAAM,GAeb,SAAA6a,GAA+BC,EAA2BJ,GACxD,IAAI/Y,EACJ,OAAImZ,EAAMxrB,QAAUyR,KAAkBY,EAASmZ,EAAkBza,MACnD,IAAVsB,EAAMrO,KAGDklB,GAAc7W,EAAoBmZ,GAGlCA,EAAM7a,MAAYya,EAAW,KAAOI,EAAM7a,IAWrD,SAAA0a,GAAqBC,GACnB,GAAKA,EAA0BtrB,QAAUyR,GAAe,CACtD,IAAMe,EAAO8Y,GAsDjB,SAAAG,EAA2BjZ,GACzB,IACIsL,EADErD,EAAQjI,EAAK/B,IAEN,MAATgK,GAAwD,OAAtCqD,EAAerD,EAAMqD,eACzC9E,GAAUxG,EAAMsL,GAzDhB2N,CAAkBjZ,GAYtB,SAAAkZ,EAAyBrY,GACvB,IAAMsY,EAAWtY,EAAM5C,IAAOmb,QAC9B,GAAgB,MAAZD,EAAkB,CAEpB,IADA,IAAME,EAAWxY,EAAMpC,IACdpR,EAAI,EAAGA,EAAI8rB,EAAS3rB,OAAS,EAAGH,GAAK,EAC5C,GAA2B,iBAAhB8rB,EAAS9rB,GAAiB,CAEnC,IAAMisB,EAAoBH,EAAS9rB,EAAI,GACjCqT,EAAsC,mBAAtB4Y,EAClBA,EAAkBzY,GAClBlB,GAAiBkB,EAAMyY,IAErBC,EAAqBJ,EAAS9rB,EAAI,GACN,kBAAvBksB,EAET7Y,EAAO8Y,oBAAoBL,EAAS9rB,GAJrBgsB,EAASF,EAAS9rB,EAAI,IAIaksB,GAE9CA,GAAsB,EAExBF,EAASE,KAGTF,GAAUE,GAAoBE,cAGlCpsB,GAAK,MAC2B,iBAAhB8rB,EAAS9rB,IAGzBqsB,EADkBL,EAASF,EAAS9rB,OAKpC8rB,EAAS9rB,GAAGI,KADI4rB,EAASF,EAAS9rB,EAAI,KAI1CwT,EAAMpC,IAAW,MA/CjBya,CAAgBlZ,GAChB,IAAM8H,EAAY9H,EAAKzB,IAEnBuJ,GAA2B,IAAdA,EAAUtW,MAA8BskB,GAAqB9V,EAAKpB,MAEhFoB,EAAKpB,IAAkC1E,WA6H9C,SAAAwd,GACI3B,EAAqB5gB,EAAkBkX,EAAc4K,GACnDnB,GAAqBC,GACvBA,EAAS4D,aAAaxkB,EAAQkX,EAAO4K,GAErC9hB,EAAOwkB,aAAatN,EAAO4K,GAAY,GAe3C,SAAAN,GAAiCZ,EAAqBlI,GACpD,OAAQiI,GAAqBC,GAAYA,EAASrI,WAAWG,GAAQA,EAAKH,WAoB5E,SAAAsB,GAA4B4K,EAAgBC,EAAmB1T,GAC7D,IAAM6Q,EApGR,SAAA8C,EAAyBja,EAAcsG,GAErC,GAAI1F,GAAW0F,GACb,OAAOwQ,GAAiBxQ,EAAYvH,IAAWgB,GAAiBC,EAAOsG,IAKzE,IAAMhR,EAyHR,SAAA4kB,EAAyCla,GACvC,KAAuB,MAAhBA,EAAM1K,SAAoC,IAAjB0K,EAAM1K,OAAO3D,MACI,IAAjBqO,EAAM1K,OAAO3D,OAC3CqO,EAAQA,EAAM1K,OAEhB,OAAO0K,EA9HQka,CAAgCla,GAAO1K,OAItD,GAAc,MAAVA,EAAgB,CAClB,IAAM2S,EAAY3B,EAAY5H,IAC9B,OAAkB,IAAduJ,EAAUtW,KAQL+kB,GAAyBzO,EAAwB3B,GAwB9D,SAAA6T,EAAuB7T,GACrB,IAAM2B,EAAY3B,EAAY5H,IAC9B,OAAOuJ,GAA2B,IAAdA,EAAUtW,KACzBoO,GAAiBkI,EAAW3B,EAAYhI,KACzC,KAxBO6b,CAAc7T,GAQvB,OAAgB,EAAZhR,EAAOvB,MACF,KAEAgM,GAAiBzK,EAAQgR,GA+Df2T,CAAgBD,EAAY1T,GACjD,GAAoB,MAAhB6Q,EAAsB,CACxB,IAAMjB,EAAW5P,EAAYvH,IACvBqb,EAAqBJ,EAAW1kB,QAAUgR,EAAY5H,IAE5D,GAAoB,IAAhB0b,EAAYzoB,KAAyB,CACvC,IAAM8lB,EAAaZ,GAAcuD,EAA0B9T,GACrD8R,EAAQX,EAAWpa,IAEzBwa,GACI3B,EAAUiB,EAAc4C,EAASM,GAFvBjC,EAAM5lB,QAAQ8T,GAEqC8R,EAAOX,EAAWna,WAEjE,IAAhB8c,EAAYzoB,MACI,IAAhByoB,EAAYzoB,KAEdkmB,GAAmB3B,EAAUiB,EAAc4C,EADxBha,GAAiBqa,EAAa9T,IAGjD2P,GAAqBC,GAAYA,EAAS/G,YAAYgI,EAAc4C,GACnC5C,EAAahI,YAAY4K,IAmBhE,SAAAM,GAAqCnqB,EAAekoB,EAAgBkC,GAClE,GAAIpqB,EAAQ,EAAIkoB,EAAMzqB,OAAQ,CAC5B,IAAMwS,EAAOiY,EAAMloB,EAAQ,GACrBqqB,EAAYpa,EAAKzB,IACvB,OAAO6b,EAAU/N,MAAQzM,GAAiBwa,EAAU/N,MAAOrM,GAAQma,EAEnE,OAAOA,EC5iBX,SAAAE,GAAkCtqB,EAAeuqB,GAK/C,IAJA,IAAIC,EAAexqB,EACfqQ,EAAsDka,EAASC,GAC/DC,EAA2CF,EAExC9tB,MAAM8H,QAAQ8L,IACnBoa,EAAUpa,EACVA,EAAYA,EAAU9B,IAGxB,GAgBF,SAAAmc,EAAiCxsB,GAE/B,OAAOzB,MAAM8H,QAAQrG,IAA4D,iBAA3CA,EAAK,IACvCzB,MAAM8H,QAAQrG,EAAK,IAnBnBwsB,CAAiBD,GACnB,OAAOA,EAGP,IAAME,EAAkB3a,GAAShQ,EAAQkP,GAAeqb,GAAUI,gBAMlE,OAJIF,IAAYF,IACdC,EAAejc,IAGVkc,EAAQD,GAAgBG,EA1CnC,SAAAC,EACIrH,EAA0BsH,GAE5B,IAAMriB,EAAUqiB,EAAqBllB,QAKrC,OAJA6C,EAAO,GAAiC+a,EAGxC/a,EAAO,IAAiC,GACjCA,EAmCDoiB,CAAoBva,EAAWsa,GAlEvC,SAAAG,EACIvH,EAA2BwH,EAC3BC,EACAC,GACF,OACE,GACC,MAAO,GAAG,EAAOF,GAAa,MAC/BC,IAAkB,MAClBC,IAAmB,OAClB,EAAG,GACJ1H,GAAW,KACX,KACA,KACA,MAsDIuH,CAA0Bza,GCg6BlC,SAAA6a,GAAkC1iB,EAAyBxI,GAGzD,OAA0C,IAAA,EAAjCwI,EADLxI,GAAK,EAA8CA,EAAK,EAA+BA,IAkH7F,SAAAmrB,GAAyB3iB,EAAyBxI,GAChD,OAAOwI,EAAQxI,EAAK,GAGtB,SAAAorB,GAAwB5iB,EAAyBxI,GAC/C,OAAOwI,EAAQxI,EAAK,GCnjCtB,SAAAqrB,GAAuCva,GACrC,IAAMoH,EAAQpH,EAAM5C,IAOpB,GALAgK,EAAMR,mBAAoB,EAC1BE,IAAqB,IAIhBN,GAAexG,GAAQ,CAC1B,IAAMyF,EAAqBgB,MnB8C/B,SAAA+T,EACIlV,EAAoB8B,EAAc3B,IAC/BA,GAAwC,GAAlBH,EAAYjI,MACrCgI,GAAaC,EAAa8B,EAAMqT,UAAWrT,EAAM5B,WAAYC,GAC7DH,EAAYjI,MAAU,KmBhDtBmd,CAAiBxa,EAAOoH,EAAO3B,GAuiEnC,SAAAiV,EAAqC1a,GACnC,IAAK,IAAIiS,EAAU0F,GAAc3X,GAAoB,OAAZiS,EAAkBA,EAAUA,EAAQ1U,IAI3E,GAAI0U,EAAQtlB,OAASyR,KAA4C,IAA3B6T,EAAQ7V,IAE5C,IADA,IAAMue,EAAY1I,EACTzlB,EAAI,EAAGA,EAAImuB,EAAUte,IAAO1P,OAAQH,IAAK,CAChD,IAAMouB,EAAkBD,EAAUte,IAAO7P,GAGzCquB,GAAuBD,EAAiBA,EAAgBxd,IAAQwd,EAAgB/c,MAhjEpF6c,CAA4B1a,GAuDhC,SAAA8a,EAA+B1T,GAC7B,GAA4B,MAAxBA,EAAM3F,eACR,IAAK,IAAIjV,EAAI,EAAGA,EAAI4a,EAAM3F,eAAe9U,OAAQH,GAAK,EAAG,CACvD,IAAMuuB,EAAkB3T,EAAM3F,eAAejV,GACxB4a,EAAMhI,KAAK2b,GAEnBrZ,sBACTqZ,EAAkB3c,GAAegJ,EAAM3F,eAAejV,EAAI,KA3DhEsuB,CAAsB1T,GAEtB/B,GAAarF,EAAOoH,EAAM4T,aAAc5T,EAAM6T,kBAAmBxV,GAUrE,SAAAyV,EAAgC9T,EAAcqS,GAC5C,GAAIrS,EAAM+T,oBAKR,IAJA,IAAIC,EAAmB3B,EAAS9b,IAAiByJ,EAAMiU,kBAEnDC,GAAyB,EACzBC,GAAuB,EAClB/uB,EAAI,EAAGA,EAAI4a,EAAM+T,oBAAoBxuB,OAAQH,IAAK,CACzD,IAAMgvB,EAAcpU,EAAM+T,oBAAoB3uB,GAC9C,GAA2B,iBAAhBgvB,EACT,GAAIA,GAAe,EAAG,CAGpBD,GAAuBC,EAEvB,IAAMC,EAAiBrU,EAAM+T,sBAAsB3uB,GAGnD8uB,EAFAF,GAAoBze,GAA6B8e,OAOjDL,GAAoBI,OAKF,OAAhBA,IACF/B,EAAS9b,IAAiByd,EAC1BI,EAAW,EACand,GAAgCob,EAAS6B,IAC7DC,IAEND,KAzCJJ,CAAgB9T,EAAOpH,IA6D3B,SAAA0b,EAAgC9P,GAC9B,GAAkB,MAAdA,EACF,IAAK,IAAIpf,EAAI,EAAGA,EAAIof,EAAWjf,OAAQH,KA+pE3C,SAAAmvB,EAA6Bxc,GAC3B,OAAmB,KAAA,GAAXA,EAAK9B,MAzCTse,CAJE1c,EAAWI,GAlnEIuM,EAAWpf,GAgnElB0Z,QAM+B,GAAfjH,EAAS5B,MAgCzC,SAAAue,EAA+BlF,GAE7B,IADA,IAAMmF,EAAiBnF,EAActZ,IAC5B5Q,EAAIkqB,EAAc/pB,OAAQH,EAAIqvB,EAAeC,UAAUnvB,OAAQH,IACtEkqB,EAAclqB,GAAKqvB,EAAeC,UAAUtvB,GAlC5CovB,CAAsB3c,GACtB8c,GAAU9c,EAAUA,EAASpB,MATjC,IAGQoB,EA/qENyc,CAAuBtU,EAAMwE,YAkE/B,SAAAoQ,GACIC,EAA2B7U,EAAc1P,EAAmB3E,EAC5DmpB,EAA2ChH,EAC3C+E,EAA8BxnB,GAChC,IAAMuN,EAAQoH,EAAM0U,UAAUjnB,QAW9B,OAVAmL,EAAM3C,IAAc,GAALtK,EAEfiN,EAAM1C,IAAU0C,EAAM7B,IAAoB8d,EAC1Cjc,EAAMnC,IAAWnG,EACjBsI,EAAMlC,IAAqBoe,GAAmBD,GAAeA,EAAYne,IAEzEkC,EAAMjC,IAAamX,GAAY+G,GAAeA,EAAYle,IAE1DiC,EAAMhC,IAAaic,GAAagC,GAAeA,EAAYje,KAAc,KACzEgC,EAAM7L,IAAmB1B,GAAYwpB,GAAeA,EAAY9nB,KAAa,KACtE6L,EA4BT,SAAAmc,GACIjtB,EAAeyB,EAAiBsa,EAA4Cjd,EAC5EouB,GAEF,IAAMpc,EAAQkG,KACRkB,EAAQpH,EAAM5C,IACdif,EAAgBntB,EAAQkP,GAG9B4B,EAAMqc,GAAiBpR,EAEvB,IAAIjM,EAAQoI,EAAMhI,KAAKid,GACV,MAATrd,IAEFA,EAAQoI,EAAMhI,KAAKid,GAAiBC,GAAYtc,EAAOrP,EAAM0rB,EAAeruB,EAAMouB,EAAO,OAM3F,IAAMrX,EAAwBoB,KACxBnB,EAAWsB,KAiBjB,OAhBIvB,KACEC,GAA2C,MAA/BD,EAAsByG,OAChB,OAAjBxM,EAAM1K,QAA6C,IAA1ByQ,EAAsBpU,KAGxCqU,IACVD,EAAsB5X,KAAO6R,GAF7B+F,EAAsByG,MAAQxM,GAMV,MAApBoI,EAAMkE,aACRlE,EAAMkE,WAAatM,GAGrBoH,GAAyBpH,GACzBuH,IAAY,GACLvH,EAIT,SAAAud,GAA+BrtB,EAAeiQ,GAO5C,OAJwB,MAApBA,EAAK/B,IAAO4P,OACd7N,EAAK/B,IAAO4P,KAAOsP,GAAYnd,EAAI,EAAkBjQ,EAAO,KAAM,KAAM,OAGnEiQ,EAAKzB,IAAayB,EAAK/B,IAAO4P,KAqGvC,SAAA6N,GAA0C2B,EAAqBpV,EAAc1P,GAC3E,IAEIwP,EAFEuV,EAAYnW,KACZoW,EAAyBvW,KAE/B,GAAuB,IAAnBqW,EAAanf,IAEfsf,GvBlMJ,SAAAC,EAA+BC,GAI7B,OAbF,SAAAC,EAA4Bjd,GAG1B,IADA,IAAIG,EAAQrU,MAAM8H,QAAQoM,GAAWA,EAAmBE,GAAiBF,GAClEG,KAAuB,IAAZA,EAAM3C,MACtB2C,EAAQA,EAAM1C,IAEhB,OAAO0C,EAIU8c,CAAYD,GAGbhf,IuB8LE+e,CAAeJ,SAE/B,IACEjW,IAAY,GACZH,GAAyB,MAEzBc,EAAUH,GAAUyV,EAAcA,EAAa9e,KAC/Cqf,KACA3V,EAAM1H,SAAWsd,GAAeR,GAAe9kB,GAK/C8kB,EAAapf,IAAOwJ,mBAAoB,EACxCE,IAAqB,GAErByT,GAAuBiC,WAEvBrV,GAAUD,GACVX,GAAYkW,GACZrW,GAAyBsW,IAmB/B,SAAAO,GACIhe,EAAiBvH,EAAYwlB,GAC/B,IAAMhB,EAAkBjd,EAASnB,IAC3BoJ,EAAUH,GAAU9H,EAAUA,EAASvB,KACvCyf,GAAuB1W,KAC7B,IACM0W,GAAuBjB,EAAgBkB,OACzClB,EAAgBkB,QAGd5W,GAAevH,KAEbie,IACFH,KACAG,EAAU,EAAqBxlB,IAGjC6iB,GAAuBtb,GACvBA,EAAS5B,MAAU,GAIrB6f,GAAcA,EAAU,EAAqBxlB,GAC7C6iB,GAAuBtb,WAEnBke,GAAuBjB,EAAgBmB,KACzCnB,EAAgBmB,MAElBlW,GAAUD,IASd,SAAA8V,GAAwB7d,GACtB,OAAOqH,GAAerH,GAAK,EAAA,EAO7B,IAAIme,GAAiC,KAUrC,SAAAP,KACEO,GAAoB,KAgQtB,SAAAC,GACIC,EAAmBN,EAA0C7b,EAAgBC,EAC7EqC,EAA8CG,EAC9CZ,GAEF,IAAMqE,EAAoBnJ,GAAgBiD,EAIpCoc,EAAoBlW,EAAoBjG,EACxCwa,EA8BR,SAAA4B,EAA6BnW,EAA2BkW,GACtD,IAAM3B,EAAY,IAAInwB,MAAM8xB,GACLpiB,KAAK,KAAM,EAAGkM,GACdlM,KAAK2Z,GAAWzN,GAGvC,OAFAuU,EAAU5d,KAAoB,EAC9B4d,EAAUne,IAAiB4J,EACpBuU,EApCW4B,CAAoBnW,EAAmBkW,GACzD,OAAO3B,EAAU1e,KACfkG,GAAIka,EACJ1B,UAAWA,EACXpc,SAAUwd,EACVha,UAAWA,EACX8J,KAAM,KACN5N,KAAM0c,EAAUjnB,QAChB+iB,YAAa,EACbrQ,kBAAmBA,EACnB8T,kBAAmBoC,EACnBtC,oBAAqB,KACrBvU,mBAAmB,EACnB+W,aAAc,KACdlD,UAAW,KACXjV,WAAY,KACZwV,aAAc,KACdC,kBAAmB,KACnB5T,UAAW,KACXC,eAAgB,KAChBmD,aAAc,KACd8N,QAAS,KACT9W,eAAgB,KAChBmK,WAAY,KACZgS,kBAAyC,mBAAfja,EAA4BA,IAAeA,EACrEka,aAA+B,mBAAV/Z,EAAuBA,IAAUA,EACtDwH,WAAY,MAsZhB,SAAAgR,GACItc,EAAcrP,EAAiB0rB,EAAuB1J,EACtDyJ,EAA2B0B,GAC7B,IAAM/Y,EAAwBoB,KAExB7R,EACFgS,KAAgBvB,EAAwBA,GAAyBA,EAAsBzQ,OAKrFypB,EADmBzpB,GAAU0L,GAAS1L,IAAW0L,EAAMtC,IAC1BpJ,EAA0C,KAE7E,OACE3D,KAAMA,EACNzB,MAAOmtB,EACPpU,cAAe8V,EAAUA,EAAQ9V,eAAiB,EAClD4B,gBAAiB,EACjBG,cAAe,EACfjX,MAAO,EACP0W,gBAAiB,EACjBkJ,QAASA,EACTyJ,MAAOA,EACP4B,WAAY,KACZC,mBAAe5tB,EACfsR,YAAQtR,EACRuR,aAASvR,EACTytB,OAAQA,EACR3wB,KAAM,KACNqe,MAAO,KACPlX,OAAQypB,EACRvG,SAAU,KACVqC,gBAAiB,KACjBjD,WAAY,MA8xChB,SAAAsH,GACIle,EAAcme,EAA2BhG,GAC3C,IAAM/Q,EAAQpH,EAAM5C,IACdwJ,EAAoBC,KAO1B,OANI7G,EAAM/B,IACR+B,EAAM/B,IAAQV,IAAQ4a,EACbvR,IACTQ,EAAMwQ,WAAauG,GAErBne,EAAM/B,IAAQka,EACPA,EAsGT,SAAAwE,GAAyByB,GACvB,IAAK,IAAI5xB,EAAI,EAAGA,EAAI4xB,EAAYxS,WAAWjf,OAAQH,IAAK,CACtD,IAAM6xB,EAAgBD,EAAYxS,WAAWpf,GAC7CywB,GAA0Bld,GAAiBse,GAAkBA,IAsBjE,SAAAC,GAAyCnf,EAAazH,GACpD,IAAMwkB,EAAkB/c,EAAKrB,IAEzBoe,EAAgBkB,OAAOlB,EAAgBkB,QAEvC5W,GAAerH,IACjB4c,GAAU5c,EAAMzH,GAElBqkB,GAAU5c,EAAMzH,GAEZwkB,EAAgBmB,KAAKnB,EAAgBmB,MAQ3C,SAAAkB,GAAwCve,GACtC2c,GAAgB3c,EAAMnC,KAsCxB,SAAAke,GAA6B9c,EAAiBiM,GAC5C,IAAMsT,EAAYvf,EAAS7B,IACrB8J,EAAUH,GAAU9H,EAAUA,EAASvB,KACvCwf,EAAasB,EAAU9e,SACvBwD,EAAYsb,EAAUtb,UAE5B,IACE6Z,KAUJ,SAAA0B,EAA4Bvb,EAAqC/D,EAAa+L,GACxEhI,GAAasD,GAAerH,IAC9B+D,EAAS,EAAqBgI,GAX9BuT,CAAgBvb,EAAWjE,EAAUiM,GACrCgS,EAAWF,GAAe/d,GAAWiM,GACrCqP,GAAuBtb,GAa3B,SAAAyf,EAA4Bxb,EAAqC/D,EAAa+L,GACxEhI,IAAcsD,GAAerH,IAC/B+D,EAAS,EAAqBgI,GAd9BwT,CAAgBxb,EAAWjE,EAAUiM,WAErC/D,GAAUD,IAuSd,SAAAyX,GACInvB,EAAmCuD,GAErC,YAFqC,IAAAA,IAAAA,EAAQnD,EAAYoD,SACzDxD,EAAQqC,EAAkBrC,GACnB2Y,GACHhC,KACAD,KAAY1W,EAAOuD,GA8BlB,IAAM6rB,GA95FUC,QAAQC,QAAQ,MC+JvC,SAAAC,GACIC,EAA0CC,GAC5C,OACErT,cACAoT,UAAWA,GAAate,GACxBwe,MAAON,GACPK,cAAeA,GAAiB,KAChClsB,MAAK,GAiBT,SAAAosB,GAAsCjU,EAAgB7S,GACpD,IAAM+mB,EAAYrf,GAAiBmL,GAAa9N,IAC1CiiB,EAAWD,EAAUhgB,KAAKzS,OAAS,GpB7M3C,SAAA2yB,EACIzZ,EAAwB0Z,EAAiCnY,GAIpD,IAAAtF,EAAAyd,EAAAzd,UAAWE,EAAAud,EAAAvd,OAAQE,EAAAqd,EAAArd,QAEtBJ,KACDsF,EAAMqT,YAAcrT,EAAMqT,eAAiB/sB,MAAMmY,EAAgB/D,IACjEsF,EAAM5B,aAAe4B,EAAM5B,gBAAkB9X,MAAMmY,EAAgB/D,IAGlEE,IACDoF,EAAMqT,YAAcrT,EAAMqT,eAAiB/sB,KAAKmY,EAAgB7D,GAG/DE,KACDkF,EAAMqT,YAAcrT,EAAMqT,eAAiB/sB,KAAKmY,EAAgB3D,IAChEkF,EAAM5B,aAAe4B,EAAM5B,gBAAkB9X,KAAKmY,EAAgB3D,KoB6LrEod,CAAsBD,EAAUhnB,EAAK+mB,GpBtKvC,SAAAI,EAAuCpY,EAAcpI,GACnD,GAAIoI,EAAMR,kBAIR,IAAK,IAAIpa,EAAIwS,EAAM6K,eAAgBwT,EAAMre,EAAMgL,aAAcxd,EAAI6wB,EAAK7wB,IAAK,CACzE,IAAM+yB,EAAenY,EAAMhI,KAAK5S,GAC5B+yB,EAAand,mBACdgF,EAAM4T,eAAiB5T,EAAM4T,kBAAoBttB,KAAKlB,EAAG+yB,EAAand,kBAGrEmd,EAAajd,uBACd8E,EAAM4T,eAAiB5T,EAAM4T,kBAAoBttB,KAAKlB,EAAG+yB,EAAajd,sBACtE8E,EAAM6T,oBAAsB7T,EAAM6T,uBAC9BvtB,KAAKlB,EAAG+yB,EAAajd,sBAGxBid,EAAa/c,gBACd4E,EAAMC,YAAcD,EAAMC,eAAiB3Z,KAAKlB,EAAG+yB,EAAa/c,eAG/D+c,EAAa7c,oBACd0E,EAAMC,YAAcD,EAAMC,eAAiB3Z,KAAKlB,EAAG+yB,EAAa7c,mBAChE0E,EAAME,iBAAmBF,EAAME,oBAC3B5Z,KAAKlB,EAAG+yB,EAAa7c,mBAGE,MAA1B6c,EAAa7mB,YACd0O,EAAMqD,eAAiBrD,EAAMqD,kBAAoB/c,KAAKlB,EAAG+yB,EAAa7mB,YoB6I7E8mB,CACIJ,GAAavV,eAAgBwV,EAAUrV,aAAcqV,EAAW,IC5NtE,ICoBII,GAoBAC,GAsEAC,GD9GJC,GAAA,SAAAA,OAiDAC,GAAA,SAAAA,OE3CAC,GAAA,WAAA,SAAAA,KAIA,OAHEA,EAAA5zB,UAAA6zB,wBAAA,SAA2B7U,GACzB,iBAhBoCA,GACtC,IAAMvd,EAAQqC,MACV,kCAAkCiB,EAAUia,GAAU,kDAE1D,OADCvd,EAA6B,YAAIud,EAC3Bvd,EAYCqyB,CAAwB9U,IAElC4U,EAJA,GASAG,GAAA,WAAA,SAAAA,KAGA,OAFSA,EAAAzrB,KAAiC,IAAIsrB,GAE9CG,EAHA,GA6BAC,GAAA,SAAAC,GAOE,SAAAD,EAAoB9vB,EAAsC6J,GAA1D,IAAA1B,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YADWuM,EAAAnI,QAAAA,EAAsCmI,EAAA0B,SAAAA,EAExD1B,EAAK6nB,SAAWhwB,EAAQgwB,SACxB7nB,EAAK8nB,cAAgBjwB,EAAQiwB,cAC7B9nB,EAAKgJ,mBAAqBnR,EAAQmR,mBAClChJ,EAAKoJ,OAASvR,EAAQuR,OACtBpJ,EAAKqJ,QAAUxR,EAAQwR,UAS3B,OAtBsD0e,EAAAA,EAAAA,GAgBpDJ,EAAAh0B,UAAAC,OAAA,SACIsG,EAAoB8tB,EAA4BC,EAChDvmB,GACF,OAAOjO,KAAKoE,QAAQjE,OAChBsG,EAAU8tB,EAAkBC,EAAoBvmB,GAAYjO,KAAKiO,WAEzEimB,EAtBA,CAAsDL,IC7CtDY,GAAA,SAAAA,OAqCAC,GAAA,SAAAA,OChCAC,GAAA,WAuBE,SAAAA,EAAY5V,EAAuB6V,EAA0BC,GAA1B70B,KAAA40B,SAAAA,EAA0B50B,KAAA60B,gBAAAA,EArBrD70B,KAAA80B,QAA+B,KAC/B90B,KAAA+0B,kBAAsD,KAKvD/0B,KAAAg1B,WAA6B,KAgBlCh1B,KAAK+e,OAASA,EAkOlB,OA3OEvf,OAAA4D,eAAIuxB,EAAAz0B,UAAA,iBAAJ,WACE,OAAyB,MAArBF,KAAK+e,OAAOtN,IAuPpB,SAAAwjB,EAA4BjhB,EAAcoZ,EAAoB8H,GAG5D,IAFA,IAAIC,EAAa/H,EAAY5N,MAEtB2V,GACLD,EAAOxzB,KAAKqR,GAAiBoiB,EAAYnhB,IACtB,IAAfmhB,EAAWxwB,MACbswB,EAAmBjhB,EAAOmhB,EAAYD,GAExCC,EAAaA,EAAWh0B,KAG1B,OAAO+zB,EAhQID,CAAmBj1B,KAAK+e,OADjB/e,KAAK+e,OAAOrN,4CAU9BlS,OAAA4D,eAAIuxB,EAAAz0B,UAAA,eAAJ,WAAmB,OAAOF,KAAK40B,SAAW50B,KAAK40B,SAAW50B,KAAKo1B,kDAE/D51B,OAAA4D,eAAIuxB,EAAAz0B,UAAA,iBAAJ,WACE,OAA0B,KAAA,GAAlBF,KAAK+e,OAAO1N,sCAGtBsjB,EAAAz0B,UAAAmN,QAAA,WACE,GAAIrN,KAAK80B,QACP90B,KAAK80B,QAAQxJ,WAAWtrB,WACnB,GAAIA,KAAK+0B,kBAAmB,CACjC,IAAM7xB,EAAQlD,KAAK+0B,kBAAkBvvB,QAAQxF,MAEzCkD,GAAS,GACXlD,KAAK+0B,kBAAkBM,OAAOnyB,GAGhClD,KAAK+0B,kBAAoB,KAE3BlJ,GAAa7rB,KAAK+e,SAGpB4V,EAAAz0B,UAAAwM,UAAA,SAAU4oB,INs4BZ,SAAAC,EAA+BpiB,EAAa0Z,IA4hE5C,SAAA2I,EAAoBriB,GAElB,OAAOA,EAAKvB,MAAauB,EAAKvB,SA7hE9B4jB,CAAWriB,GAAMzR,KAAKmrB,GAElB1Z,EAAK/B,IAAOwJ,mBA8hElB,SAAA6a,EAAyBtiB,GACvB,OAAOA,EAAK/B,IAAOmb,UAAYpZ,EAAK/B,IAAOmb,YA9hEzCkJ,CAAgBtiB,GAAMzR,KAAKyR,EAAKvB,IAAWjR,OAAS,EAAG,MM14BzB40B,CAAev1B,KAAK+e,OAAQuW,IAoC5DX,EAAAz0B,UAAAw1B,aAAA,YNy3EF,SAAAC,EAA8B3hB,GAC5B,KAAOA,KAAuB,IAAZA,EAAM3C,MACtB2C,EAAM3C,KAAM,EACZ2C,EAAQA,EAAM1C,IAEhB0C,EAAM3C,KAAM,EM93EWskB,CAAc31B,KAAK+e,SAuD1C4V,EAAAz0B,UAAAm1B,OAAA,WAAiBr1B,KAAK+e,OAAO1N,MAAU,IA0DvCsjB,EAAAz0B,UAAA01B,SAAA,WAAmB51B,KAAK+e,OAAO1N,KAAM,IAuBrCsjB,EAAAz0B,UAAA21B,cAAA,WAAwBvD,GAAsBtyB,KAAK+e,OAAQ/e,KAAK0L,UAQhEipB,EAAAz0B,UAAA41B,eAAA,YNg2EF,SAAAA,EAAkC5W,GAChCxE,IAAsB,GACtB,KApCF,SAAAmb,EAAiC3W,GAE/BoT,GjBv6EF,SAAAyD,EAA2CrW,GACzC,IACIvM,EADAa,EAAQF,GAAgB4L,GAG5B,GAAI/f,MAAM8H,QAAQuM,GAAQ,CACxB,IAAMV,EAAYmM,GAAiBzL,EAAO0L,IAEpChU,EAAUsT,GAAehL,EAAOV,GADtCH,EAAOE,GAAwBC,EAAWU,IACYvC,MAC9CyN,UAAYQ,EACpBN,GAAgBM,EAAmBhU,GACnC0T,GAAgB1T,EAAQuT,OAAQvT,OAC3B,CACL,IAAMA,EACNyH,EAAOE,IADD3H,EAAUsI,GACuBV,UAAW5H,EAAQsI,OAE5D,OAAOb,EiBu5EM4iB,CAA2B7W,GACTA,GAmC7B2W,CAAc3W,WAEdxE,IAAsB,IMr2ECob,CAAe91B,KAAK0L,UAE7CipB,EAAAz0B,UAAA81B,yBAAA,SAAyBC,GACvB,GAAIj2B,KAAK80B,QACP,MAAM,IAAI9wB,MAAM,iEAElBhE,KAAK+0B,kBAAoBkB,GAG3BtB,EAAAz0B,UAAAg2B,iBAAA,WAAqBl2B,KAAK80B,QAAU,MAEpCH,EAAAz0B,UAAAi2B,eAAA,SAAeC,GACb,GAAIp2B,KAAK+0B,kBACP,MAAM,IAAI/wB,MAAM,qDAElBhE,KAAK80B,QAAUsB,GAGTzB,EAAAz0B,UAAAk1B,eAAR,WACE,OAAOp1B,KAAK40B,SACDviB,GAAgCrS,KAAK+e,OAAOzN,IAAUtR,KAAK60B,mBAE1EF,EA1PA,GA6PA0B,GAAA,SAAAlC,GACE,SAAAkC,EAAmBC,GAAnB,IAAA/pB,EAAmC4nB,EAAAvzB,KAAAZ,KAAMs2B,EAAO,MAAO,IAAEt2B,YAAtCuM,EAAA+pB,MAAAA,IAOrB,OARoChC,EAAAA,EAAAA,GAGlC+B,EAAAn2B,UAAA21B,cAAA,WAAwBtD,GAAwBvyB,KAAKs2B,QAErDD,EAAAn2B,UAAA41B,eAAA,YNo1EF,SAAAS,EAAyCviB,GACvC0G,IAAsB,GACtB,IACE6X,GAAwBve,WAExB0G,IAAsB,IMz1EC6b,CAAyBv2B,KAAKs2B,QAEvD92B,OAAA4D,eAAIizB,EAAAn2B,UAAA,eAAJ,WAAmB,OAAO,sCAC5Bm2B,EARA,CAAoC1B,IHnOpC,SAAA6B,GACIC,EAA+CzjB,EAC/CG,GAKF,OAJKsgB,KAEHA,GAAY,SAAAU,GAAG,SAAAuC,mDAA2C,OAAjBpC,EAAAA,EAAAA,GAAiBoC,EAA9C,CAA6BD,IAEpC,IAAIhD,GAAa1gB,GAAiBC,EAAOG,IIlClD,IAAAwjB,GAAA,WAwBE,SAAAA,EAAYC,GAAoB52B,KAAK42B,cAAgBA,EAOvD,OADSD,EAAA3uB,kBAAsC,WAAM,OAAA6uB,GAA2BF,IAChFA,EA/BA,GAmCME,GJvBN,SAAAC,GAAiCL,GAE/B,OAAOD,GAAiBC,EAAiBtc,KAA4BD,OKwHvE6c,GAAA,SAAAA,OA2BYC,GAAZ,SAAYA,UAIVA,EAAAA,EAAA,UAAA,GAAA,YAIAA,EAAAA,EAAA,SAAA,GAAA,WARUA,EAAZ,KA0BAC,GAAA,WAAA,SAAAA,KAwKA,OADSA,EAAAjvB,kBAAqC,WAAM,OAAAkvB,MACpDD,EAxKA,GA6KMC,GLtBN,SAAAC,KACE,OAXF,SAAAC,EAA8BjkB,GAC5B,IAAM+V,EAAW/V,EAAKpB,IACtB,GAAIkX,GAAqBC,GACvB,OAAOA,EAEP,MAAM,IAAIllB,MAAM,gEAMXozB,CAAqBld,OMjVjBmd,GAAU,IAVrB,SAAAC,GAAmBC,GAAAv3B,KAAAu3B,KAAAA,EACjBv3B,KAAKw3B,MAAQD,EAAKzS,MAAM,KAAK,GAC7B9kB,KAAKy3B,MAAQF,EAAKzS,MAAM,KAAK,GAC7B9kB,KAAK03B,MAAQH,EAAKzS,MAAM,KAAKjc,MAAM,GAAG1D,KAAK,KAOxB,CAAY,qBCQnCwyB,GAAA,SAAAxD,GAIE,SAAAyD,EAAoB3pB,GAApB,IAAA1B,EAA8D4nB,EAAAvzB,KAAAZ,OAAOA,YAAjDuM,EAAA0B,SAAAA,IAOtB,OAX8CqmB,EAAAA,EAAAA,GAM5CL,EAAAA,UAAAA,wBAAA,SAA2B/U,GAEzB,IAAM2Y,EAAe3f,GAAgBgH,GACrC,OAAO,IAAI2U,GAAiBgE,EAAc73B,KAAKiO,WAEnD2pB,EAXA,CAA8CE,IAa9C,SAAAC,GAAoB7yB,GAClB,IAAM8yB,KACN,IAAK,IAAIC,KAAe/yB,EAClBA,EAAIrF,eAAeo4B,IAErBD,EAAMt2B,MAAMe,SADKyC,EAAI+yB,GACWC,aAAcD,IAGlD,OAAOD,EAMF,IAAMG,GAAe,IAAIrwB,EAC5B,sBACC3D,WAAY,OAAQC,QAAS,WAAM,OAAA2uB,GAAkBjsB,EAAOsxB,QAMpDA,GAAY,IAAItwB,EAA2C,mBACtE3D,WAAY,OACZC,QAAS,WAAM,OAAAsQ,MAGX2jB,MAyBNC,GAAA,SAAAnE,GAiBE,SAAAoE,EACYV,EAAyC5pB,GADrD,IAAA1B,EAEE4nB,EAAAvzB,KAAAZ,OAAOA,YADGuM,EAAAsrB,aAAAA,EAAyCtrB,EAAA0B,SAAAA,EAEnD1B,EAAK8nB,cAAgBwD,EAAalzB,KAClC4H,EAAK6nB,SAAWyD,EAAa5gB,UAAU,GAAG,GAG1C1K,EAAKgJ,mBACDsiB,EAAatiB,mBAAkB3T,GAAI,KAAQi2B,EAAatiB,yBAyGhE,OAlIyC+e,EAAAA,EAAAA,GAKvC90B,OAAA4D,eAAIywB,EAAAA,UAAAA,cAAJ,WACE,OAAOkE,GAAW/3B,KAAK63B,aAAaliB,yCAGtCnW,OAAA4D,eAAIywB,EAAAA,UAAAA,eAAJ,WACE,OAAOkE,GAAW/3B,KAAK63B,aAAajiB,0CAkBtCie,EAAAA,UAAAA,OAAA,SACIptB,EAAoB8tB,EAAsCC,EAC1DvmB,GACF,IAAMuqB,OAA4Cn0B,IAAvBmwB,EAGrBiE,GAFNxqB,EAAWA,GAAYjO,KAAKiO,UAvDhC,SAAAyqB,EAA+BD,EAA4Bvb,GACzD,OACE/V,IAAK,SAAI3D,EAAmC4D,GAC1C,IAAMhG,EAAQq3B,EAAiBtxB,IAAI3D,EAAO60B,IAE1C,OAAIj3B,IAAUi3B,IACVjxB,IAAkBixB,GAMbj3B,EAGF8b,EAAe/V,IAAI3D,EAAO4D,KA2CpBsxB,CAAsBjyB,EAAUwH,EAASxH,UAAYA,EAE9DypB,EACFuI,EAAiBtxB,IAAI4vB,GAAkB5N,IACrC8E,EAAYwK,EAAiBtxB,IAAIygB,GAAW,MAE5C+Q,EAAYH,EV4ctB,SAAAI,EAA8B52B,EAAc62B,GAC1C,IACMC,EAAgBD,GAAsB3e,KAAWnI,IAWvD,OATIkX,GAAqB6P,GACdA,EAAc5W,cAAclgB,EAAMsvB,IAEjB,OAAtBA,GACOwH,EAAc5W,cAAclgB,GAE5B82B,EAAcC,gBAAgBzH,GAAmBtvB,GUrdxD42B,CAAc54B,KAAKo0B,SAAUlE,EAAgB9G,eAAe,KAAMppB,KAAK63B,eV6rB/E,SAAAmB,EACI50B,EAA2B60B,GAC7B,IAAMC,EAAkB90B,EAAQglB,eAAe,KAAM,MAarD,MAZ2C,iBAAtB6P,EAChBhQ,GAAqBiQ,GACjBA,EAAgBC,kBAAkBF,GAClCC,EAAgB7W,cAAc4W,GACnCA,EUnsBED,CAAkB9I,EAAiBsE,GAEjC4E,EAAYp5B,KAAK63B,aAAajhB,OAAS,IACA,IACvCwb,EACDoG,EAA0DzF,KAArC0F,EAAiBtxB,IAAIgxB,IAEzCjP,EAAWgH,EAAgB9G,eAAeuP,EAAW34B,KAAK63B,cAE5DrD,GAAsBmE,IAExB1P,GAAqBC,GACjBA,EAASmQ,aAAaV,EAAW,aAActB,GAAQE,MACvDoB,EAAUU,aAAa,aAAchC,GAAQE,OAInD,IAOIrY,EACAoa,EAREC,EAAYvJ,GACd,KAAMuB,IAAa,EAAG,KAAM,EAAG,EAAG,KAAM,KAAM,MAAOa,EAAagH,EAClElJ,EAAiBhH,EAAU+E,EAAWwK,GAGpCe,EAAWze,GAAUwe,EAAW,MAItC,IACMrJ,EAAgBkB,OAAOlB,EAAgBkB,QAE3C,IAAM1G,ETfZ,SAAA+O,EACIC,EAAwBrtB,EAAwB0f,EAChDmE,EAAmChH,EAAqB+E,IrBgJ5D,SAAA0L,IACE3gB,IAAW,EACXD,GAAwB,KqBjJxB4gB,GACA,IAAMve,EAAQ2Q,EAAS3a,IACjBsZ,EAAgBsF,GAClBjE,EDmgBN,SAAA6N,EACI1I,EAAoC7b,EAAgBC,EACpDqC,EAA8CG,EAC9CZ,GAQF,OAAOga,EAAW2I,gBACb3I,EAAW2I,cACPtI,IAAa,EAAGL,EAAY7b,EAAQC,EAAMqC,EAAYG,EAAOZ,IC/gBlE0iB,CACIvtB,EAAIqH,SAAUrH,EAAIgJ,OAAQhJ,EAAIiJ,KAAMjJ,EAAI0K,cAAe1K,EAAI2K,SAAU3K,EAAI6K,WAC7E,KAAM7K,EAAIuK,OAAM,EAAA,EAA8CsZ,EAAiBhH,EAC/E+E,GACEjb,EAAQmd,GAAkB,EAAC,EAAqBuJ,EAAO,KAAM,MAYnE,OAVIte,EAAMR,oBnByDZ,SAAAkf,EACI7d,EAAuB9I,EAAa3P,IA1IxC,SAAAu2B,EACI9d,EAAuBb,EAAczW,GAEvC,IAAI2S,EACgB,iBAAT3S,EAAqBA,EAAasL,IAAiBtL,EAAK2X,WAAW,IAAM,EAI1E,MAANhF,IACFA,EAAM3S,EAAasL,IAAiB4L,MAKtC,IAAMme,EAAW1iB,EAAKqE,GAKhBse,EAAO,GAAKD,EAKZrb,EAAgB,GAAXqb,EACLpb,EAAgB,GAAXob,EACL5b,EAAQhD,EAAMhI,KAHE,IAAX4mB,EAMTrb,EAAMC,EAAMR,EAAMnC,EAAgB,IAAMge,EAAS7b,EAAMnC,EAAgB,IAAMge,EACvErb,EAAMR,EAAMnC,EAAgB,IAAMge,EAAS7b,EAAMnC,EAAgB,IAAMge,EAE7Etb,EAAMC,EAAMR,EAAMnC,EAAgB,IAAMge,EAAS7b,EAAMnC,EAAgB,IAAMge,EACvErb,EAAMR,EAAMnC,EAAgB,IAAMge,EAAS7b,EAAMnC,IAAkBge,EA0G3EF,CAAS9d,EAAe9I,EAAK/B,IAAQ5N,GmB1DnCs2B,CnBrCJ,SAAAI,EACIlnB,EAA8DC,GAChE,IAAMknB,EAAwBne,GAAiBhJ,EAAOC,GACtD,IAA+B,IAA3BknB,EACF,OAAOA,EAGT,IAAM/e,EAAQnI,EAAS7B,IACnBgK,EAAMR,oBACR5H,EAAMiJ,cAAgBhJ,EAAStS,OAC/Bmb,GAAYV,EAAMhI,KAAMJ,GACxB8I,GAAY7I,EAAU,MACtB6I,GAAYV,EAAM0U,UAAW,OAO/B,IAAMsK,EAAYle,GAA0BlJ,EAAOC,GAC7ConB,EAAclmB,GAAuBimB,GACrCnK,EAAc5b,GAAsB+lB,EAAWnnB,GAE/CgJ,EAAgBjJ,EAAMiJ,cAI5B,GAAIhI,GAAkBmmB,GAIpB,IAHA,IAAME,EAAarK,EAAY7e,IAAOgC,KAG7B5S,EAAI,EAAGA,EAAI,EAAGA,IACrByS,EAASgJ,EAAgBzb,GAAKyvB,EAAYoK,EAAc75B,GAAK85B,EAAWD,EAAc75B,GAK1F,OADAyS,EAASgJ,EAAgBvL,IAAmB0pB,EACrCne,EmBAcie,CAA+BlnB,EAAO+Y,GAAWA,EAAU1f,EAAI1H,MAClFqO,EAAMjM,MAAK,EDgoDf,SAAAwzB,EAA8BvnB,EAAc9P,EAAes3B,GAWzDxnB,EAAMjM,MAAa,EATLiM,EAAMjM,MAUpBiM,EAAM6K,eAAiB3a,EACvB8P,EAAMgL,aAAe9a,EAAQs3B,EAC7BxnB,EAAMyK,gBAAkBva,EC7oDtBq3B,CAAcvnB,EAAO+Y,EAASprB,OAAQ,GD2jD1C,SAAA85B,EAA4C1hB,GAG1C,IAAMqC,EAAQlB,KAAW9I,KACxBgK,EAAMwE,aAAexE,EAAMwE,gBAAkBle,KAAKqX,EAAsB7V,OC9jDvEu3B,CAA4BznB,IAI9B0X,EAAcjZ,IAAQsa,EAAS3Z,IAC/BsY,EAAchZ,IAAasB,EACpB+Y,EAAS3Z,IAAiBsY,ESRP+O,CAClBd,EAAW34B,KAAK63B,aAAc0B,EAAWrJ,EAAiBhH,GAM9D,GAJAoQ,EAAepmB,GAAS,EAAGqmB,GAIvBhF,EAIF,IAHA,IAAIrxB,EAAQ,EACNkY,EAAQme,EAAUnoB,IAClBwZ,EAAsB0O,EAAa1O,cAChCpqB,EAAI,EAAGA,EAAI+zB,EAAiB5zB,OAAQH,IAAK,CAIhD,IAHA,IAAMk6B,EAAWnG,EAAiB/zB,GAC9Bm6B,EAAyB,KACzBC,EAA4B,KACvBlzB,EAAI,EAAGA,EAAIgzB,EAAS/5B,OAAQ+G,IAAK,CACpC0T,EAAMR,oBAKRQ,EAAMiU,oBACNjU,EAAM0U,UAAUzE,SAASnoB,EAAQkP,GAAe,EAAG,MACnDgJ,EAAMhI,KAAKiY,OAAOnoB,EAAQkP,GAAe,EAAG,MAC5CmnB,EAAUlO,OAAOnoB,EAAQkP,GAAe,EAAG,OAE7C,IAAMY,EACFmd,GAAkBjtB,EAAK,EAAqBw3B,EAAShzB,GAAgB,KAAM,MAC/EkzB,EAAiBA,EAAcz5B,KAAO6R,EAAU2nB,EAAa3nB,EAC7D4nB,EAAgB5nB,EAElB4X,EAAWlpB,KAAKi5B,GAOpBzb,ETvBN,SAAA2b,EACInQ,EAAsBmN,EAA+B9L,EAAiBqG,EACtE0I,GACF,IAAM1f,EAAQ2Q,EAAS3a,IAEjB8N,EDg1CR,SAAA6b,EACI3f,EAAcqS,EAAiBphB,GACjC,IAAMyI,EAAYqF,KACdiB,EAAMR,oBACJvO,EAAI+I,mBAAmB/I,EAAI+I,kBAAkB/I,GAqGrD,SAAA2uB,EACI5f,EAAcpI,EAAcioB,GAK9B,IAAMC,IAAiBloB,EAAM9P,MAAQkP,IAE/Bqd,EAAgBrU,EAAMhI,KAAKzS,QADe,MAArBqS,EAAMyK,kBAEhCrC,EAAM+T,sBAAwB/T,EAAM+T,yBAChCztB,KAAKw5B,EAAczL,EAAewL,GA9GrCD,CAAgC5f,EAAOtG,EAAW,GAwStD,SAAAqmB,EACI/f,EAAcqS,EAAiBphB,EAC/B+uB,GACFhgB,EAAMhI,KAAK1R,KAAK2K,GAChB,IAAMgvB,EACF,IAAI9rB,GAAoB6rB,EAAkB3nB,GAAepH,IAAM,EAAO,MAC1E+O,EAAM0U,UAAUpuB,KAAK25B,GACrB5N,EAAS/rB,KAAK25B,GA9SZF,CAAqB/f,EAAOqS,EAAUphB,EAAKA,EAAIjI,UAEjD,IAAM6V,EACFkE,GAAkB/C,EAAMhI,KAAMqa,EAAUA,EAAS9sB,OAAS,EAAGmU,GAEjE,OAwJF,SAAAwmB,EACItnB,EAAc+E,EAA8BkB,EAAc5N,GAC5D,IAAM4S,EAASlM,GAAiBgG,EAAuB/E,GAOvDoL,GAAgBnF,EAAWjG,GACvBiL,GACFG,GAAgBH,EAAQjL,GApK1BsnB,CAAyB7N,EAAU3Y,EAAWmF,GACvCA,EC31CW8gB,CAAyB3f,EAAO2Q,EAAU8L,GAO5D,GALAzF,EAAYxS,WAAWle,KAAKwd,GAC5BwL,EAAc7Y,IAAWqN,EAEzB4b,GAAgBA,EAAa1vB,QAAQ,SAACwM,GAAY,OAAAA,EAAQsH,EAAW2Y,KAEjEzc,EAAMR,mBAAqBid,EAAariB,aAAc,CACxD,IAAMV,EAAYqF,KAElB0d,EAAariB,aAAY,EAAqB0J,EAAWpK,EAAU5R,MAAQkP,IAI7E,OAAO8M,ESIS2b,CACRnQ,EAAe1qB,KAAK63B,aAAc0B,EAAWnH,GAAce,KAE/DjB,GAAcqH,EAAWnnB,GAAesY,GACxC6D,GAAuBgL,WAEvBpe,GAAUqe,GACNtJ,EAAgBmB,KAAKnB,EAAgBmB,MAG3C,IAAMkK,EAAe,IAAI3H,GACrB5zB,KAAKq0B,cAAenV,EACpBsX,GAAiBgF,GAAuBlC,EAAcC,GAAYA,EAAWD,GAMjF,OAJId,IAEF+C,EAAatoB,SAAS+hB,WAAaxV,MAAQ8Z,GAEtCiC,GAEXhD,EAlIA,CAAyCkD,IAyJzCC,GAAA,SAAAvH,GAOE,SAAAwH,EACItH,EAAwB3hB,EAAoB4B,EACpCsnB,EACA9c,GAHZ,IAAAvS,EAIE4nB,EAAAvzB,KAAAZ,OAAOA,YAHuCuM,EAAA+H,SAAAA,EACpC/H,EAAAqvB,WAAAA,EACArvB,EAAAuS,OAAAA,EATZvS,EAAAsvB,cAWEtvB,EAAKmG,SAAWA,EAChBnG,EAAK0G,SAAW1G,EAAKuvB,kBAAoB,IAAIzF,GAAeuF,GAC5DrvB,EAAK0G,SAAS+hB,WAAazE,IAAgB,EAAGqL,GAC9CrvB,EAAK8nB,cAAgBA,IAezB,OA9BqCC,EAAAA,EAAAA,GAkBnC90B,OAAA4D,eAAIwwB,EAAAA,UAAAA,gBAAJ,WAA2B,OAAO,IAAIlX,GAAa1c,KAAK8e,OAAQ9e,KAAK47B,6CAErEhI,EAAAA,UAAAA,QAAA,WAEE5zB,KAAK67B,WAAazwB,QAAQ,SAAAtF,GAAM,OAAAA,MAChC9F,KAAK67B,WAAa,KAClB77B,KAAKiT,SAAS5F,WAEhBumB,EAAAA,UAAAA,UAAA,SAAU0B,GAERt1B,KAAK67B,WAAan6B,KAAK4zB,IAE3BqG,EA9BA,CAAqCI,ICtO/BC,IACJjzB,QAAS+uB,GACTztB,SAAU4pB,GACVxqB,MAAOwyB,KAGTC,GAAA,SAAA/H,GASE,SAAAgI,EAAY5tB,EAA8B6tB,GAA1C,IAAA7vB,EACE4nB,EAAAvzB,KAAAZ,OAAOA,KADiCuM,EAAA6vB,QAAAA,EAP1C7vB,EAAA8vB,wBAGA9vB,EAAA9F,SAAqB8F,EAErBA,EAAAsvB,cAIE,IAAM7rB,EjCgmBV,SAAAssB,EAAkC33B,EAAW43B,GAC3C,IAAMvsB,EAAerL,EAAaoL,KAAkB,KACpD,IAAKC,IAAiC,IAAlBusB,EAClB,MAAM,IAAIv4B,MAAM,QAAQiB,EAAUN,GAAK,0CAEzC,OAAOqL,EiCrmBessB,CAAe/tB,UAKnChC,EAAK8vB,qBAAuBrsB,EAAcsI,UAQ1C/L,EAAKiwB,Y7CkBT,SAAAC,EACIrvB,EAAsC9E,EACtCgE,GAEF,YAHwC,IAAAhE,IAAAA,EAAA,WACtC,IAAAgE,IAAAA,EAAA,MACFhE,EAASA,GAAU6D,KACZ,IAAIC,GAAWgB,EAASd,EAAqBhE,G6CtB/Bm0B,CAAeluB,EAAc6tB,IAL5CrzB,QAASkzB,GACTjzB,SAAUuD,GAEZyvB,KAGFzvB,EAAKmG,SAAWnG,EAAKpF,IAAIoH,KAwB7B,OAjDoC+lB,EAAAA,EAAAA,GA4BlCG,EAAAA,UAAAA,IAAA,SAAIjxB,EAAY4D,EACZs1B,GACF,YAFc,IAAAt1B,IAAAA,EAAqBiB,EAASH,yBAC1C,IAAAw0B,IAAAA,EAA2B94B,EAAYoD,SACrCxD,IAAU6E,GAAY7E,IAAUy4B,IAA0Bz4B,IAAU2E,EAC/DnI,KAEFA,KAAKw8B,YAAYr1B,IAAI3D,EAAO4D,EAAes1B,IAGpDl9B,OAAA4D,eAAIqxB,EAAAA,UAAAA,gCAAJ,WACE,OAAOz0B,KAAKmH,IAAI2wB,qCAGlBrD,EAAAA,UAAAA,QAAA,WAEEz0B,KAAK67B,WAAazwB,QAAQ,SAAAtF,GAAM,OAAAA,MAChC9F,KAAK67B,WAAa,MAEpBpH,EAAAA,UAAAA,UAAA,SAAUa,GAERt1B,KAAK67B,WAAan6B,KAAK4zB,IAE3B6G,EAjDA,CAAoCF,IAmDpCU,GAAA,SAAAxI,GACE,SAAAyI,EAAmBC,GAAnB,IAAAtwB,EAA0C4nB,EAAAvzB,KAAAZ,OAAOA,YAA9BuM,EAAAswB,WAAAA,IAKrB,OANwCvI,EAAAA,EAAAA,GAGtCI,EAAAA,UAAAA,OAAA,SAAOoI,GACL,OAAO,IAAIrI,GAAYz0B,KAAK68B,WAAYC,IAE5CF,EANA,CAAwCG,ICjFxC,SAAAC,GAA2BC,GACzB,MAAoB,mBAANA,ECDhB,IAAIC,IAAsD,EAM7CC,IAKXtK,aAASxuB,EAUT+4B,0CAA0Ch8B,GAOxC87B,GAAsD97B,GAGxDg8B,4CACE,OAAOF,KC3BX,SAAAG,GAAgCC,GAC9B1oB,WAAW,WAAQ,MAAM0oB,ICFpB,IAAMC,IACXC,QAAQ,EACRr8B,KAAA,SAAKC,KACLO,MAAA,SAAM27B,GACJ,GAAIH,GAAOC,sCACT,MAAME,EAEND,GAAgBC,IAGpBG,SAAA,cCdWh2B,GAAU9H,MAAM8H,SAAO,SAASw1B,GAAqB,OAAAA,GAAyB,iBAAbA,EAAEt8B,QCAhF,SAAA+8B,GAAyBT,GACvB,OAAY,MAALA,GAA0B,iBAANA,ECAtB,ICCHU,GDDSC,IAAqBp8B,MCGlC,SAAAq8B,KACE,IACE,OAAOF,GAAe98B,MAAMb,KAAMU,WAClC,MAAOc,GAEP,OADAo8B,GAAYp8B,EAAIA,EACTo8B,IAIX,SAAAE,GAA6Ch4B,GAE3C,OADA63B,GAAiB73B,EACL+3B,GCPd,SAAAE,GAA4CC,GAO1C,OANAh6B,MAAMpD,KAAKZ,MACXA,KAAKiL,QAAU+yB,EACZA,EAAOr9B,OAAM,4CAChBq9B,EAAO94B,IAAI,SAACo4B,EAAK98B,GAAM,OAAGA,EAAI,EAAC,KAAK88B,EAAIh4B,aAAcH,KAAK,QAAY,GACvEnF,KAAKgC,KAAO,sBACZhC,KAAKg+B,OAASA,EACPh+B,KAGT+9B,GAAwB79B,UAAYV,OAAOW,OAAO6D,MAAM9D,WAMjD,IAAM+9B,GAA+CF,GCJ5DG,GAAA,WAwBE,SAAAA,EAAYtR,GAbL5sB,KAAAw9B,QAAkB,EAGfx9B,KAAAo8B,QAAwB,KAExBp8B,KAAAm+B,SAA2B,KAE7Bn+B,KAAAo+B,eAAqC,KAOvCxR,IACK5sB,KAAMq+B,aAAezR,GAxBK,IAAS2Q,EA8LhD,OA5JEW,EAAAh+B,UAAA0sB,YAAA,WACE,IACIoR,EADAM,GAAY,EAGhB,IAAIt+B,KAAKw9B,OAAT,CAII,IAAEpB,EAAFp8B,KAAEo8B,QAAS+B,EAAXn+B,KAAWm+B,SAAUE,EAArBr+B,KAAqBq+B,aAAcD,EAAnCp+B,KAAmCo+B,eAEvCp+B,KAAKw9B,QAAS,EACdx9B,KAAKo8B,QAAU,KACfp8B,KAAKm+B,SAAW,KAGhBn+B,KAAKo+B,eAAiB,KAOtB,IALA,IAAIl7B,GAAS,EACTq7B,EAAMJ,EAAWA,EAASx9B,OAAS,EAIhCy7B,GACLA,EAAQoC,OAAOx+B,MAGfo8B,IAAYl5B,EAAQq7B,GAAOJ,EAASj7B,IAAU,KAchD,GAXI85B,GAAWqB,IACDP,GAASO,GAAcz9B,KAAKZ,QAC1B49B,KACZU,GAAY,EACZN,EAASA,IACPJ,GAAYp8B,aAAay8B,GACvBQ,GAA4Bb,GAAYp8B,EAAEw8B,SAAWJ,GAAYp8B,KAKrEiG,GAAQ22B,GAKV,IAHAl7B,GAAS,EACTq7B,EAAMH,EAAez9B,SAEZuC,EAAQq7B,GAAK,CACpB,IAAMG,EAAMN,EAAel7B,GAC3B,GAAIw6B,GAASgB,IACCZ,GAASY,EAAI9R,aAAahsB,KAAK89B,KAC7Bd,GAAa,CACzBU,GAAY,EACZN,EAASA,MACT,IAAIV,EAAMM,GAAYp8B,EAClB87B,aAAeW,GACjBD,EAASA,EAAOn8B,OAAO48B,GAA4BnB,EAAIU,SAEvDA,EAAOt8B,KAAK47B,IAOtB,GAAIgB,EACF,MAAM,IAAIL,GAAoBD,KAsBlCE,EAAAh+B,UAAAiO,IAAA,SAAIwwB,GACF,IAAKA,GAAaA,IAAaT,EAAax1B,MAC1C,OAAOw1B,EAAax1B,MAGtB,GAAIi2B,IAAa3+B,KACf,OAAOA,KAGT,IAAI4+B,EAA+BD,EAEnC,cAAeA,GACb,IAAK,WACHC,EAAe,IAAIV,EAA6BS,GAClD,IAAK,SACH,GAAIC,EAAapB,QAA8C,mBAA7BoB,EAAahS,YAC7C,OAAOgS,EACF,GAAI5+B,KAAKw9B,OAEd,OADAoB,EAAahS,cACNgS,EACF,GAAuC,mBAA5BA,EAAaC,WAA6C,CAC1E,IAAMC,EAAMF,GACZA,EAAe,IAAIV,GACNE,gBAAkBU,GAEjC,MACF,QACE,MAAM,IAAI96B,MAAM,yBAA2B26B,EAAW,2BAQ1D,OALsB3+B,KAAKo+B,iBAAmBp+B,KAAKo+B,oBAErC18B,KAAKk9B,GACnBA,EAAaC,WAAW7+B,MAEjB4+B,GASTV,EAAAh+B,UAAAs+B,OAAA,SAAOI,GACL,IAAMG,EAAgB/+B,KAAKo+B,eAC3B,GAAIW,EAAe,CACjB,IAAMC,EAAoBD,EAAcv5B,QAAQo5B,IACrB,IAAvBI,GACFD,EAAc1T,OAAO2T,EAAmB,KAMtCd,EAAAh+B,UAAA2+B,WAAR,SAAmBv2B,GACb,IAAE8zB,EAAFp8B,KAAEo8B,QAAS+B,EAAXn+B,KAAWm+B,SACV/B,GAAWA,IAAY9zB,EAIhB61B,GAI6B,IAA9BA,EAAS34B,QAAQ8C,IAE1B61B,EAASz8B,KAAK4G,GAHdtI,KAAKm+B,UAAY71B,GAJjBtI,KAAKo8B,QAAU9zB,GApLL41B,EAAAx1B,QAAgC60B,EAG5C,IAAIW,GAFEV,QAAS,EACRD,GA4LXW,EAhMA,GAkMA,SAAAO,GAAqCT,GACpC,OAAOA,EAAOiB,OAAO,SAACC,EAAM5B,GAAQ,OAAA4B,EAAKr9B,OAAQy7B,aAAeW,GAAuBX,EAAIU,OAASV,QCtN9F,IAAM6B,GACO,mBAAXl+B,OACHA,OAAO,gBACP,kBAAoBm+B,KAAKC,qVCc/BC,GAAA,SAAAnL,GAyCE,SAAAmL,EAAYC,EACA59B,EACA87B,GAFZ,IAAAlxB,EAGE4nB,EAAAvzB,KAAAZ,OAAOA,KAEP,OAtBeuM,EAAAizB,eAAsB,KACtBjzB,EAAAkzB,iBAA2B,EAC3BlzB,EAAAmzB,oBAA8B,EAErCnzB,EAAAozB,WAAqB,EAGvBpzB,EAAAqzB,oBAA2C,KAezCl/B,UAAUC,QAChB,KAAK,EACH4L,EAAKszB,YAAcC,GACnB,MACF,KAAK,EACH,IAAKP,EAAmB,CACtBhzB,EAAKszB,YAAcC,GACnB,MAEF,GAAiC,iBAAtBP,EAAgC,CACrCA,aAA6BD,GAC/B/yB,EAAKmzB,mBAAqBH,EAAkBG,mBAC5CnzB,EAAKszB,YAAcN,EACnBA,EAAkBpxB,IAAI5B,KAEtBA,EAAKmzB,oBAAqB,EAC1BnzB,EAAKszB,YAAc,IAAIE,GAAkBxzB,EAA6BgzB,IAExE,MAEJ,QACEhzB,EAAKmzB,oBAAqB,EAC1BnzB,EAAKszB,YAAc,IAAIE,GAAkBxzB,EAA6BgzB,EAAmB59B,EAAO87B,YAgFxG,OApJmC39B,GAAAA,EAAAA,GAEjCw/B,EAAAp/B,UAAC8/B,IAAD,WAAyB,OAAOhgC,MAczBs/B,EAAAn/B,OAAP,SAAiBgB,EACAQ,EACA87B,GACf,IAAMwC,EAAa,IAAIX,EAAWn+B,EAAMQ,EAAO87B,GAE/C,OADAwC,EAAWP,oBAAqB,EACzBO,GA2DTX,EAAAp/B,UAAAiB,KAAA,SAAKC,GACEpB,KAAK2/B,WACR3/B,KAAKkgC,MAAM9+B,IAWfk+B,EAAAp/B,UAAAyB,MAAA,SAAM27B,GACCt9B,KAAK2/B,YACR3/B,KAAK2/B,WAAY,EACjB3/B,KAAKmgC,OAAO7C,KAUhBgC,EAAAp/B,UAAAu9B,SAAA,WACOz9B,KAAK2/B,YACR3/B,KAAK2/B,WAAY,EACjB3/B,KAAKogC,cAITd,EAAAp/B,UAAA0sB,YAAA,WACM5sB,KAAKw9B,SAGTx9B,KAAK2/B,WAAY,EACjBxL,EAAAj0B,UAAM0sB,YAAWhsB,KAAAZ,QAGTs/B,EAAAp/B,UAAAggC,MAAV,SAAgB9+B,GACdpB,KAAK6/B,YAAY1+B,KAAKC,IAGdk+B,EAAAp/B,UAAAigC,OAAV,SAAiB7C,GACft9B,KAAK6/B,YAAYl+B,MAAM27B,GACvBt9B,KAAK4sB,eAGG0S,EAAAp/B,UAAAkgC,UAAV,WACEpgC,KAAK6/B,YAAYpC,WACjBz9B,KAAK4sB,eAIP0S,EAAAp/B,UAAAmgC,uBAAA,WACQ,IAAEjE,EAAFp8B,KAAEo8B,QAAS+B,EAAXn+B,KAAWm+B,SASjB,OARAn+B,KAAKo8B,QAAU,KACfp8B,KAAKm+B,SAAW,KAChBn+B,KAAK4sB,cACL5sB,KAAKw9B,QAAS,EACdx9B,KAAK2/B,WAAY,EACjB3/B,KAAKo8B,QAAUA,EACfp8B,KAAKm+B,SAAWA,EAChBn+B,KAAK4/B,oBAAsB,KACpB5/B,MAEXs/B,EApJA,CAAmCpB,IA2JnC6B,GAAA,SAAA5L,GAIE,SAAA4L,EAAoBO,EACRC,EACA5+B,EACA87B,GAHZ,IAMMt8B,EANNoL,EAIE4nB,EAAAvzB,KAAAZ,OAAOA,KAJWuM,EAAA+zB,kBAAAA,EAOlB,IAAI50B,EAAea,SAEfywB,GAAWuD,GACbp/B,EAA+Bo/B,EACtBA,IACTp/B,EAA6Bo/B,EAAgBp/B,KAC7CQ,EAA8B4+B,EAAgB5+B,MAC9C87B,EAAiC8C,EAAgB9C,SAC7C8C,IAAmBT,KAEjB9C,IADJtxB,EAAUlM,OAAOW,OAAOogC,IACD3T,cACrBrgB,EAAK4B,IAAiBzC,EAAQkhB,YAAY/pB,KAAK6I,IAEjDA,EAAQkhB,YAAcrgB,EAAKqgB,YAAY/pB,KAAK0J,KAIhDA,EAAKqoB,SAAWlpB,EAChBa,EAAK2zB,MAAQ/+B,EACboL,EAAK4zB,OAASx+B,EACd4K,EAAK6zB,UAAY3C,IAsGrB,OArIuC39B,GAAAA,EAAAA,GAkCrCigC,EAAA7/B,UAAAiB,KAAA,SAAKC,GACH,IAAKpB,KAAK2/B,WAAa3/B,KAAKkgC,MAAO,CACzB,IAAAI,EAAAtgC,KAAAsgC,kBACHnD,GAAOC,uCAA0CkD,EAAkBZ,mBAE7D1/B,KAAKwgC,gBAAgBF,EAAmBtgC,KAAKkgC,MAAO9+B,IAC7DpB,KAAK4sB,cAFL5sB,KAAKygC,aAAazgC,KAAKkgC,MAAO9+B,KAOpC2+B,EAAA7/B,UAAAyB,MAAA,SAAM27B,GACJ,IAAKt9B,KAAK2/B,UAAW,CACX,IAAAW,EAAAtgC,KAAAsgC,kBACAlD,EAAAD,GAAAC,sCACR,GAAIp9B,KAAKmgC,OACF/C,GAA0CkD,EAAkBZ,oBAI/D1/B,KAAKwgC,gBAAgBF,EAAmBtgC,KAAKmgC,OAAQ7C,GACrDt9B,KAAK4sB,gBAJL5sB,KAAKygC,aAAazgC,KAAKmgC,OAAQ7C,GAC/Bt9B,KAAK4sB,oBAKF,GAAK0T,EAAkBZ,mBAOxBtC,GACFkD,EAAkBd,eAAiBlC,EACnCgD,EAAkBb,iBAAkB,GAEpCpC,GAAgBC,GAElBt9B,KAAK4sB,kBAb2C,CAEhD,GADA5sB,KAAK4sB,cACDwQ,EACF,MAAME,EAERD,GAAgBC,MAatByC,EAAA7/B,UAAAu9B,SAAA,WAAA,IAAAlxB,EAAAvM,KACE,IAAKA,KAAK2/B,UAAW,CACX,IAAAW,EAAAtgC,KAAAsgC,kBACR,GAAItgC,KAAKogC,UAAW,CAClB,IAAMM,EAAkB,WAAM,OAAAn0B,EAAK6zB,UAAUx/B,KAAK2L,EAAKqoB,WAElDuI,GAAOC,uCAA0CkD,EAAkBZ,oBAItE1/B,KAAKwgC,gBAAgBF,EAAmBI,GACxC1gC,KAAK4sB,gBAJL5sB,KAAKygC,aAAaC,GAClB1gC,KAAK4sB,oBAMP5sB,KAAK4sB,gBAKHmT,EAAA7/B,UAAAugC,aAAR,SAAqB36B,EAAc1E,GACjC,IACE0E,EAAGlF,KAAKZ,KAAK40B,SAAUxzB,GACvB,MAAOk8B,GAEP,GADAt9B,KAAK4sB,cACDuQ,GAAOC,sCACT,MAAME,EAEND,GAAgBC,KAKdyC,EAAA7/B,UAAAsgC,gBAAR,SAAwBl4B,EAAuBxC,EAAc1E,GAC3D,IAAK+7B,GAAOC,sCACV,MAAM,IAAIp5B,MAAM,YAElB,IACE8B,EAAGlF,KAAKZ,KAAK40B,SAAUxzB,GACvB,MAAOk8B,GACP,OAAIH,GAAOC,uCACT90B,EAAOk3B,eAAiBlC,EACxBh1B,EAAOm3B,iBAAkB,GAClB,IAEPpC,GAAgBC,IACT,GAGX,OAAO,GAITyC,EAAA7/B,UAAAm+B,aAAA,WACU,IAAAiC,EAAAtgC,KAAAsgC,kBACRtgC,KAAK40B,SAAW,KAChB50B,KAAKsgC,kBAAoB,KACzBA,EAAkB1T,eAEtBmT,EArIA,CAAuCT,ICjK1BqB,GAA+B,mBAAX1/B,QAAyBA,OAAO0/B,YAAc,eCX/E,SAAAC,MCiBA,IAAAC,GAAA,WAkBE,SAAAA,EAAYC,GAfL9gC,KAAA+gC,WAAqB,EAgBtBD,IACF9gC,KAAKghC,WAAaF,GAqTxB,OA3RED,EAAA3gC,UAAA+gC,KAAA,SAAQC,GACN,IAAMP,EAAa,IAAIE,EAGvB,OAFAF,EAAWv3B,OAASpJ,KACpB2gC,EAAWO,SAAWA,EACfP,GA2HTE,EAAA3gC,UAAA4gC,UAAA,SAAUP,EACA5+B,EACA87B,GAEA,IAAAyD,EAAAlhC,KAAAkhC,SACFC,ECpMV,SAAAC,EAMEC,EACA1/B,EACA87B,GAEA,GAAI4D,EAAgB,CAClB,GAAIA,aAA0B/B,GAC5B,OAAwB+B,EAG1B,GAAIA,EAAerB,IACjB,OAAOqB,EAAerB,MAI1B,OAAKqB,GAAmB1/B,GAAU87B,EAI3B,IAAI6B,GAAW+B,EAAgB1/B,EAAO87B,GAHpC,IAAI6B,GAAWQ,ID+KTsB,CAAab,EAAgB5+B,EAAO87B,GAYjD,GAVIyD,EACFA,EAAStgC,KAAKugC,EAAMnhC,KAAKoJ,QAEzB+3B,EAAKhzB,IACHnO,KAAKoJ,QAAW+zB,GAAOC,wCAA0C+D,EAAKzB,mBACtE1/B,KAAKghC,WAAWG,GAChBnhC,KAAKshC,cAAcH,IAInBhE,GAAOC,uCACL+D,EAAKzB,qBACPyB,EAAKzB,oBAAqB,EACtByB,EAAK1B,iBACP,MAAM0B,EAAK3B,eAKjB,OAAO2B,GAITN,EAAA3gC,UAAAohC,cAAA,SAAcH,GACZ,IACE,OAAOnhC,KAAKghC,WAAWG,GACvB,MAAO7D,GACHH,GAAOC,wCACT+D,EAAK1B,iBAAkB,EACvB0B,EAAK3B,eAAiBlC,GEnO9B,SAAAiE,EAS+BC,GAC7B,KAAOA,GAAU,CACT,IAAU3B,EAAV2B,EAAU3B,YAChB,GADM2B,EAAEhE,QAAFgE,EAAuB7B,UAE3B,OAAO,EAEP6B,EADS3B,GAAeA,aAAuBP,GACpCO,EAEA,KAGf,OAAO,EFiNC0B,CAAeJ,GACjBA,EAAKx/B,MAAM27B,GAEX9Y,QAAQC,KAAK6Y,KAYnBuD,EAAA3gC,UAAAkL,QAAA,SAAQjK,EAA0BsgC,GAAlC,IAAAl1B,EAAAvM,KAGE,OAAO,IAFPyhC,EAAcC,GAAeD,IAEA,SAAC3O,EAAS6O,GAGrC,IAAI/C,EACJA,EAAeryB,EAAKu0B,UAAU,SAAC1/B,GAC7B,IACED,EAAKC,GACL,MAAOk8B,GACPqE,EAAOrE,GACHsB,GACFA,EAAahS,gBAGhB+U,EAAQ7O,MAKf+N,EAAA3gC,UAAA8gC,WAAA,SAAWf,GACD,IAAA72B,EAAApJ,KAAAoJ,OACR,OAAOA,GAAUA,EAAO03B,UAAUb,IAqBpCY,EAAA3gC,UAAC0hC,IAAD,WACE,OAAO5hC,MAoCT6gC,EAAA3gC,UAAA2hC,KAAA,eAAK,IAAAC,KAAAv/B,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAAu/B,EAAAv/B,GAAA7B,UAAA6B,GACH,OAA0B,IAAtBu/B,EAAWnhC,OACNX,KGvUb,SAAA+hC,EAsBoCC,GAClC,OAAKA,EAIc,IAAfA,EAAIrhC,OACCqhC,EAAI,GAGN,SAAAC,EAAe3yB,GACpB,OAAO0yB,EAAI/C,OAAO,SAACiD,EAAWp8B,GAA4B,OAAAA,EAAGo8B,IAAO5yB,IAR7D6yB,GHkTAJ,CAAcD,EAAdC,CAA0B/hC,OASnC6gC,EAAA3gC,UAAAkiC,UAAA,SAAUX,GAAV,IAAAl1B,EAAAvM,KAGE,OAAO,IAFPyhC,EAAcC,GAAeD,IAEN,SAAC3O,EAAS6O,GAC/B,IAAIvgC,EACJmL,EAAKu0B,UAAU,SAAC7D,GAAS,OAAA77B,EAAQ67B,GAAG,SAACK,GAAa,OAAAqE,EAAOrE,IAAM,WAAM,OAAAxK,EAAQ1xB,QAnS1Ey/B,EAAA1gC,OAAmB,SAAI2gC,GAC5B,OAAO,IAAID,EAAcC,IAqS7BD,EAzUA,GAkVA,SAAAa,GAAwBD,GAKtB,GAJKA,IACHA,EAAc5O,UAGX4O,EACH,MAAM,IAAIz9B,MAAM,yBAGlB,OAAOy9B,EItWT,SAAAY,KAIE,OAHAr+B,MAAMpD,KAAKZ,MACXA,KAAKiL,QAAU,sBACfjL,KAAKgC,KAAO,0BACLhC,KAGTqiC,GAA4BniC,UAAYV,OAAOW,OAAO6D,MAAM9D,WAWrD,IAAMoiC,GAAuDD,+UChBpEE,GAAA,SAAApO,GAGE,SAAAoO,EAAmBC,EAA4BvC,GAA/C,IAAA1zB,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YADUuM,EAAAi2B,QAAAA,EAA4Bj2B,EAAA0zB,WAAAA,EAF/C1zB,EAAAixB,QAAkB,IA4BpB,OA7B4C19B,GAAAA,EAAAA,GAO1CyiC,EAAAriC,UAAA0sB,YAAA,WACE,IAAI5sB,KAAKw9B,OAAT,CAIAx9B,KAAKw9B,QAAS,EAEd,IAAMgF,EAAUxiC,KAAKwiC,QACfC,EAAYD,EAAQC,UAI1B,GAFAziC,KAAKwiC,QAAU,KAEVC,GAAkC,IAArBA,EAAU9hC,SAAgB6hC,EAAQ7C,YAAa6C,EAAQhF,OAAzE,CAIA,IAAMkF,EAAkBD,EAAUj9B,QAAQxF,KAAKigC,aAEtB,IAArByC,GACFD,EAAUpX,OAAOqX,EAAiB,MAGxCH,EA7BA,CAA4CrE,gVCG5CyE,GAAA,SAAAxO,GACE,SAAAwO,EAAsB9C,GAAtB,IAAAtzB,EACE4nB,EAAAvzB,KAAAZ,KAAM6/B,IAAY7/B,YADEuM,EAAAszB,YAAAA,IAGxB,OAJ0C//B,GAAAA,EAAAA,GAI1C6iC,EAJA,CAA0CrD,IAe1CsD,GAAA,SAAAzO,GAgBE,SAAAyO,IAAA,IAAAr2B,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YAXTuM,EAAAk2B,aAEAl2B,EAAAixB,QAAS,EAETjxB,EAAAozB,WAAY,EAEZpzB,EAAAs2B,UAAW,EAEXt2B,EAAAu2B,YAAmB,OAuGrB,OArHgChjC,GAAAA,EAAAA,GAE9B8iC,EAAA1iC,UAAC8/B,IAAD,WACE,OAAO,IAAI2C,GAAkB3iC,OAsB/B4iC,EAAA1iC,UAAA+gC,KAAA,SAAQC,GACN,IAAMsB,EAAU,IAAIO,GAAiB/iC,KAAMA,MAE3C,OADAwiC,EAAQtB,SAAgBA,EACZsB,GAGdI,EAAA1iC,UAAAiB,KAAA,SAAKC,GACH,GAAIpB,KAAKw9B,OACP,MAAM,IAAI8E,GAEZ,IAAKtiC,KAAK2/B,UAIR,IAHQ,IAAA8C,EAAAziC,KAAAyiC,UACFlE,EAAMkE,EAAU9hC,OAChBqiC,EAAOP,EAAU55B,QACdrI,EAAI,EAAGA,EAAI+9B,EAAK/9B,IACvBwiC,EAAKxiC,GAAGW,KAAKC,IAKnBwhC,EAAA1iC,UAAAyB,MAAA,SAAM27B,GACJ,GAAIt9B,KAAKw9B,OACP,MAAM,IAAI8E,GAEZtiC,KAAK6iC,UAAW,EAChB7iC,KAAK8iC,YAAcxF,EACnBt9B,KAAK2/B,WAAY,EAIjB,IAHQ,IAAA8C,EAAAziC,KAAAyiC,UACFlE,EAAMkE,EAAU9hC,OAChBqiC,EAAOP,EAAU55B,QACdrI,EAAI,EAAGA,EAAI+9B,EAAK/9B,IACvBwiC,EAAKxiC,GAAGmB,MAAM27B,GAEhBt9B,KAAKyiC,UAAU9hC,OAAS,GAG1BiiC,EAAA1iC,UAAAu9B,SAAA,WACE,GAAIz9B,KAAKw9B,OACP,MAAM,IAAI8E,GAEZtiC,KAAK2/B,WAAY,EAIjB,IAHQ,IAAA8C,EAAAziC,KAAAyiC,UACFlE,EAAMkE,EAAU9hC,OAChBqiC,EAAOP,EAAU55B,QACdrI,EAAI,EAAGA,EAAI+9B,EAAK/9B,IACvBwiC,EAAKxiC,GAAGi9B,WAEVz9B,KAAKyiC,UAAU9hC,OAAS,GAG1BiiC,EAAA1iC,UAAA0sB,YAAA,WACE5sB,KAAK2/B,WAAY,EACjB3/B,KAAKw9B,QAAS,EACdx9B,KAAKyiC,UAAY,MAInBG,EAAA1iC,UAAAohC,cAAA,SAAcrB,GACZ,GAAIjgC,KAAKw9B,OACP,MAAM,IAAI8E,GAEV,OAAOnO,EAAAj0B,UAAMohC,cAAa1gC,KAAAZ,KAACigC,IAK/B2C,EAAA1iC,UAAA8gC,WAAA,SAAWf,GACT,GAAIjgC,KAAKw9B,OACP,MAAM,IAAI8E,GACL,OAAItiC,KAAK6iC,UACd5C,EAAWt+B,MAAM3B,KAAK8iC,aACf5E,GAAax1B,OACX1I,KAAK2/B,WACdM,EAAWxC,WACJS,GAAax1B,QAEpB1I,KAAKyiC,UAAU/gC,KAAKu+B,GACb,IAAIsC,GAAoBviC,KAAMigC,KAUzC2C,EAAA1iC,UAAA+iC,aAAA,WACE,IAAMtC,EAAa,IAAIE,GAEvB,OADMF,EAAYv3B,OAASpJ,KACpB2gC,GA9FFiC,EAAAziC,OAAmB,SAAI0/B,EAA0Bz2B,GACtD,OAAO,IAAI25B,GAAoBlD,EAAaz2B,IA+FhDw5B,EArHA,CAAgC/B,IA0HhCkC,GAAA,SAAA5O,GACE,SAAA4O,EAAsBlD,EAA2Bz2B,GAAjD,IAAAmD,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YADauM,EAAAszB,YAAAA,EAEpBtzB,EAAKnD,OAASA,IAiClB,OApCyCtJ,GAAAA,EAAAA,GAMvCijC,EAAA7iC,UAAAiB,KAAA,SAAKC,GACK,IAAAy+B,EAAA7/B,KAAA6/B,YACJA,GAAeA,EAAY1+B,MAC7B0+B,EAAY1+B,KAAKC,IAIrB2hC,EAAA7iC,UAAAyB,MAAA,SAAM27B,GACI,IAAAuC,EAAA7/B,KAAA6/B,YACJA,GAAeA,EAAYl+B,OAC7B3B,KAAK6/B,YAAYl+B,MAAM27B,IAI3ByF,EAAA7iC,UAAAu9B,SAAA,WACU,IAAAoC,EAAA7/B,KAAA6/B,YACJA,GAAeA,EAAYpC,UAC7Bz9B,KAAK6/B,YAAYpC,YAKrBsF,EAAA7iC,UAAA8gC,WAAA,SAAWf,GAET,OADQjgC,KAAAoJ,OAECpJ,KAAKoJ,OAAO03B,UAAUb,GAEtB/B,GAAax1B,OAG1Bq6B,EApCA,CAAyCH,gVCpJzC,SAAAM,KAOE,OAAO,SAAAC,EAAkC/5B,GACvC,OAAOA,EAAO63B,KAAK,IAAImC,GAAiBh6B,KAI5C,IAAAg6B,GAAA,WACE,SAAAA,EAAoBC,GAAArjC,KAAAqjC,YAAAA,EAgBtB,OAdED,EAAAljC,UAAAU,KAAA,SAAKq/B,EAA2B72B,GAEtB,IAAAi6B,EAAArjC,KAAAqjC,YACDA,EAAaC,YAEpB,IAAMC,EAAa,IAAIC,GAAmBvD,EAAYoD,GAChDzE,EAAex1B,EAAO03B,UAAUyC,GAMtC,OAJKA,EAAW/F,SACP+F,EAAYE,WAAaJ,EAAYK,WAGvC9E,GAEXwE,EAjBA,GAmBAI,GAAA,SAAArP,GAIE,SAAAqP,EAAY3D,EACQwD,GADpB,IAAA92B,EAEE4nB,EAAAvzB,KAAAZ,KAAM6/B,IAAY7/B,YADAuM,EAAA82B,YAAAA,IAyDtB,OA9DoCvjC,GAAAA,EAAAA,GASxB0jC,EAAAtjC,UAAAm+B,aAAV,WAEU,IAAAgF,EAAArjC,KAAAqjC,YACR,GAAKA,EAAL,CAKArjC,KAAKqjC,YAAc,KACnB,IAAMH,EAAkBG,EAAaC,UACrC,GAAIJ,GAAY,EACdljC,KAAKyjC,WAAa,UAKpB,GADOJ,EAAaC,UAAYJ,EAAW,EACvCA,EAAW,EACbljC,KAAKyjC,WAAa,SADpB,CA6BQ,IAAAA,EAAAzjC,KAAAyjC,WACFE,EAA0BN,EAAaO,YAC7C5jC,KAAKyjC,WAAa,MAEdE,GAAsBF,GAAcE,IAAqBF,GAC3DE,EAAiB/W,oBA9CjB5sB,KAAKyjC,WAAa,MAiDxBD,EA9DA,CAAoClE,gVC2B9BuE,GAhDN,SAAA1P,GAQE,SAAA2P,EAAmB16B,EACG26B,GADtB,IAAAx3B,EAEE4nB,EAAAvzB,KAAAZ,OAAOA,YAFUuM,EAAAnD,OAAAA,EACGmD,EAAAw3B,eAAAA,EANZx3B,EAAA+2B,UAAoB,EAG9B/2B,EAAAy3B,aAAc,IAwChB,OA9C8ClkC,GAAAA,EAAAA,GAc5CgkC,EAAA5jC,UAAA8gC,WAAA,SAAWf,GACT,OAAOjgC,KAAKikC,aAAanD,UAAUb,IAG3B6D,EAAA5jC,UAAA+jC,WAAV,WACE,IAAMzB,EAAUxiC,KAAKkkC,SAIrB,OAHK1B,IAAWA,EAAQ7C,YACtB3/B,KAAKkkC,SAAWlkC,KAAK+jC,kBAEhB/jC,KAAKkkC,UAGdJ,EAAA5jC,UAAAwjC,QAAA,WACE,IAAID,EAAazjC,KAAK4jC,YAatB,OAZKH,IACHzjC,KAAKgkC,aAAc,GACnBP,EAAazjC,KAAK4jC,YAAc,IAAI1F,IACzB/vB,IAAInO,KAAKoJ,OACjB03B,UAAU,IAAIqD,GAAsBnkC,KAAKikC,aAAcjkC,QACtDyjC,EAAWjG,QACbx9B,KAAK4jC,YAAc,KACnBH,EAAavF,GAAax1B,OAE1B1I,KAAK4jC,YAAcH,GAGhBA,GAGTK,EAAA5jC,UAAAgjC,SAAA,WACE,OAAOkB,IAAAA,CAAsBpkC,OAEjC8jC,EA9CA,CAA8CjD,IAgDM3gC,UAEvCmkC,IACXnD,UAAY9/B,MAAO,MACnBkiC,WAAaliC,MAAO,EAAGkjC,UAAU,GACjCJ,UAAY9iC,MAAO,KAAMkjC,UAAU,GACnCV,aAAexiC,MAAO,KAAMkjC,UAAU,GACtCtD,YAAc5/B,MAAOyiC,GAAiB7C,YACtCgD,aAAe5iC,MAAOyiC,GAAiBG,YAAaM,UAAU,GAC9DL,YAAc7iC,MAAOyiC,GAAiBI,YACtCP,SAAWtiC,MAAOyiC,GAAiBH,SACnCR,UAAY9hC,MAAOyiC,GAAiBX,WAGtCiB,GAAA,SAAAhQ,GACE,SAAAgQ,EAAYtE,EACQwD,GADpB,IAAA92B,EAEE4nB,EAAAvzB,KAAAZ,KAAM6/B,IAAY7/B,YADAuM,EAAA82B,YAAAA,IAyBtB,OA3BuCvjC,GAAAA,EAAAA,GAK3BqkC,EAAAjkC,UAAAigC,OAAV,SAAiB7C,GACft9B,KAAKq+B,eACLlK,EAAAj0B,UAAMigC,OAAMv/B,KAAAZ,KAACs9B,IAEL6G,EAAAjkC,UAAAkgC,UAAV,WACEpgC,KAAKqjC,YAAYW,aAAc,EAC/BhkC,KAAKq+B,eACLlK,EAAAj0B,UAAMkgC,UAASx/B,KAAAZ,OAEPmkC,EAAAjkC,UAAAm+B,aAAV,WACE,IAAMgF,EAAmBrjC,KAAKqjC,YAC9B,GAAIA,EAAa,CACfrjC,KAAKqjC,YAAc,KACnB,IAAMI,EAAaJ,EAAYO,YAC/BP,EAAYC,UAAY,EACxBD,EAAYa,SAAW,KACvBb,EAAYO,YAAc,KACtBH,GACFA,EAAW7W,gBAInBuX,EA3BA,CAAuCxB,ICnE1B4B,GAAmB,SAAIvM,GAAwB,OAAA,SAACiI,GAC3D,IAAK,IAAIz/B,EAAI,EAAG+9B,EAAMvG,EAAMr3B,OAAQH,EAAI+9B,IAAQ0B,EAAWzC,OAAQh9B,IACjEy/B,EAAW9+B,KAAK62B,EAAMx3B,IAEnBy/B,EAAWzC,QACdyC,EAAWxC,aCXf,SAAA+G,GAK6Bl1B,EAAqB0jB,GAChD,OAGS,IAAI6N,GAHR7N,EAGsB,SAAAiN,GACvB,IAAMvB,EAAM,IAAIR,GACZ19B,EAAI,EAWR,OAVAk+B,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WACrBjkC,IAAM8O,EAAM3O,QAIhBs/B,EAAW9+B,KAAKmO,EAAM9O,MACjBy/B,EAAWzC,QACdkB,EAAIvwB,IAAInO,KAAKykC,aALbxE,EAAWxC,cAQRiB,GAfgB6F,GAAiBj1B,ICP9C,SAAAo1B,GAA4BzH,GAC1B,OAAOA,ECagCj5B,MAYlC,gVCwBP2gC,GAAA,WACE,SAAAA,EAAoBC,EAAiDC,GAAjD7kC,KAAA4kC,QAAAA,EAAiD5kC,KAAA6kC,QAAAA,EAMvE,OAHEF,EAAAzkC,UAAAU,KAAA,SAAKq/B,EAA2B72B,GAC9B,OAAOA,EAAO03B,UAAU,IAAIgE,GAAc7E,EAAYjgC,KAAK4kC,QAAS5kC,KAAK6kC,WAE7EF,EAPA,GAcAG,GAAA,SAAA3Q,GAIE,SAAA2Q,EAAYjF,EACQ+E,EACRC,GAFZ,IAAAt4B,EAGE4nB,EAAAvzB,KAAAZ,KAAM6/B,IAAY7/B,YAFAuM,EAAAq4B,QAAAA,EAJpBr4B,EAAAw4B,MAAgB,EAOdx4B,EAAKs4B,QAAUA,GAAWt4B,IAe9B,OAvBkCzM,GAAAA,EAAAA,GAatBglC,EAAA5kC,UAAAggC,MAAV,SAAgB9+B,GACd,IAAI8zB,EACJ,IACEA,EAASl1B,KAAK4kC,QAAQhkC,KAAKZ,KAAK6kC,QAASzjC,EAAOpB,KAAK+kC,SACrD,MAAOzH,GAEP,YADAt9B,KAAK6/B,YAAYl+B,MAAM27B,GAGzBt9B,KAAK6/B,YAAY1+B,KAAK+zB,IAE1B4P,EAvBA,CAAkCxF,gVCxDlC0F,GAAA,SAAA7Q,GAAA,SAAA6Q,mDAcA,OAd2CllC,GAAAA,EAAAA,GACzCklC,EAAA9kC,UAAA+kC,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTtlC,KAAK6/B,YAAY1+B,KAAKgkC,IAGxBH,EAAA9kC,UAAAqlC,YAAA,SAAY5jC,EAAY2jC,GACtBtlC,KAAK6/B,YAAYl+B,MAAMA,IAGzBqjC,EAAA9kC,UAAAslC,eAAA,SAAeF,GACbtlC,KAAK6/B,YAAYpC,YAErBuH,EAdA,CAA2C1F,gVCA3CmG,GAAA,SAAAtR,GAGE,SAAAsR,EAAoBn9B,EAAsC48B,EAAsBE,GAAhF,IAAA74B,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YADWuM,EAAAjE,OAAAA,EAAsCiE,EAAA24B,WAAAA,EAAsB34B,EAAA64B,WAAAA,EAFxE74B,EAAArJ,MAAQ,IAmBlB,OApB2CpD,GAAAA,EAAAA,GAO/B2lC,EAAAvlC,UAAAggC,MAAV,SAAgB9+B,GACdpB,KAAKsI,OAAO28B,WAAWjlC,KAAKklC,WAAY9jC,EAAOpB,KAAKolC,WAAYplC,KAAKkD,QAASlD,OAGtEylC,EAAAvlC,UAAAigC,OAAV,SAAiBx+B,GACf3B,KAAKsI,OAAOi9B,YAAY5jC,EAAO3B,MAC/BA,KAAK4sB,eAGG6Y,EAAAvlC,UAAAkgC,UAAV,WACEpgC,KAAKsI,OAAOk9B,eAAexlC,MAC3BA,KAAK4sB,eAET6Y,EApBA,CAA2CnG,ICL9BoG,GAAqB,SAAIC,GAA4B,OAAA,SAAC1F,GAWjE,OAVA0F,EAAQ1d,KACN,SAAC7mB,GACM6+B,EAAWzC,SACdyC,EAAW9+B,KAAKC,GAChB6+B,EAAWxC,aAGf,SAACH,GAAa,OAAA2C,EAAWt+B,MAAM27B,KAEhCrV,KAAK,KAAMoV,IACL4C,ICNI/+B,GARb,SAAA0kC,KACE,MAAsB,mBAAX3kC,QAA0BA,OAAOC,SAIrCD,OAAOC,SAHL,aAMainB,GCLX0d,GAAsB,SAAIC,GAA0B,OAAA,SAAC7F,GAEhE,IADA,IAAM/+B,EAAW4kC,EAASC,QACvB,CACD,IAAMliB,EAAO3iB,EAASC,OACtB,GAAI0iB,EAAKxiB,KAAM,CACb4+B,EAAWxC,WACX,MAGF,GADAwC,EAAW9+B,KAAK0iB,EAAKziB,OACjB6+B,EAAWzC,OACb,MAaJ,MAR+B,mBAApBt8B,EAAS8kC,QAClB/F,EAAW9xB,IAAI,WACTjN,EAAS8kC,QACX9kC,EAAS8kC,WAKR/F,IClBIgG,GAAwB,SAAI16B,GAAa,OAAA,SAAC00B,GACrD,IAAMiG,EAAM36B,EAAIq2B,MAChB,GAA6B,mBAAlBsE,EAAIpF,UAEb,MAAM,IAAIqF,UAAU,kEAEpB,OAAOD,EAAIpF,UAAUb,KCdZmG,GAAW,SAAQnJ,GAA8B,OAAAA,GAAyB,iBAAbA,EAAEt8B,QAAoC,mBAANs8B,GCA1G,SAAAoJ,GAA0BjlC,GACxB,OAAOA,GAA2C,mBAArBA,EAAO0/B,WAA2D,mBAAvB1/B,EAAc6mB,KCYjF,IAAMqe,GAAc,SAAIpR,GAC7B,GAAIA,aAAkB2L,GACpB,OAAO,SAACZ,GACJ,OAAI/K,EAAO6L,WACXd,EAAW9+B,KAAM+zB,EAAe9zB,YAChC6+B,EAAWxC,YAGJvI,EAAO4L,UAAUb,IAGvB,GAAI/K,GAA+C,mBAA9BA,EAAO0M,IACjC,OAAOqE,GAAsB/Q,GACxB,GAAIkR,GAAYlR,GACrB,OAAOqP,GAAiBrP,GACnB,GAAIlN,GAAUkN,GACnB,OAAOwQ,GAAmBxQ,GACrB,GAAIA,GAA6C,mBAA5BA,EAAO6Q,IACjC,OAAOF,GAAoB3Q,GAE3B,IAAM9zB,EAAQs8B,GAASxI,GAAU,oBAAsB,IAAIA,EAAM,IAGjE,MAAM,IAAIiR,UAFE,gBAAgB/kC,EAAK,0aCwDrC,IAAAmlC,GAAA,WACE,SAAAA,EAAoB3B,EACA4B,QAAA,IAAAA,IAAAA,EAAqBC,OAAOC,mBAD5B1mC,KAAA4kC,QAAAA,EACA5kC,KAAAwmC,WAAAA,EAQtB,OALED,EAAArmC,UAAAU,KAAA,SAAK4gC,EAAyBp4B,GAC5B,OAAOA,EAAO03B,UAAU,IAAI6F,GAC1BnF,EAAUxhC,KAAK4kC,QAAS5kC,KAAKwmC,cAGnCD,EAVA,GAiBAI,GAAA,SAAAxS,GAME,SAAAwS,EAAY9G,EACQ+E,EACA4B,QAAA,IAAAA,IAAAA,EAAqBC,OAAOC,mBAFhD,IAAAn6B,EAGE4nB,EAAAvzB,KAAAZ,KAAM6/B,IAAY7/B,YAFAuM,EAAAq4B,QAAAA,EACAr4B,EAAAi6B,WAAAA,EAPZj6B,EAAAq6B,cAAwB,EACxBr6B,EAAAs6B,UACAt6B,EAAAu6B,OAAiB,EACfv6B,EAAArJ,MAAgB,IA4D5B,OAhE8CpD,GAAAA,EAAAA,GAYlC6mC,EAAAzmC,UAAAggC,MAAV,SAAgB9+B,GACVpB,KAAK8mC,OAAS9mC,KAAKwmC,WACrBxmC,KAAK+mC,SAAS3lC,GAEdpB,KAAK6mC,OAAOnlC,KAAKN,IAIXulC,EAAAzmC,UAAA6mC,SAAV,SAAmB3lC,GACjB,IAAI8zB,EACEhyB,EAAQlD,KAAKkD,QACnB,IACEgyB,EAASl1B,KAAK4kC,QAAQxjC,EAAO8B,GAC7B,MAAOo6B,GAEP,YADAt9B,KAAK6/B,YAAYl+B,MAAM27B,GAGzBt9B,KAAK8mC,SACL9mC,KAAKgnC,UAAU9R,EAAQ9zB,EAAO8B,IAGxByjC,EAAAzmC,UAAA8mC,UAAR,SAAkBC,EAAyB7lC,EAAU8B,GACnD,IAAMgkC,EAAkB,IAAIzB,GAAgBzlC,UAAMqE,OAAWA,GACzCrE,KAAK6/B,YACb1xB,IAAI+4B,GC7IpB,SAAAC,EAaEC,EACAlS,EACAgQ,EACAE,EACAvF,GAEA,QAFA,IAAAA,IAAAA,EAAA,IAAmC4F,GAAgB2B,EAAiBlC,EAAYE,KAE5EvF,EAAYrC,OAGT8I,GAAYpR,EAAZoR,CAAoBzG,GDwHzBsH,CAAwBnnC,KAAMinC,EAAK7lC,EAAO8B,EAAOgkC,IAGzCP,EAAAzmC,UAAAkgC,UAAV,WACEpgC,KAAK4mC,cAAe,EACA,IAAhB5mC,KAAK8mC,QAAuC,IAAvB9mC,KAAK6mC,OAAOlmC,QACnCX,KAAK6/B,YAAYpC,WAEnBz9B,KAAK4sB,eAGP+Z,EAAAzmC,UAAA+kC,WAAA,SAAWC,EAAeC,EACfC,EAAoBC,EACpBC,GACTtlC,KAAK6/B,YAAY1+B,KAAKgkC,IAGxBwB,EAAAzmC,UAAAslC,eAAA,SAAeF,GACb,IAAMuB,EAAS7mC,KAAK6mC,OACpB7mC,KAAKw+B,OAAO8G,GACZtlC,KAAK8mC,SACDD,EAAOlmC,OAAS,EAClBX,KAAKkgC,MAAM2G,EAAOQ,SACO,IAAhBrnC,KAAK8mC,QAAgB9mC,KAAK4mC,cACnC5mC,KAAK6/B,YAAYpC,YAGvBkJ,EAhEA,CAA8C3B,IE5C9CsC,GAAA,SAAAnT,GAiBE,SAAAmT,EAAYC,QAAA,IAAAA,IAAAA,GAAA,GAAZ,IAAAh7B,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YACPuM,EAAKi7B,UAAYD,IA2DrB,OA9EqCjT,EAAAA,EAAAA,GA0BnCgT,EAAApnC,UAAAunC,KAAA,SAAKrmC,GAAa+yB,EAAAj0B,UAAMiB,KAAIP,KAAAZ,KAACoB,IAU7BkmC,EAAApnC,UAAA4gC,UAAA,SAAU4G,EAAuB/lC,EAAa87B,GAC5C,IAAIkK,EACAC,EAAU,SAACtK,GAAkB,OAAA,MAC7BuK,EAAa,WAAW,OAAA,MAExBH,GAA8C,iBAApBA,GAC5BC,EAAc3nC,KAAKwnC,UAAY,SAACpmC,GAC9BwT,WAAW,WAAM,OAAA8yB,EAAgBvmC,KAAKC,MACpC,SAACA,GAAiBsmC,EAAgBvmC,KAAKC,IAEvCsmC,EAAgB/lC,QAClBimC,EAAU5nC,KAAKwnC,UAAY,SAAClK,GAAU1oB,WAAW,WAAM,OAAA8yB,EAAgB/lC,MAAM27B,MAClD,SAACA,GAAUoK,EAAgB/lC,MAAM27B,KAG1DoK,EAAgBjK,WAClBoK,EAAa7nC,KAAKwnC,UAAY,WAAQ5yB,WAAW,WAAM,OAAA8yB,EAAgBjK,cACzC,WAAQiK,EAAgBjK,eAGxDkK,EAAc3nC,KAAKwnC,UAAY,SAACpmC,GAAiBwT,WAAW,WAAM,OAAA8yB,EAAgBtmC,MACnD,SAACA,GAAiBsmC,EAAgBtmC,IAE7DO,IACFimC,EACI5nC,KAAKwnC,UAAY,SAAClK,GAAU1oB,WAAW,WAAM,OAAAjT,EAAM27B,MAAW,SAACA,GAAU37B,EAAM27B,KAGjFG,IACFoK,EACI7nC,KAAKwnC,UAAY,WAAQ5yB,WAAW,WAAM,OAAA6oB,OAAiB,WAAQA,OAI3E,IAAM0D,EAAOhN,EAAAj0B,UAAM4gC,UAASlgC,KAAAZ,KAAC2nC,EAAaC,EAASC,GAMnD,OAJIH,aAA2BxJ,IAC7BwJ,EAAgBv5B,IAAIgzB,GAGfA,GAEXmG,EA9EA,CAAqC1E,IC9BrCkF,GAAA,WAAA,SAAAA,KA4BA,OAFSA,EAAA9/B,kBAC4B,WAAM,OAAA+/B,GAA4BD,EAAanR,KACpFmR,EA5BA,GAgCMC,GjDUN,SAAAC,GACIC,EACAxR,GACF,OAaF,SAAAyR,EACID,EAAiDxR,EACjDxb,EAAkBhI,GA6BpB,GA5BKygB,KAEHA,GAAa,SAAAS,GACX,SAAAgU,EACYC,EAAwCC,EACxCC,EAAuBC,EAA8BC,EACrDC,GAHZ,IAAAl8B,EAIE4nB,EAAAvzB,KAAAZ,OAAOA,YAHGuM,EAAA67B,uBAAAA,EAAwC77B,EAAA87B,WAAAA,EACxC97B,EAAA+7B,OAAAA,EAAuB/7B,EAAAg8B,UAAAA,EAA8Bh8B,EAAAi8B,SAAAA,EACrDj8B,EAAAk8B,eAAAA,IAmBd,OAvB8CnU,EAAAA,EAAAA,GAQ5C6T,EAAAjoC,UAAAwoC,mBAAA,SACIh9B,EAAYke,EACZ3O,EAA+DhI,EAC/D/P,GACF,IAAM8Q,EH4Md,SAAA20B,EACIvtB,EAAc1P,EAAYk9B,EAAwB1f,EAAqB2f,EACvE5sB,GACF,IAAMwU,EAAYnW,KACZoW,EAAyBvW,KAC/BI,IAAY,GACZH,GAAyB,MAEzB,IAAMpG,EAAQgc,GAAY4Y,EAAiBxtB,EAAO1P,EAAO,GAczD,OAbAsI,EAAM7B,IAAoBy2B,EAEtBC,IACF70B,EAAMxC,IAAWq3B,EAAQC,cAE3BvY,IAAgB,EAAGvc,GAEfoH,EAAMR,oBACRQ,EAAM4F,KAAO/E,cAAgBA,GAG/B1B,GAAYkW,GACZrW,GAAyBsW,GAClB1c,EGlOa20B,CACV3oC,KAAKsoC,OAAQ58B,EAAS1L,KAAKooC,uBAAwBpoC,EAAgBA,KAAKwoC,SACxExoC,KAAKyoC,gBACL7e,GACFsB,GAAWlX,EAAO4V,EAAW3W,EAAY/P,EAAS+X,EAAY/X,OAEhE2rB,GAAuB7a,EAAOhU,KAAKsoC,OAAQ58B,GAC3C,IAAMq9B,EAAU,IAAIpU,GAAQ3gB,EAAOtI,GAAU,GAE7C,OADAq9B,EAAQ/T,WAAahhB,EAAMtC,IACpBq3B,GAEXZ,EAvBa,CAAiCF,IA0B9B,IAAdhtB,EAAUtW,KAA8B,CAC1C,IAAMqkC,EAA4B/1B,EAASgI,EAAU/X,OAErD,OAAO,IAAIwwB,GACPzgB,EAAUujB,GAAiBC,EAAiBxb,EAAWhI,GAAWgI,EAAU6W,OAC5E5X,KAAWnI,IAAWi3B,EAAcx3B,IAAUyJ,EAAUgB,eAE5D,OAAO,KAnDFisB,CACHD,EAAkBxR,EAAiBtc,KAA4BD,OkDrBrE+uB,GAAA,WACE,SAAAA,EAAoBlF,EACA3P,GADAp0B,KAAA+jC,eAAAA,EACA/jC,KAAAo0B,SAAAA,EAStB,OAPE6U,EAAA/oC,UAAAU,KAAA,SAAKq/B,EAA2B72B,GACtB,IAAAgrB,EAAAp0B,KAAAo0B,SACFoO,EAAUxiC,KAAK+jC,iBACfnF,EAAexK,EAASoO,GAAS1B,UAAUb,GAEjD,OADArB,EAAazwB,IAAI/E,EAAO03B,UAAU0B,IAC3B5D,GAEXqK,EAXA,GCnDA,SAAAC,KACE,OAAO,IAAItG,OCUAuG,GAAkB,IAAIrhC,EAAkC,2BAOrEshC,GAAA,WAUE,SAAAA,EAAyDC,GAAzD,IAAA98B,EAAAvM,KAAyDA,KAAAqpC,SAAAA,EAJjDrpC,KAAAspC,aAAc,EAENtpC,KAAAqB,MAAO,EAGrBrB,KAAKupC,YAAc,IAAI1W,QAAQ,SAACxtB,EAAKmkC,GACnCj9B,EAAKumB,QAAUztB,EACfkH,EAAKo1B,OAAS6H,WAKlBJ,EAAAlpC,UAAAupC,gBAAA,WAAA,IAAAl9B,EAAAvM,KACE,IAAIA,KAAKspC,YAAT,CAIA,IAAMI,KAEAjM,EAAW,WACdlxB,EAAwBlL,MAAO,EAChCkL,EAAKumB,WAGP,GAAI9yB,KAAKqpC,SACP,IAAK,IAAI7oC,EAAI,EAAGA,EAAIR,KAAKqpC,SAAS1oC,OAAQH,IAAK,CAC7C,IAAMmpC,EAAa3pC,KAAKqpC,SAAS7oC,KAC7BwnB,GAAU2hB,IACZD,EAAkBhoC,KAAKioC,GAK7B9W,QAAQ+W,IAAIF,GAAmBzhB,KAAK,WAAQwV,MAAeoM,MAAM,SAAAroC,GAAO+K,EAAKo1B,OAAOngC,KAEnD,IAA7BkoC,EAAkB/oC,QACpB88B,IAEFz9B,KAAKspC,aAAc,+BA3CVF,EAAqBhlC,QAAA,SAAA0lC,EAAAxpC,GAAA,OAAA,IAAAA,GAArB8oC,GAAqBtiC,EASZqiC,GAAe,KAAAhlC,WAAA,SAVrC,GCHa4lC,GAAS,IAAIjiC,EAAuB,SAUpCkiC,IACXjhC,QAASghC,GACT3/B,WAVF,SAAA6/B,KACE,MAAO,GAAGC,KAAgBA,KAAgBA,MAU1CzgC,SAGF,SAAAygC,KACE,OAAOriC,OAAOsiC,aAAa,GAAK/K,KAAKgL,MAAsB,GAAhBhL,KAAKC,WAO3C,IAAMgL,GAAuB,IAAIviC,EAAkC,wBAM7DwiC,GAAc,IAAIxiC,EAAuB,eAUzCyiC,GACT,IAAIziC,EAA4D,wBCrDpE0iC,GAAA,WAAA,SAAAA,YAEEA,EAAAtqC,UAAAuqC,IAAA,SAAIx/B,GAEFuZ,QAAQimB,IAAIx/B,IAGdu/B,EAAAtqC,UAAAukB,KAAA,SAAKxZ,GAEHuZ,QAAQC,KAAKxZ,+BARJu/B,EAAOpmC,QAAA,SAAAsmC,EAAApqC,GAAA,OAAA,IAAAA,GAAPkqC,IAAOrmC,WAAA,SADpB,eCKgCxC,GAC9B,OAAQA,EAAcmK,GAGxB,SAAA6+B,GAAiChpC,GAC/B,OAAQA,EAAcoK,IAQxB,SAAA6+B,GAA4BpmB,OAAkB,IAAAhiB,KAAAD,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAAC,EAAAD,EAAA,GAAA7B,UAAA6B,GACtCiiB,EAAQ7iB,MAAKd,MAAb2jB,EAAO5iB,EAAWY,ICQ1B,ICDIqoC,GACAC,GDAJC,GAAA,WAAA,SAAAA,IAIE/qC,KAAAgrC,SAAoBxmB,QAqCtB,OAnCEumB,EAAA7qC,UAAA+qC,YAAA,SAAYtpC,GACV,IAAMupC,EAAgBlrC,KAAKmrC,mBAAmBxpC,GACxC+J,EAAU1L,KAAKorC,aAAazpC,GAG5B0pC,EDzBV,SAAAC,EAA+B3pC,GAC7B,OAAQA,EAA0B,eAAKipC,GCwBjBU,CAAe3pC,GAEnC0pC,EAAYrrC,KAAKgrC,SAAU,QAASrpC,GAChCupC,GACFG,EAAYrrC,KAAKgrC,SAAU,iBAAkBE,GAE3Cx/B,GACF2/B,EAAYrrC,KAAKgrC,SAAU,gBAAiBt/B,IAKhDq/B,EAAA7qC,UAAAkrC,aAAA,SAAazpC,GACX,OAAIA,EACK4pC,GAAgB5pC,GAAS4pC,GAAgB5pC,GAChB3B,KAAKorC,aAAaT,GAAiBhpC,IAG9D,MAITopC,EAAA7qC,UAAAirC,mBAAA,SAAmBxpC,GAEjB,IADA,IAAIH,EAAImpC,GAAiBhpC,GAClBH,GAAKmpC,GAAiBnpC,IAC3BA,EAAImpC,GAAiBnpC,GAGvB,OAAOA,GAEXupC,EAzCA,GEXAS,GACE,SAAAA,GACWC,EACAC,GADA1rC,KAAAyrC,gBAAAA,EACAzrC,KAAA0rC,mBAAAA,GAUAC,GACY,SAAY9O,GACnC,OAAO,IAAI+O,GAAkB/O,IAEzBgP,GAJOF,GAYPG,GAH4B,SAAYjP,GAC5C,OAAOhK,QAAQC,QAAQ6Y,GAAsC9O,KAMlDkP,GACyB,SAAYlP,GAEhD,OAAO,IAAI2O,GAA6BG,GAAsC9O,QAE1EmP,GALOD,GAePE,GAJyC,SAAYpP,GAEzD,OAAOhK,QAAQC,QAAQiZ,GAAsDlP,KAgB/EqP,GAAA,WAAA,SAAAA,IAMElsC,KAAAmsC,kBAAoEN,GAKpE7rC,KAAAosC,mBAC8DN,GAK9D9rC,KAAAqsC,kCACIL,GAKJhsC,KAAAssC,mCAC+CL,UAK/CC,EAAAhsC,UAAAqsC,WAAA,aAKAL,EAAAhsC,UAAAssC,cAAA,SAAc7nC,KAKdunC,EAAAhsC,UAAAusC,YAAA,SAAY5P,gCAtCDqP,EAAQ9nC,QAAA,SAAAsoC,EAAApsC,GAAA,OAAA,IAAAA,GAAR4rC,IAAQ/nC,WAAA,SADrB,GCpEawoC,GFuBb,SAAAC,KACE,IAAMC,EAAYvmC,EAAsC,IACxD,SAAIumC,KACFhC,GAAQgC,EAAW,SAEjB/B,GAASD,GAAc,OAChB,IE7Ba+B,GAE1B,SAAAE,GAAmBC,EAAYC,GAC7B,OAAO,KAiCF,IAAMC,GACTN,GFFJ,SAAAO,GAA4BC,EAAmBpmC,GAC7C,YAD6C,IAAAA,IAAAA,EAAA,MACtC+jC,GAAOoC,YAAYC,EAAWpmC,IECR,SAAComC,EAAmBpmC,GAAgB,OAAA+lC,IAWtDM,GACTT,GFRJ,SAAAU,GAAyBC,EAAcC,GAErC,OADA1C,GAAM2C,WAAWF,EAAOC,GACjBA,GEMgB,SAAChtC,EAAQgB,GAAY,OAAAA,GCxDxCokC,GAAwB9S,QAAQC,QAAQ,GAI9C,SAAA2a,GAAkC3nC,GACZ,oBAAT4nC,KAET/H,GAAQ1d,KAAK,WAAQniB,GAAMA,EAAGjF,MAAM,KAAM,QAE1C6sC,KAAKznB,QAAQwnB,kBAAkB,oBAAqB3nC,GCkExD,IAAA6nC,GAAA,WAiCE,SAAAA,EAAY/qC,OAACgiB,EAAAhiB,EAAAgrC,qBAAAA,OAAA,IAAAhpB,GAAAA,EACX,GAjCO5kB,KAAA6tC,sBAAgC,EAChC7tC,KAAA8tC,sBAAgC,EAKhC9tC,KAAA+tC,UAAoB,EAKpB/tC,KAAAguC,WAAgC,IAAI1G,IAAa,GAOjDtnC,KAAAiuC,iBAAsC,IAAI3G,IAAa,GAOvDtnC,KAAAkuC,SAA8B,IAAI5G,IAAa,GAK/CtnC,KAAAmuC,QAA6B,IAAI7G,IAAa,GAGlC,oBAARoG,KACT,MAAM,IAAI1pC,MAAM,kDAGlB0pC,KAAKU,oBACQpuC,KACRquC,SAAW,EADHruC,KAGRsuC,OAHQtuC,KAGMuuC,OAASb,KAAKznB,QAE5BynB,KAA0B,cALlB1tC,KAMNuuC,OANMvuC,KAMQuuC,OAAOC,KAAMd,KAA0B,cAGvDA,KAAmC,uBAT3B1tC,KAUNuuC,OAVMvuC,KAUQuuC,OAAOC,KAAK,IAAMd,KAAmC,uBAGtEE,GAAyBF,KAAqC,yBAbrD1tC,KAcNuuC,OAdMvuC,KAcQuuC,OAAOC,KAAMd,KAAqC,yBAoH3E,SAAAe,EAA0CC,GACxCA,EAAKH,OAASG,EAAKH,OAAOC,MACxBxsC,KAAM,UACN2sC,YAAkBC,eAAiB,GACnCC,aAAc,SAACC,EAAwB7oB,EAAepS,EAAck7B,EAAYC,EACjEC,GACb,IAEE,OADAC,GAAQR,GACDI,EAASK,WAAWt7B,EAAQk7B,EAAMC,EAAWC,WAEpDG,GAAQV,KAKZW,SAAU,SAACP,EAAwB7oB,EAAepS,EAAcyhB,EACrD0Z,EAAgBC,EAAkB7lC,GAC3C,IAEE,OADA8lC,GAAQR,GACDI,EAASQ,OAAOz7B,EAAQyhB,EAAU0Z,EAAWC,EAAW7lC,WAE/DgmC,GAAQV,KAIZa,UACI,SAACT,EAAwB7oB,EAAepS,EAAc27B,GACpDV,EAASW,QAAQ57B,EAAQ27B,GACrBvpB,IAAYpS,IAGa,aAAvB27B,EAAaE,QACfhB,EAAKb,qBAAuB2B,EAAaG,UACzCC,GAAYlB,IACoB,aAAvBc,EAAaE,SACtBhB,EAAKZ,qBAAuB0B,EAAaK,aAKnDC,cAAe,SAAChB,EAAwB7oB,EAAepS,EAAclS,GAGnE,OAFAmtC,EAAS7D,YAAYp3B,EAAQlS,GAC7B+sC,EAAKqB,kBAAkB,WAAM,OAAArB,EAAKP,QAAQ1G,KAAK9lC,MACxC,KA5JT8sC,CAjBazuC,MAgGjB,OA5ES2tC,EAAAqC,gBAAP,WAAoC,OAA6C,IAAtCtC,KAAKznB,QAAQ9e,IAAI,kBAErDwmC,EAAAsC,oBAAP,WACE,IAAKtC,EAAOqC,kBACV,MAAM,IAAIhsC,MAAM,mDAIb2pC,EAAAuC,uBAAP,WACE,GAAIvC,EAAOqC,kBACT,MAAM,IAAIhsC,MAAM,mDAgBpB2pC,EAAAztC,UAAAiwC,IAAA,SAAOrqC,EAA2BkpC,EAAiBC,GACjD,OAAQjvC,KAA8BuuC,OAAO4B,IAAIrqC,EAAIkpC,EAAWC,IAelEtB,EAAAztC,UAAAkwC,QAAA,SAAWtqC,EAA2BkpC,EAAiBC,EAAmBjtC,GACxE,IAAM0sC,EAAQ1uC,KAA8BuuC,OACtCQ,EAAOL,EAAK2B,kBAAkB,gBAAkBruC,EAAM8D,EAAIwqC,GAAenO,GAAMA,IACrF,IACE,OAAOuM,EAAK0B,QAAQrB,EAAMC,EAAWC,WAErCP,EAAK6B,WAAWxB,KAQpBpB,EAAAztC,UAAAswC,WAAA,SAAc1qC,EAA2BkpC,EAAiBC,GACxD,OAAQjvC,KAA8BuuC,OAAOiC,WAAW1qC,EAAIkpC,EAAWC,IAgBzEtB,EAAAztC,UAAA6vC,kBAAA,SAAqBjqC,GACnB,OAAQ9F,KAA8BsuC,OAAO6B,IAAIrqC,IAErD6nC,EAvIA,GAyIA,SAAA8C,MACA,IAAMH,MAaN,SAAAV,GAAqBlB,GACnB,GAAqB,GAAjBA,EAAKL,WAAkBK,EAAKb,uBAAyBa,EAAKX,SAC5D,IACEW,EAAKL,WACLK,EAAKT,iBAAiBxG,KAAK,cAG3B,GADAiH,EAAKL,YACAK,EAAKb,qBACR,IACEa,EAAKqB,kBAAkB,WAAM,OAAArB,EAAKR,SAASzG,KAAK,gBAEhDiH,EAAKX,UAAW,IAuD1B,SAAAmB,GAAiBR,GACfA,EAAKL,WACDK,EAAKX,WACPW,EAAKX,UAAW,EAChBW,EAAKV,WAAWvG,KAAK,OAIzB,SAAA2H,GAAiBV,GACfA,EAAKL,WACLuB,GAAYlB,GAOd,IC9RIgC,GD8RJC,GAAA,WAAA,SAAAA,IACW3wC,KAAA6tC,sBAAgC,EAChC7tC,KAAA8tC,sBAAgC,EAChC9tC,KAAA+tC,UAAoB,EACpB/tC,KAAAguC,WAAgC,IAAI1G,GACpCtnC,KAAAiuC,iBAAsC,IAAI3G,GAC1CtnC,KAAAkuC,SAA8B,IAAI5G,GAClCtnC,KAAAmuC,QAA6B,IAAI7G,GAS5C,OAPEqJ,EAAAzwC,UAAAiwC,IAAA,SAAIrqC,GAAsB,OAAOA,KAEjC6qC,EAAAzwC,UAAAswC,WAAA,SAAW1qC,GAAsB,OAAOA,KAExC6qC,EAAAzwC,UAAA6vC,kBAAA,SAAkBjqC,GAAsB,OAAOA,KAE/C6qC,EAAAzwC,UAAAkwC,QAAA,SAAWtqC,GAAsB,OAAOA,KAC1C6qC,EAhBA,GEtQAC,GAAA,WAeE,SAAAA,EAAoBC,GAApB,IAAAtkC,EAAAvM,KAAoBA,KAAA6wC,QAAAA,EAbZ7wC,KAAA8wC,cAAwB,EACxB9wC,KAAA+wC,eAAyB,EAOzB/wC,KAAAgxC,UAAoB,EACpBhxC,KAAAixC,cAEAjxC,KAAAkxC,iBAA8C,KAGpDlxC,KAAKmxC,sBACLN,EAAQV,IAAI,WACV5jC,EAAK2kC,iBACc,oBAARxD,KAAsB,KAAOA,KAAKznB,QAAQ9e,IAAI,6BAIrDypC,EAAA1wC,UAAAixC,oBAAR,WAAA,IAAA5kC,EAAAvM,KACEA,KAAK6wC,QAAQ7C,WAAWlN,WACtB3/B,KAAM,WACJoL,EAAKykC,UAAW,EAChBzkC,EAAKwkC,eAAgB,KAIzB/wC,KAAK6wC,QAAQd,kBAAkB,WAC7BxjC,EAAKskC,QAAQ3C,SAASpN,WACpB3/B,KAAM,WACJwsC,GAAOuC,yBACPzC,GAAkB,WAChBlhC,EAAKwkC,eAAgB,EACrBxkC,EAAK6kC,+BAWfR,EAAA1wC,UAAAmxC,4BAAA,WAGE,OAFArxC,KAAK8wC,eAAiB,EACtB9wC,KAAKgxC,UAAW,EACThxC,KAAK8wC,eAOdF,EAAA1wC,UAAAoxC,4BAAA,WAEE,GADAtxC,KAAK8wC,eAAiB,EAClB9wC,KAAK8wC,cAAgB,EACvB,MAAM,IAAI9sC,MAAM,qCAGlB,OADAhE,KAAKoxC,uBACEpxC,KAAK8wC,eAMdF,EAAA1wC,UAAA6tC,SAAA,WACE,OAAO/tC,KAAK+wC,eAAwC,IAAvB/wC,KAAK8wC,gBAAwB9wC,KAAK6wC,QAAQ/C,sBAGjE8C,EAAA1wC,UAAAkxC,qBAAR,WAAA,IAAA7kC,EAAAvM,KACE,GAAIA,KAAK+tC,WAEPN,GAAkB,WAChB,KAAkC,IAA3BlhC,EAAK0kC,WAAWtwC,QAAc,CACnC,IAAI4wC,EAAKhlC,EAAK0kC,WAAWO,MACzBC,aAAaF,EAAGG,WAChBH,EAAGI,OAAOplC,EAAKykC,UAEjBzkC,EAAKykC,UAAW,QAEb,CAEL,IAAIY,EAAU5xC,KAAK6xC,kBACnB7xC,KAAKixC,WAAajxC,KAAKixC,WAAWa,OAAO,SAACP,GACxC,OAAIA,EAAGQ,WAAYR,EAAGQ,SAASH,KAC7BH,aAAaF,EAAGG,YACT,KAMX1xC,KAAKgxC,UAAW,IAIZJ,EAAA1wC,UAAA2xC,gBAAR,WACE,OAAK7xC,KAAKkxC,iBAKHlxC,KAAKkxC,iBAAiBc,WAAW9sC,IAAI,SAAC5E,GAC3C,OACE8I,OAAQ9I,EAAE8I,OAGV6oC,iBAAmB3xC,EAAU2xC,iBAC7B7+B,KAAM9S,EAAE8S,YAKNw9B,EAAA1wC,UAAAgyC,YAAR,SAAoBX,EAAkBY,EAAkBJ,GAAxD,IAAAxlC,EAAAvM,KACM0xC,GAAkB,EAClBS,GAAWA,EAAU,IACvBT,EAAY98B,WAAW,WACrBrI,EAAK0kC,WAAa1kC,EAAK0kC,WAAWa,OAAO,SAACP,GAAO,OAAAA,EAAGG,YAAcA,IAClEH,EAAGhlC,EAAKykC,SAAUzkC,EAAKslC,oBACtBM,IAELnyC,KAAKixC,WAAWvvC,MAAoBiwC,OAAQJ,EAAIG,UAAWA,EAAWK,SAAUA,KAelFnB,EAAA1wC,UAAAkyC,WAAA,SAAWT,EAAkBQ,EAAkBJ,GAC7C,GAAIA,IAAa/xC,KAAKkxC,iBACpB,MAAM,IAAIltC,MACN,8HAINhE,KAAKkyC,YAAYP,EAAwBQ,EAASJ,GAClD/xC,KAAKoxC,wBAOPR,EAAA1wC,UAAAmyC,uBAAA,WAAmC,OAAOryC,KAAK8wC,eAQ/CF,EAAA1wC,UAAAoyC,cAAA,SAAcC,EAAY3oC,EAAkB4oC,GAE1C,qCArKS5B,EAAWxsC,QAAA,SAAAquC,EAAAnyC,GAAA,OAAA,IAAAA,GAAXswC,GAAW9pC,EAcO6mC,MAAMxpC,WAAA,SAfrC,GA8KAuuC,GAAA,WAKE,SAAAA,IAFA1yC,KAAA2yC,cAAgB,IAAIppC,IAEJqpC,GAAmBC,YAAY7yC,aAO/C0yC,EAAAxyC,UAAA4yC,oBAAA,SAAoBtvC,EAAYuvC,GAC9B/yC,KAAK2yC,cAAcnpC,IAAIhG,EAAOuvC,IAOhCL,EAAAxyC,UAAA8yC,sBAAA,SAAsBxvC,GAAcxD,KAAK2yC,cAAcM,OAAOzvC,IAK9DkvC,EAAAxyC,UAAAgzC,0BAAA,WAA8BlzC,KAAK2yC,cAAcllC,SAMjDilC,EAAAxyC,UAAAizC,eAAA,SAAeC,GAA+B,OAAOpzC,KAAK2yC,cAAcxrC,IAAIisC,IAAS,MAKrFV,EAAAxyC,UAAAmzC,oBAAA,WAAuC,OAAO1zC,MAAM2zC,KAAKtzC,KAAK2yC,cAAcnwC,WAK5EkwC,EAAAxyC,UAAAqzC,mBAAA,WAA8B,OAAO5zC,MAAM2zC,KAAKtzC,KAAK2yC,cAActqB,SAQnEqqB,EAAAxyC,UAAAszC,sBAAA,SAAsBJ,EAAYK,GAChC,YADgC,IAAAA,IAAAA,GAAA,GACzBb,GAAmBY,sBAAsBxzC,KAAMozC,EAAMK,+BAjDnDf,EAAmBtuC,QAAA,SAAAsvC,EAAApzC,GAAA,OAAA,IAAAA,GAAnBoyC,IAAmBvuC,WAAA,SADhC,GAkFIyuC,GAAqC,IAhBzC,WAAA,SAAAe,KAMA,OALEA,EAAAzzC,UAAA2yC,YAAA,SAAYe,KACZD,EAAAzzC,UAAAszC,sBAAA,SAAsBI,EAA+BR,EAAWK,GAE9D,OAAO,MAEXE,EANA,IDnPaE,GAA2B,IAAI/rC,EAAwB,sBASpEgsC,GACE,SAAAA,GAAmB9xC,EAAqBwB,GAArBxD,KAAAgC,KAAAA,EAAqBhC,KAAAwD,MAAAA,GA0B1C,SAAAuwC,GACIC,EACAhyC,EAAcwC,QAAA,IAAAA,IAAAA,MAEhB,IAAMyvC,EAAO,aAAajyC,EACpBkyC,EAAS,IAAIpsC,EAAemsC,GAClC,OAAO,SAACE,QAAA,IAAAA,IAAAA,MACN,IAAIC,EAAWC,KACf,IAAKD,GAAYA,EAAS3tC,SAASU,IAAI0sC,IAA0B,GAC/D,GAAIG,EACFA,EACIxvC,EAAU3C,OAAOsyC,GAAgBtyC,QAAQkH,QAASmrC,EAAQlrC,UAAU,SACnE,CACL,IAAMsrC,EACF9vC,EAAU3C,OAAOsyC,GAAgBtyC,QAAQkH,QAASmrC,EAAQlrC,UAAU,KA/BhF,SAAAurC,EAA+B9tC,GAC7B,GAAIiqC,KAAcA,GAAU/jC,YACvB+jC,GAAUjqC,SAASU,IAAI0sC,IAA0B,GACpD,MAAM,IAAI7vC,MACN,iFAEN0sC,GAAYjqC,EAASU,IAAIqtC,IACzB,IAAMC,EAAQhuC,EAASU,IAAIkjC,GAAsB,MAC7CoK,GAAOA,EAAMrpC,QAAQ,SAACspC,GAAc,OAAAA,MAwBlCH,CAAelsC,EAASlI,QAAQqE,UAAW8vC,EAAmBtyC,KAAMiyC,KAGxE,OASJ,SAAAU,EAA+BC,GAC7B,IAAMR,EAAWC,KAEjB,IAAKD,EACH,MAAM,IAAIpwC,MAAM,uBAGlB,IAAKowC,EAAS3tC,SAASU,IAAIytC,EAAe,MACxC,MAAM,IAAI5wC,MACN,wFAGN,OAAOowC,EArBEO,CAAeT,IAwC1B,SAAAG,KACE,OAAO3D,KAAcA,GAAU/jC,UAAY+jC,GAAY,KA6BzD,IAAA8D,GAAA,WAOE,SAAAA,EAAoBK,GAAA70C,KAAA60C,UAAAA,EALZ70C,KAAA80C,YACA90C,KAAA+0C,qBACA/0C,KAAAg1C,YAAsB,SA2B9BR,EAAAt0C,UAAA+0C,uBAAA,SAA0BC,EAAmC3wC,GAA7D,IAAAgI,EAAAvM,KAOQm1C,EA2FV,SAAAC,EAAmBC,GASjB,MANqB,SAAjBA,EACO,IAAI1E,IAEc,YAAjB0E,OAA6BhxC,EAAYgxC,IAC/C,IAAI1H,IAAQC,qBAAsBnsB,OAlGvB2zB,CADM7wC,EAAUA,EAAQ4wC,YAAS9wC,GAE1CG,IAAgCuE,QAAS4kC,GAAQ3kC,SAAUmsC,IAGjE,OAAOA,EAAOhF,IAAI,WAChB,IAAMmF,EAAiBjtC,EAASlI,QAC3BqE,UAAWA,EAAW8D,OAAQiE,EAAK9F,SAAUzE,KAAMkzC,EAAcrY,WAAW76B,OAC3EuzC,EAAoCL,EAAc/0C,OAAOm1C,GACzDE,EAAiCD,EAAU9uC,SAASU,IAAI4jC,GAAc,MAC5E,IAAKyK,EACH,MAAM,IAAIxxC,MAAM,iEAMlB,OAJAuxC,EAAU7oC,UAAU,WAAM,OAAA8xB,GAAOjyB,EAAKuoC,SAAUS,KAChDJ,EAASpF,kBACL,WAAM,OAAAoF,EAAShH,QAAQrN,WAClB3/B,KAAM,SAACQ,GAAiB6zC,EAAiBvK,YAAYtpC,QAwFpE,SAAA8zC,EACIC,EAA4BP,EAAgB7f,GAC9C,IACE,IAAMJ,EAASI,IACf,OAAItN,GAAUkN,GACLA,EAAO2U,MAAM,SAACroC,GAGnB,MAFA2zC,EAAOpF,kBAAkB,WAAM,OAAA2F,EAAazK,YAAYzpC,KAElDA,IAIH0zB,EACP,MAAO1zB,GAGP,MAFA2zC,EAAOpF,kBAAkB,WAAM,OAAA2F,EAAazK,YAAYzpC,KAElDA,GAvGGi0C,CAA6BD,EAAkBL,EAAU,WAC9D,IAAMQ,EAAoCJ,EAAU9uC,SAASU,IAAIiiC,IAEjE,OADAuM,EAAWlM,kBACJkM,EAAWpM,YAAYthB,KAAK,WAEjC,OADA1b,EAAKqpC,mBAAmBL,GACjBA,SAsBff,EAAAt0C,UAAA21C,gBAAA,SACIhZ,EAAqBiZ,GADzB,IAAAvpC,EAAAvM,UACyB,IAAA81C,IAAAA,MAEvB,IAAMvxC,EAAUwxC,MAAmBD,GACnC,OAhOJ,SAAAE,EASIvvC,EAAoBlC,EACpBs4B,GAEF,OAAOhK,QAAQC,QAAQ,IAAImjB,GAAkBpZ,IAoNpCqZ,CAAuBl2C,EAAeuE,EAASs4B,GACjD5U,KAAK,SAAAitB,GAAiB,OAAA3oC,EAAK0oC,uBAAuBC,EAAe3wC,MAGhEiwC,EAAAt0C,UAAA01C,mBAAR,SAA2BL,GACzB,IAAMnf,EAASmf,EAAU9uC,SAASU,IAAIgvC,IACtC,GAAIZ,EAAUlZ,qBAAqB17B,OAAS,EAC1C40C,EAAUlZ,qBAAqBjxB,QAAQ,SAAAgrC,GAAK,OAAAhgB,EAAO9d,UAAU89B,SACxD,CAAA,IAAIb,EAAU7iC,SAAS2jC,cAG5B,MAAM,IAAIryC,MACN,cAAciB,EAAUswC,EAAU7iC,SAASzS,aAAY,yIAH3Ds1C,EAAU7iC,SAAS2jC,cAAcjgB,GAMnCp2B,KAAK80C,SAASpzC,KAAK6zC,IAMrBf,EAAAt0C,UAAAwM,UAAA,SAAU4oB,GAA8Bt1B,KAAK+0C,kBAAkBrzC,KAAK4zB,IAMpE91B,OAAA4D,eAAIoxC,EAAAt0C,UAAA,gBAAJ,WAA2B,OAAOF,KAAK60C,2CAKvCL,EAAAt0C,UAAAmN,QAAA,WACE,GAAIrN,KAAKg1C,WACP,MAAM,IAAIhxC,MAAM,4CAElBhE,KAAK80C,SAASjsC,QAAQuC,QAAQ,SAAAkrC,GAAU,OAAAA,EAAOjpC,YAC/CrN,KAAK+0C,kBAAkB3pC,QAAQ,SAAA+V,GAAY,OAAAA,MAC3CnhB,KAAKg1C,YAAa,GAGpBx1C,OAAA4D,eAAIoxC,EAAAt0C,UAAA,iBAAJ,WAAkB,OAAOF,KAAKg1C,uEA7HnBR,EAAWpwC,QAAA,SAAAmyC,EAAAj2C,GAAA,OAAA,IAAAA,GAAXk0C,GAAW1tC,EAMSuB,KAAQlE,WAAA,SAPzC,GAiKA,SAAA4xC,GAA0CS,EAAUC,GAMlD,OALI92C,MAAM8H,QAAQgvC,GACVA,EAAKxX,OAAO8W,GAAgBS,GAE/Bp2C,KAAOo2C,EAASC,GAUvB,IAAAN,GAAA,WA4BE,SAAAA,EACYO,EAAuB1L,EAA2B6J,EAClD8B,EACAC,EACAC,GAJZ,IAAAtqC,EAAAvM,KACYA,KAAA02C,MAAAA,EAAuB12C,KAAAgrC,SAAAA,EAA2BhrC,KAAA60C,UAAAA,EAClD70C,KAAA22C,kBAAAA,EACA32C,KAAA42C,0BAAAA,EACA52C,KAAA62C,YAAAA,EA5BJ72C,KAAA82C,uBACA92C,KAAA+2C,UACA/2C,KAAAg3C,cAAwB,EACxBh3C,KAAAi3C,sBAAgC,EAChCj3C,KAAAk3C,SAAU,EAMFl3C,KAAAm3C,kBAKAn3C,KAAA4f,cAcd5f,KAAKi3C,qBAAuBx1B,KAE5BzhB,KAAK02C,MAAMzI,iBAAiBnN,WACvB3/B,KAAM,WAAQoL,EAAKmqC,MAAMvG,IAAI,WAAQ5jC,EAAK6qC,YAE/C,IAAMC,EAAoB,IAAIxW,GAAoB,SAACW,GACjDj1B,EAAK2qC,QAAU3qC,EAAKmqC,MAAM3I,WAAaxhC,EAAKmqC,MAAM5I,uBAC7CvhC,EAAKmqC,MAAM7I,qBAChBthC,EAAKmqC,MAAM3G,kBAAkB,WAC3BvO,EAASrgC,KAAKoL,EAAK2qC,SACnB1V,EAAS/D,eAIPsQ,EAAW,IAAIlN,GAAoB,SAACW,GAGxC,IAAI8V,EACJ/qC,EAAKmqC,MAAM3G,kBAAkB,WAC3BuH,EAAY/qC,EAAKmqC,MAAMxI,SAASpN,UAAU,WACxC6M,GAAOuC,yBAIPzC,GAAkB,WACXlhC,EAAK2qC,SAAY3qC,EAAKmqC,MAAM5I,sBAC5BvhC,EAAKmqC,MAAM7I,uBACdthC,EAAK2qC,SAAU,EACf1V,EAASrgC,MAAK,UAMtB,IAAMo2C,EAA4BhrC,EAAKmqC,MAAM1I,WAAWlN,UAAU,WAChE6M,GAAOsC,sBACH1jC,EAAK2qC,UACP3qC,EAAK2qC,SAAU,EACf3qC,EAAKmqC,MAAM3G,kBAAkB,WAAQvO,EAASrgC,MAAK,QAIvD,OAAO,WACLm2C,EAAU1qB,cACV2qB,EAAY3qB,iBAIf5sB,KAAwC+tC,SEjb7C,SAAAyJ,QAuF4B,IAAAC,KAAAl1C,EAAA,EAAAA,EAAA7B,UAAAC,OAAA4B,IAAAk1C,EAAAl1C,GAAA7B,UAAA6B,GAC3B,IAAIikC,EAAaC,OAAOC,kBACpB1T,EAA2B,KAC1B0kB,EAAYD,EAAYA,EAAY92C,OAAS,GAUjD,OClGF,SAAAg3C,EAA4Bv2C,GAC1B,OAAOA,GAA0C,mBAApBA,EAAOqjC,SDwFhCkT,CAAYD,IACd1kB,EAA2BykB,EAAYjG,MACnCiG,EAAY92C,OAAS,GAAoD,iBAAxC82C,EAAYA,EAAY92C,OAAS,KACpE6lC,EAAqBiR,EAAYjG,QAEV,iBAATkG,IAChBlR,EAAqBiR,EAAYjG,OAGjB,OAAdxe,GAA6C,IAAvBykB,EAAY92C,QAAgB82C,EAAY,aAAc5W,GACxD4W,EAAY,GEpGtC,SAAAG,EA0D4BpR,GAC1B,YAD0B,IAAAA,IAAAA,EAAqBC,OAAOC,mBpBvDxD,SAAAmR,EAqEEjT,EACAkT,EACAtR,GAEA,YAFA,IAAAA,IAAAA,EAAqBC,OAAOC,mBAEE,mBAAnBoR,EAEF,SAAC1uC,GAA0B,OAAAA,EAAOy4B,KACvCgW,EAAS,SAACv2B,EAAG9gB,GAAM,OqBhFzB,SAAA8yC,EAkGwBhkC,EAA2B0jB,GACjD,IAAKA,EACH,OAAI1jB,aAAiBuxB,GACZvxB,EAEF,IAAIuxB,GAAcyF,GAAYh3B,IAGvC,GAAa,MAATA,EAAe,CACjB,GC1GJ,SAAAyoC,EAGoCzoC,GAClC,OAAOA,GAA6C,mBAA7BA,EAAMsyB,IDsGvBmW,CAAoBzoC,GACtB,OE5GN,SAAA0oC,EAMkC1oC,EAA6B0jB,GAC7D,OAGS,IAAI6N,GAHR7N,EAGsB,SAAAiN,GACvB,IAAMvB,EAAM,IAAIR,GAShB,OARAQ,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WACzB,IAAM9D,EAA8BrxB,EAAMsyB,MAC1ClD,EAAIvwB,IAAIwyB,EAAWG,WACjB3/B,KAAI,SAACC,GAASs9B,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAxE,EAAW9+B,KAAKC,OAC/DO,MAAK,SAAC27B,GAAOoB,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAxE,EAAWt+B,MAAM27B,OAC/DG,SAAQ,WAAKiB,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAxE,EAAWxC,qBAGtDiB,GAZgBuH,GAAsB32B,IFoGtC0oC,CAAe1oC,EAAO0jB,GACxB,GAAIhL,GAAU1Y,GACnB,OG9GN,SAAA2oC,EAK+B3oC,EAAuB0jB,GACpD,OAGS,IAAI6N,GAHR7N,EAGsB,SAAAiN,GACvB,IAAMvB,EAAM,IAAIR,GAYhB,OAXAQ,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAn1B,EAAM2Y,KACrC,SAAA7mB,GACEs9B,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WACzBxE,EAAW9+B,KAAKC,GAChBs9B,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAxE,EAAWxC,kBAGhD,SAAAH,GACEoB,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WAAM,OAAAxE,EAAWt+B,MAAM27B,WAG/CoB,GAfgBgH,GAAmBp2B,IHuGnC2oC,CAAY3oC,EAAO0jB,GACrB,GAAIoT,GAAY92B,GACrB,OAAOk1B,GAAUl1B,EAAO0jB,GAClB,GIjHZ,SAAAklB,EAG2B5oC,GACzB,OAAOA,GAA2C,mBAA3BA,EAAMy2B,IJ6GfmS,CAAW5oC,IAA2B,iBAAVA,EACtC,OKlHN,SAAA6oC,EAMgC7oC,EAAoB0jB,GAClD,IAAK1jB,EACH,MAAM,IAAItL,MAAM,2BAElB,OAGS,IAAI68B,GAHR7N,EAGsB,SAAAiN,GACvB,IACI/+B,EADEw9B,EAAM,IAAIR,GAgChB,OA9BAQ,EAAIvwB,IAAI,WAEFjN,GAAuC,mBAApBA,EAAS8kC,QAC9B9kC,EAAS8kC,WAGbtH,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WACzBvjC,EAAWoO,EAAMy2B,MACjBrH,EAAIvwB,IAAI6kB,EAAUyR,SAAS,WACzB,IAAIxE,EAAWzC,OAAf,CAGA,IAAIp8B,EACAC,EACJ,IACE,IAAM6zB,EAASh0B,EAASC,OACxBC,EAAQ8zB,EAAO9zB,MACfC,EAAO6zB,EAAO7zB,KACd,MAAOi8B,GAEP,YADA2C,EAAWt+B,MAAM27B,GAGfj8B,EACF4+B,EAAWxC,YAEXwC,EAAW9+B,KAAKC,GAChBpB,KAAKykC,mBAIJ/F,GAnCgBmH,GAAoBv2B,ILuGpC6oC,CAAa7oC,EAAO0jB,GAI/B,MAAM,IAAImT,WAAqB,OAAV72B,UAAyBA,GAASA,GAAS,sBrBtCzCgkC,CAAK1O,EAAQtjB,EAAG9gB,IAAIqhC,KV/E7C,SAAA38B,EAwC0B0/B,EAAyCC,GACjE,OAAO,SAAAuT,EAAsBhvC,GAC3B,GAAuB,mBAAZw7B,EACT,MAAM,IAAIuB,UAAU,8DAEtB,OAAO/8B,EAAO63B,KAAK,IAAI0D,GAAYC,EAASC,KUmCxC3/B,CAAI,SAAC3F,EAAG84C,GAAO,OAAAP,EAAex2B,EAAG/hB,EAAGiB,EAAG63C,OACtC7R,MAE8B,iBAAnBsR,IAChBtR,EAAasR,GAER,SAAC1uC,GAA0B,OAAAA,EAAO63B,KAAK,IAAIsF,GAAiB3B,EAAS4B,MoB3BrEqR,CAAenT,GAA6D8B,GF4C5EoR,CAAYpR,EAAZoR,CAAwBpT,GAAeiT,EAAazkB,IF0UrDhO,CAAMqyB,EAAmBtJ,EAASlM,KX3Z1C,SAAAyW,IACE,OAAO,SAAClvC,GAA0B,OAAA85B,IAAAA,CDpBpC,SAAAqV,EA8BgCC,EACApkB,GAC9B,OAAO,SAAAqkB,EAAmCrvC,GACxC,IAAI26B,EASJ,GAPEA,EADqC,mBAA5ByU,EAC0BA,EAElB,SAAAzU,IACf,OAAmByU,GAIC,mBAAbpkB,EACT,OAAOhrB,EAAO63B,KAAK,IAAIgI,GAAkBlF,EAAgB3P,IAG3D,IAAMiP,EAAmB7jC,OAAOW,OAAOiJ,EAAQi7B,IAI/C,OAHAhB,EAAYj6B,OAASA,EACrBi6B,EAAYU,eAAiBA,EAEKV,GC9BSkV,CAAUrP,GAAVqP,CAA+BnvC,KW0Z/BkvC,YAmB7CnC,EAAAj2C,UAAAoY,UAAA,SAAaogC,EAAiDlkB,GAA9D,IAMMmkB,EANNpsC,EAAAvM,KAEE,IAAKA,KAAK62C,YAAYx1C,KACpB,MAAM,IAAI2C,MACN,iJAIJ20C,EADED,aAA8B7kB,GACb6kB,EAGf14C,KAAK42C,0BAA0B7iB,wBAAwB2kB,GAE7D14C,KAAKm3C,eAAez1C,KAAKi3C,EAAiBtkB,eAG1C,IAAMpmB,EAAW0qC,aAA4BzkB,GACzC,KACAl0B,KAAK60C,UAAU1tC,IAAIstB,IAEjBmkB,EAAUD,EAAiBx4C,OAAOkI,EAASG,QAD1BgsB,GAAsBmkB,EAAiBvkB,SACanmB,GAE3E2qC,EAAQlsC,UAAU,WAAQH,EAAKssC,iBAAiBD,KAChD,IAAM7F,EAAc6F,EAAQnyC,SAASU,IAAIypC,GAAa,MAWtD,OAVImC,GACF6F,EAAQnyC,SAASU,IAAIurC,IAChBI,oBAAoB8F,EAAQtkC,SAASsiB,cAAemc,GAG3D/yC,KAAK84C,eAAeF,GAChBn3B,MACFzhB,KAAKgrC,SAASP,IACV,oGAECmO,GAaTzC,EAAAj2C,UAAAk3C,KAAA,WAAA,IAAA7qC,EAAAvM,KACE,GAAIA,KAAKg3C,aACP,MAAM,IAAIhzC,MAAM,6CAGlB,IAAMspC,EAAQ6I,EAAe4C,aAC7B,IACE/4C,KAAKg3C,cAAe,EACpBh3C,KAAK+2C,OAAO3rC,QAAQ,SAAC+H,GAAS,OAAAA,EAAK0iB,kBAC/B71B,KAAKi3C,sBACPj3C,KAAK+2C,OAAO3rC,QAAQ,SAAC+H,GAAS,OAAAA,EAAK2iB,mBAErC,MAAOt0B,GAEPxB,KAAK02C,MAAM3G,kBAAkB,WAAM,OAAAxjC,EAAKoqC,kBAAkB1L,YAAYzpC,aAEtExB,KAAKg3C,cAAe,EACpB5J,GAASE,KASb6I,EAAAj2C,UAAA84C,WAAA,SAAWjQ,GACT,IAAM51B,EAAQ41B,EACd/oC,KAAK+2C,OAAOr1C,KAAKyR,GACjBA,EAAKgjB,eAAen2B,OAMtBm2C,EAAAj2C,UAAAorB,WAAA,SAAWyd,GACT,IAAM51B,EAAQ41B,EACdvK,GAAOx+B,KAAK+2C,OAAQ5jC,GACpBA,EAAK+iB,oBAGCigB,EAAAj2C,UAAA44C,eAAR,SAAuBvd,GACrBv7B,KAAKg5C,WAAWzd,EAAatoB,UAC7BjT,KAAKo3C,OACLp3C,KAAK4f,WAAWle,KAAK65B,GAGjBv7B,KAAK60C,UAAU1tC,IAAIojC,OAA4B1oC,OAAO7B,KAAK82C,qBACrD1rC,QAAQ,SAAC+V,GAAa,OAAAA,EAASoa,MAGnC4a,EAAAj2C,UAAA24C,iBAAR,SAAyBtd,GACvBv7B,KAAKsrB,WAAWiQ,EAAatoB,UAC7BurB,GAAOx+B,KAAK4f,WAAY2b,IAI1B4a,EAAAj2C,UAAAsN,YAAA,WAEExN,KAAK+2C,OAAOluC,QAAQuC,QAAQ,SAAC+H,GAAS,OAAAA,EAAK9F,aAM7C7N,OAAA4D,eAAI+yC,EAAAj2C,UAAA,iBAAJ,WAAkB,OAAOF,KAAK+2C,OAAOp2C,wCAlN9Bw1C,EAAA4C,WAAyB9L,GAAe,oDAFpCkJ,EAAc/xC,QAAA,SAAA60C,EAAA34C,GAAA,OAAA,IAAAA,GAAd61C,GAAcrvC,EA4BN6mC,IAAM7mC,EAAoB0jC,IAAO1jC,EAAqBuB,GAAQvB,EAClDikC,IAAYjkC,EACJmtB,IAAwBntB,EACtCsiC,MAAqBjlC,WAAA,SAhChD,GAwNA,SAAAq6B,GAAmB0a,EAAWz1B,GAC5B,IAAMvgB,EAAQg2C,EAAK1zC,QAAQie,GACvBvgB,GAAS,GACXg2C,EAAK7tB,OAAOnoB,EAAO,GWzhBvB,IAAAi2C,GAAA,WAAA,SAAAA,KAsHA,OAFSA,EAAAnxC,kBACsB,WAAM,OAAAoxC,GAAkCD,EAAkBxiB,KACzFwiB,EAtHA,GA0HMC,GzEXN,SAAAC,GACIC,EACA7iB,GAGF,OAYF,SAAA8iB,EACID,EACA7iB,EACAxb,EACAhI,GAgIF,IAAIwX,EA/HCkJ,KAEHA,GAAkB,SAAAQ,GAGhB,SAAAqlB,EACYC,EACAC,EACAC,GAHZ,IAAAptC,EAIE4nB,EAAAvzB,KAAAZ,OAAOA,YAHGuM,EAAAktC,YAAAA,EACAltC,EAAAmtC,WAAAA,EACAntC,EAAAotC,UAAAA,EALJptC,EAAAqtC,eAsHV,OAvHqDtlB,EAAAA,EAAAA,GAUnD90B,OAAA4D,eAAIo2C,EAAAt5C,UAAA,eAAJ,WACE,OAAOs2B,GAAiBC,EAAiBz2B,KAAK05C,WAAY15C,KAAK25C,4CAGjEn6C,OAAA4D,eAAIo2C,EAAAt5C,UAAA,gBAAJ,WAA2B,OAAO,IAAIwc,GAAa1c,KAAK05C,WAAY15C,KAAK25C,4CAGzEn6C,OAAA4D,eAAIo2C,EAAAt5C,UAAA,sBAAJ,WACE,IAAMgU,EAAiBgI,GAA0Blc,KAAK05C,WAAY15C,KAAK25C,WACjEllC,EAAaJ,GAAsBH,EAAgBlU,KAAK25C,WACxDvsB,E1BsCd,SAAAysB,EACIvlC,EAAoCC,EAAkBulC,GAExD,GAAIA,EAAWxxC,SAA+C,IAArCwxC,EAAWxxC,OAAO2T,cAAsB,CAI/D,IAFA,IAAMA,EAAgB69B,EAAWxxC,OAAO2T,cACpC89B,EAAcD,EAAWxxC,OACA,MAAtByxC,EAAYzxC,QAAkB2T,GAAiB89B,EAAY99B,eAChE89B,EAAcA,EAAYzxC,OAE5B,OAAOyxC,EAST,IANA,IAAIvlC,EAAaJ,GAA4BE,GAEzCG,EAAaF,EACb6Y,EAAc7Y,EAAU7C,IAGrB8C,EAAa,GAElB4Y,GADA3Y,EAAaA,EAAWtC,KACCT,IACzB8C,IAEF,OAAO4Y,E0B9DmBysB,CAAuB3lC,EAAgBlU,KAAK25C,UAAW35C,KAAK05C,YAEhF,OAAQzlC,GAAkBC,IAAkC,MAAfkZ,EAEzC,IAAI1Q,GAAa0Q,EAAa3Y,GAD9B,IAAIiI,GAAa,KAAM1c,KAAK25C,4CAIlCH,EAAAt5C,UAAAuN,MAAA,WACE,KAAOzN,KAAKy5C,YAAYppC,IAAO1P,QAC7BX,KAAKw+B,OAAO,IAIhBgb,EAAAt5C,UAAAiH,IAAA,SAAIjE,GAA0C,OAAOlD,KAAK45C,UAAU12C,IAAU,MAE9E1D,OAAA4D,eAAIo2C,EAAAt5C,UAAA,cAAJ,WAAuB,OAAOF,KAAKy5C,YAAYppC,IAAO1P,wCAEtD64C,EAAAt5C,UAAAwoC,mBAAA,SAAsBsR,EAAwCtuC,EAAaxI,GAEzE,IAAM+2C,EAAcj6C,KAAKk6C,aAAah3C,GAChC6lC,EAAWiR,EACItR,mBACGh9B,MAAoB1L,KAAKy5C,YAAaz5C,KAAK05C,WAC3C15C,KAAK25C,UAAWM,GAGxC,OAFClR,EAAyB/S,yBAAyBh2B,MACnDA,KAAK45C,UAAUvuB,OAAO4uB,EAAa,EAAGlR,GAC/BA,GAGTyQ,EAAAt5C,UAAAi6C,gBAAA,SACIxB,EAAkDz1C,EAClDuD,EAA+B8tB,EAC/B6lB,GACF,IAAMC,EAAkB5zC,GAAYzG,KAAK88B,gBACpCsd,GAAqD,MAArCzB,EAAyB1qC,UAAoBosC,IAChED,EAAcC,EAAgBlzC,IAAI80B,GAAwB,OAG5D,IAAMV,EACFod,EAAiBx4C,OAAOk6C,EAAiB9lB,OAAkBlwB,EAAW+1C,GAE1E,OADAp6C,KAAKs6C,OAAO/e,EAAatoB,SAAU/P,GAC5Bq4B,GAGTie,EAAAt5C,UAAAo6C,OAAA,SAAOvR,EAA6B7lC,GAClC,GAAI6lC,EAAQp8B,UACV,MAAM,IAAI3I,MAAM,sDAElB,IAAMgQ,EAAS+0B,EAAyBhqB,OAClCk7B,EAAcj6C,KAAKk6C,aAAah3C,GAWtC,OATAgoB,GAAWlX,EAAOhU,KAAKy5C,YAAaz5C,KAAK25C,UAAWM,EAAaj6C,KAAK05C,WAAWx2C,OAIjF8nB,GAA2BhX,GAAO,EAD9BqZ,GAAqB4sB,EAAaj6C,KAAKy5C,YAAYppC,IAAQrQ,KAAKy5C,YAAYnpC,MAG/Ey4B,EAAyB/S,yBAAyBh2B,MACnDA,KAAK45C,UAAUvuB,OAAO4uB,EAAa,EAAGlR,GAE/BA,GAGTyQ,EAAAt5C,UAAAq6C,KAAA,SAAKxR,EAA6ByR,GAChC,GAAIzR,EAAQp8B,UACV,MAAM,IAAI3I,MAAM,oDAElB,IAAMd,EAAQlD,KAAKwF,QAAQujC,GAG3B,OAFA/oC,KAAKq1B,OAAOnyB,GACZlD,KAAKs6C,OAAOvR,EAAS/oC,KAAKk6C,aAAaM,IAChCzR,GAGTyQ,EAAAt5C,UAAAsF,QAAA,SAAQujC,GAAuC,OAAO/oC,KAAK45C,UAAUp0C,QAAQujC,IAE7EyQ,EAAAt5C,UAAAs+B,OAAA,SAAOt7B,GACL,IAAM+2C,EAAcj6C,KAAKk6C,aAAah3C,GAAQ,IN+EtD,SAAAwoB,EACIjB,EAAwBgwB,EACxBlvB,GACF,IAAMpY,EAAOsX,EAAWpa,IAAOkb,GAC/BD,GAAWb,EAAYc,IAAekvB,EAAcjvB,UACpDK,GAAa1Y,IMnFPuY,CAAW1rB,KAAKy5C,YAAaz5C,KAAK05C,WAAYO,GAC9Cj6C,KAAK45C,UAAUvuB,OAAO4uB,EAAa,IAGrCT,EAAAt5C,UAAAm1B,OAAA,SAAOnyB,GACL,IAAM+2C,EAAcj6C,KAAKk6C,aAAah3C,GAAQ,GACxCiQ,EAAOmY,GAAWtrB,KAAKy5C,YAAaQ,IAAej6C,KAAK05C,WAAWluB,UAEzE,OADgE,MAA5CxrB,KAAK45C,UAAUvuB,OAAO4uB,EAAa,GAAG,GACrC,IAAItlB,GAAQxhB,EAAMA,EAAKtB,IAAUsB,EAAKjB,KAAoB,MAGzEsnC,EAAAt5C,UAAAg6C,aAAR,SAAqBh3C,EAAgBmkC,GACnC,YADmC,IAAAA,IAAAA,EAAA,GACtB,MAATnkC,EACKlD,KAAKy5C,YAAYppC,IAAO1P,OAAS0mC,EAOnCnkC,GAEXs2C,EAvHkB,CAAmCF,IA8HvD,IAAM/lC,EAAYN,EAASgI,EAAU/X,OACrC,GAAIyQ,GAAaJ,IAEfkX,EAAalX,GACFnD,KAAiB,MACvB,CACL,IAAMsqC,EAAcznC,EAASlB,IAAU4oC,cAAwC,IAO/E,GAAI/mC,GAAWX,GAAW,CACxB,IAAMiW,EAAWjW,EAASlB,IACpB6oC,EAAa7nC,GAAiBkI,EAAWhI,GAE/C4X,GACI3B,EAFuBY,GAAiBZ,EAAU0xB,GAElBF,EN8P1C,SAAAG,EAAkC3xB,EAAqBlI,GACrD,OAAOiI,GAAqBC,GAAYA,EAAShF,YAAYlD,GAAQA,EAAKkD,YM/PrB22B,CAAkB3xB,EAAU0xB,SAE7Ez4B,GAAYu4B,EAAaz/B,EAAWhI,GAGtCA,EAASgI,EAAU/X,OAASunB,EH4pDhC,SAAAqwB,EACIF,EAAiCthC,EAAoB2F,EACrD87B,GACF,OACEA,GAAyB,EAAI,KAE7BzhC,EACA,KACA,KACAshC,EACA37B,GGrqDI67B,CAAiBvnC,EAAWN,EAAUynC,GAAa,GAEvDxoB,GAAcjf,EAAUgI,EAAU/X,MAAiBunB,GAGrD,OAAO,IAAIkJ,GAAmBlJ,EAAYxP,EAAWhI,GA9K9CsmC,CAAmBD,EAAuB7iB,EAD7Ctc,KAC6ED,O0ElGnF8gC,GAAA,WAAA,SAAAA,KA8DA,OADSA,EAAAhzC,kBAA6C,WAAM,OAAAizC,MAC5DD,EA9DA,GAoEMC,G1EiNN,SAAAC,KACE,OAWF,SAAAC,EACIlgC,EAAkBhI,EAAiBvH,GACrC,GAAI8H,GAAYyH,GAAY,CAC1B,IAAMmgC,EAAiBngC,EAAU4C,eAC3B6M,EAAgBrX,GAAwB4H,EAAU/X,MAAO+P,GAC/D,OAAO,IAAI0hB,GAAQjK,EAAehf,EAAS0vC,GACtC,GAAkB,IAAdngC,EAAUtW,KAA4B,CAC/C,IAAM02C,EAAoBxmC,GAAkB5B,GAC5C,OAAO,IAAI0hB,GAAQ0mB,EAAmBA,EAAkBxpC,KAAW,GAErE,OAAO,KArBAspC,CAAchhC,KAA4BD,KAAY,O2EhI/DohC,GAAA,WAGE,SAAAA,EAAYC,GAAoBv7C,KAAKu7C,WAAaA,EAsBpD,OApBE/7C,OAAA4D,eAAIk4C,EAAAp7C,UAAA,cAAJ,WACE,IAAMoI,EAAStI,KAAKu7C,WAAW16B,WAC/B,OAAOvY,EAAS,IAAIkzC,GAAwBlzC,GAAU,sCAGxD9I,OAAA4D,eAAIk4C,EAAAp7C,UAAA,gBAAJ,WAA2B,O9FxE7B,SAAAu7C,EAA4B5nC,GAC1B,IAAMnI,EAAUoU,GAAajM,GAE7B,OAAO,IAAI6I,GADGhR,EAAQsI,MAAM5C,IAAOgC,KAAK1H,EAAQ4H,WACjB5H,EAAQsI,O8FqELynC,CAAYz7C,KAAKu7C,6CAEnD/7C,OAAA4D,eAAIk4C,EAAAp7C,UAAA,yBAAJ,WACE,IAAM02B,EAAgB52B,KAAKu7C,WAC3B,OAAO3kB,G9F/KX,SAAA8kB,EAAqCj1B,GACnC,IAAM/a,EAAUqV,GAAqB0F,GAMrC,YAJ0BpiB,IAAtBqH,EAAQwT,YACVxT,EAAQwT,UDkPZ,SAAAy8B,EAAwCroC,EAAmBU,GACzD,IAAMhB,EAAQgB,EAAM5C,IAAOgC,KAAKE,GAEhC,OAAkB,EAAXN,EAAMjM,MAAiCiN,EADpBhB,EAAM6K,gBAC2C,KCrPrD89B,CAAwBjwC,EAAQ4H,UAAW5H,EAAQsI,QAGlEtI,EAAQwT,U8FwKWw8B,CAAa9kB,oCAEvCp3B,OAAA4D,eAAIk4C,EAAAp7C,UAAA,eAAJ,WAAqB,O9FnJvB,SAAA07C,EAAmCn1B,GAEjC,OADgB1F,GAAqB0F,GACtBzS,MAAMnC,I8FiJO+pC,CAAW57C,KAAKu7C,6CAE5C/7C,OAAA4D,eAAIk4C,EAAAp7C,UAAA,iBAAJ,WACE,O9FiGJ,SAAA27C,EAA6Bp1B,GAC3B,IACMzS,EADW+M,GAAqB0F,GACfzS,MAEjBwY,EAAWxY,EAAMpC,IACjB0a,EAFQtY,EAAM5C,IAEGmb,QACjBuvB,KACN,GAAIxvB,GAAYE,EACd,IAAK,IAAIhsB,EAAI,EAAGA,EAAI8rB,EAAS3rB,QAAS,CACpC,IAAMo7C,EAAazvB,EAAS9rB,KACtBw7C,EAAc1vB,EAAS9rB,KAC7B,GAA0B,iBAAfu7C,EAAyB,CAClC,IAAME,EAAeF,EACfG,EAAkBppC,GAAiBkB,EAAMgoC,IACzC1mB,EAAgC9I,EAASF,EAAS9rB,MAClD27C,EAAmB7vB,EAAS9rB,KAO9BimB,GAAWy1B,GACbJ,EAAUp6C,MAAM+kB,QAAOA,EAAEzkB,KAAIi6C,EAAE3mB,SAAQA,EAAElU,WAJI,kBAArB+6B,EACtBA,IACCA,GAAoB,IAAY,QAQ3C,OADAL,EAAUM,KAAK/6B,IACRy6B,E8F9HED,CAAa77C,KAAKu7C,YAAuBzJ,OAAO5wB,qCAGzD1hB,OAAA4D,eAAIk4C,EAAAp7C,UAAA,kBAAJ,WAA0C,O9FgB5C,SAAAm8C,EAA6BxoC,GAC3B,IAAMnI,EAAUoU,GAAajM,GAM7B,YAJ0BxP,IAAtBqH,EAAQyT,YACVzT,EAAQyT,UDqDZ,SAAAm9B,EAAkCtoC,EAAcV,GAC9C,IAAMN,EAAQgB,EAAM5C,IAAOgC,KAAKE,GAChC,GAAIN,GAASA,EAAMgf,WAAY,CAG7B,IAFA,IAAMkD,KACFqnB,EAAavpC,EAAM9P,MAAQ,EACtB1C,EAAI,EAAGA,EAAIwS,EAAMgf,WAAWrxB,OAAQH,GAAK,EAChD00B,EAAOliB,EAAMgf,WAAWxxB,IAAMwT,EAAMuoC,GACpCA,IAEF,OAAOrnB,EAGT,OAAO,KCjEeonB,CAAkB5wC,EAAQsI,MAAOtI,EAAQ4H,YAGxD5H,EAAQyT,c8FvBkCk9B,CAAar8C,KAAKu7C,6CAEnE/7C,OAAA4D,eAAIk4C,EAAAp7C,UAAA,sBAAJ,WAA8B,O9F1EhC,SAAAs8C,EAAmC/1B,GACjC,IAAM/a,EAAUoU,GAAa2G,GAAS,GACtC,IAAK/a,EAAS,SAOd,IANA,IA6M0BH,EA5MpB6P,EADQ1P,EAAQsI,MACF5C,IACd4B,EAAQoI,EAAMhI,KAAK1H,EAAQ4H,WAC3BmpC,KAEA1+B,EAAW/K,EAAMgL,aACdxd,EAF+B,MAArBwS,EAAMyK,gBAEAjd,EAAIud,EAAUvd,IAAK,CAC1C,IAAIY,EAAQga,EAAMhI,KAAK5S,QAuML6D,KADMkH,EArMDnK,GAsMduD,WAAuCN,IAAjBkH,EAAImI,eAAiDrP,IAAvBkH,EAAI4J,iBAjM/D/T,EAAQA,EAAMuD,MAEhB83C,EAAe/6C,KAAKN,GAEtB,OAAOq7C,E8FsD8BD,CAAmBx8C,KAAKu7C,6CAC/DD,EAzBA,GA2BAE,GAAA,SAAArnB,GACE,SAAAqnB,EAAYD,UAEVpnB,EAAAvzB,KAAAZ,KAAMu7C,IAAWv7C,KA4IrB,OA/IsCs0B,EAAAA,EAAAA,GAMpC90B,OAAA4D,eAAIo4C,EAAAt7C,UAAA,qBAAJ,WACE,OAAOF,KAAKu7C,WAAWv3B,UAAY/C,KAAKgD,aAAejkB,KAAKu7C,WAAwB,sCAGtF/7C,OAAA4D,eAAIo4C,EAAAt7C,UAAA,YAAJ,WAAqB,OAAOF,KAAK42B,cAAgBhQ,0CAEjDpnB,OAAA4D,eAAIo4C,EAAAt7C,UAAA,kBAAJ,WAQE,OAPgB4f,GAAa9f,KAAKu7C,gDAUpC/7C,OAAA4D,eAAIo4C,EAAAt7C,UAAA,kBAAJ,WACE,IAAMyjB,KACA8C,EAAUzmB,KAAK42B,cACrB,GAAInQ,EAEF,IADA,IAAMi2B,EAASj2B,EAAQ9C,WACdnjB,EAAI,EAAGA,EAAIk8C,EAAO/7C,OAAQH,IAAK,CACtC,IAAMm8C,EAAOD,EAAOl8C,GACpBmjB,EAAWg5B,EAAK36C,MAAQ26C,EAAKv7C,MAGjC,OAAOuiB,mCAGTnkB,OAAA4D,eAAIo4C,EAAAt7C,UAAA,eAAJ,WACE,IAAM08C,KACAn2B,EAAUzmB,KAAK42B,cACrB,GAAInQ,EAAS,CACX,IAAMo2B,EAAW97B,GAAqB0F,GAChCq2B,EAAQD,EAAS7oC,MAAM6oC,EAASvpC,WAEtC,GADuBka,GAAkBqvB,EAASvpC,UAAWupC,EAAS7oC,QAEpE,IAAK,IAAIxT,EAAC,EAA2CA,EAAIs8C,EAAMn8C,OAC1DH,GAAC,EACJ,GAAI4tB,GAAkB0uB,EAAOt8C,GAAI,CAC/B,IAAMu8C,EAAYzuB,GAAQwuB,EAAOt8C,GAC3BY,EAAQitB,GAASyuB,EAAOt8C,GACV,kBAATY,IAETw7C,EAAQG,GAAa37C,QAM3B,CAAA,IAAM47C,EAAWv2B,EAAQw2B,UACzB,IAASz8C,EAAI,EAAGA,EAAIw8C,EAASr8C,OAAQH,IACnCo8C,EAAQI,EAASx8C,KAAM,GAI7B,OAAOo8C,mCAGTp9C,OAAA4D,eAAIo4C,EAAAt7C,UAAA,cAAJ,WACE,IAAMqX,KACAkP,EAAUzmB,KAAK42B,cACrB,GAAInQ,EAAS,CACX,IAAMo2B,EAAW97B,GAAqB0F,GAChCq2B,EAAQD,EAAS7oC,MAAM6oC,EAASvpC,WAEtC,GADuBka,GAAkBqvB,EAASvpC,UAAWupC,EAAS7oC,QAEpE,IAAK,IAAIxT,EAAC,EAA2CA,EAAIs8C,EAAMn8C,OAC1DH,GAAC,EACJ,IAAK4tB,GAAkB0uB,EAAOt8C,GAAI,CAChC,IAAM08C,EAAY5uB,GAAQwuB,EAAOt8C,GAC3BY,EAAQitB,GAASyuB,EAAOt8C,GAChB,OAAVY,IAEFmW,EAAO2lC,GAAa97C,QAM1B,CAAA,IAAM+7C,EAAW12B,EAAwB22B,MACzC,IAAS58C,EAAI,EAAGA,EAAI28C,EAAQx8C,OAAQH,IAAK,CACvC,IAAMy7C,EAAOkB,EAAQt5B,KAAKrjB,GAC1B+W,EAAO0kC,GAAQkB,EAAQE,iBAAiBpB,KAI9C,OAAO1kC,mCAGT/X,OAAA4D,eAAIo4C,EAAAt7C,UAAA,kBAAJ,WAGE,IAFA,IAAMo9C,EAAat9C,KAAKu7C,WAAW+B,WAC7BC,KACG/8C,EAAI,EAAGA,EAAI88C,EAAW38C,OAAQH,IAErC+8C,EAAS77C,KAAK87C,GADEF,EAAW98C,KAG7B,OAAO+8C,mCAGT/9C,OAAA4D,eAAIo4C,EAAAt7C,UAAA,gBAAJ,WACE,IAAM02B,EAAgB52B,KAAK42B,cAC3B,IAAKA,EAAe,SAGpB,IAFA,IAAM0mB,EAAa1mB,EAAc2mB,SAC3BA,KACG/8C,EAAI,EAAGA,EAAI88C,EAAW38C,OAAQH,IAErC+8C,EAAS77C,KAAK87C,GADEF,EAAW98C,KAG7B,OAAO+8C,mCAGT/B,EAAAt7C,UAAAu9C,MAAA,SAAMC,GAEJ,OADgB19C,KAAK29C,SAASD,GACf,IAAM,MAGvBlC,EAAAt7C,UAAAy9C,SAAA,SAASD,GACP,IAAME,KAEN,OADAC,GAAqB79C,KAAM09C,EAAWE,GAAS,GACxCA,GAGTpC,EAAAt7C,UAAA49C,cAAA,SAAcJ,GACZ,IAAME,KAEN,OADAC,GAAqB79C,KAAM09C,EAAWE,GAAS,GACxCA,GAGTpC,EAAAt7C,UAAA69C,oBAAA,SAAoBC,EAAmBC,GACrCj+C,KAAK87C,UAAU1wC,QAAQ,SAAC+V,GAClBA,EAASnf,OAASg8C,GACpB78B,EAASmU,SAAS2oB,MAI1BzC,EA/IA,CAAsCF,IAiJtC,SAAAuC,GACIh9B,EAAuB68B,EAAiCE,EACxDM,GACEr9B,aAAsB26B,IACxB36B,EAAWy8B,WAAWlyC,QAAQ,SAAA4V,GACxB08B,EAAU18B,IACZ48B,EAAQl8C,KAAKsf,GAEXA,aAAgBw6B,KACd0C,IAAel9B,EAAK4V,eACtBinB,GAAqB78B,EAAM08B,EAAWE,EAASM,MAWzD,SAAAV,GAOwCjC,GACtC,OAAIA,aAAsBt6B,KACjBs6B,EAAWv3B,UAAY/C,KAAKgD,aAC/B,IAAIu3B,GAAwBD,GAC5B,IAAID,GAAqBC,GAExB,KAMF,IAAM4C,GAfGX,GChYhBY,GAAA,WACE,SAAAA,KAMF,OALEA,EAAAl+C,UAAAm+C,SAAA,SAAS9yC,GAAuC,OAAO+yC,GAAmB/yC,IAE1E6yC,EAAAl+C,UAAAC,OAAA,SAAUo+C,GACR,OAAO,IAAIC,GAAyBD,IAExCH,EAPA,GASMK,GAAkB,SAACv7C,EAAe2gB,GAAc,OAAAA,GAMtD26B,GAAA,WAsBE,SAAAA,EAAYD,GArBIv+C,KAAAW,OAAiB,EAIzBX,KAAA0+C,eAAwC,KAExC1+C,KAAA2+C,iBAA0C,KAC1C3+C,KAAA4+C,gBAAiD,KACjD5+C,KAAA6+C,QAAyC,KACzC7+C,KAAA8+C,QAAyC,KACzC9+C,KAAA++C,eAAgD,KAChD/+C,KAAAg/C,eAAgD,KAChDh/C,KAAAi/C,WAA4C,KAC5Cj/C,KAAAk/C,WAA4C,KAC5Cl/C,KAAAm/C,cAA+C,KAC/Cn/C,KAAAo/C,cAA+C,KAE/Cp/C,KAAAq/C,qBAAsD,KACtDr/C,KAAAs/C,qBAAsD,KAGhBt/C,KAAKu/C,WAAahB,GAAaE,GA6f/E,OA3fED,EAAAt+C,UAAAs/C,YAAA,SAAY15C,GACV,IAAI2E,EACJ,IAAKA,EAASzK,KAAK6+C,QAAoB,OAAXp0C,EAAiBA,EAASA,EAAOy1B,MAC3Dp6B,EAAG2E,IAIP+zC,EAAAt+C,UAAAu/C,iBAAA,SACI35C,GAMF,IAJA,IAAI45C,EAAS1/C,KAAK6+C,QACdc,EAAa3/C,KAAKm/C,cAClBS,EAAkB,EAClBC,EAA6B,KAC1BH,GAAUC,GAAY,CAG3B,IAAMl1C,GAAmCk1C,GACjCD,GACIA,EAAOI,aACHC,GAAiBJ,EAAYC,EAAiBC,GAC1DH,EACAC,EACEK,EAAmBD,GAAiBt1C,EAAQm1C,EAAiBC,GAC7DC,EAAer1C,EAAOq1C,aAG5B,GAAIr1C,IAAWk1C,EACbC,IACAD,EAAaA,EAAWM,kBAGxB,GADAP,EAASA,EAASxf,MACU,MAAxBz1B,EAAOy1C,cACTN,QACK,CAEAC,IAAaA,MAClB,IAAMM,EAAyBH,EAAmBJ,EAC5CQ,EAAoBN,EAAiBF,EAC3C,GAAIO,GAA0BC,EAAmB,CAC/C,IAAK,IAAI5/C,EAAI,EAAGA,EAAI2/C,EAAwB3/C,IAAK,CAC/C,IAAM6/C,EAAS7/C,EAAIq/C,EAAYl/C,OAASk/C,EAAYr/C,GAAMq/C,EAAYr/C,GAAK,EACrE0C,EAAQm9C,EAAS7/C,EACnB4/C,GAAqBl9C,GAASA,EAAQi9C,IACxCN,EAAYr/C,GAAK6/C,EAAS,GAI9BR,EADsBp1C,EAAOy1C,eACAE,EAAoBD,GAKnDH,IAAqBF,GACvBh6C,EAAG2E,EAAQu1C,EAAkBF,KAKnCtB,EAAAt+C,UAAAogD,oBAAA,SAAoBx6C,GAClB,IAAI2E,EACJ,IAAKA,EAASzK,KAAK4+C,gBAA4B,OAAXn0C,EAAiBA,EAASA,EAAO81C,cACnEz6C,EAAG2E,IAIP+zC,EAAAt+C,UAAAsgD,iBAAA,SAAiB16C,GACf,IAAI2E,EACJ,IAAKA,EAASzK,KAAK++C,eAA2B,OAAXt0C,EAAiBA,EAASA,EAAOg2C,WAClE36C,EAAG2E,IAIP+zC,EAAAt+C,UAAAwgD,iBAAA,SAAiB56C,GACf,IAAI2E,EACJ,IAAKA,EAASzK,KAAKi/C,WAAuB,OAAXx0C,EAAiBA,EAASA,EAAOk2C,WAC9D76C,EAAG2E,IAIP+zC,EAAAt+C,UAAA0gD,mBAAA,SAAmB96C,GACjB,IAAI2E,EACJ,IAAKA,EAASzK,KAAKm/C,cAA0B,OAAX10C,EAAiBA,EAASA,EAAOw1C,aACjEn6C,EAAG2E,IAIP+zC,EAAAt+C,UAAA2gD,sBAAA,SAAsB/6C,GACpB,IAAI2E,EACJ,IAAKA,EAASzK,KAAKq/C,qBAAiC,OAAX50C,EAAiBA,EAASA,EAAOq2C,oBACxEh7C,EAAG2E,IAIP+zC,EAAAt+C,UAAA6gD,KAAA,SAAKC,GAEH,GADkB,MAAdA,IAAoBA,OACnB1C,GAAmB0C,GACtB,MAAM,IAAIh9C,MACN,yBAAyBiB,EAAU+7C,GAAW,4CAGpD,OAAIhhD,KAAKihD,MAAMD,GACNhhD,KAEA,MAIXw+C,EAAAt+C,UAAAwM,UAAA,aAEA8xC,EAAAt+C,UAAA+gD,MAAA,SAAMD,GAAN,IAAAz0C,EAAAvM,KACEA,KAAKkhD,SAEL,IAEIh+C,EACA2gB,EACAs9B,EAJA12C,EAAwCzK,KAAK6+C,QAC7CuC,GAAsB,EAI1B,GAAIzhD,MAAM8H,QAAQu5C,GAAa,CAC5BhhD,KAAyBW,OAASqgD,EAAWrgD,OAE9C,IAAK,IAAI0gD,EAAQ,EAAGA,EAAQrhD,KAAKW,OAAQ0gD,IAEvCF,EAAcnhD,KAAKu/C,WAAW8B,EAD9Bx9B,EAAOm9B,EAAWK,IAEH,OAAX52C,GAAoB8d,GAAe9d,EAAO62C,UAAWH,IAInDC,IAEF32C,EAASzK,KAAKuhD,mBAAmB92C,EAAQoZ,EAAMs9B,EAAaE,IAEzD94B,GAAe9d,EAAOoZ,KAAMA,IAAO7jB,KAAKwhD,mBAAmB/2C,EAAQoZ,KAPxEpZ,EAASzK,KAAKyhD,UAAUh3C,EAAQoZ,EAAMs9B,EAAaE,GACnDD,GAAa,GASf32C,EAASA,EAAOy1B,WAGlBh9B,EAAQ,ErFzGd,SAAAw+C,EAAgCn2C,EAAUzF,GACxC,GAAInG,MAAM8H,QAAQ8D,GAChB,IAAK,IAAI/K,EAAI,EAAGA,EAAI+K,EAAI5K,OAAQH,IAC9BsF,EAAGyF,EAAI/K,SAKT,IAFA,IAAMU,EAAWqK,EAAI4c,QACjBtE,OAAI,IACEA,EAAO3iB,EAASC,QAAY,MACpC2E,EAAG+d,EAAKziB,OqFiGRugD,CAAgBX,EAAY,SAACn9B,GAC3Bs9B,EAAc50C,EAAKgzC,WAAWr8C,EAAO2gB,GACtB,OAAXpZ,GAAoB8d,GAAe9d,EAAO62C,UAAWH,IAInDC,IAEF32C,EAAS8B,EAAKg1C,mBAAmB92C,EAAQoZ,EAAMs9B,EAAaj+C,IAEzDqlB,GAAe9d,EAAOoZ,KAAMA,IAAOtX,EAAKi1C,mBAAmB/2C,EAAQoZ,KAPxEpZ,EAAS8B,EAAKk1C,UAAUh3C,EAAQoZ,EAAMs9B,EAAaj+C,GACnDk+C,GAAa,GAQf32C,EAASA,EAAOy1B,MAChBh9B,MAEDlD,KAAyBW,OAASuC,EAKrC,OAFAlD,KAAK4hD,UAAUn3C,GACdzK,KAAwCghD,WAAaA,EAC/ChhD,KAAK6hD,SAMdriD,OAAA4D,eAAIo7C,EAAAt+C,UAAA,eAAJ,WACE,OAA+B,OAAxBF,KAAK++C,gBAA+C,OAApB/+C,KAAKi/C,YACjB,OAAvBj/C,KAAKm/C,eAAwD,OAA9Bn/C,KAAKq/C,sDAW1Cb,EAAAt+C,UAAAghD,OAAA,WACE,GAAIlhD,KAAK6hD,QAAS,CAChB,IAAIp3C,OAAM,EACNq3C,OAAU,EAEd,IAAKr3C,EAASzK,KAAK4+C,gBAAkB5+C,KAAK6+C,QAAoB,OAAXp0C,EAAiBA,EAASA,EAAOy1B,MAClFz1B,EAAO81C,cAAgB91C,EAAOy1B,MAGhC,IAAKz1B,EAASzK,KAAK++C,eAA2B,OAAXt0C,EAAiBA,EAASA,EAAOg2C,WAClEh2C,EAAOy1C,cAAgBz1C,EAAOq1C,aAIhC,IAFA9/C,KAAK++C,eAAiB/+C,KAAKg/C,eAAiB,KAEvCv0C,EAASzK,KAAKi/C,WAAuB,OAAXx0C,EAAiBA,EAASq3C,EACvDr3C,EAAOy1C,cAAgBz1C,EAAOq1C,aAC9BgC,EAAar3C,EAAOk2C,WAEtB3gD,KAAKi/C,WAAaj/C,KAAKk/C,WAAa,KACpCl/C,KAAKm/C,cAAgBn/C,KAAKo/C,cAAgB,KAC1Cp/C,KAAKq/C,qBAAuBr/C,KAAKs/C,qBAAuB,OAiB5Dd,EAAAt+C,UAAAuhD,UAAA,SAAUh3C,EAAuCoZ,EAASs9B,EAAkBj+C,GAG1E,IAAI6+C,EAiCJ,OA/Be,OAAXt3C,EACFs3C,EAAiB/hD,KAAK8+C,SAEtBiD,EAAiBt3C,EAAOu3C,MAExBhiD,KAAKiiD,QAAQx3C,IAKA,QADfA,EAAiC,OAAxBzK,KAAK0+C,eAA0B,KAAO1+C,KAAK0+C,eAAev3C,IAAIg6C,EAAaj+C,KAI7EqlB,GAAe9d,EAAOoZ,KAAMA,IAAO7jB,KAAKwhD,mBAAmB/2C,EAAQoZ,GAExE7jB,KAAKkiD,WAAWz3C,EAAQs3C,EAAgB7+C,IAIzB,QADfuH,EAAmC,OAA1BzK,KAAK2+C,iBAA4B,KAAO3+C,KAAK2+C,iBAAiBx3C,IAAIg6C,EAAa,QAIjF54B,GAAe9d,EAAOoZ,KAAMA,IAAO7jB,KAAKwhD,mBAAmB/2C,EAAQoZ,GAExE7jB,KAAKmiD,eAAe13C,EAAQs3C,EAAgB7+C,IAG5CuH,EACIzK,KAAKoiD,UAAU,IAAIC,GAAyBx+B,EAAMs9B,GAAcY,EAAgB7+C,GAGjFuH,GA8BT+zC,EAAAt+C,UAAAqhD,mBAAA,SAAmB92C,EAAkCoZ,EAASs9B,EAAkBj+C,GAE9E,IAAIo/C,EAC0B,OAA1BtiD,KAAK2+C,iBAA4B,KAAO3+C,KAAK2+C,iBAAiBx3C,IAAIg6C,EAAa,MAOnF,OANuB,OAAnBmB,EACF73C,EAASzK,KAAKmiD,eAAeG,EAAgB73C,EAAOu3C,MAAS9+C,GACpDuH,EAAOq1C,cAAgB58C,IAChCuH,EAAOq1C,aAAe58C,EACtBlD,KAAKuiD,YAAY93C,EAAQvH,IAEpBuH,GAUT+zC,EAAAt+C,UAAA0hD,UAAA,SAAUn3C,GAER,KAAkB,OAAXA,GAAiB,CACtB,IAAMq3C,EAA4Cr3C,EAAOy1B,MACzDlgC,KAAKwiD,eAAexiD,KAAKyiD,QAAQh4C,IACjCA,EAASq3C,EAEmB,OAA1B9hD,KAAK2+C,kBACP3+C,KAAK2+C,iBAAiBlxC,QAGI,OAAxBzN,KAAKg/C,iBACPh/C,KAAKg/C,eAAeyB,WAAa,MAEX,OAApBzgD,KAAKk/C,aACPl/C,KAAKk/C,WAAWyB,WAAa,MAEV,OAAjB3gD,KAAK8+C,UACP9+C,KAAK8+C,QAAQ5e,MAAQ,MAEI,OAAvBlgC,KAAKo/C,gBACPp/C,KAAKo/C,cAAca,aAAe,MAEF,OAA9BjgD,KAAKs/C,uBACPt/C,KAAKs/C,qBAAqBwB,oBAAsB,OAKpDtC,EAAAt+C,UAAAiiD,eAAA,SACI13C,EAAkCi4C,EAClCx/C,GAC4B,OAA1BlD,KAAK2+C,kBACP3+C,KAAK2+C,iBAAiBngB,OAAO/zB,GAE/B,IAAMy3B,EAAOz3B,EAAOk4C,aACdxhD,EAAOsJ,EAAOw1C,aAepB,OAba,OAAT/d,EACFliC,KAAKm/C,cAAgBh+C,EAErB+gC,EAAK+d,aAAe9+C,EAET,OAATA,EACFnB,KAAKo/C,cAAgBld,EAErB/gC,EAAKwhD,aAAezgB,EAGtBliC,KAAK4iD,aAAan4C,EAAQi4C,EAAYx/C,GACtClD,KAAKuiD,YAAY93C,EAAQvH,GAClBuH,GAIT+zC,EAAAt+C,UAAAgiD,WAAA,SACIz3C,EAAkCi4C,EAClCx/C,GAIF,OAHAlD,KAAKyiD,QAAQh4C,GACbzK,KAAK4iD,aAAan4C,EAAQi4C,EAAYx/C,GACtClD,KAAKuiD,YAAY93C,EAAQvH,GAClBuH,GAIT+zC,EAAAt+C,UAAAkiD,UAAA,SACI33C,EAAkCi4C,EAClCx/C,GAaF,OAZAlD,KAAK4iD,aAAan4C,EAAQi4C,EAAYx/C,GAKpClD,KAAKg/C,eAHqB,OAAxBh/C,KAAKg/C,eAGeh/C,KAAK++C,eAAiBt0C,EAKtBzK,KAAKg/C,eAAeyB,WAAah2C,EAElDA,GAIT+zC,EAAAt+C,UAAA0iD,aAAA,SACIn4C,EAAkCi4C,EAClCx/C,GAMF,IAAM/B,EACa,OAAfuhD,EAAsB1iD,KAAK6+C,QAAU6D,EAAWxiB,MAuBpD,OAnBAz1B,EAAOy1B,MAAQ/+B,EACfsJ,EAAOu3C,MAAQU,EACF,OAATvhD,EACFnB,KAAK8+C,QAAUr0C,EAEftJ,EAAK6gD,MAAQv3C,EAEI,OAAfi4C,EACF1iD,KAAK6+C,QAAUp0C,EAEfi4C,EAAWxiB,MAAQz1B,EAGO,OAAxBzK,KAAK0+C,iBACP1+C,KAAK0+C,eAAiB,IAAImE,IAE5B7iD,KAAK0+C,eAAeoE,IAAIr4C,GAExBA,EAAOq1C,aAAe58C,EACfuH,GAIT+zC,EAAAt+C,UAAA+hD,QAAA,SAAQx3C,GACN,OAAOzK,KAAKwiD,eAAexiD,KAAKyiD,QAAQh4C,KAI1C+zC,EAAAt+C,UAAAuiD,QAAA,SAAQh4C,GACsB,OAAxBzK,KAAK0+C,gBACP1+C,KAAK0+C,eAAelgB,OAAO/zB,GAG7B,IAAMy3B,EAAOz3B,EAAOu3C,MACd7gD,EAAOsJ,EAAOy1B,MAiBpB,OAXa,OAATgC,EACFliC,KAAK6+C,QAAU19C,EAEf+gC,EAAKhC,MAAQ/+B,EAEF,OAATA,EACFnB,KAAK8+C,QAAU5c,EAEf/gC,EAAK6gD,MAAQ9f,EAGRz3B,GAIT+zC,EAAAt+C,UAAAqiD,YAAA,SAAY93C,EAAkCs4C,GAI5C,OAAIt4C,EAAOy1C,gBAAkB6C,EACpBt4C,GAMPzK,KAAKk/C,WAHiB,OAApBl/C,KAAKk/C,WAGWl/C,KAAKi/C,WAAax0C,EAIlBzK,KAAKk/C,WAAWyB,WAAal2C,EAG1CA,IAGD+zC,EAAAt+C,UAAAsiD,eAAR,SAAuB/3C,GAoBrB,OAnB8B,OAA1BzK,KAAK2+C,mBACP3+C,KAAK2+C,iBAAmB,IAAIkE,IAE9B7iD,KAAK2+C,iBAAiBmE,IAAIr4C,GAC1BA,EAAOq1C,aAAe,KACtBr1C,EAAOw1C,aAAe,KAEK,OAAvBjgD,KAAKo/C,eAGPp/C,KAAKo/C,cAAgBp/C,KAAKm/C,cAAgB10C,EAC1CA,EAAOk4C,aAAe,OAKtBl4C,EAAOk4C,aAAe3iD,KAAKo/C,cAC3Bp/C,KAAKo/C,cAAgBp/C,KAAKo/C,cAAca,aAAex1C,GAElDA,GAIT+zC,EAAAt+C,UAAAshD,mBAAA,SAAmB/2C,EAAkCoZ,GAOnD,OANApZ,EAAOoZ,KAAOA,EAEZ7jB,KAAKs/C,qBAD2B,OAA9Bt/C,KAAKs/C,qBACqBt/C,KAAKq/C,qBAAuB50C,EAE5BzK,KAAKs/C,qBAAqBwB,oBAAsBr2C,EAEvEA,GAEX+zC,EAnhBA,GAqhBA6D,GA0BE,SAAAA,GAAmBx+B,EAAgBy9B,GAAhBthD,KAAA6jB,KAAAA,EAAgB7jB,KAAAshD,UAAAA,EAzBnCthD,KAAA8/C,aAA4B,KAC5B9/C,KAAAkgD,cAA6B,KAG7BlgD,KAAAugD,cAA+C,KAE/CvgD,KAAAgiD,MAAuC,KAEvChiD,KAAAkgC,MAAuC,KAEvClgC,KAAAgjD,SAA0C,KAE1ChjD,KAAAijD,SAA0C,KAE1CjjD,KAAA2iD,aAA8C,KAE9C3iD,KAAAigD,aAA8C,KAE9CjgD,KAAAygD,WAA4C,KAE5CzgD,KAAA2gD,WAA4C,KAE5C3gD,KAAA8gD,oBAAqD,MAOvDoC,GAAA,WAAA,SAAAA,IAEEljD,KAAAmjD,MAAuC,KAEvCnjD,KAAAojD,MAAuC,KAiEzC,OA1DEF,EAAAhjD,UAAAiO,IAAA,SAAI1D,GACiB,OAAfzK,KAAKmjD,OACPnjD,KAAKmjD,MAAQnjD,KAAKojD,MAAQ34C,EAC1BA,EAAOw4C,SAAW,KAClBx4C,EAAOu4C,SAAW,OAKlBhjD,KAAKojD,MAAQH,SAAWx4C,EACxBA,EAAOu4C,SAAWhjD,KAAKojD,MACvB34C,EAAOw4C,SAAW,KAClBjjD,KAAKojD,MAAQ34C,IAMjBy4C,EAAAhjD,UAAAiH,IAAA,SAAIm6C,EAAgB+B,GAClB,IAAI54C,EACJ,IAAKA,EAASzK,KAAKmjD,MAAkB,OAAX14C,EAAiBA,EAASA,EAAOw4C,SACzD,IAAwB,OAAnBI,GAA2BA,GAAkB54C,EAAOq1C,eACrDv3B,GAAe9d,EAAO62C,UAAWA,GACnC,OAAO72C,EAGX,OAAO,MAQTy4C,EAAAhjD,UAAAs+B,OAAA,SAAO/zB,GAUL,IAAMy3B,EAAsCz3B,EAAOu4C,SAC7C7hD,EAAsCsJ,EAAOw4C,SAWnD,OAVa,OAAT/gB,EACFliC,KAAKmjD,MAAQhiD,EAEb+gC,EAAK+gB,SAAW9hD,EAEL,OAATA,EACFnB,KAAKojD,MAAQlhB,EAEb/gC,EAAK6hD,SAAW9gB,EAEI,OAAfliC,KAAKmjD,OAEhBD,EArEA,GAuEAL,GAAA,WAAA,SAAAA,IACE7iD,KAAAkF,IAAM,IAAIqE,IA4CZ,OA1CEs5C,EAAA3iD,UAAA4iD,IAAA,SAAIr4C,GACF,IAAM1G,EAAM0G,EAAO62C,UAEfgC,EAAatjD,KAAKkF,IAAIiC,IAAIpD,GACzBu/C,IACHA,EAAa,IAAIJ,GACjBljD,KAAKkF,IAAIsE,IAAIzF,EAAKu/C,IAEpBA,EAAWn1C,IAAI1D,IAUjBo4C,EAAA3iD,UAAAiH,IAAA,SAAIm6C,EAAgB+B,GAClB,IACME,EAAavjD,KAAKkF,IAAIiC,IADhBm6C,GAEZ,OAAOiC,EAAaA,EAAWp8C,IAAIm6C,EAAW+B,GAAkB,MAQlER,EAAA3iD,UAAAs+B,OAAA,SAAO/zB,GACL,IAAM1G,EAAM0G,EAAO62C,UAMnB,OALgDthD,KAAKkF,IAAIiC,IAAIpD,GAE9Cy6B,OAAO/zB,IACpBzK,KAAKkF,IAAI+tC,OAAOlvC,GAEX0G,GAGTjL,OAAA4D,eAAIy/C,EAAA3iD,UAAA,eAAJ,WAAyB,OAAyB,IAAlBF,KAAKkF,IAAIs+C,sCAEzCX,EAAA3iD,UAAAuN,MAAA,WAAUzN,KAAKkF,IAAIuI,SACrBo1C,EA7CA,GA+CA,SAAA9C,GACIl8B,EAAW+7B,EAAyBC,GACtC,IAAMK,EAAgBr8B,EAAKq8B,cAC3B,GAAsB,OAAlBA,EAAwB,OAAOA,EACnC,IAAIuD,EAAa,EAIjB,OAHI5D,GAAeK,EAAgBL,EAAYl/C,SAC7C8iD,EAAa5D,EAAYK,IAEpBA,EAAgBN,EAAkB6D,ECjsB3C,IAAAC,GAAA,WACE,SAAAA,KAIF,OAHEA,EAAAxjD,UAAAm+C,SAAA,SAAS9yC,GAAqB,OAAOA,aAAehC,KAAOuf,GAAWvd,IAEtEm4C,EAAAxjD,UAAAC,OAAA,WAAuC,OAAO,IAAIwjD,IACpDD,EALA,GAOAC,GAAA,WAAA,SAAAA,IACU3jD,KAAAsJ,SAAW,IAAIC,IACfvJ,KAAA4jD,SAA6C,KAE7C5jD,KAAA6jD,aAAiD,KACjD7jD,KAAA8jD,iBAAqD,KACrD9jD,KAAA+jD,aAAiD,KACjD/jD,KAAAgkD,aAAiD,KACjDhkD,KAAA++C,eAAmD,KACnD/+C,KAAAg/C,eAAmD,KACnDh/C,KAAAm/C,cAAkD,KAClDn/C,KAAAo/C,cAAkD,KAoO5D,OAlOE5/C,OAAA4D,eAAIugD,EAAAzjD,UAAA,eAAJ,WACE,OAA+B,OAAxBF,KAAK++C,gBAAiD,OAAtB/+C,KAAK+jD,cACjB,OAAvB/jD,KAAKm/C,+CAGXwE,EAAAzjD,UAAAs/C,YAAA,SAAY15C,GACV,IAAI2E,EACJ,IAAKA,EAASzK,KAAK4jD,SAAqB,OAAXn5C,EAAiBA,EAASA,EAAOy1B,MAC5Dp6B,EAAG2E,IAIPk5C,EAAAzjD,UAAAogD,oBAAA,SAAoBx6C,GAClB,IAAI2E,EACJ,IAAKA,EAASzK,KAAK8jD,iBAA6B,OAAXr5C,EAAiBA,EAASA,EAAO81C,cACpEz6C,EAAG2E,IAIPk5C,EAAAzjD,UAAA+jD,mBAAA,SAAmBn+C,GACjB,IAAI2E,EACJ,IAAKA,EAASzK,KAAK+jD,aAAyB,OAAXt5C,EAAiBA,EAASA,EAAOy5C,aAChEp+C,EAAG2E,IAIPk5C,EAAAzjD,UAAAsgD,iBAAA,SAAiB16C,GACf,IAAI2E,EACJ,IAAKA,EAASzK,KAAK++C,eAA2B,OAAXt0C,EAAiBA,EAASA,EAAOg2C,WAClE36C,EAAG2E,IAIPk5C,EAAAzjD,UAAA0gD,mBAAA,SAAmB96C,GACjB,IAAI2E,EACJ,IAAKA,EAASzK,KAAKm/C,cAA0B,OAAX10C,EAAiBA,EAASA,EAAOw1C,aACjEn6C,EAAG2E,IAIPk5C,EAAAzjD,UAAA6gD,KAAA,SAAK77C,GACH,GAAKA,GAEE,KAAMA,aAAeqE,KAAOuf,GAAW5jB,IAC5C,MAAM,IAAIlB,MACN,yBAAyBiB,EAAUC,GAAI,6CAH3CA,EAAM,IAAIqE,IAMZ,OAAOvJ,KAAKihD,MAAM/7C,GAAOlF,KAAO,MAGlC2jD,EAAAzjD,UAAAwM,UAAA,aAMAi3C,EAAAzjD,UAAA+gD,MAAA,SAAM/7C,GAAN,IAAAqH,EAAAvM,KACEA,KAAKkhD,SAEL,IAAIp0B,EAAe9sB,KAAK4jD,SAexB,GAdA5jD,KAAK6jD,aAAe,KAEpB7jD,KAAKmkD,SAASj/C,EAAK,SAAC9D,EAAY2C,GAC9B,GAAI+oB,GAAgBA,EAAa/oB,MAAQA,EACvCwI,EAAK63C,mBAAmBt3B,EAAc1rB,GACtCmL,EAAKs3C,aAAe/2B,EACpBA,EAAeA,EAAaoT,UACvB,CACL,IAAMz1B,EAAS8B,EAAK83C,yBAAyBtgD,EAAK3C,GAClD0rB,EAAevgB,EAAK+3C,sBAAsBx3B,EAAcriB,MAKxDqiB,EAAc,CACZA,EAAak1B,QACfl1B,EAAak1B,MAAM9hB,MAAQ,MAG7BlgC,KAAKm/C,cAAgBryB,EAErB,IAAK,IAAIriB,EAA2CqiB,EAAyB,OAAXriB,EAC7DA,EAASA,EAAOw1C,aACfx1C,IAAWzK,KAAK4jD,WAClB5jD,KAAK4jD,SAAW,MAElB5jD,KAAKsJ,SAAS2pC,OAAOxoC,EAAO1G,KAC5B0G,EAAOw1C,aAAex1C,EAAOy1B,MAC7Bz1B,EAAO85C,cAAgB95C,EAAO+5C,aAC9B/5C,EAAO+5C,aAAe,KACtB/5C,EAAOu3C,MAAQ,KACfv3C,EAAOy1B,MAAQ,KAQnB,OAHIlgC,KAAKgkD,eAAchkD,KAAKgkD,aAAaE,aAAe,MACpDlkD,KAAKg/C,iBAAgBh/C,KAAKg/C,eAAeyB,WAAa,MAEnDzgD,KAAK6hD,SAWN8B,EAAAzjD,UAAAokD,sBAAR,SACIG,EACAh6C,GACF,GAAIg6C,EAAQ,CACV,IAAMviB,EAAOuiB,EAAOzC,MAYpB,OAXAv3C,EAAOy1B,MAAQukB,EACfh6C,EAAOu3C,MAAQ9f,EACfuiB,EAAOzC,MAAQv3C,EACXy3B,IACFA,EAAKhC,MAAQz1B,GAEXg6C,IAAWzkD,KAAK4jD,WAClB5jD,KAAK4jD,SAAWn5C,GAGlBzK,KAAK6jD,aAAeY,EACbA,EAWT,OARIzkD,KAAK6jD,cACP7jD,KAAK6jD,aAAa3jB,MAAQz1B,EAC1BA,EAAOu3C,MAAQhiD,KAAK6jD,cAEpB7jD,KAAK4jD,SAAWn5C,EAGlBzK,KAAK6jD,aAAep5C,EACb,MAGDk5C,EAAAzjD,UAAAmkD,yBAAR,SAAiCtgD,EAAQ3C,GACvC,GAAIpB,KAAKsJ,SAAS6D,IAAIpJ,GAAM,CAC1B,IAAM2gD,EAAS1kD,KAAKsJ,SAASnC,IAAIpD,GACjC/D,KAAKokD,mBAAmBM,EAAQtjD,GAChC,IAAM8gC,EAAOwiB,EAAO1C,MACd7gD,EAAOujD,EAAOxkB,MAUpB,OATIgC,IACFA,EAAKhC,MAAQ/+B,GAEXA,IACFA,EAAK6gD,MAAQ9f,GAEfwiB,EAAOxkB,MAAQ,KACfwkB,EAAO1C,MAAQ,KAER0C,EAGT,IAAMj6C,EAAS,IAAIk6C,GAA4B5gD,GAI/C,OAHA/D,KAAKsJ,SAASE,IAAIzF,EAAK0G,GACvBA,EAAO+5C,aAAepjD,EACtBpB,KAAK4kD,gBAAgBn6C,GACdA,GAITk5C,EAAAzjD,UAAAghD,OAAA,WACE,GAAIlhD,KAAK6hD,QAAS,CAChB,IAAIp3C,OAAM,EAGV,IADAzK,KAAK8jD,iBAAmB9jD,KAAK4jD,SACxBn5C,EAASzK,KAAK8jD,iBAA6B,OAAXr5C,EAAiBA,EAASA,EAAOy1B,MACpEz1B,EAAO81C,cAAgB91C,EAAOy1B,MAKhC,IAAKz1B,EAASzK,KAAK+jD,aAAyB,OAAXt5C,EAAiBA,EAASA,EAAOy5C,aAChEz5C,EAAO85C,cAAgB95C,EAAO+5C,aAEhC,IAAK/5C,EAASzK,KAAK++C,eAA0B,MAAVt0C,EAAgBA,EAASA,EAAOg2C,WACjEh2C,EAAO85C,cAAgB95C,EAAO+5C,aAGhCxkD,KAAK+jD,aAAe/jD,KAAKgkD,aAAe,KACxChkD,KAAK++C,eAAiB/+C,KAAKg/C,eAAiB,KAC5Ch/C,KAAKm/C,cAAgB,OAKjBwE,EAAAzjD,UAAAkkD,mBAAR,SAA2B35C,EAAqCo6C,GACzDt8B,GAAes8B,EAAUp6C,EAAO+5C,gBACnC/5C,EAAO85C,cAAgB95C,EAAO+5C,aAC9B/5C,EAAO+5C,aAAeK,EACtB7kD,KAAK8kD,cAAcr6C,KAIfk5C,EAAAzjD,UAAA0kD,gBAAR,SAAwBn6C,GACM,OAAxBzK,KAAK++C,eACP/+C,KAAK++C,eAAiB/+C,KAAKg/C,eAAiBv0C,GAE5CzK,KAAKg/C,eAAiByB,WAAah2C,EACnCzK,KAAKg/C,eAAiBv0C,IAIlBk5C,EAAAzjD,UAAA4kD,cAAR,SAAsBr6C,GACM,OAAtBzK,KAAK+jD,aACP/jD,KAAK+jD,aAAe/jD,KAAKgkD,aAAev5C,GAExCzK,KAAKgkD,aAAeE,aAAez5C,EACnCzK,KAAKgkD,aAAev5C,IAKhBk5C,EAAAzjD,UAAAikD,SAAR,SAAuB54C,EAAiCzF,GAClDyF,aAAehC,IACjBgC,EAAIH,QAAQtF,GAEZtG,OAAO6oB,KAAK9c,GAAKH,QAAQ,SAAA25C,GAAK,OAAAj/C,EAAGyF,EAAIw5C,GAAIA,MAG/CpB,EA/OA,GAiPAgB,GAiBE,SAAAA,GAAmB5gD,GAAA/D,KAAA+D,IAAAA,EAhBnB/D,KAAAukD,cAAwB,KACxBvkD,KAAAwkD,aAAuB,KAGvBxkD,KAAAugD,cAAkD,KAElDvgD,KAAAkgC,MAA0C,KAE1ClgC,KAAAgiD,MAA0C,KAE1ChiD,KAAAygD,WAA+C,KAE/CzgD,KAAAigD,aAAiD,KAEjDjgD,KAAAkkD,aAAiD,MCxInDc,GAAA,WAWE,SAAAA,EAAYC,GAAsCjlD,KAAKilD,UAAYA,EAyDrE,OAvDSD,EAAA7kD,OAAP,SAAc8kD,EAAoC38C,GAChD,GAAc,MAAVA,EAAgB,CAClB,IAAM48C,EAAS58C,EAAO28C,UAAUp8C,QAChCo8C,EAAYA,EAAUpjD,OAAOqjD,GAG/B,OAAO,IAAIF,EAAgBC,IAuBtBD,EAAAG,OAAP,SAAcF,GACZ,OACEl8C,QAASi8C,EACT56C,WAAY,SAAC9B,GACX,IAAKA,EAIH,MAAM,IAAItE,MAAM,2DAElB,OAAOghD,EAAgB7kD,OAAO8kD,EAAW38C,IAG3CmB,OAAQu7C,EAAiB,IAAIrhD,EAAY,IAAIF,MAIjDuhD,EAAA9kD,UAAAklD,KAAA,SAAKtf,GACH,IAAM1hC,EAAUpE,KAAKilD,UAAUG,KAAK,SAAAhP,GAAK,OAAAA,EAAEiI,SAASvY,KACpD,GAAe,MAAX1hC,EACF,OAAOA,EAEP,MAAM,IAAIJ,MACN,2CAA2C8hC,EAAQ,yBAKrBnhC,GACtC,OAAOA,EAAW,aAAYA,EAN2C0gD,CAAwBvf,GAAS,MA/DnGkf,EAAAjgD,gBAAkBd,GACvBE,WAAY,OACZC,QAAS,WAAM,OAAA,IAAI4gD,GAAiB,IAAI5G,QAgE5C4G,EApEA,GCvBAM,GAAA,WAYE,SAAAA,EAAYL,GAAsCjlD,KAAKilD,UAAYA,EAqDrE,OAnDSK,EAAAnlD,OAAP,SAAiB8kD,EAAoC38C,GACnD,GAAIA,EAAQ,CACV,IAAM48C,EAAS58C,EAAO28C,UAAUp8C,QAChCo8C,EAAYA,EAAUpjD,OAAOqjD,GAE/B,OAAO,IAAII,EAAgBL,IAuBtBK,EAAAH,OAAP,SAAiBF,GACf,OACEl8C,QAASu8C,EACTl7C,WAAY,SAAC9B,GACX,IAAKA,EAGH,MAAM,IAAItE,MAAM,2DAElB,OAAOshD,EAAgBnlD,OAAO8kD,EAAW38C,IAG3CmB,OAAQ67C,EAAiB,IAAI3hD,EAAY,IAAIF,MAIjD6hD,EAAAplD,UAAAklD,KAAA,SAAKG,GACH,IAAMnhD,EAAUpE,KAAKilD,UAAUG,KAAK,SAAAhP,GAAK,OAAAA,EAAEiI,SAASkH,KACpD,GAAInhD,EACF,OAAOA,EAET,MAAM,IAAIJ,MAAM,2CAA2CuhD,EAAE,MA7DxDD,EAAAvgD,gBAAkBd,GACvBE,WAAY,OACZC,QAAS,WAAM,OAAA,IAAIkhD,GAAiB,IAAI5B,QA6D5C4B,EAjEA,GC/EME,IAAuC,IAAI9B,IAOpC+B,GAAyB,IAAIT,IAFK,IAAI5G,KAItCsH,GAAyB,IAAIJ,GAAgBE,ICrB7CG,GAAe5R,GAAsB,KAAM,SAXrDhrC,QAASuhC,GAAathC,SAAU,YAChCD,QAASyrC,GAAa/qC,MAAOpB,KAC7BU,QAAS2pC,GAAqBjpC,UAC9BV,QAASyhC,GAAS/gC,WCaRm8C,GAAY,IAAI99C,EAAuB,YCOvC+9C,KAET98C,QAASotC,GACT9rC,SAAU8rC,GACV1sC,MACKkkC,GAAQnD,GAASniC,EAAU0iC,GAAc9W,GAA0BmV,MAEzErgC,QAASqvB,GAAW3uB,MAAOkkC,IAASvjC,WA0BvC,SAAA07C,GAAqC3Q,GACnC,IAAI4Q,KAMJ,OALA5Q,EAAOjH,SAASpN,UAAU,WACxB,KAAOilB,EAAMplD,QACXolD,EAAMvU,KAANuU,KAGG,SAASjgD,GAAkBigD,EAAMrkD,KAAKoE,OA/B3CiD,QAASqgC,GACT/+B,SAAU++B,GACV3/B,OAAQ,IAAIhG,EAAY0lC,OAEzBpgC,QAASmjC,GAAU7hC,SAAU6hC,GAAUziC,SACxCugC,IACCjhC,QAASi8C,GAAiB56C,yBA9B3B,OAAOq7C,IA8ByDh8C,UAC/DV,QAASu8C,GAAiBl7C,WA5B7B,SAAA47C,KACE,OAAON,IA2ByDj8C,UAE9DV,QAAS68C,GACTx7C,WA3BJ,SAAA67C,GAA+BC,GAC7B,OAAOA,GAAU,SA2Bfz8C,OAAQ,IAAIlG,EAAOqiD,IAAY,IAAIniD,EAAY,IAAIE,MAiCvDwiD,GAAA,WAGE,SAAAA,EAAY/vB,kCAFD+vB,EAAiB7tC,aAAAC,gBAAA9T,WAAA+T,oEAAjB2tC,GAAiBr/C,EAERqvC,MAAc3xC,UAHdqhD,GAA4BphD,eAAlD,GC7DA2hD,GAAA,SAAAA,OCpBMC,QAAIhiD,EAQViiD,IACE,OAAQ,IAAK,MAAO,KAAM,MAAOD,MAAM,KAAM,MAAOA,GAAGA,MAEpD,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAC/E,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,aAClE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,OAEvCA,KAEG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACvD,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAE5E,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,aAG3BA,KAAK,IAAK,MAAO,KAAM,OAAQ,gBAAiB,gBAAiB,GAAI,EAAG,IACvE,SAAU,WAAY,YAAa,oBACnC,SAAU,YAAa,cAAe,mBAAoB,WAAYA,GAAG,eAAkBA,KAC3F,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAAO,MACzD,YAAa,SAAU,YAAa,OAAQ,IAAK,eA1BpD,SAAAE,GAAgB9lD,GACd,IAAID,EAAI4+B,KAAKgL,MAAMhL,KAAKonB,IAAI/lD,IAAK4K,EAAI5K,EAAE6E,WAAWuG,QAAQ,YAAa,IAAIlL,OAC3E,OAAU,IAANH,GAAiB,IAAN6K,EAAgB,EACxB,ICLIo7C,MCGAC,IAEPC,UAAQtiD,OAAWA,EAAW,GAC9BuiD,UAAQviD,OAAWA,EAAW,GAC9BwiD,UAAQxiD,OAAWA,EAAW,GAC9ByiD,UAAQziD,OAAWA,EAAW,GAC9B0iD,UAAQ1iD,EAAW,MACnB2iD,UAAQ3iD,EAAW,KACnB4iD,KAAQ,KAAM,KACdC,UAAQ7iD,EAAW,MACnB8iD,UAAQ9iD,EAAW,KACnB+iD,UAAQ/iD,EAAW,KACnBgjD,UAAQhjD,OAAWA,EAAW,GAC9BijD,UAAQjjD,OAAWA,EAAW,GAC9BkjD,UAAQljD,EAAW,KACnBmjD,UAAQnjD,EAAW,KACnBojD,UAAQpjD,EAAW,MACnBqjD,KAAQ,MACRC,UAAQtjD,EAAW,KACnBujD,UAAQvjD,EAAW,KACnBwjD,UAAQxjD,EAAW,KAAM,GACzByjD,UAAQzjD,OAAWA,EAAW,GAC9B0jD,UAAQ1jD,EAAW,KACnB2jD,KAAQ,MAAO,IAAK,GACpBC,UAAQ5jD,OAAWA,EAAW,GAC9B6jD,UAAQ7jD,OAAWA,EAAW,GAC9B8jD,UAAQ9jD,EAAW,IAAK,GACxB+jD,KAAQ,MAAO,KACfC,UAAQhkD,EAAW,IAAK,GACxBikD,UAAQjkD,EAAW,IAAK,GACxBkkD,UAAQlkD,EAAW,KACnBmkD,UAAQnkD,EAAW,KACnBokD,UAAQpkD,EAAW,KAAM,GACzBqkD,UAAQrkD,OAAWA,EAAW,GAC9BskD,UAAQtkD,EAAW,KAAM,GACzBukD,UAAQvkD,EAAW,KACnBwkD,UAAQxkD,EAAW,MACnBykD,UAAQzkD,EAAW,IAAK,GACxB0kD,KAAQ,KACRC,UAAQ3kD,EAAW,KACnB4kD,UAAQ5kD,EAAW,KACnB6kD,KAAQ,KACRC,UAAQ9kD,EAAW,KACnB+kD,UAAQ/kD,EAAW,KACnBglD,UAAQhlD,EAAW,KAAM,GACzBilD,UAAQjlD,EAAW,KACnBklD,UAAQllD,EAAW,IAAK,GACxBmlD,KAAQ,MAAO,KACfC,UAAQplD,EAAW,KACnBqlD,UAAQrlD,EAAW,MACnBslD,UAAQtlD,EAAW,KAAM,GACzBulD,UAAQvlD,EAAW,KAAM,GACzBwlD,KAAQ,KACRC,KAAQ,KACRC,UAAQ1lD,OAAWA,EAAW,GAC9B2lD,UAAQ3lD,OAAWA,EAAW,GAC9B4lD,UAAQ5lD,EAAW,KAAM,GACzB6lD,UAAQ7lD,OAAWA,EAAW,GAC9B8lD,UAAQ9lD,EAAW,KACnB+lD,UAAQ/lD,OAAWA,EAAW,GAC9BgmD,KAAQ,SAAKhmD,EAAW,GACxBimD,UAAQjmD,EAAW,KACnBkmD,UAAQlmD,EAAW,KAAM,GACzBmmD,UAAQnmD,EAAW,IAAK,GACxBomD,KAAQ,SAAKpmD,EAAW,GACxBqmD,UAAQrmD,OAAWA,EAAW,GAC9BsmD,UAAQtmD,EAAW,KACnBumD,UAAQvmD,EAAW,KACnBwmD,UAAQxmD,EAAW,IAAK,GACxBymD,UAAQzmD,EAAW,KAAM,GACzB0mD,UAAQ1mD,EAAW,MACnB2mD,UAAQ3mD,EAAW,KACnB4mD,UAAQ5mD,EAAW,MACnB6mD,UAAQ7mD,OAAWA,EAAW,GAC9B8mD,UAAQ9mD,EAAW,MACnB+mD,UAAQ/mD,OAAWA,EAAW,GAC9BgnD,UAAQhnD,EAAW,KAAM,GACzBinD,UAAQjnD,OAAWA,EAAW,GAC9BknD,UAAQlnD,EAAW,IAAK,GACxBmnD,UAAQnnD,EAAW,IAAK,GACxBonD,UAAQpnD,OAAWA,EAAW,GAC9BqnD,UAAQrnD,EAAW,KAAM,GACzBsnD,KAAQ,MAAO,KACfC,UAAQvnD,EAAW,MACnBwnD,UAAQxnD,EAAW,KACnBynD,UAAQznD,EAAW,KACnB0nD,UAAQ1nD,EAAW,MACnB2nD,UAAQ3nD,EAAW,KAAM,GACzB4nD,UAAQ5nD,EAAW,MACnB6nD,KAAQ,MAAO,KACfC,UAAQ9nD,OAAWA,EAAW,GAC9B+nD,UAAQ/nD,EAAW,KACnBgoD,UAAQhoD,EAAW,KAAM,GACzBioD,UAAQjoD,EAAW,MACnBkoD,UAAQloD,EAAW,IAAK,GACxBmoD,UAAQnoD,EAAW,OACnBooD,UAAQpoD,OAAWA,EAAW,GAC9BqoD,UAAQroD,EAAW,KACnBsoD,UAAQtoD,EAAW,MACnBuoD,UAAQvoD,EAAW,KAAM,GACzBwoD,UAAQxoD,EAAW,KACnByoD,UAAQzoD,EAAW,KAAM,GACzB0oD,UAAQ1oD,EAAW,KACnB2oD,UAAQ3oD,EAAW,KACnB4oD,UAAQ5oD,OAAWA,EAAW,GAC9B6oD,UAAQ7oD,OAAWA,EAAW,GAC9B8oD,UAAQ9oD,EAAW,KACnB+oD,UAAQ/oD,EAAW,KACnBgpD,UAAQhpD,OAAWA,EAAW,GAC9BipD,UAAQjpD,EAAW,MACnBkpD,UAAQlpD,EAAW,IAAK,GACxBmpD,UAAQnpD,EAAW,KACnBopD,UAAQppD,OAAWA,EAAW,GAC9BqpD,UAAQrpD,OAAWA,EAAW,GAC9BspD,UAAQtpD,EAAW,MACnBupD,UAAQvpD,OAAWA,EAAW,GAC9BwpD,UAAQxpD,EAAW,KACnBypD,UAAQzpD,EAAW,KACnB0pD,KAAQ,MAAO,IAAK,GACpBC,UAAQ3pD,OAAWA,EAAW,GAC9B4pD,UAAQ5pD,EAAW,KACnB6pD,UAAQ7pD,OAAWA,EAAW,GAC9B8pD,KAAQ,KACRC,UAAQ/pD,OAAWA,EAAW,GAC9BgqD,UAAQhqD,EAAW,KACnBiqD,UAAQjqD,OAAWA,EAAW,GAC9BkqD,UAAQlqD,EAAW,MACnBmqD,KAAQ,SAAKnqD,EAAW,GACxBoqD,UAAQpqD,OAAWA,EAAW,GAC9BqqD,KAAQ,YAAQrqD,EAAW,GAC3BsqD,KAAQ,MAAO,KACfC,KAAQ,WAAOvqD,EAAW,GAC1BwqD,KAAQ,YAAQxqD,EAAW,GAC3ByqD,UAAQzqD,OAAWA,EAAW,GAC9B0qD,UAAQ1qD,EAAW,KACnB2qD,UAAQ3qD,OAAWA,EAAW,GAC9B4qD,UAAQ5qD,EAAW,MACnB6qD,UAAQ7qD,OAAWA,EAAW,ICrIxB8qD,GAAZ,SAAYA,UACVA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,WAAA,GAAA,aAJUA,EAAZ,KAQYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QANUA,EAAZ,KAkBYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,WAAA,GAAA,aAFUA,EAAZ,KAiBYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QAJUA,EAAZ,KAoBYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OAJUA,EAAZ,KA6BYC,GAAZ,SAAYA,UACVA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,uBAAA,GAAA,yBACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,EAAA,GAAA,GAAA,WACAA,EAAAA,EAAA,IAAA,IAAA,MACAA,EAAAA,EAAA,cAAA,IAAA,gBACAA,EAAAA,EAAA,gBAAA,IAAA,kBACAA,EAAAA,EAAA,cAAA,IAAA,gBAdUA,EAAZ,KA+IA,SAAAC,GAAoCvJ,EAAgBwJ,GAElD,OAAOC,GADMC,GAAe1J,GACG,IAA8BwJ,GAuB/D,SAAAG,GAAoC3J,EAAgBwJ,GAElD,OAAOC,GADMC,GAAe1J,GACG,IAA8BwJ,GA4B/D,SAAAI,GAAwC5J,EAAgBwJ,GAGtD,OAAOC,GAFMC,GAAe1J,GACa,IACMwJ,GASjD,SAAAK,GAAsC7J,EAAgB8J,GACpD,IAAM58C,EAAOw8C,GAAe1J,GACtB7gD,EAAM+N,EAAI,IAAgC48C,GAChD,QAAmB,IAAR3qD,EAAqB,CAC9B,GAAI2qD,IAAWR,GAAaS,gBAC1B,OAAO78C,EAAI,IAAgCo8C,GAAaU,SACnD,GAAIF,IAAWR,GAAaW,cACjC,OAAO/8C,EAAI,IAAgCo8C,GAAaY,OAG5D,OAAO/qD,EAkCT,SAAAgrD,GAAsCnK,EAAgBvhD,GAEpD,OADairD,GAAe1J,GACjB,IAAgCvhD,GA8C7C,SAAA2rD,GAAuBl9C,GACrB,IAAKA,EAAI,IACP,MAAM,IAAIpP,MACN,6CAA6CoP,EAAI,GAA0B,kGAiEnF,SAAAu8C,GAAgCv8C,EAAWlQ,GACzC,IAAK,IAAI1C,EAAI0C,EAAO1C,GAAK,EAAGA,IAC1B,QAAuB,IAAZ4S,EAAK5S,GACd,OAAO4S,EAAK5S,GAGhB,MAAM,IAAIwD,MAAM,0CAgBlB,SAAAusD,GAAqBC,GACb,IAAA5tD,EAAAtB,EAAAkvD,EAAA1rC,MAAA,KAAA,GACN,OAAQ2rC,OADD7tD,EAAA,GACY8tD,SADT9tD,EAAA,IASZ,SAAAgtD,GAA+B1J,GAC7B,IAAMyK,EAAmBzK,EAAOr/B,cAAchb,QAAQ,KAAM,KAExD0Y,EAAQkiC,GAAYkK,GACxB,GAAIpsC,EACF,OAAOA,EAIT,IAAMqsC,EAAeD,EAAiB7rC,MAAM,KAAK,GAGjD,GAFAP,EAAQkiC,GAAYmK,GAGlB,OAAOrsC,EAGT,GAAqB,OAAjBqsC,EACF,OAAOtK,GAGT,MAAM,IAAItiD,MAAM,uCAAuCkiD,EAAM,MAsB/D,IChiBa2K,GACT,uGAEEC,MACAC,GACF,oMAECC,GAAL,SAAKA,UACHA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WAJGA,EAAL,KAOKC,GAAL,SAAKA,UACHA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,kBAAA,GAAA,oBACAA,EAAAA,EAAA,IAAA,GAAA,MARGA,EAAL,KAWKC,GAAL,SAAKA,UACHA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,KAAA,GAAA,OAJGA,EAAL,KAoIA,SAAAC,GAAwBC,EAAaC,GAMnC,OALIA,IACFD,EAAMA,EAAIvlD,QAAQ,cAAe,SAAS0Y,EAAOxgB,GAC/C,OAAsB,MAAdstD,GAAsBttD,KAAOstD,EAAcA,EAAWttD,GAAOwgB,KAGlE6sC,EAGT,SAAAE,GACIC,EAAaC,EAAgBC,EAAiBzqC,EAAgB0qC,QAAjC,IAAAD,IAAAA,EAAA,KAC/B,IAAIE,EAAM,IACNJ,EAAM,GAAMG,GAAWH,GAAO,KAC5BG,EACFH,EAAa,EAANA,GAEPA,GAAOA,EACPI,EAAMF,IAIV,IADA,IAAIG,EAAS/pD,OAAO0pD,GACbK,EAAOjxD,OAAS6wD,GACrBI,EAAS,IAAMA,EAKjB,OAHI5qC,IACF4qC,EAASA,EAAOnmD,OAAOmmD,EAAOjxD,OAAS6wD,IAElCG,EAAMC,EAWf,SAAAC,GACI7vD,EAAgBwhD,EAAcnD,EAAoBr5B,EAClD0qC,GACF,YAFgC,IAAArR,IAAAA,EAAA,QAAoB,IAAAr5B,IAAAA,GAAA,QAClD,IAAA0qC,IAAAA,GAAA,GACK,SAASI,EAAY5L,GAC1B,IAAI6L,EAkBR,SAAAC,EAAqBD,EAAgBD,GACnC,OAAQC,GACN,KAAKd,GAASgB,SACZ,OAAOH,EAAKI,cACd,KAAKjB,GAASkB,MACZ,OAAOL,EAAKM,WACd,KAAKnB,GAASoB,KACZ,OAAOP,EAAKQ,UACd,KAAKrB,GAASsB,MACZ,OAAOT,EAAKU,WACd,KAAKvB,GAASwB,QACZ,OAAOX,EAAKY,aACd,KAAKzB,GAAS0B,QACZ,OAAOb,EAAKc,aACd,KAAK3B,GAAS4B,kBACZ,OAAOf,EAAKgB,kBACd,KAAK7B,GAAS8B,IACZ,OAAOjB,EAAKkB,SACd,QACE,MAAM,IAAIhvD,MAAM,2BAA2B+tD,EAAI,OArCtCC,CAAYhwD,EAAM8vD,GAK7B,IAJIzR,EAAS,GAAK0R,GAAQ1R,KACxB0R,GAAQ1R,GAGNr+C,IAASivD,GAASsB,MACP,IAATR,IAA0B,KAAZ1R,IAChB0R,EAAO,SAEJ,GAAI/vD,IAASivD,GAAS4B,kBAC3B,OAtBN,SAAAI,EAAiCC,EAAsB1B,GAErD,OADcF,GAAU4B,EAAc,GACzBznD,OAAO,EAAG+lD,GAoBZyB,CAAwBlB,EAAMvO,GAGvC,IAAM2P,EAAcpD,GAAsB7J,EAAQsJ,GAAa4D,WAC/D,OAAO9B,GAAUS,EAAMvO,EAAM2P,EAAansC,EAAM0qC,IA8BpD,SAAA2B,GACIrxD,EAAuB0tD,EAAyB4D,EAChDC,GACF,YAFkD,IAAAD,IAAAA,EAAkBjE,GAAUmE,aAC5E,IAAAD,IAAAA,GAAA,GACK,SAASzB,EAAY5L,GAC1B,OAOJ,SAAAuN,EACI3B,EAAY5L,EAAgBlkD,EAAuB0tD,EAAyB4D,EAC5EC,GACF,OAAQvxD,GACN,KAAKkvD,GAAgBwC,OACnB,ODpFN,SAAAC,EACIzN,EAAgB0N,EAAsBlE,GACxC,IAAMt8C,EAAOw8C,GAAe1J,GAI5B,OAAOyJ,GADQA,IADIv8C,EAAI,GAAgCA,EAAI,IACZwgD,GACZlE,GC8ExBiE,CAAoBzN,EAAQoN,EAAM5D,GAAOoC,EAAKM,YACvD,KAAKlB,GAAgB2C,KACnB,ODpGN,SAAAC,EACI5N,EAAgB0N,EAAsBlE,GACxC,IAAMt8C,EAAOw8C,GAAe1J,GAI5B,OAAOyJ,GADMA,IADMv8C,EAAI,GAA8BA,EAAI,IACdwgD,GACVlE,GC8FtBoE,CAAkB5N,EAAQoN,EAAM5D,GAAOoC,EAAKkB,UACrD,KAAK9B,GAAgB6C,WACnB,IAAMC,EAAelC,EAAKU,WACpByB,EAAiBnC,EAAKY,aAC5B,GAAIa,EAAU,CACZ,IAEIW,EAFEC,ED8Jd,SAAAC,EAA6ClO,GAC3C,IAAM9yC,EAAOw8C,GAAe1J,GAG5B,OAFAoK,GAAcl9C,IACAA,EAAI,IAA2B,QAChClO,IAAI,SAACmvD,GAChB,MAAoB,iBAATA,EACF9D,GAAY8D,IAEb9D,GAAY8D,EAAK,IAAK9D,GAAY8D,EAAK,OCtK7BD,CAA6BlO,GACrCoO,EDsLd,SAAAC,EACIrO,EAAgB0N,EAAsBlE,GACxC,IAAMt8C,EAAOw8C,GAAe1J,GAO5B,OANAoK,GAAcl9C,GAMPu8C,GADYA,IAHjBv8C,EAAI,IAA2B,GAC/BA,EAAI,IAA2B,IAEsBwgD,OAChBlE,OC/Ld6E,CAAyBrO,EAAQoN,EAAM5D,GAmB1D,GAjBAyE,EAAM/oD,QAAQ,SAACipD,EAA2BnxD,GACxC,GAAIvD,MAAM8H,QAAQ4sD,GAAO,CAEjB,IAAAzxD,EAAAyxD,EAAA,GACAzvC,EAAAyvC,EAAA,GAACG,EAAA5vC,EAAA6rC,MACHuD,GAFGpxD,EAAA6tD,OAE0BwD,GAFRrxD,EAAA8tD,UAGpBsD,EAAeQ,GACdR,IAAiBQ,GAAWP,EAHXrvC,EAAA8rC,WAIrBwD,EAASI,EAAWpxD,SAGfmxD,EAAA5D,QACOuD,GADAK,EAAA3D,UAC4BuD,IACxCC,EAASI,EAAWpxD,MAItBgxD,EACF,OAAOA,EAIX,ODjJN,SAAAO,EACIvO,EAAgB0N,EAAsBlE,GACxC,IAAMt8C,EAAOw8C,GAAe1J,GAK5B,OAAOyJ,GADMA,IADNv8C,EAAI,GAAoCA,EAAI,IACRwgD,GACVlE,GC0ItB+E,CAAoBvO,EAAQoN,EAAwB5D,GAAOsE,EAAe,GAAK,EAAI,GAC5F,KAAK9C,GAAgBwD,KACnB,ODxGN,SAAAC,EAAkCzO,EAAgBwJ,GAGhD,OAAOC,GAFMC,GAAe1J,GACa,GACJwJ,GCqG1BiF,CAAkBzO,EAA0BwJ,GAAOoC,EAAKI,eAAiB,EAAI,EAAI,GAC1F,QAME,MAAM,IAAIluD,MAAM,+BADUhC,IApDrByxD,CAAmB3B,EAAM5L,EAAQlkD,EAAM0tD,EAAO4D,EAAMC,IA8D/D,SAAAqB,GAAwBlF,GACtB,OAAO,SAASoC,EAAY5L,EAAgB7F,GAC1C,IAAM3R,GAAQ,EAAI2R,EACZoR,EAAY1B,GAAsB7J,EAAQsJ,GAAa4D,WACvD3C,EAAQ/hB,EAAO,EAAItP,KAAKgL,MAAMsE,EAAO,IAAMtP,KAAKy1B,KAAKnmB,EAAO,IAClE,OAAQghB,GACN,KAAKsB,GAAU8D,MACb,OAASpmB,GAAQ,EAAK,IAAM,IAAM4iB,GAAUb,EAAO,EAAGgB,GAClDH,GAAUlyB,KAAKonB,IAAI9X,EAAO,IAAK,EAAG+iB,GACxC,KAAKT,GAAU+D,SACb,MAAO,OAAUrmB,GAAQ,EAAK,IAAM,IAAM4iB,GAAUb,EAAO,EAAGgB,GAChE,KAAKT,GAAUgE,KACb,MAAO,OAAUtmB,GAAQ,EAAK,IAAM,IAAM4iB,GAAUb,EAAO,EAAGgB,GAAa,IACvEH,GAAUlyB,KAAKonB,IAAI9X,EAAO,IAAK,EAAG+iB,GACxC,KAAKT,GAAUiE,SACb,OAAe,IAAX5U,EACK,KAEE3R,GAAQ,EAAK,IAAM,IAAM4iB,GAAUb,EAAO,EAAGgB,GAAa,IAC/DH,GAAUlyB,KAAKonB,IAAI9X,EAAO,IAAK,EAAG+iB,GAE1C,QACE,MAAM,IAAIztD,MAAM,uBAAuB0rD,EAAK,OAKpD,IAAMwF,GAAU,EACVC,GAAW,EAajB,SAAAC,GAAoB5R,EAAc6R,GAChC,YADgC,IAAAA,IAAAA,GAAA,GACzB,SAASvD,EAAY5L,GAC1B,IAAIhxB,EACJ,GAAImgC,EAAY,CACd,IAAMC,EACF,IAAIjD,KAAKP,EAAKI,cAAeJ,EAAKM,WAAY,GAAGY,SAAW,EAC1DuC,EAAQzD,EAAKQ,UACnBp9B,EAAS,EAAIkK,KAAKgL,OAAOmrB,EAAQD,GAA6B,OACzD,CACL,IAAME,EArBZ,SAAAC,EAAgCC,GAC9B,IAAMC,EAAiB,IAAKtD,KAAKqD,EAAMR,GAAS,GAAIlC,SACpD,OAAO,IAAIX,KACPqD,EAAM,EAAG,GAAMC,GAAkBR,GAAYA,GAAWA,GAAW,GAAKQ,GAkBrDF,CAAuB3D,EAAKI,eAEzCnR,EAjBZ,SAAA6U,EAA6BC,GAC3B,OAAO,IAAIxD,KACPwD,EAAS3D,cAAe2D,EAASzD,WACjCyD,EAASvD,WAAa6C,GAAWU,EAAS7C,WAaxB4C,CAAoB9D,GACfgE,UAAYN,EAAWM,UAC9C5gC,EAAS,EAAIkK,KAAK22B,MAAMhV,EAAO,QAGjC,OAAOuQ,GAAUp8B,EAAQsuB,EAAMuM,GAAsB7J,EAAQsJ,GAAa4D,aAM9E,IAAM4C,MA+ON,SAAAC,GAA0BC,EAAkBC,GAG1CD,EAAWA,EAASrqD,QAAQ,KAAM,IAClC,IAAMuqD,EAA0B/D,KAAKgE,MAAM,yBAA2BH,GAAY,IAClF,OAAO1tC,MAAM4tC,GAA2BD,EAAWC,EAmGrD,SAAAE,GAAuBl1D,GACrB,OAAOA,aAAiBixD,OAAS7pC,MAAMpnB,EAAMm1D,WC3sBxC,IAAMC,GAAuB,8BAC9BC,GAAa,GACbC,GAAc,IACdC,GAAY,IACZC,GAAc,IACdC,GAAY,IACZC,GAAa,IAOnB,SAAAC,GACI31D,EAAe41D,EAA6B9Q,EAAgB+Q,EAC5DC,EAA6BC,EAAqBC,QAAA,IAAAA,IAAAA,GAAA,GACpD,IAAIC,EAAgB,GAChBC,GAAS,EAEb,GAAKC,SAASn2D,GAEP,CACL,IAAIo2D,EA0RR,SAAAC,EAAqBlG,GACnB,IACkBC,EAAQkG,EACtBl3D,EAAGkH,EAAGiwD,EAFNC,EAASx4B,KAAKonB,IAAI+K,GAAO,GACzBsG,EAAW,EAoBf,KAhBKH,EAAaE,EAAOpyD,QAAQkxD,MAAiB,IAChDkB,EAASA,EAAO/rD,QAAQ6qD,GAAa,MAIlCl2D,EAAIo3D,EAAOE,OAAO,OAAS,GAE1BJ,EAAa,IAAGA,EAAal3D,GACjCk3D,IAAeE,EAAO/uD,MAAMrI,EAAI,GAChCo3D,EAASA,EAAOnyD,UAAU,EAAGjF,IACpBk3D,EAAa,IAEtBA,EAAaE,EAAOj3D,QAIjBH,EAAI,EAAGo3D,EAAOpsD,OAAOhL,KAAOm2D,GAAWn2D,KAG5C,GAAIA,KAAOm3D,EAAQC,EAAOj3D,QAExB6wD,GAAU,GACVkG,EAAa,MACR,CAGL,IADAC,IACOC,EAAOpsD,OAAOmsD,KAAWhB,IAAWgB,IAM3C,IAHAD,GAAcl3D,EACdgxD,KAEK9pD,EAAI,EAAGlH,GAAKm3D,EAAOn3D,IAAKkH,IAC3B8pD,EAAO9pD,GAAK++B,OAAOmxB,EAAOpsD,OAAOhL,IAWrC,OANIk3D,EAAajB,KACfjF,EAASA,EAAOnmC,OAAO,EAAGorC,GAAa,GACvCoB,EAAWH,EAAa,EACxBA,EAAa,IAGPlG,OAAMA,EAAEqG,SAAQA,EAAEH,WAAUA,GA5UfD,CAAYr2D,GAE3Bg2D,IACFI,EA6PN,SAAAO,EAAmBP,GAEjB,GAA+B,IAA3BA,EAAahG,OAAO,GACtB,OAAOgG,EAIT,IAAMQ,EAAcR,EAAahG,OAAO7wD,OAAS62D,EAAaE,WAY9D,OAXIF,EAAaK,SACfL,EAAaK,UAAY,GAEL,IAAhBG,EACFR,EAAahG,OAAO9vD,KAAK,EAAG,GACH,IAAhBs2D,GACTR,EAAahG,OAAO9vD,KAAK,GAE3B81D,EAAaE,YAAc,GAGtBF,EAhRYO,CAAUP,IAG3B,IAAIS,EAASjB,EAAQiB,OACjBC,EAAclB,EAAQmB,QACtBC,EAAcpB,EAAQqB,QAE1B,GAAIlB,EAAY,CACd,IAAMxrD,EAAQwrD,EAAW5yC,MAAMiyC,IAC/B,GAAc,OAAV7qD,EACF,MAAM,IAAI3H,MAASmzD,EAAU,8BAE/B,IAAMmB,EAAa3sD,EAAM,GACnB4sD,EAAkB5sD,EAAM,GACxB6sD,EAAkB7sD,EAAM,GACZ,MAAd2sD,IACFL,EAASQ,GAAkBH,IAEN,MAAnBC,IACFL,EAAcO,GAAkBF,IAEX,MAAnBC,EACFJ,EAAcK,GAAkBD,GACJ,MAAnBD,GAA2BL,EAAcE,IAClDA,EAAcF,IAwTtB,SAAAQ,EAAqBlB,EAA4BW,EAAiBE,GAChE,GAAIF,EAAUE,EACZ,MAAM,IAAIr0D,MACN,gDAAgDm0D,EAAO,iCAAiCE,EAAO,MAGrG,IAAI7G,EAASgG,EAAahG,OACtBwG,EAAcxG,EAAO7wD,OAAS62D,EAAaE,WACzCiB,EAAev5B,KAAKw5B,IAAIx5B,KAAKy5B,IAAIV,EAASH,GAAcK,GAG1DS,EAAUH,EAAenB,EAAaE,WACtCqB,EAAQvH,EAAOsH,GAEnB,GAAIA,EAAU,EAAG,CAEftH,EAAOnmC,OAAO+T,KAAKy5B,IAAIrB,EAAaE,WAAYoB,IAGhD,IAAK,IAAIpxD,EAAIoxD,EAASpxD,EAAI8pD,EAAO7wD,OAAQ+G,IACvC8pD,EAAO9pD,GAAK,MAET,CAELswD,EAAc54B,KAAKy5B,IAAI,EAAGb,GAC1BR,EAAaE,WAAa,EAC1BlG,EAAO7wD,OAASy+B,KAAKy5B,IAAI,EAAGC,EAAUH,EAAe,GACrDnH,EAAO,GAAK,EACZ,IAAK,IAAIhxD,EAAI,EAAGA,EAAIs4D,EAASt4D,IAAKgxD,EAAOhxD,GAAK,EAGhD,GAAIu4D,GAAS,EACX,GAAID,EAAU,EAAI,EAAG,CACnB,IAAK,IAAI/T,EAAI,EAAGA,EAAI+T,EAAS/T,IAC3ByM,EAAOzmD,QAAQ,GACfysD,EAAaE,aAEflG,EAAOzmD,QAAQ,GACfysD,EAAaE,kBAEblG,EAAOsH,EAAU,KAKrB,KAAOd,EAAc54B,KAAKy5B,IAAI,EAAGF,GAAeX,IAAexG,EAAO9vD,KAAK,GAE3E,IAAIs3D,EAAqC,IAAjBL,EAGlBM,EAASd,EAAUX,EAAaE,WAEhCwB,EAAQ1H,EAAO2H,YAAY,SAASD,EAAO55D,EAAGkB,EAAGgxD,GAWrD,OATAA,EAAOhxD,IADPlB,GAAQ45D,GACQ,GAAK55D,EAAIA,EAAI,GACzB05D,IAEgB,IAAdxH,EAAOhxD,IAAYA,GAAKy4D,EAC1BzH,EAAOhgB,MAEPwnB,GAAoB,GAGjB15D,GAAK,GAAK,EAAI,GACpB,GACC45D,IACF1H,EAAOzmD,QAAQmuD,GACf1B,EAAaE,cAvXbgB,CAAYlB,EAAcU,EAAaE,GAEvC,IAAI5G,EAASgG,EAAahG,OACtBkG,EAAaF,EAAaE,WACxBG,EAAWL,EAAaK,SAC1BuB,KAIJ,IAHA9B,EAAS9F,EAAO6H,MAAM,SAAA/5D,GAAK,OAACA,IAGrBo4D,EAAaO,EAAQP,IAC1BlG,EAAOzmD,QAAQ,GAIjB,KAAO2sD,EAAa,EAAGA,IACrBlG,EAAOzmD,QAAQ,GAIb2sD,EAAa,EACf0B,EAAW5H,EAAOnmC,OAAOqsC,EAAYlG,EAAO7wD,SAE5Cy4D,EAAW5H,EACXA,GAAU,IAIZ,IAAM8H,KAKN,IAJI9H,EAAO7wD,QAAUq2D,EAAQuC,QAC3BD,EAAOvuD,QAAQymD,EAAOnmC,QAAQ2rC,EAAQuC,OAAQ/H,EAAO7wD,QAAQwE,KAAK,KAG7DqsD,EAAO7wD,OAASq2D,EAAQwC,OAC7BF,EAAOvuD,QAAQymD,EAAOnmC,QAAQ2rC,EAAQwC,MAAOhI,EAAO7wD,QAAQwE,KAAK,KAG/DqsD,EAAO7wD,QACT24D,EAAOvuD,QAAQymD,EAAOrsD,KAAK,KAG7BkyD,EAAgBiC,EAAOn0D,KAAK4qD,GAAsB7J,EAAQ+Q,IAGtDmC,EAASz4D,SACX02D,GAAiBtH,GAAsB7J,EAAQgR,GAAiBkC,EAASj0D,KAAK,KAG5E0yD,IACFR,GAAiBtH,GAAsB7J,EAAQsJ,GAAaiK,aAAe,IAAM5B,QAjFnFR,EAAgBtH,GAAsB7J,EAAQsJ,GAAakK,UA2F7D,OANIt4D,EAAQ,IAAMk2D,EACAN,EAAQ2C,OAAStC,EAAgBL,EAAQ4C,OAEzC5C,EAAQ6C,OAASxC,EAAgBL,EAAQ8C,OAwG7D,SAAAC,GAA2BC,EAAgBvI,QAAA,IAAAA,IAAAA,EAAA,KACzC,IAAM7xD,GACJq4D,OAAQ,EACRE,QAAS,EACTE,QAAS,EACTwB,OAAQ,GACRC,OAAQ,GACRH,OAAQ,GACRC,OAAQ,GACRJ,MAAO,EACPD,OAAQ,GAGJU,EAAeD,EAAOl1C,MAAM8xC,IAC5BsD,EAAWD,EAAa,GACxBE,EAAWF,EAAa,GAExBG,GAAmD,IAAnCF,EAAS10D,QAAQkxD,IACnCwD,EAASp1C,MAAM4xC,KAEbwD,EAASz0D,UAAU,EAAGy0D,EAASG,YAAY1D,IAAa,GACxDuD,EAASz0D,UAAUy0D,EAASG,YAAY1D,IAAa,IAErD2D,EAAUF,EAAc,GAAIG,EAAWH,EAAc,IAAM,GAEjEx6D,EAAEi6D,OAASS,EAAQ7uD,OAAO,EAAG6uD,EAAQ90D,QAAQsxD,KAE7C,IAAK,IAAIt2D,EAAI,EAAGA,EAAI+5D,EAAS55D,OAAQH,IAAK,CACxC,IAAMg6D,EAAKD,EAAS/uD,OAAOhL,GACvBg6D,IAAO7D,GACT/2D,EAAEu4D,QAAUv4D,EAAEy4D,QAAU73D,EAAI,EACnBg6D,IAAO1D,GAChBl3D,EAAEy4D,QAAU73D,EAAI,EAEhBZ,EAAEk6D,QAAUU,EAIhB,IAAMlB,EAASgB,EAAQx1C,MAAM+xC,IAI7B,GAHAj3D,EAAE45D,MAAQF,EAAO,GAAKA,EAAO,GAAG34D,OAAS,EACzCf,EAAE25D,OAAUD,EAAO,IAAMA,EAAO,IAAOA,EAAO,IAAMA,EAAO,IAAI34D,OAAS,EAEpEw5D,EAAU,CACZ,IAAMM,EAAWP,EAASv5D,OAASf,EAAEi6D,OAAOl5D,OAASf,EAAEk6D,OAAOn5D,OACxD+5D,EAAMP,EAAS30D,QAAQsxD,IAE7Bl3D,EAAE+5D,OAASQ,EAAS1uD,OAAO,EAAGivD,GAAK7uD,QAAQ,KAAM,IACjDjM,EAAEg6D,OAASO,EAAS1uD,OAAOivD,EAAMD,GAAU5uD,QAAQ,KAAM,SAEzDjM,EAAE+5D,OAASlI,EAAY7xD,EAAEi6D,OACzBj6D,EAAEg6D,OAASh6D,EAAEk6D,OAGf,OAAOl6D,EAuKT,SAAA64D,GAAkCntD,GAChC,IAAM4pB,EAAiBylC,SAASrvD,GAChC,GAAIkd,MAAM0M,GACR,MAAM,IAAIlxB,MAAM,wCAA0CsH,GAE5D,OAAO4pB,EChbF,IAKP0lC,GALaC,GAAuB,IAAI/yD,EAAwB,gBAehE,SAAAgzD,GACI15D,EAAe25D,EAAiBC,EAAgC9U,GAClE,IAAIniD,EAAM,IAAI3C,EAEd,GAAI25D,EAAMv1D,QAAQzB,IAAQ,EACxB,OAAOA,EAKT,GAFAA,EAAMi3D,EAAeC,kBAAkB75D,EAAO8kD,GAE1C6U,EAAMv1D,QAAQzB,IAAQ,EACxB,OAAOA,EAGT,GAAIg3D,EAAMv1D,QAAQ,UAAY,EAC5B,MAAO,QAGT,MAAM,IAAIxB,MAAM,sCAAsC5C,EAAK,KAQ7D,IAAA85D,GAAA,SAAA/mC,GAEE,SAAA+mC,EACiChV,EAEuBiV,GAHxD,IAAA5uD,EAKE4nB,EAAAvzB,KAAAZ,OAAOA,YAJwBuM,EAAA25C,OAAAA,EAEuB35C,EAAA4uD,mBAAAA,WAJhB7mC,EAAAA,EAAAA,GASxC4mC,EAAAh7D,UAAA+6D,kBAAA,SAAkB75D,EAAY8kD,GAI5B,OAHelmD,KAAKm7D,mBAAqBn7D,KAAKm7D,mBAAmBjV,GAAUlmD,KAAKkmD,OAAQ9kD,GHoV5F,SAAAg6D,EAAoClV,GAElC,OADa0J,GAAe1J,GACjB,IGrVgCkV,CAAoBlV,GAAUlmD,KAAKkmD,OAAnCkV,CAA2Ch6D,IAGlF,KAAKguD,GAAOiM,KACV,MAAO,OACT,KAAKjM,GAAOkM,IACV,MAAO,MACT,KAAKlM,GAAOmM,IACV,MAAO,MACT,KAAKnM,GAAOoM,IACV,MAAO,MACT,KAAKpM,GAAOqM,KACV,MAAO,OACT,QACE,MAAO,qCAzBFP,EAAoB92D,QAAA,SAAAs3D,EAAAp7D,GAAA,OAAA,IAAAA,GAApB46D,GAAoBp0D,EAEnB8+C,IAAS9+C,EAEG+zD,GAAoB,KAAA12D,WAAA,SAL9C,CApCAy2D,GAAA,SAAAA,QCkBAe,GAAA,WAUE,SAAAA,EACYC,EAA2CC,EAC3CC,EAA2BvzB,GAD3BvoC,KAAA47D,iBAAAA,EAA2C57D,KAAA67D,iBAAAA,EAC3C77D,KAAA87D,MAAAA,EAA2B97D,KAAAuoC,UAAAA,EAN/BvoC,KAAA+7D,0BAQRv8D,OAAA4D,eACIu4D,EAAAz7D,UAAA,aADJ,SACUkB,GACRpB,KAAKg8D,eAAeh8D,KAAK+7D,iBACzB/7D,KAAK+7D,gBAAmC,iBAAV36D,EAAqBA,EAAM0jB,MAAM,UAC/D9kB,KAAKi8D,cAAcj8D,KAAK+7D,iBACxB/7D,KAAKi8D,cAAcj8D,KAAKk8D,4CAG1B18D,OAAA4D,eACIu4D,EAAAz7D,UAAA,eADJ,SACYkB,GACVpB,KAAKg8D,eAAeh8D,KAAKk8D,WACzBl8D,KAAKi8D,cAAcj8D,KAAK+7D,iBAExB/7D,KAAKm8D,gBAAkB,KACvBn8D,KAAKo8D,gBAAkB,KAEvBp8D,KAAKk8D,UAA6B,iBAAV96D,EAAqBA,EAAM0jB,MAAM,OAAS1jB,EAE9DpB,KAAKk8D,YACH5d,GAAmBt+C,KAAKk8D,WAC1Bl8D,KAAKm8D,gBAAkBn8D,KAAK47D,iBAAiBxW,KAAKplD,KAAKk8D,WAAW/7D,SAElEH,KAAKo8D,gBAAkBp8D,KAAK67D,iBAAiBzW,KAAKplD,KAAKk8D,WAAW/7D,2CAKxEw7D,EAAAz7D,UAAAiW,UAAA,WACE,GAAInW,KAAKm8D,gBAAiB,CACxB,IAAME,EAAkBr8D,KAAKm8D,gBAAgBpb,KAAK/gD,KAAKk8D,WACnDG,GACFr8D,KAAKs8D,sBAAsBD,QAExB,GAAIr8D,KAAKo8D,gBAAiB,CAC/B,IAAMG,EAAkBv8D,KAAKo8D,gBAAgBrb,KAAK/gD,KAAKk8D,WACnDK,GACFv8D,KAAKw8D,sBAAsBD,KAKzBZ,EAAAz7D,UAAAs8D,sBAAR,SAA8B5pD,GAA9B,IAAArG,EAAAvM,KACE4S,EAAQ4tC,iBAAiB,SAAC/1C,GAAW,OAAA8B,EAAKkwD,aAAahyD,EAAO1G,IAAK0G,EAAO+5C,gBAC1E5xC,EAAQqxC,mBAAmB,SAACx5C,GAAW,OAAA8B,EAAKkwD,aAAahyD,EAAO1G,IAAK0G,EAAO+5C,gBAC5E5xC,EAAQguC,mBAAmB,SAACn2C,GACtBA,EAAO85C,eACTh4C,EAAKkwD,aAAahyD,EAAO1G,KAAK,MAK5B43D,EAAAz7D,UAAAo8D,sBAAR,SAA8B1pD,GAA9B,IAAArG,EAAAvM,KACE4S,EAAQ4tC,iBAAiB,SAAC/1C,GACxB,GAA2B,iBAAhBA,EAAOoZ,KAGhB,MAAM,IAAI7f,MACN,iEAAiEiB,EAAUwF,EAAOoZ,OAHtFtX,EAAKkwD,aAAahyD,EAAOoZ,MAAM,KAOnCjR,EAAQguC,mBAAmB,SAACn2C,GAAW,OAAA8B,EAAKkwD,aAAahyD,EAAOoZ,MAAM,MAWhE83C,EAAAz7D,UAAA+7D,cAAR,SAAsBS,GAAtB,IAAAnwD,EAAAvM,KACM08D,IACE/8D,MAAM8H,QAAQi1D,IAAgBA,aAAuBjwD,IACjDiwD,EAAatxD,QAAQ,SAACuxD,GAAkB,OAAApwD,EAAKkwD,aAAaE,GAAO,KAEvEn9D,OAAO6oB,KAAKq0C,GAAatxD,QAAQ,SAAAuxD,GAAS,OAAApwD,EAAKkwD,aAAaE,IAASD,EAAYC,QAS/EhB,EAAAz7D,UAAA87D,eAAR,SAAuBU,GAAvB,IAAAnwD,EAAAvM,KACM08D,IACE/8D,MAAM8H,QAAQi1D,IAAgBA,aAAuBjwD,IACjDiwD,EAAatxD,QAAQ,SAACuxD,GAAkB,OAAApwD,EAAKkwD,aAAaE,GAAO,KAEvEn9D,OAAO6oB,KAAKq0C,GAAatxD,QAAQ,SAAAuxD,GAAS,OAAApwD,EAAKkwD,aAAaE,GAAO,OAKjEhB,EAAAz7D,UAAAu8D,aAAR,SAAqBE,EAAeC,GAApC,IAAArwD,EAAAvM,MACE28D,EAAQA,EAAM31C,SAEZ21C,EAAM73C,MAAM,QAAQ1Z,QAAQ,SAAAuxD,GACtBC,EACFrwD,EAAKg8B,UAAUs0B,SAAStwD,EAAKuvD,MAAMllC,cAAe+lC,GAElDpwD,EAAKg8B,UAAUu0B,YAAYvwD,EAAKuvD,MAAMllC,cAAe+lC,gCApHlDhB,EAAO1kD,YAAA,GAAA,UAAA,KAAA7S,QAAA,SAAA24D,EAAAz8D,GAAA,OAAA,IAAAA,GAAPq7D,GAAOhpC,GAUYqyB,IAAeryB,GAA4B2yB,IAAe3yB,GACrEgE,IAAUhE,GAAqBsE,MAASthB,QAAAgnD,OAAA,QAAA,SAAAK,QAAA,eAZ7D,GCgCAC,GAAA,WAcE,SAAAA,EAAoBloC,GAAA/0B,KAAA+0B,kBAAAA,EAHZ/0B,KAAAk9D,cAAwC,KACxCl9D,KAAAm9D,WAAoC,YAI5CF,EAAA/8D,UAAA6V,YAAA,SAAYnD,GAIV,GAHA5S,KAAK+0B,kBAAkBtnB,QACvBzN,KAAKk9D,cAAgB,KAEjBl9D,KAAKo9D,kBAAmB,CAC1B,IAAMC,EAAar9D,KAAKs9D,2BAA6Bt9D,KAAK+0B,kBAAkB+H,eAE5E,GAAIlqB,EAA0C,iCAG5C,GAFI5S,KAAKm9D,YAAYn9D,KAAKm9D,WAAW9vD,UAEjCrN,KAAKu9D,iCAAkC,CACzC,IAAMC,EAAeH,EAAWl2D,IAAIstB,IACpCz0B,KAAKm9D,WAAan9D,KAAKu9D,iCAAiCp9D,OAAOq9D,EAAa/2D,eAE5EzG,KAAKm9D,WAAa,KAItB,IAGMxkB,GAH2B34C,KAAKm9D,WAAan9D,KAAKm9D,WAAWM,yBAChBJ,EAAWl2D,IAAI8sB,KAGrCF,wBAAwB/zB,KAAKo9D,mBAE1Dp9D,KAAKk9D,cAAgBl9D,KAAK+0B,kBAAkBolB,gBACxCxB,EAAkB34C,KAAK+0B,kBAAkBp0B,OAAQ08D,EACjDr9D,KAAK09D,4BAIbT,EAAA/8D,UAAAsN,YAAA,WACMxN,KAAKm9D,YAAYn9D,KAAKm9D,WAAW9vD,qCA9C5B4vD,EAAiBhmD,YAAA,GAAA,oBAAA,KAAA7S,QAAA,SAAAu5D,EAAAr9D,GAAA,OAAA,IAAAA,GAAjB28D,GAAiBtqC,GAaWwmB,MAAgBxjC,QAAAynD,kBAAA,oBAAAE,0BAAA,4BAAAI,yBAAA,2BAAAH,iCAAA,wCAdzD,GCzDAK,GAAA,WACE,SAAAA,EACWC,EAAqBC,EAA+B56D,EACpD6hC,GADA/kC,KAAA69D,UAAAA,EAAqB79D,KAAA89D,QAAAA,EAA+B99D,KAAAkD,MAAAA,EACpDlD,KAAA+kC,MAAAA,EASb,OAPEvlC,OAAA4D,eAAIw6D,EAAA19D,UAAA,aAAJ,WAAuB,OAAsB,IAAfF,KAAKkD,uCAEnC1D,OAAA4D,eAAIw6D,EAAA19D,UAAA,YAAJ,WAAsB,OAAOF,KAAKkD,QAAUlD,KAAK+kC,MAAQ,mCAEzDvlC,OAAA4D,eAAIw6D,EAAA19D,UAAA,YAAJ,WAAsB,OAAOF,KAAKkD,MAAQ,GAAM,mCAEhD1D,OAAA4D,eAAIw6D,EAAA19D,UAAA,WAAJ,WAAqB,OAAQF,KAAK+9D,sCACpCH,EAZA,GAuFAI,GAAA,WA6BE,SAAAA,EACYC,EAA0CC,EAC1CC,GADAn+D,KAAAi+D,eAAAA,EAA0Cj+D,KAAAk+D,UAAAA,EAC1Cl+D,KAAAm+D,SAAAA,EAPJn+D,KAAAo+D,eAAyB,EACzBp+D,KAAAq+D,QAAkC,YAvB1C7+D,OAAA4D,eACI46D,EAAA99D,UAAA,eADJ,SACY49D,GACV99D,KAAKs+D,SAAWR,EAChB99D,KAAKo+D,eAAgB,mCAEvB5+D,OAAA4D,eACI46D,EAAA99D,UAAA,oBAYJ,WAAyC,OAAOF,KAAKu/C,gBAbrD,SACiBz5C,GACX2b,MAAqB,MAAN3b,GAA4B,mBAAPA,GAE7B0e,SAAgBA,QAAQC,MAC/BD,QAAQC,KACJ,4CAA4C7Y,KAAK3G,UAAUa,GAAG,4HAItE9F,KAAKu/C,WAAaz5C,mCAgBpBtG,OAAA4D,eACI46D,EAAA99D,UAAA,qBADJ,SACkBkB,GAIZA,IACFpB,KAAKk+D,UAAY98D,oCAIrB48D,EAAA99D,UAAAiW,UAAA,WACE,GAAInW,KAAKo+D,cAAe,CACtBp+D,KAAKo+D,eAAgB,EAErB,IAAMh9D,EAAQpB,KAAKs+D,SACnB,IAAKt+D,KAAKq+D,SAAWj9D,EACnB,IACEpB,KAAKq+D,QAAUr+D,KAAKm+D,SAAS/Y,KAAKhkD,GAAOjB,OAAOH,KAAKu+D,cACrD,MAAA37D,GACA,MAAM,IAAIoB,MACN,2CAA2C5C,EAAK,cAmE9D,SAAAo9D,EAAqB75D,GACnB,OAAOA,EAAW,aAAYA,EApE4C65D,CAAYp9D,GAAM,gEAI1F,GAAIpB,KAAKq+D,QAAS,CAChB,IAAMzrD,EAAU5S,KAAKq+D,QAAQtd,KAAK/gD,KAAKs+D,UACnC1rD,GAAS5S,KAAKy+D,cAAc7rD,KAI5BorD,EAAA99D,UAAAu+D,cAAR,SAAsB7rD,GAAtB,IAAArG,EAAAvM,KACQ0+D,KACN9rD,EAAQ6sC,iBACJ,SAAC57B,EAAiC86C,EAA+B7e,GAC/D,GAA0B,MAAtBj8B,EAAKq8B,cAAuB,CAC9B,IAAM/sC,EAAO5G,EAAK0xD,eAAev1B,mBAC7Bn8B,EAAK2xD,UAAW,IAAIN,GAAkB,KAAQrxD,EAAK+xD,UAAW,GAAI,GAAIxe,GACpE8e,EAAQ,IAAIC,GAAmBh7C,EAAM1Q,GAC3CurD,EAAah9D,KAAKk9D,QACO,MAAhB9e,EACTvzC,EAAK0xD,eAAez/B,OAAOmgC,IAErBxrD,EAAO5G,EAAK0xD,eAAe92D,IAAIw3D,GACrCpyD,EAAK0xD,eAAe1jB,KAAKpnC,EAAM2sC,GACzB8e,EAAQ,IAAIC,GAAgBh7C,EAA0C1Q,GAC5EurD,EAAah9D,KAAKk9D,MAI1B,IAAK,IAAIp+D,EAAI,EAAGA,EAAIk+D,EAAa/9D,OAAQH,IACvCR,KAAK8+D,eAAeJ,EAAal+D,GAAG2S,KAAMurD,EAAal+D,GAAGiK,QAGnDjK,EAAI,EAAb,IAAK,IAAWu+D,EAAO/+D,KAAKi+D,eAAet9D,OAAQH,EAAIu+D,EAAMv+D,IAAK,CAChE,IAAMuoC,EAA8C/oC,KAAKi+D,eAAe92D,IAAI3G,GAC5EuoC,EAAQr9B,QAAQxI,MAAQ1C,EACxBuoC,EAAQr9B,QAAQq5B,MAAQg6B,EACxBh2B,EAAQr9B,QAAQoyD,QAAU99D,KAAKs+D,SAGjC1rD,EAAQiuC,sBAAsB,SAACp2C,GAEW8B,EAAK0xD,eAAe92D,IAAIsD,EAAOq1C,cAC/Dp0C,QAAQmyD,UAAYpzD,EAAOoZ,QAI/Bm6C,EAAA99D,UAAA4+D,eAAR,SACI3rD,EAA0C1I,GAC5C0I,EAAKzH,QAAQmyD,UAAYpzD,EAAOoZ,MAS3Bm6C,EAAAgB,uBAAP,SAAiCC,EAAiBC,GAChD,OAAO,6BA/GElB,EAAO/mD,YAAA,GAAA,QAAA,GAAA,UAAA,KAAA7S,QAAA,SAAA+6D,EAAA7+D,GAAA,OAAA,IAAAA,GAAP09D,GAAOrrC,GA6BUwmB,IAAgBxmB,GAAqBmV,IAAWnV,GACtDqyB,MAAervC,QAAAmoD,QAAA,UAAAS,aAAA,eAAAa,cAAA,qBA/BvC,GAoHAP,GACE,SAAAA,GAAmBp0D,EAAoB0I,GAApBnT,KAAAyK,OAAAA,EAAoBzK,KAAAmT,KAAAA,GCjHzCksD,GAAA,WAQE,SAAAA,EAAoBpB,EAAkCjkB,GAAlCh6C,KAAAi+D,eAAAA,EANZj+D,KAAA40B,SAAwB,IAAI0qC,GAC5Bt/D,KAAAu/D,iBAAkD,KAClDv/D,KAAAw/D,iBAAkD,KAClDx/D,KAAAy/D,aAAkD,KAClDz/D,KAAA0/D,aAAkD,KAGxD1/D,KAAKu/D,iBAAmBvlB,SAG1Bx6C,OAAA4D,eACIi8D,EAAAn/D,UAAA,YADJ,SACSy/D,GACP3/D,KAAK40B,SAASipC,UAAY79D,KAAK40B,SAASgrC,KAAOD,EAC/C3/D,KAAK6/D,+CAGPrgE,OAAA4D,eACIi8D,EAAAn/D,UAAA,gBADJ,SACa85C,GACX8lB,GAAe,WAAY9lB,GAC3Bh6C,KAAKu/D,iBAAmBvlB,EACxBh6C,KAAKy/D,aAAe,KACpBz/D,KAAK6/D,+CAGPrgE,OAAA4D,eACIi8D,EAAAn/D,UAAA,gBADJ,SACa85C,GACX8lB,GAAe,WAAY9lB,GAC3Bh6C,KAAKw/D,iBAAmBxlB,EACxBh6C,KAAK0/D,aAAe,KACpB1/D,KAAK6/D,+CAGCR,EAAAn/D,UAAA2/D,YAAR,WACM7/D,KAAK40B,SAASipC,UACX79D,KAAKy/D,eACRz/D,KAAKi+D,eAAexwD,QACpBzN,KAAK0/D,aAAe,KAChB1/D,KAAKu/D,mBACPv/D,KAAKy/D,aACDz/D,KAAKi+D,eAAev1B,mBAAmB1oC,KAAKu/D,iBAAkBv/D,KAAK40B,YAItE50B,KAAK0/D,eACR1/D,KAAKi+D,eAAexwD,QACpBzN,KAAKy/D,aAAe,KAChBz/D,KAAKw/D,mBACPx/D,KAAK0/D,aACD1/D,KAAKi+D,eAAev1B,mBAAmB1oC,KAAKw/D,iBAAkBx/D,KAAK40B,aAiBxEyqC,EAAAU,qBAAP,SAA+Bd,EAAWe,GAAmC,OAAO,6BAlEzEX,EAAIpoD,YAAA,GAAA,OAAA,KAAA7S,QAAA,SAAA67D,EAAA3/D,GAAA,OAAA,IAAAA,GAAJ++D,GAAI1sC,GAOqBwmB,IAAgBxmB,GAAemV,MAAWnyB,QAAAiqD,KAAA,OAAAM,SAAA,WAAAC,SAAA,gBARhF,GAyEAb,GAAA,SAAAA,KACSt/D,KAAA69D,UAAiB,KACjB79D,KAAA4/D,KAAY,MAGrB,SAAAE,GAAwBM,EAAkBpmB,GAExC,GADgCA,IAAeA,EAAYtR,mBAEzD,MAAM,IAAI1kC,MAASo8D,EAAQ,yCAAyCn7D,EAAU+0C,GAAY,MC/K9F,IAAAqmB,GAAA,WAGE,SAAAA,EACYtrC,EAA6CurC,GAA7CtgE,KAAA+0B,kBAAAA,EAA6C/0B,KAAAsgE,aAAAA,EAHjDtgE,KAAAugE,UAAW,EAsBrB,OAjBEF,EAAAngE,UAAAC,OAAA,WACEH,KAAKugE,UAAW,EAChBvgE,KAAK+0B,kBAAkB2T,mBAAmB1oC,KAAKsgE,eAGjDD,EAAAngE,UAAAmN,QAAA,WACErN,KAAKugE,UAAW,EAChBvgE,KAAK+0B,kBAAkBtnB,SAGzB4yD,EAAAngE,UAAAsgE,aAAA,SAAaC,GACPA,IAAYzgE,KAAKugE,SACnBvgE,KAAKG,UACKsgE,GAAWzgE,KAAKugE,UAC1BvgE,KAAKqN,WAGXgzD,EAvBA,GA6FAK,GAAA,WAAA,SAAAA,IAIU1gE,KAAA2gE,cAAe,EACf3gE,KAAA4gE,WAAa,EACb5gE,KAAA6gE,oBAAsB,EACtB7gE,KAAA8gE,mBAAoB,SAG5BthE,OAAA4D,eACIs9D,EAAAxgE,UAAA,gBADJ,SACa2kD,GACX7kD,KAAK+gE,UAAYlc,EACO,IAApB7kD,KAAK4gE,YACP5gE,KAAKghE,qBAAoB,oCAK7BN,EAAAxgE,UAAA+gE,SAAA,WAAqB,OAAOjhE,KAAK4gE,cAGjCF,EAAAxgE,UAAAghE,YAAA,SAAY/tD,GACLnT,KAAKmhE,gBACRnhE,KAAKmhE,kBAEPnhE,KAAKmhE,cAAcz/D,KAAKyR,IAI1ButD,EAAAxgE,UAAAkhE,WAAA,SAAWhgE,GACT,IAAMigE,EAAUjgE,GAASpB,KAAK+gE,UAQ9B,OAPA/gE,KAAK8gE,kBAAoB9gE,KAAK8gE,mBAAqBO,EACnDrhE,KAAK6gE,sBACD7gE,KAAK6gE,sBAAwB7gE,KAAK4gE,aACpC5gE,KAAKghE,qBAAqBhhE,KAAK8gE,mBAC/B9gE,KAAK6gE,oBAAsB,EAC3B7gE,KAAK8gE,mBAAoB,GAEpBO,GAGDX,EAAAxgE,UAAA8gE,oBAAR,SAA4BM,GAC1B,GAAIthE,KAAKmhE,eAAiBG,IAAethE,KAAK2gE,aAAc,CAC1D3gE,KAAK2gE,aAAeW,EACpB,IAAK,IAAI9gE,EAAI,EAAGA,EAAIR,KAAKmhE,cAAcxgE,OAAQH,IACzBR,KAAKmhE,cAAc3gE,GAC3BggE,aAAac,+BA9CpBZ,EAAQzpD,YAAA,GAAA,WAAA,KAAA7S,QAAA,SAAAm9D,EAAAjhE,GAAA,OAAA,IAAAA,GAARogE,IAAQ/qD,QAAA6rD,SAAA,gBADrB,GAsFAC,GAAA,WASE,SAAAA,EACIC,EAAiC1nB,EACjBwnB,GAAAxhE,KAAAwhE,SAAAA,EAClBA,EAASP,WACTjhE,KAAKs2B,MAAQ,IAAI+pC,GAAWqB,EAAe1nB,UAM7CynB,EAAAvhE,UAAAiW,UAAA,WAAcnW,KAAKs2B,MAAMkqC,aAAaxgE,KAAKwhE,SAASJ,WAAWphE,KAAK2hE,0CAlBzDF,EAAYxqD,YAAA,GAAA,eAAA,KAAA7S,QAAA,SAAAw9D,EAAAthE,GAAA,OAAA,IAAAA,GAAZmhE,GAAY9uC,GASJwmB,IAAgBxmB,GAAemV,IAAWnV,GAC/B+tC,GAAQ,KAAA/qD,QAAAgsD,aAAA,oBAXxC,GAoCAE,GAAA,WAEE,SAAAA,EACIH,EAAiC1nB,EACzBwnB,GACVA,EAASN,YAAY,IAAIb,GAAWqB,EAAe1nB,qCAJ1C6nB,EAAe5qD,YAAA,GAAA,kBAAA,KAAA7S,QAAA,SAAA09D,EAAAxhE,GAAA,OAAA,IAAAA,GAAfuhE,GAAelvC,GAEPwmB,IAAgBxmB,GAAemV,IAAWnV,GACvC+tC,GAAQ,SAJhC,GCnLAqB,GAAA,WAQE,SAAAA,EAAoBC,GAAAhiE,KAAAgiE,cAAAA,EAFZhiE,KAAAiiE,qBAIRziE,OAAA4D,eACI2+D,EAAA7hE,UAAA,gBADJ,SACakB,GACXpB,KAAKkiE,aAAe9gE,EACpBpB,KAAK6/D,+CAGPkC,EAAA7hE,UAAAiiE,QAAA,SAAQ/gE,EAAeghE,GAAgCpiE,KAAKiiE,WAAW7gE,GAASghE,GAExEL,EAAA7hE,UAAA2/D,YAAR,WACE7/D,KAAKqiE,cAEL,IAAMtH,EAAQv7D,OAAO6oB,KAAKroB,KAAKiiE,YACzBl+D,EAAMk3D,GAAkBj7D,KAAKkiE,aAAcnH,EAAO/6D,KAAKgiE,eAC7DhiE,KAAKsiE,cAActiE,KAAKiiE,WAAWl+D,KAG7Bg+D,EAAA7hE,UAAAmiE,YAAR,WACMriE,KAAKuiE,aAAaviE,KAAKuiE,YAAYl1D,WAGjC00D,EAAA7hE,UAAAoiE,cAAR,SAAsBnvD,GAChBA,IACFnT,KAAKuiE,YAAcpvD,EACnBnT,KAAKuiE,YAAYpiE,qCAhCV4hE,EAAQ9qD,YAAA,GAAA,WAAA,KAAA7S,QAAA,SAAAo+D,EAAAliE,GAAA,OAAA,IAAAA,GAARyhE,GAAQpvC,GAOgBioC,MAAcjlD,QAAA8sD,SAAA,gBARnD,GA0DAC,GAAA,WAEE,SAAAA,EACsCthE,EAAesS,EACjDguD,EAAyCe,GADPziE,KAAAoB,MAAAA,EAEpC,IAAMuhE,GAAsBn6C,MAAMie,OAAOrlC,IACzCqhE,EAASN,QAAQQ,EAAY,IAAIvhE,EAAUA,EAAO,IAAIi/D,GAAWqB,EAAehuD,qCALvEgvD,EAAYzrD,YAAA,GAAA,eAAA,KAAA7S,QAAA,SAAAw+D,EAAAtiE,GAAA,OAAA,IAAAA,GAAZoiE,GpGi1Fb,SAAAG,EAAgCC,GAC9B,OlBnrFF,SAAAC,EAAoC/vD,EAAc8vD,GAIhD,IAAM1yC,EAAQpd,EAAMod,MACpB,GAAIA,EACF,IAAK,IAAI5vB,EAAI,EAAGA,EAAI4vB,EAAMzvB,OAAQH,GAAQ,EAAG,CAC3C,IAAMojB,EAAWwM,EAAM5vB,GACvB,GAAY,IAARojB,EAAyC,MAC7C,GAAIA,GAAYk/C,EACd,OAAO1yC,EAAM5vB,EAAI,GAIvB,OAAO,KkBqqFAuiE,CAAoB5oD,KAA4B2oD,GoGl1FhCD,CAER,gBAAclwC,GAAkCmV,IAAWnV,GACvDwmB,IAAgBxmB,GAAoBovC,GAAQ,SAJjE,GCxEAiB,GAAA,WAOE,SAAAA,EACY7E,EAAmCrC,EAA2BvzB,GAA9DvoC,KAAAm+D,SAAAA,EAAmCn+D,KAAA87D,MAAAA,EAA2B97D,KAAAuoC,UAAAA,SAE1E/oC,OAAA4D,eACI4/D,EAAA9iE,UAAA,eADJ,SACYsC,GACVxC,KAAKijE,SAAWzgE,GACXxC,KAAKq+D,SAAW77D,IACnBxC,KAAKq+D,QAAUr+D,KAAKm+D,SAAS/Y,KAAK5iD,GAAQrC,2CAI9C6iE,EAAA9iE,UAAAiW,UAAA,WACE,GAAInW,KAAKq+D,QAAS,CAChB,IAAMzrD,EAAU5S,KAAKq+D,QAAQtd,KAAK/gD,KAAKijE,UACnCrwD,GACF5S,KAAKy+D,cAAc7rD,KAKjBowD,EAAA9iE,UAAAu+D,cAAR,SAAsB7rD,GAAtB,IAAArG,EAAAvM,KACE4S,EAAQguC,mBAAmB,SAACn2C,GAAW,OAAA8B,EAAK22D,UAAUz4D,EAAO1G,IAAK,QAClE6O,EAAQ4tC,iBAAiB,SAAC/1C,GAAW,OAAA8B,EAAK22D,UAAUz4D,EAAO1G,IAAK0G,EAAO+5C,gBACvE5xC,EAAQqxC,mBAAmB,SAACx5C,GAAW,OAAA8B,EAAK22D,UAAUz4D,EAAO1G,IAAK0G,EAAO+5C,iBAGnEwe,EAAA9iE,UAAAgjE,UAAR,SAAkBC,EAAqB/hE,GAC/B,IAAAwB,EAAAtB,EAAA6hE,EAAAr+C,MAAA,KAAA,GAAC9iB,EAAAY,EAAA,GAAMwgE,EAAAxgE,EAAA,GAGA,OAFbxB,EAAiB,MAATA,GAAiBgiE,EAAO,GAAGhiE,EAAQgiE,EAAShiE,GAGlDpB,KAAKuoC,UAAU86B,SAASrjE,KAAK87D,MAAMllC,cAAe50B,EAAMZ,GAExDpB,KAAKuoC,UAAU+6B,YAAYtjE,KAAK87D,MAAMllC,cAAe50B,8BAvC9CghE,EAAO/rD,YAAA,GAAA,UAAA,KAAA7S,QAAA,SAAAm/D,EAAAjjE,GAAA,OAAA,IAAAA,GAAP0iE,GAAOrwC,GAOI2yB,IAAe3yB,GAAiBgE,IAAUhE,GAAqBsE,MAASthB,QAAA6tD,QAAA,eARhG,GCEAC,GAAA,WAiBE,SAAAA,EAAoB1uC,GAAA/0B,KAAA+0B,kBAAAA,EAfZ/0B,KAAA0jE,SAAsC,KAQ9B1jE,KAAA2jE,wBAAuC,KAKvC3jE,KAAA4jE,iBAA0C,YAI1DH,EAAAvjE,UAAA6V,YAAA,SAAYnD,GACW5S,KAAK6jE,oBAAoBjxD,IAGxC5S,KAAK0jE,UACP1jE,KAAK+0B,kBAAkByJ,OAAOx+B,KAAK+0B,kBAAkBvvB,QAAQxF,KAAK0jE,WAGhE1jE,KAAK4jE,mBACP5jE,KAAK0jE,SAAW1jE,KAAK+0B,kBAAkB2T,mBACnC1oC,KAAK4jE,iBAAkB5jE,KAAK2jE,2BAG9B3jE,KAAK0jE,UAAY1jE,KAAK2jE,yBACxB3jE,KAAK8jE,uBAAuB9jE,KAAK2jE,0BAe/BF,EAAAvjE,UAAA2jE,oBAAR,SAA4BjxD,GAC1B,IAAMmxD,EAAYnxD,EAAiC,wBACnD,QAASA,EAA0B,kBAAMmxD,GAAa/jE,KAAKgkE,wBAAwBD,IAG7EN,EAAAvjE,UAAA8jE,wBAAR,SAAgCD,WACxBE,EAAczkE,OAAO6oB,KAAK07C,EAAUxf,mBACpC2f,EAAc1kE,OAAO6oB,KAAK07C,EAAUvf,kBAE1C,GAAIyf,EAAYtjE,SAAWujE,EAAYvjE,OAAQ,KAC7C,IAAqB,IAAAwjE,EAAAt/C,EAAAq/C,GAAWE,EAAAD,EAAAhjE,QAAAijE,EAAA/iE,KAAA+iE,EAAAD,EAAAhjE,OAC9B,IAAuC,IAAnC8iE,EAAYz+D,QADD4+D,EAAAhjE,OAEb,OAAO,mGAGX,OAAO,EAEP,OAAO,GAIHqiE,EAAAvjE,UAAA4jE,uBAAR,SAA+B5E,eAC7B,IAAqB,IAAAt6C,EAAAC,EAAArlB,OAAO6oB,KAAK62C,IAAIn6C,EAAAH,EAAAzjB,QAAA4jB,EAAA1jB,KAAA0jB,EAAAH,EAAAzjB,OAAE,CAAlC,IAAIsB,EAAQsiB,EAAA3jB,MACTpB,KAAK0jE,SAAWh4D,QAASjJ,GAAkBzC,KAAK2jE,wBAAyBlhE,iIAtExEghE,EAAgBxsD,YAAA,GAAA,mBAAA,KAAA7S,QAAA,SAAAigE,EAAA/jE,GAAA,OAAA,IAAAA,GAAhBmjE,GAAgB9wC,GAgBYwmB,MAAgBxjC,QAAAguD,wBAAA,0BAAAC,iBAAA,wBAjBzD,GCOaU,IACX3I,GACAsB,GACAe,GACAqB,GACAoE,GACAT,GACAtC,GACAe,GACAI,GACAE,GACAW,gBC1CuC/9D,EAAiBvD,GACxD,OAAO4C,MAAM,yBAAyB5C,EAAK,eAAe6D,EAAUN,GAAK,KC4E3E,ICpEA4/D,GAAA,WAAA,SAAAA,KAQA,OAPEA,EAAArkE,UAAAskE,mBAAA,SAAmBC,EAAwBC,GACzC,OAAOD,EAAM3jC,WAAW3/B,KAAMujE,EAAmB/iE,MAAO,SAACH,GAAa,MAAMA,MAG9E+iE,EAAArkE,UAAAykE,QAAA,SAAQ/lC,GAAwCA,EAAahS,eAE7D23C,EAAArkE,UAAAwM,UAAA,SAAUkyB,GAAwCA,EAAahS,eACjE23C,EARA,GAoBMK,GAAmB,IAVzB,WAAA,SAAAC,KAQA,OAPEA,EAAA3kE,UAAAskE,mBAAA,SAAmBC,EAAqBC,GACtC,OAAOD,EAAMx8C,KAAKy8C,EAAmB,SAAAljE,GAAO,MAAMA,KAGpDqjE,EAAA3kE,UAAAykE,QAAA,SAAQ/lC,KAERimC,EAAA3kE,UAAAwM,UAAA,SAAUkyB,KACZimC,EARA,IAWMC,GAAsB,IAAIP,GA6BhCQ,GAAA,WASE,SAAAA,EAAoBC,GAAAhlE,KAAAglE,KAAAA,EAPZhlE,KAAAilE,aAAoB,KACpBjlE,KAAAklE,qBAA4B,KAE5BllE,KAAAmlE,cAAoD,KACpDnlE,KAAAolE,KAA4D,KAC5DplE,KAAAqlE,UAAkC,YAI1CN,EAAA7kE,UAAAsN,YAAA,WACMxN,KAAKmlE,eACPnlE,KAAKslE,YAQTP,EAAA7kE,UAAAqlE,UAAA,SAAUh6D,GACR,OAAKvL,KAAKolE,KAQN75D,IAAQvL,KAAKolE,MACfplE,KAAKslE,WACEtlE,KAAKulE,UAAUh6D,IAGpBvL,KAAKilE,eAAiBjlE,KAAKklE,qBACtBllE,KAAKklE,sBAGdllE,KAAKklE,qBAAuBllE,KAAKilE,aAC1Bx8C,GAAaE,KAAK3oB,KAAKilE,gBAjBxB15D,GACFvL,KAAKghC,WAAWz1B,GAElBvL,KAAKklE,qBAAuBllE,KAAKilE,aAC1BjlE,KAAKilE,eAgBRF,EAAA7kE,UAAA8gC,WAAR,SAAmBz1B,GAAnB,IAAAgB,EAAAvM,KACEA,KAAKolE,KAAO75D,EACZvL,KAAKqlE,UAAYrlE,KAAKwlE,gBAAgBj6D,GACtCvL,KAAKmlE,cAAgBnlE,KAAKqlE,UAAUb,mBAChCj5D,EAAK,SAACnK,GAAkB,OAAAmL,EAAKk5D,mBAAmBl6D,EAAKnK,MAGnD2jE,EAAA7kE,UAAAslE,gBAAR,SAAwBj6D,GACtB,GAAIm6D,GAAWn6D,GACb,OAAOq5D,GAGT,GnHtGJ,SAAAe,EAA6Bp6D,GAG3B,QAASA,GAAgC,mBAAlBA,EAAIu1B,UmHmGrB8kC,CAAcr6D,GAChB,OAAOu5D,GAGT,MAAMe,GAAyBd,EAAWx5D,IAGpCw5D,EAAA7kE,UAAAolE,SAAR,WACEtlE,KAAKqlE,UAAUV,QAAQ3kE,KAAKmlE,eAC5BnlE,KAAKilE,aAAe,KACpBjlE,KAAKklE,qBAAuB,KAC5BllE,KAAKmlE,cAAgB,KACrBnlE,KAAKolE,KAAO,MAGNL,EAAA7kE,UAAAulE,mBAAR,SAA2BhB,EAAYrjE,GACjCqjE,IAAUzkE,KAAKolE,OACjBplE,KAAKilE,aAAe7jE,EACpBpB,KAAKglE,KAAKtvC,mDAxEHqvC,EAAS3gE,QAAA,SAAA0hE,EAAAxlE,GAAA,OAAA,IAAAA,GAATykE,GAASpyC,GAQMqoB,MAAiB5hC,MAAA,MAT7C,GC3CA2sD,GAAA,WAAA,SAAAA,YAKEA,EAAA7lE,UAAAqlE,UAAA,SAAUnkE,GACR,IAAKA,EAAO,OAAOA,EACnB,GAAqB,iBAAVA,EACT,MAAMykE,GAAyBE,EAAe3kE,GAEhD,OAAOA,EAAMylB,qDATJk/C,EAAa3hE,QAAA,SAAA4hE,EAAA1lE,GAAA,OAAA,IAAAA,GAAbylE,IAAa3sD,MAAA,MAD1B,GAuBM6sD,GACF,05NAmBJC,GAAA,WAAA,SAAAA,YAKEA,EAAAhmE,UAAAqlE,UAAA,SAAUnkE,GACR,IAAKA,EAAO,OAAOA,EACnB,GAAqB,iBAAVA,EACT,MAAMykE,GAAyBK,EAAe9kE,GAGhD,OAAOA,EAAMyK,QACTo6D,GAAgB,SAAGE,GAAO,OAAAA,EAAI,GAAGC,cAAgBD,EAAI16D,OAAO,GAAGob,uDAX1Dq/C,EAAa9hE,QAAA,SAAAiiE,EAAA/lE,GAAA,OAAA,IAAAA,GAAb4lE,IAAa9sD,MAAA,MAD1B,GAwBAktD,GAAA,WAAA,SAAAA,YAKEA,EAAApmE,UAAAqlE,UAAA,SAAUnkE,GACR,IAAKA,EAAO,OAAOA,EACnB,GAAqB,iBAAVA,EACT,MAAMykE,GAAyBS,EAAellE,GAEhD,OAAOA,EAAMglE,qDATJE,EAAaliE,QAAA,SAAAmiE,EAAAjmE,GAAA,OAAA,IAAAA,GAAbgmE,IAAaltD,MAAA,MAD1B,GC2DAotD,GAAA,WAEE,SAAAA,EAAuCtgB,GAAAlmD,KAAAkmD,OAAAA,SAevCsgB,EAAAtmE,UAAAqlE,UAAA,SAAUnkE,EAAY44D,EAAuB9D,EAAmBhQ,GAC9D,QADoB,IAAA8T,IAAAA,EAAA,cACP,MAAT54D,GAA2B,KAAVA,GAAgBA,GAAUA,EAAO,OAAO,KAE7D,IACE,OhB/GN,SAAAqlE,EACIrlE,EAA+B44D,EAAgB9T,EAAgBgQ,GACjE,IAAIpE,EA6kBN,SAAA4U,EAAuBtlE,GACrB,GAAIulE,GAAOvlE,GACT,OAAOA,EAGT,GAAqB,iBAAVA,IAAuBonB,MAAMpnB,GACtC,OAAO,IAAIixD,KAAKjxD,GAGlB,GAAqB,iBAAVA,EAAoB,CAC7BA,EAAQA,EAAM4lB,OAEd,IAmBIzC,EAnBEqiD,EAAWC,WAAWzlE,GAG5B,IAAKonB,MAAMpnB,EAAewlE,GACxB,OAAO,IAAIvU,KAAKuU,GAGlB,GAAI,4BAA4BE,KAAK1lE,GAAQ,CAQrC,IAAAwB,EAAAtB,EAAAF,EAAA0jB,MAAA,KAAA5f,IAAA,SAAA6hE,GAAA,OAAAA,IAAA,GACN,OAAO,IAAI1U,KADJzvD,EAAA,GAAGA,EAAA,GACa,EADVA,EAAA,IAKf,GAAI2hB,EAAQnjB,EAAMmjB,MAAMssC,IACtB,OAeN,SAAAmW,EAAgCziD,GAC9B,IAAMutC,EAAO,IAAIO,KAAK,GAClB4U,EAAS,EACTC,EAAQ,EAGNC,EAAa5iD,EAAM,GAAKutC,EAAKsV,eAAiBtV,EAAKuV,YACnDC,EAAa/iD,EAAM,GAAKutC,EAAKyV,YAAczV,EAAK0V,SAGlDjjD,EAAM,KACR0iD,EAASxgC,OAAOliB,EAAM,GAAKA,EAAM,KACjC2iD,EAAQzgC,OAAOliB,EAAM,GAAKA,EAAM,MAElC4iD,EAAWvmE,KAAKkxD,EAAMrrB,OAAOliB,EAAM,IAAKkiB,OAAOliB,EAAM,IAAM,EAAGkiB,OAAOliB,EAAM,KAC3E,IAAMkjD,EAAIhhC,OAAOliB,EAAM,IAAM,GAAK0iD,EAC5BjmE,EAAIylC,OAAOliB,EAAM,IAAM,GAAK2iD,EAC5B3mE,EAAIkmC,OAAOliB,EAAM,IAAM,GACvBmjD,EAAKtoC,KAAK22B,MAA2C,IAArC8Q,WAAW,MAAQtiD,EAAM,IAAM,KAErD,OADA+iD,EAAW1mE,KAAKkxD,EAAM2V,EAAGzmE,EAAGT,EAAGmnE,GACxB5V,EAnCIkV,CAAgBziD,GAI3B,IAAMutC,EAAO,IAAIO,KAAKjxD,GACtB,IAAKulE,GAAO7U,GACV,MAAM,IAAI9tD,MAAM,sBAAsB5C,EAAK,iBAE7C,OAAO0wD,EAtnBI4U,CAAOtlE,GAElB44D,EAoCF,SAAA2N,EAAwBzhB,EAAgB8T,GACtC,IAAM4N,ED4CR,SAAAC,EAA4B3hB,GAC1B,OAAO0J,GAAe1J,GAAO,GC7CZ2hB,CAAY3hB,GAG7B,GAFA4K,GAAc8W,GAAY9W,GAAc8W,OAEpC9W,GAAc8W,GAAU5N,GAC1B,OAAOlJ,GAAc8W,GAAU5N,GAGjC,IAAI8N,EAAc,GAClB,OAAQ9N,GACN,IAAK,YACH8N,EAAcrY,GAAoBvJ,EAAQqJ,GAAYuF,OACtD,MACF,IAAK,aACHgT,EAAcrY,GAAoBvJ,EAAQqJ,GAAYwY,QACtD,MACF,IAAK,WACHD,EAAcrY,GAAoBvJ,EAAQqJ,GAAYyF,MACtD,MACF,IAAK,WACH8S,EAAcrY,GAAoBvJ,EAAQqJ,GAAYyY,MACtD,MACF,IAAK,YACHF,EAAcjY,GAAoB3J,EAAQqJ,GAAYuF,OACtD,MACF,IAAK,aACHgT,EAAcjY,GAAoB3J,EAAQqJ,GAAYwY,QACtD,MACF,IAAK,WACHD,EAAcjY,GAAoB3J,EAAQqJ,GAAYyF,MACtD,MACF,IAAK,WACH8S,EAAcjY,GAAoB3J,EAAQqJ,GAAYyY,MACtD,MACF,IAAK,QACH,IAAMC,EAAYN,EAAezhB,EAAQ,aACnCgiB,EAAYP,EAAezhB,EAAQ,aACzC4hB,EAAc3W,GACVrB,GAAwB5J,EAAQqJ,GAAYuF,QAASmT,EAAWC,IACpE,MACF,IAAK,SACH,IAAMC,EAAaR,EAAezhB,EAAQ,cACpCkiB,EAAaT,EAAezhB,EAAQ,cAC1C4hB,EAAc3W,GACVrB,GAAwB5J,EAAQqJ,GAAYwY,SAAUI,EAAYC,IACtE,MACF,IAAK,OACH,IAAMC,EAAWV,EAAezhB,EAAQ,YAClCoiB,EAAWX,EAAezhB,EAAQ,YACxC4hB,EACI3W,GAAerB,GAAwB5J,EAAQqJ,GAAYyF,OAAQqT,EAAUC,IACjF,MACF,IAAK,OACH,IAAMC,EAAWZ,EAAezhB,EAAQ,YAClCsiB,EAAWb,EAAezhB,EAAQ,YACxC4hB,EACI3W,GAAerB,GAAwB5J,EAAQqJ,GAAYyY,OAAQO,EAAUC,IAMrF,OAHIV,IACFhX,GAAc8W,GAAU5N,GAAU8N,GAE7BA,EAnGaH,CAAezhB,EAAQ8T,IACnBA,EAIxB,IAFA,IACIz1C,EADA5Y,KAEGquD,GAAQ,CAEb,KADAz1C,EAAQwsC,GAAmB0X,KAAKzO,IAQzB,CACLruD,EAAMjK,KAAKs4D,GACX,MAPA,IAAMjI,GADNpmD,EAAQA,EAAM9J,OAAO0iB,EAAM1b,MAAM,KACd2oC,MACnB,IAAKugB,EACH,MAEFiI,EAASjI,EAOb,IAAI2W,EAAqB5W,EAAK6W,oBAC1BzS,IACFwS,EAAqBzS,GAAiBC,EAAUwS,GAChD5W,EAkiBJ,SAAA8W,EAAgC9W,EAAYoE,EAAkB2S,GAC5D,IAAMC,EAAeD,GAAW,EAAI,EAC9BH,EAAqB5W,EAAK6W,oBAEhC,OAVF,SAAAI,EAAwBjX,EAAYpB,GAGlC,OAFAoB,EAAO,IAAIO,KAAKP,EAAKgE,YAChBkT,WAAWlX,EAAKY,aAAehC,GAC7BoB,EAOAiX,CAAejX,EAAMgX,GADL7S,GAAiBC,EAAUwS,GACWA,IAtiBpDE,CAAuB9W,EAAMoE,GAAU,IAGhD,IAAI5qD,EAAO,GAQX,OAPAK,EAAMP,QAAQ,SAAAhK,GACZ,IAAM6nE,EAsSV,SAAAC,EAA0BlP,GACxB,GAAIhE,GAAagE,GACf,OAAOhE,GAAagE,GAEtB,IAAImP,EACJ,OAAQnP,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACHmP,EAAY9V,GAAcnC,GAAgBwD,KAAMpF,GAAiB8Z,aACjE,MACF,IAAK,OACHD,EAAY9V,GAAcnC,GAAgBwD,KAAMpF,GAAiB+Z,MACjE,MACF,IAAK,QACHF,EAAY9V,GAAcnC,GAAgBwD,KAAMpF,GAAiBga,QACjE,MAGF,IAAK,IACHH,EAAYtX,GAAWZ,GAASgB,SAAU,EAAG,GAAG,GAAO,GACvD,MAEF,IAAK,KACHkX,EAAYtX,GAAWZ,GAASgB,SAAU,EAAG,GAAG,GAAM,GACtD,MAEF,IAAK,MACHkX,EAAYtX,GAAWZ,GAASgB,SAAU,EAAG,GAAG,GAAO,GACvD,MAEF,IAAK,OACHkX,EAAYtX,GAAWZ,GAASgB,SAAU,EAAG,GAAG,GAAO,GACvD,MAGF,IAAK,IACL,IAAK,IACHkX,EAAYtX,GAAWZ,GAASkB,MAAO,EAAG,GAC1C,MACF,IAAK,KACL,IAAK,KACHgX,EAAYtX,GAAWZ,GAASkB,MAAO,EAAG,GAC1C,MAGF,IAAK,MACHgX,EAAY9V,GAAcnC,GAAgBwC,OAAQpE,GAAiB8Z,aACnE,MACF,IAAK,OACHD,EAAY9V,GAAcnC,GAAgBwC,OAAQpE,GAAiB+Z,MACnE,MACF,IAAK,QACHF,EAAY9V,GAAcnC,GAAgBwC,OAAQpE,GAAiBga,QACnE,MAGF,IAAK,MACHH,EACI9V,GAAcnC,GAAgBwC,OAAQpE,GAAiB8Z,YAAa/Z,GAAUka,YAClF,MACF,IAAK,OACHJ,EACI9V,GAAcnC,GAAgBwC,OAAQpE,GAAiB+Z,KAAMha,GAAUka,YAC3E,MACF,IAAK,QACHJ,EACI9V,GAAcnC,GAAgBwC,OAAQpE,GAAiBga,OAAQja,GAAUka,YAC7E,MAGF,IAAK,IACHJ,EAAY/T,GAAW,GACvB,MACF,IAAK,KACH+T,EAAY/T,GAAW,GACvB,MAGF,IAAK,IACH+T,EAAY/T,GAAW,GAAG,GAC1B,MAGF,IAAK,IACH+T,EAAYtX,GAAWZ,GAASoB,KAAM,GACtC,MACF,IAAK,KACH8W,EAAYtX,GAAWZ,GAASoB,KAAM,GACtC,MAGF,IAAK,IACL,IAAK,KACL,IAAK,MACH8W,EAAY9V,GAAcnC,GAAgB2C,KAAMvE,GAAiB8Z,aACjE,MACF,IAAK,OACHD,EAAY9V,GAAcnC,GAAgB2C,KAAMvE,GAAiB+Z,MACjE,MACF,IAAK,QACHF,EAAY9V,GAAcnC,GAAgB2C,KAAMvE,GAAiBga,QACjE,MACF,IAAK,SACHH,EAAY9V,GAAcnC,GAAgB2C,KAAMvE,GAAiBwF,OACjE,MAGF,IAAK,IACL,IAAK,KACL,IAAK,MACHqU,EAAY9V,GAAcnC,GAAgB6C,WAAYzE,GAAiB8Z,aACvE,MACF,IAAK,OACHD,EAAY9V,GAAcnC,GAAgB6C,WAAYzE,GAAiB+Z,MACvE,MACF,IAAK,QACHF,EAAY9V,GAAcnC,GAAgB6C,WAAYzE,GAAiBga,QACvE,MAGF,IAAK,IACL,IAAK,KACL,IAAK,MACHH,EAAY9V,GACRnC,GAAgB6C,WAAYzE,GAAiB8Z,YAAa/Z,GAAUka,YAAY,GACpF,MACF,IAAK,OACHJ,EAAY9V,GACRnC,GAAgB6C,WAAYzE,GAAiB+Z,KAAMha,GAAUka,YAAY,GAC7E,MACF,IAAK,QACHJ,EAAY9V,GACRnC,GAAgB6C,WAAYzE,GAAiBga,OAAQja,GAAUka,YAAY,GAC/E,MAGF,IAAK,IACL,IAAK,KACL,IAAK,MACHJ,EAAY9V,GACRnC,GAAgB6C,WAAYzE,GAAiB8Z,YAAa/Z,GAAUmE,QAAQ,GAChF,MACF,IAAK,OACH2V,EACI9V,GAAcnC,GAAgB6C,WAAYzE,GAAiB+Z,KAAMha,GAAUmE,QAAQ,GACvF,MACF,IAAK,QACH2V,EAAY9V,GACRnC,GAAgB6C,WAAYzE,GAAiBga,OAAQja,GAAUmE,QAAQ,GAC3E,MAGF,IAAK,IACH2V,EAAYtX,GAAWZ,GAASsB,MAAO,GAAI,IAC3C,MACF,IAAK,KACH4W,EAAYtX,GAAWZ,GAASsB,MAAO,GAAI,IAC3C,MAGF,IAAK,IACH4W,EAAYtX,GAAWZ,GAASsB,MAAO,GACvC,MAEF,IAAK,KACH4W,EAAYtX,GAAWZ,GAASsB,MAAO,GACvC,MAGF,IAAK,IACH4W,EAAYtX,GAAWZ,GAASwB,QAAS,GACzC,MACF,IAAK,KACH0W,EAAYtX,GAAWZ,GAASwB,QAAS,GACzC,MAGF,IAAK,IACH0W,EAAYtX,GAAWZ,GAAS0B,QAAS,GACzC,MACF,IAAK,KACHwW,EAAYtX,GAAWZ,GAAS0B,QAAS,GACzC,MAGF,IAAK,IACHwW,EAAYtX,GAAWZ,GAAS4B,kBAAmB,GACnD,MACF,IAAK,KACHsW,EAAYtX,GAAWZ,GAAS4B,kBAAmB,GACnD,MACF,IAAK,MACHsW,EAAYtX,GAAWZ,GAAS4B,kBAAmB,GACnD,MAIF,IAAK,IACL,IAAK,KACL,IAAK,MACHsW,EAAYvU,GAAe5D,GAAU8D,OACrC,MAEF,IAAK,QACHqU,EAAYvU,GAAe5D,GAAUiE,UACrC,MAGF,IAAK,IACL,IAAK,KACL,IAAK,MAEL,IAAK,IACL,IAAK,KACL,IAAK,MACHkU,EAAYvU,GAAe5D,GAAU+D,UACrC,MAEF,IAAK,OACL,IAAK,OAEL,IAAK,OACHoU,EAAYvU,GAAe5D,GAAUgE,MACrC,MACF,QACE,OAAO,KAGX,OADAgB,GAAagE,GAAUmP,EAChBA,EA5gBiBD,CAAiB9nE,GACvCkK,GAAQ29D,EACJA,EAAcnX,EAAM5L,EAAQwiB,GAClB,OAAVtnE,EAAmB,IAAOA,EAAMyK,QAAQ,WAAY,IAAIA,QAAQ,MAAO,OAGtEP,EgB0EIm7D,CAAWrlE,EAAO44D,EAAQ9T,GAAUlmD,KAAKkmD,OAAQgQ,GACxD,MAAOv0D,GACP,MAAMkkE,GAAyBW,EAAU7kE,EAAMsJ,4CAtBxCu7D,EAAQpiE,QAAA,SAAAolE,EAAAlpE,GAAA,OAAA,IAAAA,GAARkmE,GAAQ7zC,GACCizB,MAASxsC,MAAA,MAF/B,GC5IMqwD,GAAgC,KAgBtCC,GAAA,WAEE,SAAAA,EAAoB1H,GAAAhiE,KAAAgiE,cAAAA,SASpB0H,EAAAxpE,UAAAqlE,UAAA,SAAUnkE,EAAeuoE,EAAsCzjB,GAC7D,GAAa,MAAT9kD,EAAe,MAAO,GAE1B,GAAyB,iBAAduoE,GAAwC,OAAdA,EACnC,MAAM9D,GAAyB6D,EAAgBC,GAKjD,OAAOA,EAFK1O,GAAkB75D,EAAO5B,OAAO6oB,KAAKshD,GAAY3pE,KAAKgiE,cAAe9b,IAE3Dr6C,QAAQ49D,GAAuBroE,EAAMkE,oDAnBlDokE,EAActlE,QAAA,SAAAwlE,EAAAtpE,GAAA,OAAA,IAAAA,GAAdopE,GAAc/2C,GACUioC,MAAcxhD,MAAA,MAFnD,GCAAywD,GAAA,WAAA,SAAAA,YAOEA,EAAA3pE,UAAAqlE,UAAA,SAAUnkE,EAA8B0oE,GACtC,GAAa,MAAT1oE,EAAe,MAAO,GAE1B,GAAuB,iBAAZ0oE,GAAyC,iBAAV1oE,EACxC,MAAMykE,GAAyBgE,EAAgBC,GAGjD,OAAIA,EAAQjqE,eAAeuB,GAClB0oE,EAAQ1oE,GAGb0oE,EAAQjqE,eAAe,SAClBiqE,EAAe,MAGjB,2CArBED,EAAczlE,QAAA,SAAA2lE,EAAAzpE,GAAA,OAAA,IAAAA,GAAdupE,IAAczwD,MAAA,MAD3B,GCHA4wD,GAAA,WAAA,SAAAA,YAKEA,EAAA9pE,UAAAqlE,UAAA,SAAUnkE,GAAsB,OAAOwK,KAAK3G,UAAU7D,EAAO,KAAM,qCAJxD4oE,EAAQ5lE,QAAA,SAAA6lE,EAAA3pE,GAAA,OAAA,IAAAA,GAAR0pE,IAAQ5wD,MAAA,MADrB,GCoBA8wD,GAAA,WAEE,SAAAA,EAA6BC,GAAAnqE,KAAAmqE,QAAAA,EAGrBnqE,KAAAoqE,oBAaRF,EAAAhqE,UAAAqlE,UAAA,SACIj2D,EACA+6D,GAFJ,IAAA99D,EAAAvM,KAIE,QAFE,IAAAqqE,IAAAA,EAAAC,KAEGh7D,KAAYA,aAAiB/F,MAAyB,iBAAV+F,EAC/C,OAAO,KAGJtP,KAAKuqE,SAERvqE,KAAKuqE,OAASvqE,KAAKmqE,QAAQ/kB,KAAK91C,GAAOnP,UAGzC,IAAMqqE,EAA4CxqE,KAAKuqE,OAAOxpB,KAAKzxC,GASnE,OAPIk7D,IACFxqE,KAAKoqE,aACLI,EAAchrB,YAAY,SAACj+C,GACzBgL,EAAK69D,UAAU1oE,KAvEvB,SAAA+oE,EAAgC1mE,EAAQ3C,GACtC,OAAQ2C,IAAKA,EAAK3C,MAAOA,GAsECqpE,CAAiBlpE,EAAEwC,IAAKxC,EAAEijD,iBAEhDxkD,KAAKoqE,UAAUhuB,KAAKiuB,IAEfrqE,KAAKoqE,gDAvCHF,EAAY9lE,QAAA,SAAAsmE,EAAApqE,GAAA,OAAA,IAAAA,GAAZ4pE,GAAYv3C,GACe2yB,MAAelsC,MAAA,MAFvD,GA4CA,SAAAkxD,GACIK,EAA2BC,GAC7B,IAAMtpD,EAAIqpD,EAAU5mE,IACdxE,EAAIqrE,EAAU7mE,IAEpB,GAAIud,IAAM/hB,EAAG,OAAO,EAEpB,QAAU8E,IAANid,EAAiB,OAAO,EAC5B,QAAUjd,IAAN9E,EAAiB,OAAQ,EAE7B,GAAU,OAAN+hB,EAAY,OAAO,EACvB,GAAU,OAAN/hB,EAAY,OAAQ,EACxB,GAAgB,iBAAL+hB,GAA6B,iBAAL/hB,EACjC,OAAO+hB,EAAI/hB,GAAK,EAAI,EAEtB,GAAgB,iBAAL+hB,GAA6B,iBAAL/hB,EACjC,OAAO+hB,EAAI/hB,EAEb,GAAgB,kBAAL+hB,GAA8B,kBAAL/hB,EAClC,OAAO+hB,EAAI/hB,GAAK,EAAI,EAGtB,IAAMsrE,EAAUhjE,OAAOyZ,GACjBwpD,EAAUjjE,OAAOtI,GACvB,OAAOsrE,GAAWC,EAAU,EAAID,EAAUC,GAAW,EAAI,ECjE3D,IAAAC,GAAA,WAEE,SAAAA,EAAuCC,GAAAhrE,KAAAgrE,QAAAA,SAiBvCD,EAAA7qE,UAAAqlE,UAAA,SAAUnkE,EAAY+1D,EAAqBjR,GACzC,GAAI+kB,GAAQ7pE,GAAQ,OAAO,KAE3B8kD,EAASA,GAAUlmD,KAAKgrE,QAExB,IAEE,OpByHN,SAAAE,EAA6B9pE,EAAe8kD,EAAgBiR,GAG1D,OAAOJ,GACH31D,EAFY24D,GADD1J,GAAsBnK,EAAQiJ,GAAkBe,SACrBH,GAAsB7J,EAAQsJ,GAAa4D,YAEjElN,EAAQsJ,GAAaY,MAAOZ,GAAaU,QAASiH,GoB7H3D+T,CADKC,GAAY/pE,GACC8kD,EAAQiR,GACjC,MAAOx1D,GACP,MAAMkkE,GAAyBkF,EAAappE,EAAMsJ,8CA3B3C8/D,EAAW3mE,QAAA,SAAAgnE,EAAA9qE,GAAA,OAAA,IAAAA,GAAXyqE,GAAWp4C,GACFizB,MAASxsC,MAAA,MAF/B,GAqDAiyD,GAAA,WAEE,SAAAA,EAAuCL,GAAAhrE,KAAAgrE,QAAAA,SAkBvCK,EAAAnrE,UAAAqlE,UAAA,SAAUnkE,EAAY+1D,EAAqBjR,GACzC,GAAI+kB,GAAQ7pE,GAAQ,OAAO,KAE3B8kD,EAASA,GAAUlmD,KAAKgrE,QAExB,IAEE,OpB4CN,SAAAM,EAA8BlqE,EAAe8kD,EAAgBiR,GAK3D,OAFYJ,GACR31D,EAFY24D,GADD1J,GAAsBnK,EAAQiJ,GAAkBoc,SACrBxb,GAAsB7J,EAAQsJ,GAAa4D,YAEjElN,EAAQsJ,GAAaY,MAAOZ,GAAaU,QAASiH,GAAY,GACvEtrD,QACP,IAAIic,OAhKW,IAgKU,KAAMioC,GAAsB7J,EAAQsJ,GAAagc,coBlDnEF,CADKH,GAAY/pE,GACE8kD,EAAQiR,GAClC,MAAOx1D,GACP,MAAMkkE,GAAyBwF,EAAa1pE,EAAMsJ,+CA5B3CogE,EAAWjnE,QAAA,SAAAqnE,EAAAnrE,GAAA,OAAA,IAAAA,GAAX+qE,GAAW14C,GACFizB,MAASxsC,MAAA,MAF/B,GAsDAsyD,GAAA,WAEE,SAAAA,EAAuCV,GAAAhrE,KAAAgrE,QAAAA,SAkCvCU,EAAAxrE,UAAAqlE,UAAA,SACInkE,EAAYuqE,EACZC,EAAoEzU,EACpEjR,GACF,QAFE,IAAA0lB,IAAAA,EAAA,UAEEX,GAAQ7pE,GAAQ,OAAO,KAE3B8kD,EAASA,GAAUlmD,KAAKgrE,QAED,kBAAZY,IACApnD,SAAgBA,QAAQC,MAC/BD,QAAQC,KACJ,4MAENmnD,EAAUA,EAAU,SAAW,QAGjC,IAAIC,EAAmBF,GAAgB,MACvB,SAAZC,IAEAC,EADc,WAAZD,GAAoC,kBAAZA,EtB6UlC,SAAAE,EAAkCC,EAAc/R,EAA2B9T,QAAA,IAAAA,IAAAA,EAAA,MACzE,IAAM2lB,EAnJR,SAAAG,EAA6B9lB,GAE3B,OADa0J,GAAe1J,GACjB,IAiJM8lB,CAAoB9lB,GAAQ6lB,IAASrlB,GAAcqlB,OAC9DE,EAAeJ,EAAQ,GAE7B,MAAe,WAAX7R,GAA+C,iBAAjBiS,EACzBA,EAGFJ,EAAQ,IAA0BE,EsBpVxBD,CAAkBD,EAAsB,WAAZD,EAAuB,OAAS,SAAU1lB,GAEtE0lB,GAIf,IAEE,OpB5EN,SAAAM,EACI9qE,EAAe8kD,EAAgB2lB,EAAkBF,EACjDxU,GACF,IACMH,EAAU+C,GADD1J,GAAsBnK,EAAQiJ,GAAkBgd,UACrBpc,GAAsB7J,EAAQsJ,GAAa4D,YAOrF,OALA4D,EAAQmB,QF8ZV,SAAAiU,EAA0CL,GACxC,IAAIva,EACEqa,EAAWnlB,GAAcqlB,GAI/B,OAHIF,IACFra,EAASqa,EAAQ,IAEM,iBAAXra,EAAsBA,EAdA,EEtZlB4a,CAA0BT,GAC5C3U,EAAQqB,QAAUrB,EAAQmB,QAEdpB,GACR31D,EAAO41D,EAAS9Q,EAAQsJ,GAAaW,cAAeX,GAAaS,gBAAiBkH,GAEjFtrD,QAzIe,IAyIQggE,GAEvBhgE,QA3Ie,IA2IQ,IoB8DjBqgE,CADKf,GAAY/pE,GACG8kD,EAAQ2lB,EAAUF,EAAcxU,GAC3D,MAAOx1D,GACP,MAAMkkE,GAAyB6F,EAAc/pE,EAAMsJ,gDAhE5CygE,EAAYtnE,QAAA,SAAAioE,EAAA/rE,GAAA,OAAA,IAAAA,GAAZorE,GAAY/4C,GACHizB,MAASxsC,MAAA,MAF/B,GAsEA,SAAAkzD,GAAiBlrE,GACf,OAAgB,MAATA,GAA2B,KAAVA,GAAgBA,GAAUA,EAMpD,SAAA+pE,GAAqB/pE,GAEnB,GAAqB,iBAAVA,IAAuBonB,MAAMie,OAAOrlC,GAASylE,WAAWzlE,IACjE,OAAOqlC,OAAOrlC,GAEhB,GAAqB,iBAAVA,EACT,MAAM,IAAI4C,MAAS5C,EAAK,oBAE1B,OAAOA,EClMT,IAAAmrE,GAAA,WAAA,SAAAA,YAiBEA,EAAArsE,UAAAqlE,UAAA,SAAUnkE,EAAYorE,EAAen7C,GACnC,GAAa,MAATjwB,EAAe,OAAOA,EAE1B,IAAKpB,KAAKq+C,SAASj9C,GACjB,MAAMykE,GAAyB0G,EAAWnrE,GAG5C,OAAOA,EAAMyH,MAAM2jE,EAAOn7C,IAGpBk7C,EAAArsE,UAAAm+C,SAAR,SAAiB9yC,GAAqB,MAAsB,iBAARA,GAAoB5L,MAAM8H,QAAQ8D,sCA1B3EghE,EAASnoE,QAAA,SAAAqoE,EAAAnsE,GAAA,OAAA,IAAAA,GAATisE,IAASnzD,MAAA,MADtB,GCFaszD,IACX3H,GACAuB,GACAP,GACAiE,GACAuC,GACAxB,GACAM,GACAnF,GACAwF,GACAlF,GACAkD,GACAG,GACAK,IC3BFyC,GAAA,WAAA,SAAAA,mCAOaA,EAAYr0D,aAAAC,cAAAojD,GAAAsB,GAAAe,GAAAqB,GAAAoE,GAAAT,GAAAtC,GAAAe,GAAAI,GAAAE,GAAAW,GAAAqC,GAAAuB,GAAAP,GAAAiE,GAAAuC,GAAAxB,GAAAM,GAAAnF,GAAAwF,GAAAlF,GAAAkD,GAAAG,GAAAK,IAAAzlE,WAAA+T,SAAAmjD,GAAAsB,GAAAe,GAAAqB,GAAAoE,GAAAT,GAAAtC,GAAAe,GAAAI,GAAAE,GAAAW,GAAAqC,GAAAuB,GAAAP,GAAAiE,GAAAuC,GAAAxB,GAAAM,GAAAnF,GAAAwF,GAAAlF,GAAAkD,GAAAG,GAAAK,6DAAZyC,IAAYnoE,YAHpBuE,QAAS6xD,GAAgBvwD,SAAU6wD,KACrCz2D,UAHS6/D,GAAmBoI,SAF/B,GCZaE,GAAW,IAAI9kE,EAAyB,iBCTxC+kE,GAAqB,SCC9BC,GAAmB,KAEvB,SAAAC,KACE,OAAOD,GAoBT,ICgCIE,GAlDEC,IACJC,MAAS,YACTC,UAAa,YACbC,SAAY,WACZC,SAAY,YAMRC,IAGJC,KAAM,YACNC,KAAM,MACNC,IAAQ,SACRC,IAAQ,SACRC,IAAO,SACPC,IAAO,SACPC,KAAQ,YACRC,MAAS,aACTC,GAAM,UACNC,KAAQ,YACRC,KAAQ,cACRC,OAAU,aACVC,IAAO,MAMHC,IACJC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,EAAK,IACLC,IAAQ,IACRC,IAAQ,WAKN9oE,EAAa,OACf0mE,GAAe1mE,EAAa,KAAEpG,UAAUmvE,UAAY,SAASruD,GAC3D,SAA+C,GAArChhB,KAAKmnB,wBAAwBnG,MAW3C,IA0UIsuD,GA1UJC,GAAA,SAAAp7C,GAAA,SAAAo7C,mDA4TA,OA5TuCj7C,EAAAA,EAAAA,GACrCi7C,EAAArvE,UAAAm2D,MAAA,SAAMmZ,GAAwB,MAAM,IAAIxrE,MAAM,0BACvCurE,EAAAE,YAAP,YDlEF,SAAAC,EAIkCC,GAC3B7C,KACHA,GAAO6C,GC4DcD,CAAkB,IAAIH,IAC7CA,EAAArvE,UAAA0vE,YAAA,SAAYnpD,EAAezkB,GAAyB,OAAOA,KAAQykB,GACnE8oD,EAAArvE,UAAA2vE,YAAA,SAAYpsD,EAAUzhB,EAAcZ,GAAoBqiB,EAAIzhB,GAAQZ,GACpEmuE,EAAArvE,UAAA4vE,YAAA,SAAYrsD,EAAUzhB,GAAqB,OAAayhB,EAAIzhB,IAC5DutE,EAAArvE,UAAAovC,OAAA,SAAO7rB,EAAUssD,EAAoBztE,UAAoBM,EAAM6gB,GAAIssD,GAAWlvE,MAAA+B,EAAAhB,EAAIU,KAGlFitE,EAAArvE,UAAA8vE,SAAA,SAASruE,GACHsE,OAAOue,UACLA,QAAQ7iB,MACV6iB,QAAQ7iB,MAAMA,GAEd6iB,QAAQimB,IAAI9oC,KAKlB4tE,EAAArvE,UAAAuqC,IAAA,SAAI9oC,GACEsE,OAAOue,SACTve,OAAOue,QAAQimB,KAAOxkC,OAAOue,QAAQimB,IAAI9oC,IAI7C4tE,EAAArvE,UAAA+vE,SAAA,SAAStuE,GACHsE,OAAOue,SACTve,OAAOue,QAAQ0rD,OAASjqE,OAAOue,QAAQ0rD,MAAMvuE,IAIjD4tE,EAAArvE,UAAAiwE,YAAA,WACMlqE,OAAOue,SACTve,OAAOue,QAAQ4rD,UAAYnqE,OAAOue,QAAQ4rD,YAI9C5wE,OAAA4D,eAAImsE,EAAArvE,UAAA,qBAAJ,WAA2B,OAAO+sE,oCAElCsC,EAAArvE,UAAAmvE,SAAA,SAASgB,EAAYC,GAAuB,OAAOtD,GAAapsE,KAAKyvE,EAAOC,IAC5Ef,EAAArvE,UAAAmiB,cAAA,SAAcoB,EAAiB2Q,GAAyB,OAAO3Q,EAAGpB,cAAc+R,IAChFm7C,EAAArvE,UAAAqwE,iBAAA,SAAiB9sD,EAAS2Q,GAA2B,OAAO3Q,EAAG8sD,iBAAiBn8C,IAChFm7C,EAAArvE,UAAAswE,GAAA,SAAG/sD,EAAUgtD,EAAUtvD,GAAiBsC,EAAGitD,iBAAiBD,EAAKtvD,GAAU,IAC3EouD,EAAArvE,UAAAywE,YAAA,SAAYltD,EAAUgtD,EAAUtvD,GAI9B,OAHAsC,EAAGitD,iBAAiBD,EAAKtvD,GAAU,GAG5B,WAAQsC,EAAGkJ,oBAAoB8jD,EAAKtvD,GAAU,KAEvDouD,EAAArvE,UAAA0wE,cAAA,SAAcntD,EAAUgtD,GAAYhtD,EAAGmtD,cAAcH,IACrDlB,EAAArvE,UAAA2wE,iBAAA,SAAiBC,GACf,IAAML,EAAkBzwE,KAAK+wE,qBAAqBC,YAAY,cAE9D,OADAP,EAAIQ,UAAUH,GAAW,GAAM,GACxBL,GAETlB,EAAArvE,UAAA8wE,YAAA,SAAYF,GACV,IAAML,EAAazwE,KAAK+wE,qBAAqBC,YAAY,SAEzD,OADAP,EAAIQ,UAAUH,GAAW,GAAM,GACxBL,GAETlB,EAAArvE,UAAAgxE,eAAA,SAAeT,GACbA,EAAIS,iBACJT,EAAIljC,aAAc,GAEpBgiC,EAAArvE,UAAAixE,YAAA,SAAYV,GACV,OAAOA,EAAIW,kBAAuC,MAAnBX,EAAIljC,cAAwBkjC,EAAIljC,aAEjEgiC,EAAArvE,UAAAmxE,aAAA,SAAa5tD,GAA2B,OAAOA,EAAGrB,WAClDmtD,EAAArvE,UAAAsnB,mBAAA,SAAmB/D,GACjB,MAAO,YAAaA,GAAMzjB,KAAKynB,kBAAkBhE,GAAYA,EAAIiE,QAAU,MAE7E6nD,EAAArvE,UAAAoxE,aAAA,SAAa7tD,GAA2B,OAAOA,EAAG4D,WAClDkoD,EAAArvE,UAAA0mB,SAAA,SAAS5F,GAAsB,OAAOA,EAAK4F,UAC3C2oD,EAAArvE,UAAAomB,UAAA,SAAUtF,GAA2B,OAAOA,EAAKsF,WACjDipD,EAAArvE,UAAAyE,KAAA,SAAKqc,GAAkC,OAAOA,EAAKrc,MACnD4qE,EAAArvE,UAAAwnB,QAAA,SAAQ1G,GACN,OAAIhhB,KAAK4vE,YAAY5uD,EAAM,WACZA,EAAM0G,QAEZ1G,GAGXuuD,EAAArvE,UAAAof,WAAA,SAAWmE,GAAuB,OAAOA,EAAGnE,YAC5CiwD,EAAArvE,UAAAgkB,YAAA,SAAYT,GAAuB,OAAOA,EAAGS,aAC7CqrD,EAAArvE,UAAAqxE,cAAA,SAAc9tD,GAAuB,OAAOA,EAAG5C,YAC/C0uD,EAAArvE,UAAAo9C,WAAA,SAAW75B,GAAmB,OAAOA,EAAG65B,YACxCiyB,EAAArvE,UAAAsxE,iBAAA,SAAiB/tD,GAGf,IAFA,IAAM65B,EAAa75B,EAAG65B,WAChBj4C,EAAM,IAAI1F,MAAM29C,EAAW38C,QACxBH,EAAI,EAAGA,EAAI88C,EAAW38C,OAAQH,IACrC6E,EAAI7E,GAAK88C,EAAW98C,GAEtB,OAAO6E,GAETkqE,EAAArvE,UAAAuxE,WAAA,SAAWhuD,GACT,KAAOA,EAAGnE,YACRmE,EAAGL,YAAYK,EAAGnE,aAGtBiwD,EAAArvE,UAAAiiB,YAAA,SAAYsB,EAAUzC,GAAcyC,EAAGtB,YAAYnB,IACnDuuD,EAAArvE,UAAAkjB,YAAA,SAAYK,EAAUzC,GAAcyC,EAAGL,YAAYpC,IACnDuuD,EAAArvE,UAAAwxE,aAAA,SAAajuD,EAAUkuD,EAAgBC,GAAkBnuD,EAAGiuD,aAAaC,EAAUC,IACnFrC,EAAArvE,UAAAs+B,OAAA,SAAOxd,GAIL,OAHIA,EAAKH,YACPG,EAAKH,WAAWuC,YAAYpC,GAEvBA,GAETuuD,EAAArvE,UAAA4sB,aAAA,SAAaxkB,EAAcupE,EAAW7wD,GAAc1Y,EAAOwkB,aAAa9L,EAAM6wD,IAC9EtC,EAAArvE,UAAA4xE,gBAAA,SAAgBxpE,EAAcupE,EAAWE,GACvCA,EAAM3mE,QAAQ,SAAC3K,GAAW,OAAA6H,EAAOwkB,aAAarsB,EAAGoxE,MAEnDtC,EAAArvE,UAAA8xE,YAAA,SAAY1pE,EAAcupE,EAAW7wD,GAAa1Y,EAAOwkB,aAAa9L,EAAM6wD,EAAI3tD,cAChFqrD,EAAArvE,UAAA+xE,aAAA,SAAaxuD,EAAariB,GAAiBqiB,EAAGrB,UAAYhhB,GAC1DmuE,EAAArvE,UAAAgyE,QAAA,SAAQzuD,GAAyB,OAAOA,EAAG0uD,aAC3C5C,EAAArvE,UAAAkyE,QAAA,SAAQ3uD,EAAUriB,GAAiBqiB,EAAG0uD,YAAc/wE,GACpDmuE,EAAArvE,UAAAmuB,SAAA,SAAS5K,GAAmB,OAAOA,EAAGriB,OACtCmuE,EAAArvE,UAAAmyE,SAAA,SAAS5uD,EAASriB,GAAiBqiB,EAAGriB,MAAQA,GAC9CmuE,EAAArvE,UAAAoyE,WAAA,SAAW7uD,GAAoB,OAAOA,EAAG8uD,SACzChD,EAAArvE,UAAAsyE,WAAA,SAAW/uD,EAASriB,GAAkBqiB,EAAG8uD,QAAUnxE,GACnDmuE,EAAArvE,UAAAy6C,cAAA,SAAcrvC,GAAyB,OAAOtL,KAAK+wE,qBAAqBp2B,cAAcrvC,IACtFikE,EAAArvE,UAAAuyE,eAAA,SAAe7vD,GACb,IAAMtiB,EAAIN,KAAK+wE,qBAAqB7uD,cAAc,YAElD,OADA5hB,EAAE8hB,UAAYQ,EACPtiB,GAETivE,EAAArvE,UAAAgiB,cAAA,SAAcyE,EAAiB+rD,GAE7B,OADAA,EAAMA,GAAO1yE,KAAK+wE,sBACP7uD,cAAcyE,IAE3B4oD,EAAArvE,UAAA64B,gBAAA,SAAgB45C,EAAYhsD,EAAiB+rD,GAE3C,OADAA,EAAMA,GAAO1yE,KAAK+wE,sBACPh4C,gBAAgB45C,EAAIhsD,IAEjC4oD,EAAArvE,UAAA0yE,eAAA,SAAetnE,EAAconE,GAE3B,OADAA,EAAMA,GAAO1yE,KAAK+wE,sBACP6B,eAAetnE,IAE5BikE,EAAArvE,UAAA2yE,gBAAA,SAAgBjvD,EAAkBkvD,EAAmBJ,GAEnD,IAAMjvD,GADNivD,EAAMA,GAAO1yE,KAAK+wE,sBACgB7uD,cAAc,UAEhD,OADAuB,EAAG4V,aAAazV,EAAUkvD,GACnBrvD,GAET8rD,EAAArvE,UAAA6yE,mBAAA,SAAmBC,EAAaN,GAE9B,IAAMt1B,GADNs1B,EAAMA,GAAO1yE,KAAK+wE,sBACkB7uD,cAAc,SAElD,OADAliB,KAAKmiB,YAAYi7B,EAAOp9C,KAAK4yE,eAAeI,EAAKN,IAC1Ct1B,GAETmyB,EAAArvE,UAAA+yE,iBAAA,SAAiBxvD,GAAqC,OAAaA,EAAIwvD,oBACvE1D,EAAArvE,UAAAgzE,cAAA,SAAczvD,GAAqC,OAAaA,EAAI0vD,YACpE5D,EAAArvE,UAAAkzE,QAAA,SAAQ3vD,GAAgC,OAAaA,EAAI4vD,MACzD9D,EAAArvE,UAAAozE,MAAA,SAAMtyD,GAAoB,OAAOA,EAAKuyD,WAAU,IAChDhE,EAAArvE,UAAAszE,uBAAA,SAAuB/sD,EAAczkB,GACnC,OAAOykB,EAAQ+sD,uBAAuBxxE,IAExCutE,EAAArvE,UAAAuzE,qBAAA,SAAqBhtD,EAAczkB,GACjC,OAAOykB,EAAQgtD,qBAAqBzxE,IAEtCutE,EAAArvE,UAAA+8C,UAAA,SAAUx2B,GAAuB,OAAO9mB,MAAMO,UAAU2I,MAAMjI,KAAK6lB,EAAQw2B,UAAW,IACtFsyB,EAAArvE,UAAA28D,SAAA,SAASp2C,EAAcs2B,GAAqBt2B,EAAQw2B,UAAU9uC,IAAI4uC,IAClEwyB,EAAArvE,UAAA48D,YAAA,SAAYr2C,EAAcs2B,GAAqBt2B,EAAQw2B,UAAUze,OAAOue,IACxEwyB,EAAArvE,UAAAwzE,SAAA,SAASjtD,EAAcs2B,GACrB,OAAOt2B,EAAQw2B,UAAUoyB,SAAStyB,IAEpCwyB,EAAArvE,UAAAmjE,SAAA,SAAS58C,EAAcy2B,EAAmBy2B,GACxCltD,EAAQ22B,MAAMF,GAAay2B,GAE7BpE,EAAArvE,UAAAojE,YAAA,SAAY78C,EAAcmtD,GAGxBntD,EAAQ22B,MAAMw2B,GAAa,IAE7BrE,EAAArvE,UAAA2zE,SAAA,SAASptD,EAAcmtD,GAA6B,OAAOntD,EAAQ22B,MAAMw2B,IACzErE,EAAArvE,UAAA4zE,SAAA,SAASrtD,EAAcy2B,EAAmBy2B,GACxC,IAAMvyE,EAAQpB,KAAK6zE,SAASptD,EAASy2B,IAAc,GACnD,OAAOy2B,EAAavyE,GAASuyE,EAAavyE,EAAMT,OAAS,GAE3D4uE,EAAArvE,UAAAymB,QAAA,SAAQF,GAAwB,OAAOA,EAAQE,SAC/C4oD,EAAArvE,UAAA6zE,aAAA,SAAattD,GAGX,IAFA,IAAMphB,EAAM,IAAIkE,IACVma,EAAU+C,EAAQ9C,WACfnjB,EAAI,EAAGA,EAAIkjB,EAAQ/iB,OAAQH,IAAK,CACvC,IAAMwzE,EAAStwD,EAAQG,KAAKrjB,GAC5B6E,EAAImE,IAAIwqE,EAAOhyE,KAAMgyE,EAAO5yE,OAE9B,OAAOiE,GAETkqE,EAAArvE,UAAA+zE,aAAA,SAAaxtD,EAAkBytD,GAC7B,OAAOztD,EAAQwtD,aAAaC,IAE9B3E,EAAArvE,UAAAi0E,eAAA,SAAe1tD,EAAkBksD,EAAYuB,GAC3C,OAAOztD,EAAQ0tD,eAAexB,EAAIuB,IAEpC3E,EAAArvE,UAAAk0E,aAAA,SAAa3tD,EAAkBytD,GAC7B,OAAOztD,EAAQ2tD,aAAaF,IAE9B3E,EAAArvE,UAAAm0E,eAAA,SAAe5tD,EAAkBksD,EAAY3wE,GAC3C,OAAOykB,EAAQ4tD,eAAe1B,EAAI3wE,IAEpCutE,EAAArvE,UAAAm5B,aAAA,SAAa5S,EAAkBzkB,EAAcZ,GAAiBqlB,EAAQ4S,aAAar3B,EAAMZ,IACzFmuE,EAAArvE,UAAAo0E,eAAA,SAAe7tD,EAAkBksD,EAAY3wE,EAAcZ,GACzDqlB,EAAQ6tD,eAAe3B,EAAI3wE,EAAMZ,IAEnCmuE,EAAArvE,UAAA4jB,gBAAA,SAAgB2C,EAAkBytD,GAAqBztD,EAAQ3C,gBAAgBowD,IAC/E3E,EAAArvE,UAAAq0E,kBAAA,SAAkB9tD,EAAkBksD,EAAY3wE,GAC9CykB,EAAQ8tD,kBAAkB5B,EAAI3wE,IAEhCutE,EAAArvE,UAAAs0E,kBAAA,SAAkB/wD,GAAiB,OAAOzjB,KAAKynB,kBAAkBhE,GAAMzjB,KAAK0nB,QAAQjE,GAAMA,GAC1F8rD,EAAArvE,UAAAu0E,mBAAA,WACE,OAAOlrD,SAAS1H,eAAeC,mBAAmB,cAEpDytD,EAAArvE,UAAA6wE,mBAAA,WAAiC,OAAOxnD,UACxCgmD,EAAArvE,UAAAw0E,sBAAA,SAAsBjxD,GACpB,IACE,OAAOA,EAAGixD,wBACV,MAAA9xE,GACA,OAAQ+xE,IAAK,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,EAAGplB,MAAO,EAAGqlB,OAAQ,KAGpExF,EAAArvE,UAAA80E,SAAA,SAAStC,GAAyB,OAAOA,EAAIuC,OAC7C1F,EAAArvE,UAAAg1E,SAAA,SAASxC,EAAeyC,GAAoBzC,EAAIuC,MAAQE,GAAY,IACpE5F,EAAArvE,UAAAk1E,eAAA,SAAe30E,EAAQ2zB,GACrB,QAAIp0B,KAAKq1E,cAAc50E,KACdA,EAAEm9C,SAAWn9C,EAAEm9C,QAAQxpB,IAC1B3zB,EAAE60E,mBAAqB70E,EAAE60E,kBAAkBlhD,IAC3C3zB,EAAE80E,uBAAyB90E,EAAE80E,sBAAsBnhD,KAK3Dm7C,EAAArvE,UAAAunB,kBAAA,SAAkBhE,GAChB,OAAOzjB,KAAKq1E,cAAc5xD,IAAuB,aAAhBA,EAAGmD,UAEtC2oD,EAAArvE,UAAAs1E,WAAA,SAAWx0D,GAAuB,OAAOA,EAAKgD,WAAa/C,KAAKmF,WAChEmpD,EAAArvE,UAAAu1E,cAAA,SAAcz0D,GAAuB,OAAOA,EAAKgD,WAAa/C,KAAKy0D,cACnEnG,EAAArvE,UAAAm1E,cAAA,SAAcr0D,GAAuB,OAAOA,EAAKgD,WAAa/C,KAAKgD,cACnEsrD,EAAArvE,UAAAy1E,cAAA,SAAc30D,GACZ,OAA0B,MAAnBA,EAAKmyD,YAAsBnyD,aAAgB40D,aAEpDrG,EAAArvE,UAAA21E,aAAA,SAAa70D,GAAsB,OAAOA,aAAgB80D,kBAC1DvG,EAAArvE,UAAA61E,cAAA,SAAc/0D,GAAmB,OAAOuI,SAASysD,WAAWh2E,KAAKw0E,kBAAkBxzD,IAAO,IAC1FuuD,EAAArvE,UAAA+1E,UAAA,SAAUj1D,GAAmB,OAAOuI,SAAS0sD,UAAUj1D,IACvDuuD,EAAArvE,UAAAg2E,QAAA,SAAQzyD,GAAuB,OAAOA,EAAG2wD,aAAa,SAEtD7E,EAAArvE,UAAAi2E,YAAA,SAAYC,GACV,IAAIryE,EAAMqyE,EAAMryE,IAChB,GAAW,MAAPA,EAAa,CAKf,GAAW,OAJXA,EAAMqyE,EAAMC,eAKV,MAAO,eAELtyE,EAAIuyE,WAAW,QACjBvyE,EAAM8D,OAAOsiC,aAAawwB,SAAS52D,EAAI0B,UAAU,GAAI,KA3T7B,IA4TpB2wE,EAAM9hE,UAAwC85D,GAAoBvuE,eAAekE,KAInFA,EAAOqqE,GAA4BrqE,KAKzC,OAAOupE,GAAQvpE,IAAQA,GAEzBwrE,EAAArvE,UAAAq2E,qBAAA,SAAqB7D,EAAe7+D,GAClC,MAAe,WAAXA,EACK5N,OAEM,aAAX4N,EACK6+D,EAEM,SAAX7+D,EACK6+D,EAAI1wD,KAEN,MAETutD,EAAArvE,UAAAs2E,WAAA,WAAwB,OAAOvwE,OAAOwwE,SACtClH,EAAArvE,UAAAw2E,YAAA,WAA0B,OAAOzwE,OAAOqO,UACxCi7D,EAAArvE,UAAAy2E,YAAA,SAAYjE,GACV,IAAMkE,EAmCV,SAAAC,IACE,OAAKC,KACHA,GAAcvtD,SAASlH,cAAc,SAKhCy0D,GAAY1C,aAAa,QAHrB,KAvCIyC,GACb,OAAe,MAARD,EAAe,KA8C1B,SAAAG,EAAsBzyD,GAKpB,OAJKgrD,KACHA,GAAiB/lD,SAASrH,cAAc,MAE1CotD,GAAej2C,aAAa,OAAQ/U,GACU,MAAtCgrD,GAAe0H,SAASxrE,OAAO,GAAc8jE,GAAe0H,SACf,IAAM1H,GAAe0H,SApD3CD,CAAaH,IAE5CrH,EAAArvE,UAAA+2E,iBAAA,WAA2BH,GAAc,MACzCvH,EAAArvE,UAAAg3E,aAAA,WAAyB,OAAOjxE,OAAOkxE,UAAUC,WACjD7H,EAAArvE,UAAAm3E,QAAA,SAAQ5wD,EAAkBzkB,EAAcZ,GACtCpB,KAAKq5B,aAAa5S,EAAS,QAAUzkB,EAAMZ,IAE7CmuE,EAAArvE,UAAAo3E,QAAA,SAAQ7wD,EAAkBzkB,GACxB,OAAOhC,KAAKo0E,aAAa3tD,EAAS,QAAUzkB,IAE9CutE,EAAArvE,UAAAq3E,iBAAA,SAAiB9wD,GAAqB,OAAO8wD,iBAAiB9wD,IAE9D8oD,EAAArvE,UAAAs3E,qBAAA,WACE,MAAqD,mBAAlCC,QAASv3E,UAAmB,SAEjDqvE,EAAArvE,UAAAw3E,eAAA,WAGE,OAAOzxE,OAAO0xE,aAAe1xE,OAAO0xE,YAAYC,IAAM3xE,OAAO0xE,YAAYC,OACnB,IAAIvlB,MAAOyD,WAGnEyZ,EAAArvE,UAAA23E,gBAAA,WAA6B,OAAO,GAEpCtI,EAAArvE,UAAA43E,UAAA,SAAU91E,GAA6B,kBC7XR+1E,EAAmB/1E,WAClDA,EAAOg2E,mBAAmBh2E,OAC1B,IAAqB,IAAA4iB,EAAAC,EAAAkzD,EAAUjzD,MAAM,MAAIC,EAAAH,EAAAzjB,QAAA4jB,EAAA1jB,KAAA0jB,EAAAH,EAAAzjB,OAAE,CAAtC,IAAM82E,EAAMlzD,EAAA3jB,MACT82E,EAAUD,EAAOzyE,QAAQ,KACzB2yE,EAAA72E,GAAA,GAAA42E,GAAAD,EAAA,KAAAA,EAAApvE,MAAA,EAAAqvE,GAAAD,EAAApvE,MAAAqvE,EAAA,IAAA,GAAaE,EAAAD,EAAA,GAEnB,GAFOA,EAAA,GAEQnxD,SAAWhlB,EACxB,OAAOq2E,mBAAmBD,qGAG9B,OAAO,KDmXuCE,CAAiB/uD,SAAS0uD,OAAQj2E,IAEhFutE,EAAArvE,UAAAq4E,UAAA,SAAUv2E,EAAcZ,GAGtBmoB,SAAS0uD,OAASD,mBAAmBh2E,GAAQ,IAAMg2E,mBAAmB52E,IAE1EmuE,EA5TA,CE9DA,SAAAp7C,GAGE,SAAAqkD,IAAA,IAAAjsE,EACE4nB,EAAAvzB,KAAAZ,OAAOA,KAHDuM,EAAAksE,iBAAgC,KAChClsE,EAAAmsE,eAA8B,KAGpC,IACE,IAAMC,EAAUpsE,EAAK2V,cAAc,MAAOqH,UAC1C,GAA+C,MAA3Chd,EAAKsnE,SAAS8E,EAAS,iBACzBpsE,EAAKksE,iBAAmB,QAIxB,IAFA,IAAMG,GAAe,SAAU,MAAO,IAAK,MAElCp4E,EAAI,EAAGA,EAAIo4E,EAAYj4E,OAAQH,IACtC,GAAgE,MAA5D+L,EAAKsnE,SAAS8E,EAASC,EAAYp4E,GAAK,iBAA0B,CACpE+L,EAAKksE,iBAAmB,IAAMG,EAAYp4E,GAAGqmB,cAAgB,IAC7D,MAKN,IAAMgyD,GACJC,iBAAkB,sBAClBC,cAAe,gBACfC,YAAa,gCACbC,WAAY,iBAGdz5E,OAAO6oB,KAAKwwD,GAAoBztE,QAAQ,SAACrH,GACJ,MAA/BwI,EAAKsnE,SAAS8E,EAAS50E,KACzBwI,EAAKmsE,eAAiBG,EAAmB90E,MAG7C,MAAAnB,GACA2J,EAAKksE,iBAAmB,KACxBlsE,EAAKmsE,eAAiB,cAiB5B,OAnDuDpkD,EAAAA,EAAAA,GAsCrDkkD,EAAAt4E,UAAAg5E,oBAAA,SAAoBz1D,GAA2B,OAAaA,EAAIy1D,uBAChEV,EAAAt4E,UAAAi5E,kBAAA,SAAkB11D,EAAuB21D,EAAiBxC,GACxDnzD,EAAGmzD,KAAe,MAARA,EAAewC,EAAUA,EAAU,OAASxC,GAExD4B,EAAAt4E,UAAAm5E,kBAAA,WAA+B,OAAO,GACtCb,EAAAt4E,UAAAo5E,wBAAA,WACE,MAAuD,mBAApC/vD,SAASvH,KAAMixD,kBAEpCuF,EAAAt4E,UAAAq5E,mBAAA,WAA+B,OAAOv5E,KAAKy4E,iBAAmBz4E,KAAKy4E,iBAAmB,IACtFD,EAAAt4E,UAAAs5E,iBAAA,WAA6B,OAAOx5E,KAAK04E,eAAiB14E,KAAK04E,eAAiB,IAChFF,EAAAt4E,UAAAu5E,kBAAA,WACE,OAAgC,MAAzBz5E,KAAKy4E,kBAAmD,MAAvBz4E,KAAK04E,gBAEjDF,EAnDA,CHeA,WAAA,SAAAkB,IACS15E,KAAA25E,mBAAgC,KAkIzC,OAnHEn6E,OAAA4D,eAAIs2E,EAAAx5E,UAAA,qBAAJ,WAA+C,OAAOF,KAAKitE,oBAC3D,SAAkB7rE,GAAkCpB,KAAKitE,eAAiB7rE,mCAkH5Es4E,EAnIA,KC6WI5C,GAAgC,KGzXvBlK,GAAWgN,GCbxB,SAAAC,KACE,QAAS5zE,OAAOwwE,QAAQqD,UCc1B,IAAAC,GAAA,SAAA5lD,GAOE,SAAA4lD,EAAsCC,GAAtC,IAAAztE,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YAD6BuM,EAAAytE,KAAAA,EAEpCztE,EAAK0tE,iBARoC3lD,EAAAA,EAAAA,GAa3CylD,EAAA75E,UAAA+5E,MAAA,WACGj6E,KAA6BsU,SAAWy4D,KAAS2J,cAClD12E,KAAKk6E,SAAWnN,KAASyJ,cAG3BuD,EAAA75E,UAAAi6E,mBAAA,WAA+B,OAAOpN,KAAS4J,YAAY32E,KAAKg6E,OAEhED,EAAA75E,UAAAk6E,WAAA,SAAWt0E,GACTinE,KAASwJ,qBAAqBv2E,KAAKg6E,KAAM,UAAUtJ,iBAAiB,WAAY5qE,GAAI,IAGtFi0E,EAAA75E,UAAAm6E,aAAA,SAAav0E,GACXinE,KAASwJ,qBAAqBv2E,KAAKg6E,KAAM,UAAUtJ,iBAAiB,aAAc5qE,GAAI,IAGxFtG,OAAA4D,eAAI22E,EAAA75E,UAAA,gBAAJ,WAAyB,OAAOF,KAAKsU,SAAS0iE,cAG9C,SAAasD,GAAmBt6E,KAAKsU,SAAS0iE,SAAWsD,mCAFzD96E,OAAA4D,eAAI22E,EAAA75E,UAAA,cAAJ,WAAuB,OAAOF,KAAKsU,SAASwjD,wCAC5Ct4D,OAAA4D,eAAI22E,EAAA75E,UAAA,YAAJ,WAAqB,OAAOF,KAAKsU,SAASimE,sCAG1CR,EAAA75E,UAAA45E,UAAA,SAAU3tD,EAAY8oD,EAAe3wD,GAC/Bu1D,KACF75E,KAAKk6E,SAASJ,UAAU3tD,EAAO8oD,EAAO3wD,GAEtCtkB,KAAKsU,SAASimE,KAAOj2D,GAIzBy1D,EAAA75E,UAAAs6E,aAAA,SAAaruD,EAAY8oD,EAAe3wD,GAClCu1D,KACF75E,KAAKk6E,SAASM,aAAaruD,EAAO8oD,EAAO3wD,GAEzCtkB,KAAKsU,SAASimE,KAAOj2D,GAIzBy1D,EAAA75E,UAAAu6E,QAAA,WAAkBz6E,KAAKk6E,SAASO,WAEhCV,EAAA75E,UAAAw6E,KAAA,WAAe16E,KAAKk6E,SAASQ,mCAnDlBX,EAAuB31E,QAAA,SAAAu2E,EAAAr6E,GAAA,OAAA,IAAAA,GAAvBy5E,GAAuBjzE,EAMd8lE,MAAQzoE,WAAA,SAP9B,CAC6CiiD,ICPhCw0B,GAAgB,IAAI9yE,EAAe,iBAgBnC+yE,KAET9xE,QAASogC,GACT/+B,WAjBJ,SAAA0wE,GAAsCC,EAAsBxxD,EAAe9iB,GACzE,OAAO,WAGLA,EAASU,IAAIiiC,IAAuBG,YAAYthB,KAAK,WACnD,IAAM+yD,EAAMjO,KAERptE,MAAMO,UAAU2I,MAAMhI,MAAMm6E,EAAIzK,iBAAiBhnD,EAAU,yBACxDuoB,OAAO,SAAAruB,GAAM,OAAAu3D,EAAI5G,aAAa3wD,EAAI,mBAAqBs3D,IACzD3vE,QAAQ,SAAAqY,GAAM,OAAAu3D,EAAIx8C,OAAO/a,SAShCha,MAAOmxE,GAAehO,GAAUvkE,GAChCiC,OAAO,IC1BX2wE,GAAA,WAAA,SAAAA,KAsDA,OArDSA,EAAAvmC,KAAP,Y7DuSF,SAAAwmC,EAAqCC,GACnCvoC,GAAqBuoC,E6DxSLD,CAAqB,IAAID,IAEzCA,EAAA/6E,UAAA2yC,YAAA,SAAYe,GACVttC,EAA8B,sBAAI,SAAC8sC,EAAWK,QAAA,IAAAA,IAAAA,GAAA,GAC5C,IAAMV,EAAca,EAASJ,sBAAsBJ,EAAMK,GACzD,GAAmB,MAAfV,EACF,MAAM,IAAI/uC,MAAM,2CAElB,OAAO+uC,GAGTzsC,EAAmC,2BAAI,WAAM,OAAAstC,EAASP,uBAEtD/sC,EAAkC,0BAAI,WAAM,OAAAstC,EAASL,sBAkBhDjtC,EAA6B,uBAChCA,EAA6B,yBAE/BA,EAA6B,qBAAE5E,KAnBT,SAAC4zB,GACrB,IAAM8lD,EAAgB90E,EAAmC,6BACrDy+B,EAAQq2C,EAAcz6E,OACtB06E,GAAU,EACRC,EAAY,SAASC,GACzBF,EAAUA,GAAWE,EAER,KADbx2C,GAEEzP,EAAS+lD,IAGbD,EAAchwE,QAAQ,SAAS2nC,GAC7BA,EAAYX,WAAWkpC,QAU7BL,EAAA/6E,UAAAszC,sBAAA,SAAsBI,EAA+BR,EAAWK,GAE9D,GAAY,MAARL,EACF,OAAO,KAET,IAAM9yC,EAAIszC,EAAST,eAAeC,GAClC,OAAS,MAAL9yC,EACKA,EACGmzC,EAGRs5B,KAAS8I,aAAaziC,GACjBpzC,KAAKwzC,sBAAsBI,EAAUm5B,KAASqG,QAAQhgC,IAAO,GAE/DpzC,KAAKwzC,sBAAsBI,EAAUm5B,KAASwE,cAAcn+B,IAAO,GALjE,MAOb6nC,EAtDA,GCiBA,SAAAO,GAA4Bx5E,EAAcZ,GAChB,oBAAbq6E,UAA6BA,YAK3Bn1E,EAAW,GAAKA,EAAW,QACnCtE,GAAQZ,GCzBf,IAAMs6E,IACJvlC,eAAkBwlC,GAClBhuC,OAAUiuC,IAWZ,SAAAC,GAAqCp1D,GACnC,OAAOq1D,GAAkBr1D,GAgBpB,IAAMs1D,KAEThzE,QAASizE,GACT5xE,WAhBJ,SAAA6xE,GAA+BC,GAG7B,OAFAV,GAb0B,QAaOK,IACjCL,GAb8B,aAaKp7E,KAAMs7E,GAI3C,SAAAS,EAA6BhxE,GAC3B,OAAOA,EAAO8zB,OAAO,SAACiD,EAAW5hC,GAAW,OAAC4hC,EAAK5hC,EAAE0B,MAAQ1B,EAAEkD,MAAO0+B,OALZi6C,CAAoBD,SACtE,WAAM,OAAAL,KAcXpyE,OACG2yE,GAAmB,IAAIC,IAE1B/xE,OAAO,IC/BEgyE,GACT,IAAIx0E,EAAqC,uBAQ7Cy0E,GAAA,WAQE,SAAAA,EAA2CC,EAAuC9lC,GAAlF,IAAAnqC,EAAAvM,KAAkFA,KAAA02C,MAAAA,EAL1E12C,KAAAy8E,mBAAqB,IAAIlzE,IAM/BizE,EAAQpxE,QAAQ,SAAAxL,GAAK,OAAAA,EAAE88E,QAAUnwE,IACjCvM,KAAK28E,SAAWH,EAAQ3zE,QAAQggE,iBAYlC0T,EAAAr8E,UAAAwwE,iBAAA,SAAiBjqD,EAAsBu3B,EAAmB4+B,GAExD,OADe58E,KAAK68E,eAAe7+B,GACrB0yB,iBAAiBjqD,EAASu3B,EAAW4+B,IAYrDL,EAAAr8E,UAAA48E,uBAAA,SAAuBjpE,EAAgBmqC,EAAmB4+B,GAExD,OADe58E,KAAK68E,eAAe7+B,GACrB8+B,uBAAuBjpE,EAAQmqC,EAAW4+B,IAM1DL,EAAAr8E,UAAA68E,QAAA,WAAoB,OAAO/8E,KAAK02C,OAGhC6lC,EAAAr8E,UAAA28E,eAAA,SAAe7+B,GACb,IAAMg/B,EAASh9E,KAAKy8E,mBAAmBt1E,IAAI62C,GAC3C,GAAIg/B,EACF,OAAOA,EAIT,IADA,IAAMR,EAAUx8E,KAAK28E,SACZn8E,EAAI,EAAGA,EAAIg8E,EAAQ77E,OAAQH,IAAK,CACvC,IAAMy8E,EAAST,EAAQh8E,GACvB,GAAIy8E,EAAO5+B,SAASL,GAElB,OADAh+C,KAAKy8E,mBAAmBjzE,IAAIw0C,EAAWi/B,GAChCA,EAGX,MAAM,IAAIj5E,MAAM,2CAA2Cg6C,+BA5DlDu+B,EAAYn4E,QAAA,SAAA84E,EAAA58E,GAAA,OAAA,IAAAA,GAAZi8E,GAAYz1E,EAOHw1E,IAAqBx1E,EAAgD6mC,MAAMxpC,WAAA,SARjG,GAiEAg5E,GAAA,WACE,SAAAA,EAAoBnD,GAAAh6E,KAAAg6E,KAAAA,EAgBtB,OAPEmD,EAAAj9E,UAAA48E,uBAAA,SAAuBr2D,EAAiBu3B,EAAmB4+B,GACzD,IAAM/oE,EAAsBk5D,KAASwJ,qBAAqBv2E,KAAKg6E,KAAMvzD,GACrE,IAAK5S,EACH,MAAM,IAAI7P,MAAM,4BAA4B6P,EAAM,cAAcmqC,GAElE,OAAOh+C,KAAK0wE,iBAAiB78D,EAAQmqC,EAAW4+B,IAEpDO,EAjBA,GC/EAC,GAAA,WAAA,SAAAA,IAGYp9E,KAAAq9E,WAAa,IAAI5wE,WAE3B2wE,EAAAl9E,UAAAo9E,UAAA,SAAU/lE,GAAV,IAAAhL,EAAAvM,KACQu9E,EAAY,IAAI9wE,IACtB8K,EAAOnM,QAAQ,SAAAgyC,GACR7wC,EAAK8wE,WAAWlwE,IAAIiwC,KACvB7wC,EAAK8wE,WAAWlvE,IAAIivC,GACpBmgC,EAAUpvE,IAAIivC,MAGlBp9C,KAAKw9E,cAAcD,IAGrBH,EAAAl9E,UAAAs9E,cAAA,SAAcD,KAEdH,EAAAl9E,UAAAu9E,aAAA,WAA2B,OAAO99E,MAAM2zC,KAAKtzC,KAAKq9E,wCAjBvCD,EAAgBh5E,QAAA,SAAAs5E,EAAAp9E,GAAA,OAAA,IAAAA,GAAhB88E,IAAgBj5E,WAAA,SAD7B,GAqBAw5E,GAAA,SAAAxpD,GAIE,SAAAwpD,EAAsC3D,GAAtC,IAAAztE,EACE4nB,EAAAvzB,KAAAZ,OAAOA,YAD6BuM,EAAAytE,KAAAA,EAF9BztE,EAAAqxE,WAAa,IAAInxE,IACjBF,EAAAsxE,YAAc,IAAIpxE,IAGxBF,EAAKqxE,WAAWzvE,IAAI6rE,EAAKrvD,eALY2J,EAAAA,EAAAA,GAQ/BqpD,EAAAz9E,UAAA49E,iBAAR,SAAyBvmE,EAAqB87D,GAA9C,IAAA9mE,EAAAvM,KACEuX,EAAOnM,QAAQ,SAACgyC,GACd,IAAM2gC,EAAUxxE,EAAKytE,KAAK93D,cAAc,SACxC67D,EAAQ5L,YAAc/0B,EACtB7wC,EAAKsxE,YAAY1vE,IAAIklE,EAAKlxD,YAAY47D,OAI1CJ,EAAAz9E,UAAA89E,QAAA,SAAQC,GACNj+E,KAAK89E,iBAAiB99E,KAAKq9E,WAAYY,GACvCj+E,KAAK49E,WAAWzvE,IAAI8vE,IAGtBN,EAAAz9E,UAAAg+E,WAAA,SAAWD,GAAwBj+E,KAAK49E,WAAW3qC,OAAOgrC,IAE1DN,EAAAz9E,UAAAs9E,cAAA,SAAcD,GAAd,IAAAhxE,EAAAvM,KACEA,KAAK49E,WAAWxyE,QAAQ,SAAA6yE,GAAY,OAAA1xE,EAAKuxE,iBAAiBP,EAAWU,MAGvEN,EAAAz9E,UAAAsN,YAAA,WAAsBxN,KAAK69E,YAAYzyE,QAAQ,SAAA+yE,GAAa,OAAApR,KAASvuC,OAAO2/C,iCA3BjER,EAAmBv5E,QAAA,SAAAg6E,EAAA99E,GAAA,OAAA,IAAAA,GAAnBq9E,GAAmB72E,EAGV8lE,MAAQzoE,WAAA,SAJ9B,CACyCi5E,ICrB5BiB,IACXC,IAAO,6BACPC,MAAS,+BACTC,MAAS,+BACTC,IAAO,uCACPC,MAAS,iCAGLC,GAAkB,UAEXC,GAAY,iBACZC,GAAe,oBAU5B,SAAAC,GACIC,EAAgBxnE,EAA0B1D,GAC5C,IAAK,IAAIrT,EAAI,EAAGA,EAAI+W,EAAO5W,OAAQH,IAAK,CACtC,IAAI48C,EAAQ7lC,EAAO/W,GAEfb,MAAM8H,QAAQ21C,GAChB0hC,GAAcC,EAAQ3hC,EAAOvpC,IAE7BupC,EAAQA,EAAMvxC,QAAQ8yE,GAAiBI,GACvClrE,EAAOnS,KAAK07C,IAGhB,OAAOvpC,EAGT,SAAAmrE,GAAgCC,GAC9B,OAAO,SAAC7I,IAEuB,IADA6I,EAAa7I,KAGxCA,EAAMlF,iBACNkF,EAAM7oC,aAAc,IAK1B,IAAA2xC,GAAA,WAKE,SAAAA,EAAoBC,EAAoCC,GAApCp/E,KAAAm/E,aAAAA,EAAoCn/E,KAAAo/E,iBAAAA,EAHhDp/E,KAAAq/E,iBAAmB,IAAI91E,IAI7BvJ,KAAKk5B,gBAAkB,IAAIomD,GAAoBH,UAGjDD,EAAAh/E,UAAAkpB,eAAA,SAAe3C,EAAc9hB,GAC3B,IAAK8hB,IAAY9hB,EACf,OAAO3E,KAAKk5B,gBAEd,OAAQv0B,EAAKyS,eACX,KAAKlH,GAAkBmH,SACrB,IAAI6R,EAAWlpB,KAAKq/E,iBAAiBl4E,IAAIxC,EAAK2S,IAO9C,OANK4R,IACHA,EACI,IAAIq2D,GAAkCv/E,KAAKm/E,aAAcn/E,KAAKo/E,iBAAkBz6E,GACpF3E,KAAKq/E,iBAAiB71E,IAAI7E,EAAK2S,GAAI4R,IAEDA,EAAUs2D,YAAY/4D,GACnDyC,EAET,KAAKhZ,GAAkBuvE,OACvB,KAAKvvE,GAAkBwvE,UACrB,OAAO,IAAIC,GAAkB3/E,KAAKm/E,aAAcn/E,KAAKo/E,iBAAkB34D,EAAS9hB,GAClF,QACE,IAAK3E,KAAKq/E,iBAAiBlyE,IAAIxI,EAAK2S,IAAK,CACvC,IAAMC,EAASunE,GAAcn6E,EAAK2S,GAAI3S,EAAK4S,WAC3CvX,KAAKo/E,iBAAiB9B,UAAU/lE,GAChCvX,KAAKq/E,iBAAiB71E,IAAI7E,EAAK2S,GAAItX,KAAKk5B,iBAE1C,OAAOl5B,KAAKk5B,kBAKlBgmD,EAAAh/E,UAAAkxB,MAAA,aACA8tD,EAAAh/E,UAAAmxB,IAAA,wCAtCW6tD,EAAmB96E,QAAA,SAAAw7E,EAAAt/E,GAAA,OAAA,IAAAA,GAAnB4+E,GAAmBp4E,EAIIy1E,IAAYz1E,EAA4B62E,MAAmBx5E,WAAA,SAL/F,GA0CAm7E,GAAA,WAGE,SAAAA,EAAoBH,GAAAn/E,KAAAm/E,aAAAA,EAFpBn/E,KAAAoT,KAA6B5T,OAAOW,OAAO,MAqH7C,OAjHEm/E,EAAAp/E,UAAAmN,QAAA,aAIAiyE,EAAAp/E,UAAAgiB,cAAA,SAAclgB,EAAc69E,GAC1B,OAAIA,EACKt2D,SAASwP,gBAAgBslD,GAAewB,GAAY79E,GAGtDunB,SAASrH,cAAclgB,IAGhCs9E,EAAAp/E,UAAAy6C,cAAA,SAAcv5C,GAAsB,OAAOmoB,SAASoxB,cAAcv5C,IAElEk+E,EAAAp/E,UAAA4/E,WAAA,SAAW1+E,GAAsB,OAAOmoB,SAASqpD,eAAexxE,IAEhEk+E,EAAAp/E,UAAAiiB,YAAA,SAAY7Z,EAAaqpE,GAAuBrpE,EAAO6Z,YAAYwvD,IAEnE2N,EAAAp/E,UAAA4sB,aAAA,SAAaxkB,EAAaqpE,EAAeoO,GACnCz3E,GACFA,EAAOwkB,aAAa6kD,EAAUoO,IAIlCT,EAAAp/E,UAAAkjB,YAAA,SAAY9a,EAAaspE,GACnBtpE,GACFA,EAAO8a,YAAYwuD,IAIvB0N,EAAAp/E,UAAAi5B,kBAAA,SAAkB6mD,EAA4BC,GAC5C,IAAIx8D,EAAoC,iBAAnBu8D,EAA8Bz2D,SAASlH,cAAc29D,GACvBA,EACnD,IAAKv8D,EACH,MAAM,IAAIzf,MAAM,iBAAiBg8E,EAAc,gCAKjD,OAHKC,IACHx8D,EAAG0uD,YAAc,IAEZ1uD,GAGT67D,EAAAp/E,UAAA2gB,WAAA,SAAWG,GAAkB,OAAOA,EAAKH,YAEzCy+D,EAAAp/E,UAAAgkB,YAAA,SAAYlD,GAAkB,OAAOA,EAAKkD,aAE1Co7D,EAAAp/E,UAAAm5B,aAAA,SAAa5V,EAASzhB,EAAcZ,EAAey+E,GACjD,GAAIA,EAAW,CACb79E,EAAU69E,EAAS,IAAI79E,EACvB,IAAMk+E,EAAe7B,GAAewB,GAChCK,EACFz8D,EAAG6wD,eAAe4L,EAAcl+E,EAAMZ,GAEtCqiB,EAAG4V,aAAar3B,EAAMZ,QAGxBqiB,EAAG4V,aAAar3B,EAAMZ,IAI1Bk+E,EAAAp/E,UAAA4jB,gBAAA,SAAgBL,EAASzhB,EAAc69E,GACrC,GAAIA,EAAW,CACb,IAAMK,EAAe7B,GAAewB,GAChCK,EACFz8D,EAAG8wD,kBAAkB2L,EAAcl+E,GAEnCyhB,EAAGK,gBAAmB+7D,EAAS,IAAI79E,QAGrCyhB,EAAGK,gBAAgB9hB,IAIvBs9E,EAAAp/E,UAAA28D,SAAA,SAASp5C,EAASzhB,GAAsByhB,EAAGw5B,UAAU9uC,IAAInM,IAEzDs9E,EAAAp/E,UAAA48D,YAAA,SAAYr5C,EAASzhB,GAAsByhB,EAAGw5B,UAAUze,OAAOx8B,IAE/Ds9E,EAAAp/E,UAAAmjE,SAAA,SAAS5/C,EAAS25B,EAAeh8C,EAAY2F,GACvCA,EAAQiwB,GAAoBmpD,SAC9B18D,EAAG25B,MAAMyyB,YACLzyB,EAAOh8C,EAAU2F,EAAQiwB,GAAoBopD,UAAa,YAAc,IAE5E38D,EAAG25B,MAAMA,GAASh8C,GAItBk+E,EAAAp/E,UAAAojE,YAAA,SAAY7/C,EAAS25B,EAAer2C,GAC9BA,EAAQiwB,GAAoBmpD,SAC9B18D,EAAG25B,MAAMijC,eAAejjC,GAIxB35B,EAAG25B,MAAMA,GAAS,IAItBkiC,EAAAp/E,UAAA2vE,YAAA,SAAYpsD,EAASzhB,EAAcZ,GACjCk/E,GAAqBt+E,EAAM,YAC3ByhB,EAAGzhB,GAAQZ,GAGbk+E,EAAAp/E,UAAAmyE,SAAA,SAASrxD,EAAW5f,GAAuB4f,EAAKsF,UAAYllB,GAE5Dk+E,EAAAp/E,UAAAqgF,OAAA,SAAO1sE,EAAwCuiE,EAAe9gD,GAG5D,OADAgrD,GAAqBlK,EAAO,YACN,iBAAXviE,EACU7T,KAAKm/E,aAAarC,uBACjCjpE,EAAQuiE,EAAO4I,GAAuB1pD,IAEzBt1B,KAAKm/E,aAAazO,iBAC1B78D,EAAQuiE,EAAO4I,GAAuB1pD,KAErDgqD,EAtHA,GAwHMkB,GAAc,IAAIlkE,WAAW,GACnC,SAAAgkE,GAA8Bt+E,EAAcy+E,GAC1C,GAAIz+E,EAAKsa,WAAW,KAAOkkE,GACzB,MAAM,IAAIx8E,MACN,uBAAuBy8E,EAAQ,IAAIz+E,EAAI,oGAI/C,IC5LI0+E,GD4LJnB,GAAA,SAAAprD,GAIE,SAAAorD,EACIJ,EAA4BC,EACpBlgE,GAFZ,IAAA3S,EAGE4nB,EAAAvzB,KAAAZ,KAAMm/E,IAAan/E,KADTuM,EAAA2S,UAAAA,EAEV,IAAM3H,EAASunE,GAAc5/D,EAAU5H,GAAI4H,EAAU3H,kBACrD6nE,EAAiB9B,UAAU/lE,GAE3BhL,EAAKo0E,YAvNT,SAAAC,EAAqCC,GACnC,OAAOhC,GAAahzE,QAAQ8yE,GAAiBkC,GAsNxBD,CAAqB1hE,EAAU5H,IAClD/K,EAAKu0E,SApNT,SAAAC,EAAkCF,GAChC,OAAOjC,GAAU/yE,QAAQ8yE,GAAiBkC,GAmNxBE,CAAkB7hE,EAAU5H,MAUhD,OAtBgDgd,EAAAA,EAAAA,GAe9CirD,EAAAr/E,UAAAs/E,YAAA,SAAY/4D,GAAgB0N,EAAAj0B,UAAMm5B,aAAYz4B,KAAAZ,KAACymB,EAASzmB,KAAK8gF,SAAU,KAEvEvB,EAAAr/E,UAAAgiB,cAAA,SAAc5Z,EAAatG,GACzB,IAAMyhB,EAAK0Q,EAAAj0B,UAAMgiB,cAAathB,KAAAZ,KAACsI,EAAQtG,GAEvC,OADAmyB,EAAAj0B,UAAMm5B,aAAYz4B,KAAAZ,KAACyjB,EAAIzjB,KAAK2gF,YAAa,IAClCl9D,GAEX87D,EAtBA,CAAgDD,IAwBhDK,GAAA,SAAAxrD,GAGE,SAAAwrD,EACIR,EAAoCC,EAC5B4B,EAAqB9hE,GAFjC,IAAA3S,EAGE4nB,EAAAvzB,KAAAZ,KAAMm/E,IAAan/E,KAFmBuM,EAAA6yE,iBAAAA,EAC5B7yE,EAAAy0E,OAAAA,EAAqBz0E,EAAA2S,UAAAA,EAG7B3S,EAAK4mE,WADHj0D,EAAU9H,gBAAkBlH,GAAkBwvE,UAC7BsB,EAAeC,cAActmE,KAAM,SAEnCqmE,EAAe/N,mBAEpC1mE,EAAK6yE,iBAAiBpB,QAAQzxE,EAAK4mE,YAEnC,IADA,IAAM57D,EAASunE,GAAc5/D,EAAU5H,GAAI4H,EAAU3H,WAC5C/W,EAAI,EAAGA,EAAI+W,EAAO5W,OAAQH,IAAK,CACtC,IAAMu9E,EAAUx0D,SAASrH,cAAc,SACvC67D,EAAQ5L,YAAc56D,EAAO/W,GAC7B+L,EAAK4mE,WAAWhxD,YAAY47D,YAoBlC,OArCgCzpD,EAAAA,EAAAA,GAqBtBqrD,EAAAz/E,UAAAghF,iBAAR,SAAyBlgE,GAAkB,OAAOA,IAAShhB,KAAKghF,OAAShhF,KAAKmzE,WAAanyD,GAE3F2+D,EAAAz/E,UAAAmN,QAAA,WAAYrN,KAAKo/E,iBAAiBlB,WAAWl+E,KAAKmzE,aAElDwM,EAAAz/E,UAAAiiB,YAAA,SAAY7Z,EAAaqpE,GACvB,OAAOx9C,EAAAj0B,UAAMiiB,YAAWvhB,KAAAZ,KAACA,KAAKkhF,iBAAiB54E,GAASqpE,IAE1DgO,EAAAz/E,UAAA4sB,aAAA,SAAaxkB,EAAaqpE,EAAeoO,GACvC,OAAO5rD,EAAAj0B,UAAM4sB,aAAYlsB,KAAAZ,KAACA,KAAKkhF,iBAAiB54E,GAASqpE,EAAUoO,IAErEJ,EAAAz/E,UAAAkjB,YAAA,SAAY9a,EAAaspE,GACvB,OAAOz9C,EAAAj0B,UAAMkjB,YAAWxiB,KAAAZ,KAACA,KAAKkhF,iBAAiB54E,GAASspE,IAE1D+N,EAAAz/E,UAAA2gB,WAAA,SAAWG,GACT,OAAOhhB,KAAKkhF,iBAAiB/sD,EAAAj0B,UAAM2gB,WAAUjgB,KAAAZ,KAACA,KAAKkhF,iBAAiBlgE,MAExE2+D,EArCA,CAAgCL,ICxO1B6B,GACe,oBAATzzC,MAA0BA,KAAyB,YAAK,SAASriC,GACvE,MAAO,kBAAoBA,GAE3B+1E,GAAyCD,GAAW,oBACpDE,GAA+CF,GAAW,uBAE1DG,MAQAC,GAAa,oCAIE,oBAAT7zC,MAA0BA,KAAayzC,GAAW,0BAG5DT,OAIF,ICyCAc,GDzCMC,GAAqB,SAASzjC,GAClC,QAAK0iC,IAGEA,GAAe7gF,eAAem+C,IAUjC0jC,GAAiB,SAAStL,GAC9B,IAAMuL,EAAaL,GAAYlL,EAAMzxE,MACrC,GAAKg9E,EAAL,CAGA,IAAMC,EAAwB5hF,KAAK2hF,GACnC,GAAKC,EAAL,CAGA,IAAMt/E,GAAa8zE,GACnB,GAAyB,IAArBwL,EAAUjhF,OAGZ,OADMkhF,EAAWD,EAAU,IACdlzC,OAAShB,KAAKznB,QAElB47D,EAASnzC,KAAKyB,IAAI0xC,EAASjF,QAAS58E,KAAMsC,GAE1Cu/E,EAASjF,QAAQ/7E,MAAMb,KAAMsC,GAMtC,IADA,IAAMw/E,EAAcF,EAAU/4E,QACrBrI,EAAI,EAAGA,EAAIshF,EAAYnhF,SAGK,IAA9By1E,EAAcmL,IAHmB/gF,IAAK,CAM3C,IAAMqhF,GAAAA,EAAWC,EAAYthF,IAChBkuC,OAAShB,KAAKznB,QAEzB47D,EAASnzC,KAAKyB,IAAI0xC,EAASjF,QAAS58E,KAAMsC,GAE1Cu/E,EAASjF,QAAQ/7E,MAAMb,KAAMsC,OAMrCy/E,GAAA,SAAA5tD,GAEE,SAAA4tD,EACsBrP,EAAkBv9B,EACH6sC,GAFrC,IAAAz1E,EAGE4nB,EAAAvzB,KAAAZ,KAAM0yE,IAAI1yE,YAF4BuM,EAAA4oC,OAAAA,EAIjC6sC,GfpFT,SAAAC,EAAiCD,GAC/B,OAAOA,IAAenV,GemFAoV,CAAiBD,IACnCz1E,EAAK21E,sBAP0B5tD,EAAAA,EAAAA,GAW3BytD,EAAA7hF,UAAAgiF,WAAR,WACE,GAAqB,oBAAVC,OAA0BA,OAAUA,MAAMjiF,YAGhDiiF,MAAMjiF,UAAkC,wCAA7C,CAIA,IAAM4uC,EAAYqzC,MAAMjiF,UAAkC,wCACtDiiF,MAAMjiF,UAAUkiF,yBACpBD,MAAMjiF,UAAUkiF,yBAA2B,WACrCpiF,OACFA,KAAKuhF,KAAc,GAMrBzyC,GAAYA,EAASjuC,MAAMb,KAAMU,cAMrCqhF,EAAA7hF,UAAAm+C,SAAA,SAASL,GAA8B,OAAO,GAE9C+jC,EAAA7hF,UAAAwwE,iBAAA,SAAiBjqD,EAAsBu3B,EAAmB4+B,GAA1D,IAAArwE,EAAAvM,KAgBMs1B,EAA0BsnD,EAG9B,IAJqBn2D,EAAQ26D,KAIPzzC,GAAOqC,oBAAqByxC,GAAmBzjC,GA+BnEv3B,EAA2B,iBAAEu3B,EAAW1oB,GAAU,OA/B8B,CAChF,IAAIqsD,EAAaL,GAAYtjC,GACxB2jC,IACHA,EAAaL,GAAYtjC,GAAamjC,GAlI9B,UAkImDnjC,EAnIrD,UAqIR,IAAI4jC,EAAyBn7D,EAAgBk7D,GACvCU,EAA2BT,GAAaA,EAAUjhF,OAAS,EAC5DihF,IACHA,EAAan7D,EAAgBk7D,OAG/B,IAAMjzC,EAAO+yC,GAAmBzjC,GAAatQ,KAAK40C,KAAO50C,KAAKznB,QAC9D,GAAyB,IAArB27D,EAAUjhF,OACZihF,EAAUlgF,MAAMgtC,KAAMA,EAAMkuC,QAAStnD,QAChC,CAEL,IADA,IAAIitD,GAAqB,EAChB/hF,EAAI,EAAGA,EAAIohF,EAAUjhF,OAAQH,IACpC,GAAIohF,EAAUphF,GAAGo8E,UAAYtnD,EAAU,CACrCitD,GAAqB,EACrB,MAGCA,GACHX,EAAUlgF,MAAMgtC,KAAMA,EAAMkuC,QAAStnD,IAIpC+sD,GACH57D,EAAQ26D,IAAoBpjC,EAAW0jC,IAAgB,GAK3D,OAAO,WAAM,OAAAn1E,EAAKogB,oBAAoBlG,EAASu3B,EAAW1oB,KAG5DysD,EAAA7hF,UAAAysB,oBAAA,SAAoB9Y,EAAamqC,EAAmB1oB,GAClD,IAAIktD,EAAmB3uE,EAAOwtE,IAE9B,IAAKmB,EACH,OAAO3uE,EAA6B,oBAAEhT,MAAMgT,GAASmqC,EAAW1oB,GAAU,IAE5E,IAAIqsD,EAAaL,GAAYtjC,GACzB4jC,EAAwBD,GAAc9tE,EAAO8tE,GACjD,IAAKC,EAGH,OAAO/tE,EAA6B,oBAAEhT,MAAMgT,GAASmqC,EAAW1oB,GAAU,IAK5E,IADA,IAAImtD,GAAQ,EACHjiF,EAAI,EAAGA,EAAIohF,EAAUjhF,OAAQH,IAEpC,GAAIohF,EAAUphF,GAAGo8E,UAAYtnD,EAAU,CACrCmtD,GAAQ,EACRb,EAAUv2D,OAAO7qB,EAAG,GACpB,MAGAiiF,EACuB,IAArBb,EAAUjhF,QAEZ6hF,EAAiB3hF,MAAMgT,GAASmqC,EAAW0jC,IAAgB,IAK7D7tE,EAA6B,oBAAEhT,MAAMgT,GAASmqC,EAAW1oB,GAAU,gCA5H5DysD,EAAe39E,QAAA,SAAAs+E,EAAApiF,GAAA,OAAA,IAAAA,GAAfyhF,GAAej7E,EAEd8lE,IAAQ9lE,EAA4B6mC,IAAM7mC,EAC9BwjC,GAAW,KAAAnmC,WAAA,SAJrC,CACqCg5E,IEtF/BwF,IAEJC,KAAO,EACPC,UAAY,EACZC,SAAW,EACXC,QAAU,EACVC,WAAa,EACbC,SAAW,EACXC,UAAY,EACZC,OAAS,EACTC,SAAW,EAEXC,OAAS,EACTC,YAAc,EACdC,WAAa,EACbC,UAAY,EACZC,aAAe,EACfC,SAAW,EACXC,UAAY,EAEZC,OAAS,EACTC,SAAW,EAEXC,QAAU,EACVC,aAAe,EACfC,YAAc,EACdC,WAAa,EACbC,cAAgB,EAEhBC,OAAS,EACTC,WAAa,EACbC,YAAc,EACdC,SAAW,EACXC,WAAa,EAEbC,KAAO,GASIC,GAAwB,IAAI38E,EAAoC,uBAehE48E,GAAgB,IAAI58E,EAA6B,gBAa9D68E,GAAA,WAAA,SAAAA,IAOE3kF,KAAA8qC,UAkBA9qC,KAAA4kF,oBAwBAD,EAAAzkF,UAAA2kF,YAAA,SAAYp+D,GACV,IAAMq+D,EAAK,IAAIC,OAASt+D,EAASzmB,KAAKuE,SAKtC,IAAK,IAAMy5C,KAHX8mC,EAAG39E,IAAI,SAASqC,KAAKw7E,QAAQ,IAC7BF,EAAG39E,IAAI,UAAUqC,KAAKw7E,QAAQ,IAENhlF,KAAK4kF,UAC3BE,EAAG39E,IAAI62C,GAAWx0C,IAAIxJ,KAAK4kF,UAAU5mC,IAGvC,OAAO8mC,8BA1DEH,EAAmBvgF,QAAA,SAAA6gF,EAAA3kF,GAAA,OAAA,IAAAA,GAAnBqkF,IAAmBxgF,WAAA,SADhC,GA+DA+gF,GAAA,SAAA/wD,GAEE,SAAA+wD,EACsBxS,EACqByS,EAAsC3gE,EAClC4gE,GAH/C,IAAA74E,EAIE4nB,EAAAvzB,KAAAZ,KAAM0yE,IAAI1yE,YAF+BuM,EAAA44E,QAAAA,EAAsC54E,EAAAiY,QAAAA,EAClCjY,EAAA64E,OAAAA,WAJP9wD,EAAAA,EAAAA,GAQxC4wD,EAAAhlF,UAAAm+C,SAAA,SAASL,GACP,SAAK2kC,GAAY9iF,eAAem+C,EAAUn3B,iBAAmB7mB,KAAKqlF,cAAcrnC,KAI1E/3C,OAAe8+E,SAAW/kF,KAAKolF,SACnCplF,KAAKwkB,QAAQC,KACT,QAAQu5B,EAAS,oGAEd,KAMXknC,EAAAhlF,UAAAwwE,iBAAA,SAAiBjqD,EAAsBu3B,EAAmB4+B,GAA1D,IAAArwE,EAAAvM,KACQ0uC,EAAO1uC,KAAK08E,QAAQK,UAK1B,GAJA/+B,EAAYA,EAAUn3B,eAIhB5gB,OAAe8+E,QAAU/kF,KAAKolF,OAAQ,CAI1C,IAAIE,GAAqB,EACrBC,EAAuB,WAAQD,GAAqB,GA4BxD,OA1BAtlF,KAAKolF,SACAn9D,KAAK,WAEJ,IAAMhiB,OAAe8+E,OAInB,OAHAx4E,EAAKiY,QAAQC,KACT,0EACJ8gE,EAAa,cAIVD,IAGHC,EAAah5E,EAAKmkE,iBAAiBjqD,EAASu3B,EAAW4+B,MAG1D/yC,MAAM,WACLt9B,EAAKiY,QAAQC,KACT,QAAQu5B,EAAS,uEAErBunC,EAAa,eAMZ,WAAQA,KAGjB,OAAO72C,EAAKqB,kBAAkB,WAE5B,IAAM+0C,EAAKv4E,EAAK44E,QAAQN,YAAYp+D,GAC9B6O,EAAW,SAAS2oB,GACxBvP,EAAK8B,WAAW,WAAaosC,EAAQ3+B,MAGvC,OADA6mC,EAAGtU,GAAGxyB,EAAW1oB,GACV,WACLwvD,EAAGU,IAAIxnC,EAAW1oB,GAEQ,mBAAfwvD,EAAGz3E,SACZy3E,EAAGz3E,cAMX63E,EAAAhlF,UAAAmlF,cAAA,SAAcrnC,GAA8B,OAAOh+C,KAAKmlF,QAAQr6C,OAAOtlC,QAAQw4C,IAAc,8BAlFlFknC,EAAoB9gF,QAAA,SAAAqhF,EAAAnlF,GAAA,OAAA,IAAAA,GAApB4kF,GAAoBp+E,EAEnB8lE,IAAQ9lE,EACR29E,IAAqB39E,EAAyD0jC,IAAO1jC,EACzE49E,GAAa,KAAAvgF,WAAA,SALvC,CAC0Cg5E,ICvIpCuI,IAAiB,MAAO,UAAW,OAAQ,SAK3CC,IACJC,IAAO,SAACxP,GAAyB,OAAAA,EAAMyP,QACvCC,QAAW,SAAC1P,GAAyB,OAAAA,EAAM2P,SAC3Cp+E,KAAQ,SAACyuE,GAAyB,OAAAA,EAAM4P,SACxC3+C,MAAS,SAAC+uC,GAAyB,OAAAA,EAAM6P,WAO3CC,GAAA,SAAA/xD,GAME,SAAA+xD,EAA8BxT,UAAYv+C,EAAAvzB,KAAAZ,KAAM0yE,IAAI1yE,YALjBs0B,EAAAA,EAAAA,GAYnC4xD,EAAAhmF,UAAAm+C,SAAA,SAASL,GAA8B,OAAoD,MAA7CkoC,EAAgBC,eAAenoC,IAU7EkoC,EAAAhmF,UAAAwwE,iBAAA,SAAiBjqD,EAAsBu3B,EAAmB4+B,GACxD,IAAMwJ,EAAcF,EAAgBC,eAAenoC,GAE7CqoC,EACFH,EAAgBI,cAAcF,EAAqB,QAAGxJ,EAAS58E,KAAK08E,QAAQK,WAEhF,OAAO/8E,KAAK08E,QAAQK,UAAUhtC,kBAAkB,WAC9C,OAAOg9B,KAAS4D,YAAYlqD,EAAS2/D,EAA0B,aAAGC,MAI/DH,EAAAC,eAAP,SAAsBnoC,GACpB,IAAMryC,EAAkBqyC,EAAUn3B,cAAc/B,MAAM,KAEhDyhE,EAAe56E,EAAM07B,QAC3B,GAAsB,IAAjB17B,EAAMhL,QAAoC,YAAjB4lF,GAA+C,UAAjBA,EAC1D,OAAO,KAGT,IAAMxiF,EAAMmiF,EAAgBM,cAAc76E,EAAM6lC,OAE5Ci1C,EAAU,GAUd,GATAf,GAAct6E,QAAQ,SAAAs7E,GACpB,IAAMxjF,EAAgByI,EAAMnG,QAAQkhF,GAChCxjF,GAAS,IACXyI,EAAM0f,OAAOnoB,EAAO,GACpBujF,GAAWC,EAAe,OAG9BD,GAAW1iF,EAES,GAAhB4H,EAAMhL,QAA8B,IAAfoD,EAAIpD,OAE3B,OAAO,KAGT,IAAMu0B,KAGN,OAFAA,EAAqB,aAAIqxD,EACzBrxD,EAAgB,QAAIuxD,EACbvxD,GAGFgxD,EAAAS,gBAAP,SAAuBvQ,GACrB,IAAIqQ,EAAU,GACV1iF,EAAMgpE,KAASoJ,YAAYC,GAgB/B,MAdY,OADZryE,EAAMA,EAAI8iB,eAER9iB,EAAM,QACW,MAARA,IACTA,EAAM,OAER2hF,GAAct6E,QAAQ,SAAAs7E,GAChBA,GAAgB3iF,IAEd6iF,EADmBjB,GAAqBe,IACzBtQ,KACjBqQ,GAAWC,EAAe,OAIhCD,GAAW1iF,GAWNmiF,EAAAI,cAAP,SAAqBG,EAAc7J,EAAmBluC,GACpD,OAAO,SAAC0nC,GACF8P,EAAgBS,gBAAgBvQ,KAAWqQ,GAC7C/3C,EAAK8B,WAAW,WAAM,OAAAosC,EAAQxG,OAM7B8P,EAAAM,cAAP,SAAqBK,GAEnB,OAAQA,GACN,IAAK,MACH,MAAO,SACT,QACE,OAAOA,+BA3GFX,EAAe9hF,QAAA,SAAA0iF,EAAAxmF,GAAA,OAAA,IAAAA,GAAf4lF,GAAep/E,EAKN8lE,MAAQzoE,WAAA,SAN9B,CACqCg5E,IF+GrC4J,GAAA,SAAA5yD,GAEE,SAAA4yD,EAAsC/M,GAAtC,IAAAztE,EAAmD4nB,EAAAvzB,KAAAZ,OAAOA,YAApBuM,EAAAytE,KAAAA,WADF1lD,EAAAA,EAAAA,GAGpCyyD,EAAA7mF,UAAA8mF,SAAA,SAAS9nB,EAAsB99D,GAC7B,GAAa,MAATA,EAAe,OAAO,KAC1B,OAAQ89D,GACN,KAAKv3C,GAAgBs/D,KACnB,OAAO7lF,EACT,KAAKumB,GAAgBu/D,KACnB,OAAI9lF,aAAiB+lF,GAAqB/lF,EAAMgmF,uCAChDpnF,KAAKqnF,kBAAkBjmF,EAAO,QlJkEtC,SAAAkmF,EAA8B3lE,EAAiB4lE,GAC7C,IAAIxlE,EAAqC,KACzC,IACEqD,GAAkBA,IAAmB,IAAI1D,GAAgBC,GAEzD,IAAI6lE,EAAaD,EAAkB1/E,OAAO0/E,GAAmB,GAC7DxlE,EAAmBqD,GAAgB9C,oBAAoBklE,GAIvD,IAAIC,EAAe,EACfC,EAAaF,EAEjB,EAAG,CACD,GAAqB,IAAjBC,EACF,MAAM,IAAIzjF,MAAM,yDAElByjF,IAEAD,EAAaE,EACbA,EAAa3lE,EAAmBK,UAChCL,EAAmBqD,GAAgB9C,oBAAoBklE,SAChDA,IAAeE,GAExB,IAAMz5D,EAAY,IAAIpI,GAChB8hE,EAAW15D,EAAUjI,iBACvBwB,GAAmBzF,IAAkCA,GAMzD,OALIN,MAAewM,EAAUnI,oBAC3BtB,QAAQC,KACJ,mFAGCkjE,UAGP,GAAI5lE,EAEF,IADA,IAAMnB,EAAS4G,GAAmBzF,IAAqBA,EAChDnB,EAAOtB,YACZsB,EAAOwC,YAAYxC,EAAOtB,akJvGnBgoE,CAActnF,KAAKg6E,KAAMnyE,OAAOzG,KACzC,KAAKumB,GAAgBigE,MACnB,OAAIxmF,aAAiBymF,GAAsBzmF,EAAMgmF,uCACjDpnF,KAAKqnF,kBAAkBjmF,EAAO,ShJ7EtC,SAAA0mF,EAA+B1mF,GAE7B,KADAA,EAAQyG,OAAOzG,GAAO4lB,QACV,MAAO,GAInB,IAAM+gE,EAAW3mF,EAAMmjB,MAAMwD,IAC7B,OAAKggE,GAAY1jE,GAAa0jE,EAAS,MAAQA,EAAS,IACpD3mF,EAAMmjB,MAAMsD,KA1BlB,SAAAmgE,EAA2B5mF,GAGzB,IAFA,IAAI6mF,GAAgB,EAChBC,GAAgB,EACX1nF,EAAI,EAAGA,EAAIY,EAAMT,OAAQH,IAAK,CACrC,IAAM2nF,EAAI/mF,EAAMoK,OAAOhL,GACb,MAAN2nF,GAAcD,EAChBD,GAAiBA,EACF,MAANE,GAAaF,IACtBC,GAAiBA,GAGrB,OAAOD,GAAiBC,EAeaF,CAAkB5mF,GAC9CA,GAGLqgB,MACF+C,QAAQC,KACJ,0CAA0CrjB,EAAK,uCAG9C,UgJ6DM0mF,CAAe1mF,IACxB,KAAKumB,GAAgBygE,OACnB,GAAIhnF,aAAiBinF,GAAgB,OAAOjnF,EAAMgmF,sCAElD,MADApnF,KAAKqnF,kBAAkBjmF,EAAO,UACxB,IAAI4C,MAAM,yCAClB,KAAK2jB,GAAgB2gE,IACnB,OAAIlnF,aAAiBmnF,IAAuBnnF,aAAiBonF,GAEpDpnF,EAAMgmF,uCAEfpnF,KAAKqnF,kBAAkBjmF,EAAO,OACvBijB,GAAaxc,OAAOzG,KAC7B,KAAKumB,GAAgB8gE,aACnB,GAAIrnF,aAAiBmnF,GACnB,OAAOnnF,EAAMgmF,sCAGf,MADApnF,KAAKqnF,kBAAkBjmF,EAAO,eACxB,IAAI4C,MACN,iFACN,QACE,MAAM,IAAIA,MAAM,8BAA8Bk7D,EAAG,wCAI/C6nB,EAAA7mF,UAAAmnF,kBAAR,SAA0BjmF,EAAYsnF,GACpC,GAAItnF,aAAiBunF,GACnB,MAAM,IAAI3kF,MACN,mBAAmB0kF,EAAY,WAAWtnF,EAAMo9D,cAAa,uCAKrEuoB,EAAA7mF,UAAA0oF,wBAAA,SAAwBxnF,GAA2B,OAAO,IAAI+lF,GAAa/lF,IAC3E2lF,EAAA7mF,UAAA2oF,yBAAA,SAAyBznF,GAA4B,OAAO,IAAIymF,GAAczmF,IAC9E2lF,EAAA7mF,UAAA4oF,0BAAA,SAA0B1nF,GAA6B,OAAO,IAAIinF,GAAejnF,IACjF2lF,EAAA7mF,UAAA6oF,uBAAA,SAAuB3nF,GAA0B,OAAO,IAAIonF,GAAYpnF,IACxE2lF,EAAA7mF,UAAA8oF,+BAAA,SAA+B5nF,GAC7B,OAAO,IAAImnF,GAAoBnnF,+BApDtB2lF,EAAgB3iF,QAAA,SAAA6kF,EAAA3oF,GAAA,OAAA,IAAAA,GAAhBymF,GAAgBjgF,EACP8lE,MAAQzoE,WAAA,SAF9B,CAzDAq9E,GAAA,SAAAA,QAkHAmH,GAAA,WACE,SAAAA,EAAmBvB,GAAApnF,KAAAonF,sCAAAA,EAUrB,OAJEuB,EAAAzoF,UAAAoF,SAAA,WACE,MAAO,0CAA0CtF,KAAKonF,sCAClD,sCAERuB,EAXA,GAaAxB,GAAA,SAAAhzD,GAAA,SAAAgzD,mDAEA,OAF2B7yD,EAAAA,EAAAA,GACzB6yD,EAAAjnF,UAAAs+D,YAAA,WAAgB,MAAO,QACzB2oB,EAFA,CAA2BwB,IAG3Bd,GAAA,SAAA1zD,GAAA,SAAA0zD,mDAEA,OAF4BvzD,EAAAA,EAAAA,GAC1BuzD,EAAA3nF,UAAAs+D,YAAA,WAAgB,MAAO,SACzBqpB,EAFA,CAA4Bc,IAG5BN,GAAA,SAAAl0D,GAAA,SAAAk0D,mDAEA,OAF6B/zD,EAAAA,EAAAA,GAC3B+zD,EAAAnoF,UAAAs+D,YAAA,WAAgB,MAAO,UACzB6pB,EAFA,CAA6BM,IAG7BH,GAAA,SAAAr0D,GAAA,SAAAq0D,mDAEA,OAF0Bl0D,EAAAA,EAAAA,GACxBk0D,EAAAtoF,UAAAs+D,YAAA,WAAgB,MAAO,OACzBgqB,EAFA,CAA0BG,IAG1BJ,GAAA,SAAAp0D,GAAA,SAAAo0D,mDAEA,OAFkCj0D,EAAAA,EAAAA,GAChCi0D,EAAAroF,UAAAs+D,YAAA,WAAgB,MAAO,eACzB+pB,EAFA,CAAkCI,IG9LrBO,KACVngF,QAAS6e,GAAWzd,YAAaq3E,KACjCz4E,QAASy4E,GAAcn3E,SAAU08E,GAAkBt9E,MAAOmjE,MAMhDuc,GACTp1C,GAAsB4R,GAAc,YArBrC58C,QAASuhC,GAAathC,SnBlBU,YmBmBhCD,QAASshC,GAAsBrhC,SAsBlC,SAAAogF,KACE7Z,GAAkBE,cAClBwL,GAAsBvmC,QAxBoCpqC,OAAO,IAChEvB,QAASq9C,GAAkB/7C,SAAU0vE,GAAyBtwE,MAAOmjE,MACrE7jE,QAAS6jE,GAAUxiE,WA6BtB,SAAAi/E,KACE,OAAO9/D,UA9BoC9f,WAiChC6/E,IACXJ,IACCngF,QAASiD,GAAUhD,UAAU,IAC7BD,QAASgiC,GAAc3gC,WAX1B,SAAAsrC,KACE,OAAO,IAAI3K,IAUuCthC,UAEhDV,QAASuzE,GACTjyE,SAAU03E,GACVz3E,OAAO,EACPb,MAAOmjE,GAAUj/B,GAAQrD,MAE1BvhC,QAASuzE,GAAuBjyE,SAAU67E,GAAiB57E,OAAO,EAAMb,MAAOmjE,MAE9E7jE,QAASuzE,GACTjyE,SAAU66E,GACV56E,OAAO,EACPb,MAAOmjE,GAAU6X,GAAuBj6C,IAAU,IAAI/mC,EAAYihF,OAEnE37E,QAAS07E,GAAuBp6E,SAAUs6E,GAAqBl7E,UAE9DV,QAASm2E,GACT70E,SAAU60E,GACVz1E,MAAO8yE,GAAcoB,MAEtB50E,QAASguB,GAAkB5sB,YAAa+0E,KACxCn2E,QAASq0E,GAAkBjzE,YAAawzE,KACxC50E,QAAS40E,GAAqBtzE,SAAUszE,GAAqBl0E,MAAOmjE,MACpE7jE,QAAS6nC,GAAavmC,SAAUumC,GAAannC,MAAOkkC,MACpD5kC,QAASwzE,GAAclyE,SAAUkyE,GAAc9yE,MAAO6yE,GAAuB3uC,KAC9EouC,IAYFwN,GAAA,WAEE,SAAAA,EAA2D/rB,GACzD,GAAIA,EACF,MAAM,IAAIx5D,MACN,wKAYDulF,EAAAC,qBAAP,SAA4BC,GAC1B,OACEx7E,SAAUs7E,EACV/kF,YACGuE,QAASghC,GAAQ/gC,SAAUygF,EAAOC,QAClC3gF,QAAS6xE,GAAezwE,YAAa4/B,IACtC8wC,6BAtBK0O,EAAajxE,aAAAC,gBAAA9T,WAAA+T,SADgCm0D,GAAcxmB,6DAC3DojC,GAAaziF,EACoByiF,EAAa,MAAA/kF,UAFrC8kF,GAAwB7kF,UAAYkoE,GAAcxmB,SAAxE,GC/FAwjC,GAAA,WAGA,SAAAA,sCACaA,EAAmB1yE,YAAA,gBAAA7S,QAAA,SAAAwlF,EAAAtpF,GAAA,OAAA,IAAAA,GAAnBqpF,IAAmBt0E,OAAA,EAAAC,KAAA,EAAA5B,SAAA,SAAAm2E,EAAAC,EAAA5qB,Q1I69ChC,SAAA5zD,EAAqBpI,EAAe9B,GAClC,IAAM4S,EAAQkG,KAKR6vE,EH3zCR,SAAAnX,EAA+BxxE,EAAY8nB,GACzC,OAAOD,GAAqBC,GAAYA,EAAS42D,WAAWjtE,GAAgBzR,IACpC8nB,EAAS0pD,eAAe//D,GAAgBzR,IGyzC7DwxE,CAAexxE,EAAO4S,EAAMjC,KACzCiB,EAAQmd,GAAkBjtB,EAAK,EAAqB6mF,EAAY,KAAM,MAG5ExvE,IAAY,GACZ4H,GAAY4nE,EAAY/2E,EAAOgB,2C0I5+CjC,GAOAg2E,GAAA,WAAA,SAAAA,mCAKaA,EAAgB1xE,WARhBqxE,IAAmBpxE,cAAnBoxE,IAAmBllF,SAKpB8kF,IAAa/wE,oEAGZwxE,IAAgBxlF,aAAAC,UAHjB8kF,SAFZ,UzJ4BA,SAAAU,KACE,GAAIzoE,GACF,MAAM,IAAIxd,MAAM,iDAElBud,IAAW,EyJxBb0oE,GAEAd,KAAkBtzC,gBAAgBm0C","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as ES7 decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (type: Type<T>) => void,\n    typeFn?: (type: Type<T>, ...args: any[]) => void):\n    {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any;} {\n  const metaCtor = makeMetadataCtor(props);\n\n  function DecoratorFactory(...args: any[]): (cls: Type<T>) => any {\n    if (this instanceof DecoratorFactory) {\n      metaCtor.call(this, ...args);\n      return this;\n    }\n\n    const annotationInstance = new (DecoratorFactory as any)(...args);\n    return function TypeDecorator(cls: Type<T>) {\n      if (typeFn) typeFn(cls, ...args);\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n          (cls as any)[ANNOTATIONS] :\n          Object.defineProperty(cls, ANNOTATIONS, {value: []})[ANNOTATIONS];\n      annotations.push(annotationInstance);\n\n\n      if (additionalProcessing) additionalProcessing(cls);\n\n      return cls;\n    };\n  }\n\n  if (parentClass) {\n    DecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  DecoratorFactory.prototype.ngMetadataName = name;\n  (DecoratorFactory as any).annotationCls = DecoratorFactory;\n  return DecoratorFactory as any;\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  const metaCtor = makeMetadataCtor(props);\n  function ParamDecoratorFactory(...args: any[]): any {\n    if (this instanceof ParamDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n    (<any>ParamDecorator).annotation = annotationInstance;\n    return ParamDecorator;\n\n    function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const parameters = cls.hasOwnProperty(PARAMETERS) ?\n          (cls as any)[PARAMETERS] :\n          Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n      // there might be gaps if some in between parameters do not have annotations.\n      // we pad with nulls.\n      while (parameters.length <= index) {\n        parameters.push(null);\n      }\n\n      (parameters[index] = parameters[index] || []).push(annotationInstance);\n      return cls;\n    }\n  }\n  if (parentClass) {\n    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  ParamDecoratorFactory.prototype.ngMetadataName = name;\n  (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n  return ParamDecoratorFactory;\n}\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any {\n  const metaCtor = makeMetadataCtor(props);\n\n  function PropDecoratorFactory(...args: any[]): any {\n    if (this instanceof PropDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n\n    const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n    function PropDecorator(target: any, name: string) {\n      const constructor = target.constructor;\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n          (constructor as any)[PROP_METADATA] :\n          Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n      meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n      meta[name].unshift(decoratorInstance);\n\n      if (additionalProcessing) additionalProcessing(target, name, ...args);\n    }\n\n    return PropDecorator;\n  }\n\n  if (parentClass) {\n    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  PropDecoratorFactory.prototype.ngMetadataName = name;\n  (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n  return PropDecoratorFactory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {makeParamDecorator} from '../util/decorators';\n\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * A constructor parameter decorator that specifies a\n   * custom provider of a dependency.\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Inject'}\n   *\n   * When `@Inject()` is not present, the `Injector` uses the type annotation of the\n   * parameter as the provider.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * Injector token that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = makeParamDecorator('Inject', (token: any) => ({token}));\n\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * A constructor parameter decorator that marks a dependency as optional.\n   *\n   * The DI framework provides null if the dependency is not found.\n   * For example, the following code allows the possibility of a null result:\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator = makeParamDecorator('Optional');\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * to retrieve a dependency only from the local injector.\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   *\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator = makeParamDecorator('Self');\n\n\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * that dependency resolution should start from the parent injector.\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   *\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the SkipSelf metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator = makeParamDecorator('SkipSelf');\n\n/**\n * Type of the Host decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * to retrieve a dependency from any injector until\n   * reaching the host element of the current component.\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator = makeParamDecorator('Host');\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` like so:\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * ### Example as TypeScript Decorator\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   * ### Example as ES5 annotation\n   *\n   * ```\n   * var MyComponent = function(title) {\n   *   ...\n   * };\n   *\n   * MyComponent.annotations = [\n   *   new ng.Component({...})\n   * ]\n   * MyComponent.parameters = [\n   *   [new ng.Attribute('title')]\n   * ]\n   * ```\n   */\n  (name: string): any;\n  new (name: string): Attribute;\n}\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute { attributeName?: string; }\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Attribute: AttributeDecorator =\n    makeParamDecorator('Attribute', (attributeName?: string) => ({attributeName}));\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n  /** Don't ascend to ancestors of the node requesting injection. */\n  Self = 0b0010,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, ValueProvider} from './provider';\n\n\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectableDef<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any>|'root'|'any'|null;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: () => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T|undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorDef<T> {\n  factory: () => T;\n\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ngInjectableDef property for example).\n  providers: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n              StaticClassProvider|ClassProvider|any[])[];\n\n  imports: (InjectorType<any>|InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ngInjectableDef: never;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ngInjectorDef: never;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n               StaticClassProvider|ClassProvider|any[])[];\n}\n\n\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport function defineInjectable<T>(opts: {\n  providedIn?: Type<any>| 'root' | 'any' | null,\n  factory: () => T,\n}): never {\n  return ({\n    providedIn: opts.providedIn as any || null, factory: opts.factory, value: undefined,\n  } as InjectableDef<T>) as never;\n}\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport function defineInjector(options: {factory: () => any, providers?: any[], imports?: any[]}):\n    never {\n  return ({\n    factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n  } as InjectorDef<any>) as never;\n}\n\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport function getInjectableDef<T>(type: any): InjectableDef<T>|null {\n  return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? (type as any)[NG_INJECTABLE_DEF] : null;\n}\n\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport function getInjectorDef<T>(type: any): InjectorDef<T>|null {\n  return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? (type as any)[NG_INJECTOR_DEF] : null;\n}\n\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token instanceof Array) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn { (): any; }\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() { return stringify(this()); };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  const fn: any = type;\n  if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef) {\n    return fn();\n  } else {\n    return type;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\nconst _global: {[name: string]: any} = __global || __window || __self;\n\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {InjectableDef, getInjectableDef} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\n\n\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector | null | undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation: (<T>(token: Type<T>| InjectionToken<T>, flags: InjectFlags) => T | null)|\n    undefined;\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n    impl: (<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined):\n    (<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags) => T | null)|undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\nexport function injectInjectorOnly<T>(token: Type<T>| InjectionToken<T>): T;\nexport function injectInjectorOnly<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags): T|\n    null;\nexport function injectInjectorOnly<T>(\n    token: Type<T>| InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  if (_currentInjector === undefined) {\n    throw new Error(`inject() must be called from an injection context`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\n/**\n * Injects a token from the currently active injector.\n *\n * This function must be used in the context of a factory function such as one defined for an\n * `InjectionToken`, and will throw an error if not called from such a context.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * Within such a factory function `inject` is utilized to request injection of a dependency, instead\n * of providing an additional array of dependencies as was common to do with `useFactory` providers.\n * `inject` is faster and more type-safe.\n *\n * @publicApi\n */\nexport function inject<T>(token: Type<T>| InjectionToken<T>): T;\nexport function inject<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags): T|null;\nexport function inject<T>(token: Type<T>| InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport function injectRootLimpMode<T>(\n    token: Type<T>| InjectionToken<T>, notFoundValue: T | undefined, flags: InjectFlags): T|null {\n  const injectableDef: InjectableDef<T>|null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                                               injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n\nexport function injectArgs(types: (Type<any>| InjectionToken<any>| any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(inject(type !, flags));\n    } else {\n      args.push(inject(arg));\n    }\n  }\n  return args;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\nexport interface Type<T> extends Function { new (...args: any[]): T; }\n\nexport type Mutable<T extends{[x: string]: any}, K extends string> = {\n  [P in K]: T[P];\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {R3InjectableMetadataFacade, getCompilerFacade} from '../../compiler/compiler_facade';\nimport {Type} from '../../interface/type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {Injectable} from '../injectable';\nimport {NG_INJECTABLE_DEF} from '../interface/defs';\nimport {ClassSansProvider, ExistingSansProvider, FactorySansProvider, ValueProvider, ValueSansProvider} from '../interface/provider';\n\nimport {angularCoreDiEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, srcMeta?: Injectable): void {\n  let def: any = null;\n\n  // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n  if (type.hasOwnProperty(NG_INJECTABLE_DEF)) return;\n\n  Object.defineProperty(type, NG_INJECTABLE_DEF, {\n    get: () => {\n      if (def === null) {\n        // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n        const meta: Injectable = srcMeta || {providedIn: null};\n        const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n            isUseValueProvider(meta) || isUseExistingProvider(meta);\n\n\n        const compilerMeta: R3InjectableMetadataFacade = {\n          name: type.name,\n          type: type,\n          typeArgumentCount: 0,\n          providedIn: meta.providedIn,\n          ctorDeps: reflectDependencies(type),\n          userDeps: undefined\n        };\n        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n          compilerMeta.userDeps = convertDependencies(meta.deps);\n        }\n        if (!hasAProvider) {\n          // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n          // The deps will have been reflected above, causing the factory to create the class by\n          // calling\n          // its constructor with injected deps.\n          compilerMeta.useClass = type;\n        } else if (isUseClassProvider(meta)) {\n          // The user explicitly specified useClass, and may or may not have provided deps.\n          compilerMeta.useClass = meta.useClass;\n        } else if (isUseValueProvider(meta)) {\n          // The user explicitly specified useValue.\n          compilerMeta.useValue = meta.useValue;\n        } else if (isUseFactoryProvider(meta)) {\n          // The user explicitly specified useFactory.\n          compilerMeta.useFactory = meta.useFactory;\n        } else if (isUseExistingProvider(meta)) {\n          // The user explicitly specified useExisting.\n          compilerMeta.useExisting = meta.useExisting;\n        } else {\n          // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n          throw new Error(`Unreachable state.`);\n        }\n        def = getCompilerFacade().compileInjectable(\n            angularCoreDiEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n      }\n      return def;\n    },\n  });\n}\n\ntype UseClassProvider = Injectable & ClassSansProvider & {deps?: any[]};\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable&ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable&FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable&ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {inject, injectArgs} from './injector_compatibility';\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './interface/provider';\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\nconst EMPTY_ARRAY: any[] = [];\n\nexport function convertInjectableProviderToFactory(\n    type: Type<any>, provider?: ValueSansProvider | ExistingSansProvider | StaticClassSansProvider |\n        ConstructorSansProvider | FactorySansProvider | ClassSansProvider): () => any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\n\nimport {defineInjectable} from './interface/defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ngInjectableDef: never|undefined;\n\n  constructor(protected _desc: string, options?: {\n    providedIn?: Type<any>| 'root' | null,\n    factory: () => T\n  }) {\n    this.ngInjectableDef = undefined;\n    if (typeof options == 'number') {\n      // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.\n      // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.\n      // We are using it to assign `-1` which is used to identify `Injector`.\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ngInjectableDef = defineInjectable({\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  toString(): string { return `InjectionToken ${this._desc}`; }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> { ngInjectableDef: never; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../interface/type';\nimport {getClosureSafeProperty} from '../util/property';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {inject} from './injector_compatibility';\nimport {defineInjectable} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, ValueProvider} from './interface/provider';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\n\nexport const SOURCE = '__source';\nconst _THROW_IF_NOT_FOUND = new Object();\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>(\n    'INJECTOR',\n    -1 as any  // `-1` is used by Ivy DI system as special value to recognize it as `Injector`.\n    );\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n      // reason why correctly written application should cause this exception.\n      // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n      // if(ngDevMode) debugger;\n      throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new NullInjector();\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;\n\n  /**\n   * Create a new Injector which is configure using `StaticProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n   */\n  static create(\n      options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},\n      parent?: Injector): Injector {\n    if (Array.isArray(options)) {\n      return new StaticInjector(options, parent);\n    } else {\n      return new StaticInjector(options.providers, options.parent, options.name || null);\n    }\n  }\n\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable({\n    providedIn: 'any' as any,\n    factory: () => inject(INJECTOR),\n  });\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__ = -1;\n}\n\n\n\nconst IDENT = function<T>(value: T): T {\n  return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function(): any[] {\n  return Array.prototype.slice.call(arguments);\n};\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst enum OptionFlags {\n  Optional = 1 << 0,\n  CheckSelf = 1 << 1,\n  CheckParent = 1 << 2,\n  Default = CheckSelf | CheckParent\n}\nconst NULL_INJECTOR = Injector.NULL;\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'Éµ';\n\nexport class StaticInjector implements Injector {\n  readonly parent: Injector;\n  readonly source: string|null;\n\n  private _records: Map<any, Record>;\n\n  constructor(\n      providers: StaticProvider[], parent: Injector = NULL_INJECTOR, source: string|null = null) {\n    this.parent = parent;\n    this.source = source;\n    const records = this._records = new Map<any, Record>();\n    records.set(\n        Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    records.set(\n        INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    recursivelyProcessProviders(records, providers);\n  }\n\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n    const record = this._records.get(token);\n    try {\n      return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n    } catch (e) {\n      const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n      if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n      }\n      e.message = formatError('\\n' + e.message, tokenPath, this.source);\n      e[NG_TOKEN_PATH] = tokenPath;\n      e[NG_TEMP_TOKEN_PATH] = null;\n      throw e;\n    }\n  }\n\n  toString() {\n    const tokens = <string[]>[], records = this._records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `StaticInjector[${tokens.join(', ')}]`;\n  }\n}\n\ntype SupportedProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider;\n\ninterface Record {\n  fn: Function;\n  useNew: boolean;\n  deps: DependencyRecord[];\n  value: any;\n}\n\ninterface DependencyRecord {\n  token: any;\n  options: number;\n}\n\ntype TokenPath = Array<any>;\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n  const deps = computeDeps(provider);\n  let fn: Function = IDENT;\n  let value: any = EMPTY;\n  let useNew: boolean = false;\n  let provide = resolveForwardRef(provider.provide);\n  if (USE_VALUE in provider) {\n    // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n    value = (provider as ValueProvider).useValue;\n  } else if ((provider as FactoryProvider).useFactory) {\n    fn = (provider as FactoryProvider).useFactory;\n  } else if ((provider as ExistingProvider).useExisting) {\n    // Just use IDENT\n  } else if ((provider as StaticClassProvider).useClass) {\n    useNew = true;\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n  } else if (typeof provide == 'function') {\n    useNew = true;\n    fn = provide;\n  } else {\n    throw staticError(\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\n        provider);\n  }\n  return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n  return staticError('Cannot mix multi providers and regular providers', token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider) {\n  if (provider) {\n    provider = resolveForwardRef(provider);\n    if (provider instanceof Array) {\n      // if we have an array recurse into the array\n      for (let i = 0; i < provider.length; i++) {\n        recursivelyProcessProviders(records, provider[i]);\n      }\n    } else if (typeof provider === 'function') {\n      // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n      // error messages\n      throw staticError('Function/Class not supported', provider);\n    } else if (provider && typeof provider === 'object' && provider.provide) {\n      // At this point we have what looks like a provider: {provide: ?, ....}\n      let token = resolveForwardRef(provider.provide);\n      const resolvedProvider = resolveProvider(provider);\n      if (provider.multi === true) {\n        // This is a multi provider.\n        let multiProvider: Record|undefined = records.get(token);\n        if (multiProvider) {\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n            throw multiProviderMixError(token);\n          }\n        } else {\n          // Create a placeholder factory which will look up the constituents of the multi provider.\n          records.set(token, multiProvider = <Record>{\n            token: provider.provide,\n            deps: [],\n            useNew: false,\n            fn: MULTI_PROVIDER_FN,\n            value: EMPTY\n          });\n        }\n        // Treat the provider as the token.\n        token = provider;\n        multiProvider.deps.push({token, options: OptionFlags.Default});\n      }\n      const record = records.get(token);\n      if (record && record.fn == MULTI_PROVIDER_FN) {\n        throw multiProviderMixError(token);\n      }\n      records.set(token, resolvedProvider);\n    } else {\n      throw staticError('Unexpected provider', provider);\n    }\n  }\n}\n\nfunction tryResolveToken(\n    token: any, record: Record | undefined, records: Map<any, Record>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  try {\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\n  } catch (e) {\n    // ensure that 'e' is of type Error.\n    if (!(e instanceof Error)) {\n      e = new Error(e);\n    }\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n    path.unshift(token);\n    if (record && record.value == CIRCULAR) {\n      // Reset the Circular flag.\n      record.value = EMPTY;\n    }\n    throw e;\n  }\n}\n\nfunction resolveToken(\n    token: any, record: Record | undefined, records: Map<any, Record>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  let value;\n  if (record && !(flags & InjectFlags.SkipSelf)) {\n    // If we don't have a record, this implies that we don't own the provider hence don't know how\n    // to resolve it.\n    value = record.value;\n    if (value == CIRCULAR) {\n      throw Error(NO_NEW_LINE + 'Circular dependency');\n    } else if (value === EMPTY) {\n      record.value = CIRCULAR;\n      let obj = undefined;\n      let useNew = record.useNew;\n      let fn = record.fn;\n      let depRecords = record.deps;\n      let deps = EMPTY;\n      if (depRecords.length) {\n        deps = [];\n        for (let i = 0; i < depRecords.length; i++) {\n          const depRecord: DependencyRecord = depRecords[i];\n          const options = depRecord.options;\n          const childRecord =\n              options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n          deps.push(tryResolveToken(\n              // Current Token to resolve\n              depRecord.token,\n              // A record which describes how to resolve the token.\n              // If undefined, this means we don't have such a record\n              childRecord,\n              // Other records we know about.\n              records,\n              // If we don't know how to resolve dependency and we should not check parent for it,\n              // than pass in Null injector.\n              !childRecord && !(options & OptionFlags.CheckParent) ? NULL_INJECTOR : parent,\n              options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n              InjectFlags.Default));\n        }\n      }\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(obj, deps);\n    }\n  } else if (!(flags & InjectFlags.Self)) {\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\n  }\n  return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n  let deps: DependencyRecord[] = EMPTY;\n  const providerDeps: any[] =\n      (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n  if (providerDeps && providerDeps.length) {\n    deps = [];\n    for (let i = 0; i < providerDeps.length; i++) {\n      let options = OptionFlags.Default;\n      let token = resolveForwardRef(providerDeps[i]);\n      if (token instanceof Array) {\n        for (let j = 0, annotations = token; j < annotations.length; j++) {\n          const annotation = annotations[j];\n          if (annotation instanceof Optional || annotation == Optional) {\n            options = options | OptionFlags.Optional;\n          } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n            options = options & ~OptionFlags.CheckSelf;\n          } else if (annotation instanceof Self || annotation == Self) {\n            options = options & ~OptionFlags.CheckParent;\n          } else if (annotation instanceof Inject) {\n            token = (annotation as Inject).token;\n          } else {\n            token = resolveForwardRef(annotation);\n          }\n        }\n      }\n      deps.push({token, options});\n    }\n  } else if ((provider as ExistingProvider).useExisting) {\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n    deps = [{token, options: OptionFlags.Default}];\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\n    throw staticError('\\'deps\\' required', provider);\n  }\n  return deps;\n}\n\nfunction formatError(text: string, obj: any, source: string | null = null): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  let context = stringify(obj);\n  if (obj instanceof Array) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `StaticInjectorError${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\nfunction staticError(text: string, obj: any): Error {\n  return new Error(formatError(text, obj));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const ERROR_TYPE = 'ngType';\nexport const ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const ERROR_LOGGER = 'ngErrorLogger';\n\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './injection_token';\n\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport const APP_ROOT = new InjectionToken<boolean>(\n    'The presence of this token marks an injector as being the root injector.');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OnDestroy} from '../interface/lifecycle_hooks';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {INJECTOR, Injector, NullInjector, THROW_IF_NOT_FOUND, USE_VALUE} from './injector';\nimport {inject, injectArgs, setCurrentInjector} from './injector_compatibility';\nimport {InjectableDef, InjectableType, InjectorType, InjectorTypeWithProviders, getInjectableDef, getInjectorDef} from './interface/defs';\nimport {InjectFlags} from './interface/injector';\nimport {ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, TypeProvider, ValueProvider} from './interface/provider';\nimport {APP_ROOT} from './scope';\n\n\n\n/**\n * Internal type for a single provider in a deep provider array.\n */\ntype SingleProvider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider |\n    ExistingProvider | FactoryProvider | StaticClassProvider;\n\n/**\n * Marker which indicates that a value has not yet been created from the factory function.\n */\nconst NOT_YET = {};\n\n/**\n * Marker which indicates that the factory function for a token is in the process of being called.\n *\n * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates\n * injection of a dependency has recursively attempted to inject the original token, and there is\n * a circular dependency among the providers.\n */\nconst CIRCULAR = {};\n\nconst EMPTY_ARRAY = [] as any[];\n\n/**\n * A lazily initialized NullInjector.\n */\nlet NULL_INJECTOR: Injector|undefined = undefined;\n\nfunction getNullInjector(): Injector {\n  if (NULL_INJECTOR === undefined) {\n    NULL_INJECTOR = new NullInjector();\n  }\n  return NULL_INJECTOR;\n}\n\n/**\n * An entry in the injector which tracks information about the given token, including a possible\n * current value.\n */\ninterface Record<T> {\n  factory: (() => T)|undefined;\n  value: T|{};\n  multi: any[]|undefined;\n}\n\n/**\n * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.\n *\n * @publicApi\n */\nexport function createInjector(\n    defType: /* InjectorType<any> */ any, parent: Injector | null = null,\n    additionalProviders: StaticProvider[] | null = null): Injector {\n  parent = parent || getNullInjector();\n  return new R3Injector(defType, additionalProviders, parent);\n}\n\nexport class R3Injector {\n  /**\n   * Map of tokens to records which contain the instances of those tokens.\n   */\n  private records = new Map<Type<any>|InjectionToken<any>, Record<any>>();\n\n  /**\n   * The transitive set of `InjectorType`s which define this injector.\n   */\n  private injectorDefTypes = new Set<InjectorType<any>>();\n\n  /**\n   * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.\n   */\n  private onDestroy = new Set<OnDestroy>();\n\n  /**\n   * Flag indicating this injector provides the APP_ROOT_SCOPE token, and thus counts as the\n   * root scope.\n   */\n  private readonly isRootInjector: boolean;\n\n  /**\n   * Flag indicating that this injector was previously destroyed.\n   */\n  private destroyed = false;\n\n  constructor(\n      def: InjectorType<any>, additionalProviders: StaticProvider[]|null,\n      readonly parent: Injector) {\n    // Start off by creating Records for every provider declared in every InjectorType\n    // included transitively in `def`.\n    const dedupStack: InjectorType<any>[] = [];\n    deepForEach([def], injectorDef => this.processInjectorType(injectorDef, [], dedupStack));\n\n    additionalProviders && deepForEach(\n                               additionalProviders, provider => this.processProvider(\n                                                        provider, def, additionalProviders));\n\n\n    // Make sure the INJECTOR token provides this injector.\n    this.records.set(INJECTOR, makeRecord(undefined, this));\n\n    // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide\n    // any injectable scoped to APP_ROOT_SCOPE.\n    this.isRootInjector = this.records.has(APP_ROOT);\n\n    // Eagerly instantiate the InjectorType classes themselves.\n    this.injectorDefTypes.forEach(defType => this.get(defType));\n  }\n\n  /**\n   * Destroy the injector and release references to every instance or provider associated with it.\n   *\n   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a\n   * hook was found.\n   */\n  destroy(): void {\n    this.assertNotDestroyed();\n\n    // Set destroyed = true first, in case lifecycle hooks re-enter destroy().\n    this.destroyed = true;\n    try {\n      // Call all the lifecycle hooks.\n      this.onDestroy.forEach(service => service.ngOnDestroy());\n    } finally {\n      // Release all references.\n      this.records.clear();\n      this.onDestroy.clear();\n      this.injectorDefTypes.clear();\n    }\n  }\n\n  get<T>(\n      token: Type<T>|InjectionToken<T>, notFoundValue: any = THROW_IF_NOT_FOUND,\n      flags = InjectFlags.Default): T {\n    this.assertNotDestroyed();\n    // Set the injection context.\n    const previousInjector = setCurrentInjector(this);\n    try {\n      // Check for the SkipSelf flag.\n      if (!(flags & InjectFlags.SkipSelf)) {\n        // SkipSelf isn't set, check if the record belongs to this injector.\n        let record: Record<T>|undefined = this.records.get(token);\n        if (record === undefined) {\n          // No record, but maybe the token is scoped to this injector. Look for an ngInjectableDef\n          // with a scope matching this injector.\n          const def = couldBeInjectableType(token) && getInjectableDef(token);\n          if (def && this.injectableDefInScope(def)) {\n            // Found an ngInjectableDef and it's scoped to this injector. Pretend as if it was here\n            // all along.\n            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);\n            this.records.set(token, record);\n          }\n        }\n        // If a record was found, get the instance for it and return it.\n        if (record !== undefined) {\n          return this.hydrate(token, record);\n        }\n      }\n\n      // Select the next injector based on the Self flag - if self is set, the next injector is\n      // the NullInjector, otherwise it's the parent.\n      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();\n      return nextInjector.get(token, notFoundValue);\n    } finally {\n      // Lastly, clean up the state by restoring the previous injector.\n      setCurrentInjector(previousInjector);\n    }\n  }\n\n  private assertNotDestroyed(): void {\n    if (this.destroyed) {\n      throw new Error('Injector has already been destroyed.');\n    }\n  }\n\n  /**\n   * Add an `InjectorType` or `InjectorDefTypeWithProviders` and all of its transitive providers\n   * to this injector.\n   */\n  private processInjectorType(\n      defOrWrappedDef: InjectorType<any>|InjectorTypeWithProviders<any>,\n      parents: InjectorType<any>[], dedupStack: InjectorType<any>[]) {\n    defOrWrappedDef = resolveForwardRef(defOrWrappedDef);\n    if (!defOrWrappedDef) return;\n\n    // Either the defOrWrappedDef is an InjectorType (with ngInjectorDef) or an\n    // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic\n    // read, so care is taken to only do the read once.\n\n    // First attempt to read the ngInjectorDef.\n    let def = getInjectorDef(defOrWrappedDef);\n\n    // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.\n    const ngModule =\n        (def == null) && (defOrWrappedDef as InjectorTypeWithProviders<any>).ngModule || undefined;\n\n    // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,\n    // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type\n    // is the `ngModule`.\n    const defType: InjectorType<any> =\n        (ngModule === undefined) ? (defOrWrappedDef as InjectorType<any>) : ngModule;\n\n    // Check for circular dependencies.\n    if (ngDevMode && parents.indexOf(defType) !== -1) {\n      const defName = stringify(defType);\n      throw new Error(\n          `Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map(defType => stringify(defType)).join(' > ')} > ${defName}.`);\n    }\n\n    // Check for multiple imports of the same module\n    const isDuplicate = dedupStack.indexOf(defType) !== -1;\n\n    // If defOrWrappedType was an InjectorDefTypeWithProviders, then .providers may hold some\n    // extra providers.\n    const providers =\n        (ngModule !== undefined) && (defOrWrappedDef as InjectorTypeWithProviders<any>).providers ||\n        EMPTY_ARRAY;\n\n    // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual\n    // `InjectorDef` is on its `ngModule`.\n    if (ngModule !== undefined) {\n      def = getInjectorDef(ngModule);\n    }\n\n    // If no definition was found, it might be from exports. Remove it.\n    if (def == null) {\n      return;\n    }\n\n    // Track the InjectorType and add a provider for it.\n    this.injectorDefTypes.add(defType);\n    this.records.set(defType, makeRecord(def.factory, NOT_YET));\n\n    // Add providers in the same way that @NgModule resolution did:\n\n    // First, include providers from any imports.\n    if (def.imports != null && !isDuplicate) {\n      // Before processing defType's imports, add it to the set of parents. This way, if it ends\n      // up deeply importing itself, this can be detected.\n      ngDevMode && parents.push(defType);\n      // Add it to the set of dedups. This way we can detect multiple imports of the same module\n      dedupStack.push(defType);\n\n      try {\n        deepForEach(\n            def.imports, imported => this.processInjectorType(imported, parents, dedupStack));\n      } finally {\n        // Remove it from the parents set when finished.\n        ngDevMode && parents.pop();\n      }\n    }\n\n    // Next, include providers listed on the definition itself.\n    const defProviders = def.providers;\n    if (defProviders != null && !isDuplicate) {\n      const injectorType = defOrWrappedDef as InjectorType<any>;\n      deepForEach(\n          defProviders, provider => this.processProvider(provider, injectorType, defProviders));\n    }\n\n    // Finally, include providers from an InjectorDefTypeWithProviders if there was one.\n    const ngModuleType = (defOrWrappedDef as InjectorTypeWithProviders<any>).ngModule;\n    deepForEach(providers, provider => this.processProvider(provider, ngModuleType, providers));\n  }\n\n  /**\n   * Process a `SingleProvider` and add it.\n   */\n  private processProvider(\n      provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): void {\n    // Determine the token from the provider. Either it's its own token, or has a {provide: ...}\n    // property.\n    provider = resolveForwardRef(provider);\n    let token: any =\n        isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);\n\n    // Construct a `Record` for the provider.\n    const record = providerToRecord(provider, ngModuleType, providers);\n\n    if (!isTypeProvider(provider) && provider.multi === true) {\n      // If the provider indicates that it's a multi-provider, process it specially.\n      // First check whether it's been defined already.\n      let multiRecord = this.records.get(token);\n      if (multiRecord) {\n        // It has. Throw a nice error if\n        if (multiRecord.multi === undefined) {\n          throw new Error(`Mixed multi-provider for ${token}.`);\n        }\n      } else {\n        multiRecord = makeRecord(undefined, NOT_YET, true);\n        multiRecord.factory = () => injectArgs(multiRecord !.multi !);\n        this.records.set(token, multiRecord);\n      }\n      token = provider;\n      multiRecord.multi !.push(provider);\n    } else {\n      const existing = this.records.get(token);\n      if (existing && existing.multi !== undefined) {\n        throw new Error(`Mixed multi-provider for ${stringify(token)}`);\n      }\n    }\n    this.records.set(token, record);\n  }\n\n  private hydrate<T>(token: Type<T>|InjectionToken<T>, record: Record<T>): T {\n    if (record.value === CIRCULAR) {\n      throw new Error(`Cannot instantiate cyclic dependency! ${stringify(token)}`);\n    } else if (record.value === NOT_YET) {\n      record.value = CIRCULAR;\n      record.value = record.factory !();\n    }\n    if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {\n      this.onDestroy.add(record.value);\n    }\n    return record.value as T;\n  }\n\n  private injectableDefInScope(def: InjectableDef<any>): boolean {\n    if (!def.providedIn) {\n      return false;\n    } else if (typeof def.providedIn === 'string') {\n      return def.providedIn === 'any' || (def.providedIn === 'root' && this.isRootInjector);\n    } else {\n      return this.injectorDefTypes.has(def.providedIn);\n    }\n  }\n}\n\nfunction injectableDefOrInjectorDefFactory(token: Type<any>| InjectionToken<any>): () => any {\n  const injectableDef = getInjectableDef(token as InjectableType<any>);\n  if (injectableDef === null) {\n    const injectorDef = getInjectorDef(token as InjectorType<any>);\n    if (injectorDef !== null) {\n      return injectorDef.factory;\n    } else if (token instanceof InjectionToken) {\n      throw new Error(`Token ${stringify(token)} is missing an ngInjectableDef definition.`);\n    } else if (token instanceof Function) {\n      const paramLength = token.length;\n      if (paramLength > 0) {\n        const args: string[] = new Array(paramLength).fill('?');\n        throw new Error(\n            `Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);\n      }\n      return () => new (token as Type<any>)();\n    }\n    throw new Error('unreachable');\n  }\n  return injectableDef.factory;\n}\n\nfunction providerToRecord(\n    provider: SingleProvider, ngModuleType: InjectorType<any>, providers: any[]): Record<any> {\n  let factory: (() => any)|undefined = providerToFactory(provider, ngModuleType, providers);\n  if (isValueProvider(provider)) {\n    return makeRecord(undefined, provider.useValue);\n  } else {\n    return makeRecord(factory, NOT_YET);\n  }\n}\n\n/**\n * Converts a `SingleProvider` into a factory function.\n *\n * @param provider provider to convert to factory\n */\nexport function providerToFactory(\n    provider: SingleProvider, ngModuleType?: InjectorType<any>, providers?: any[]): () => any {\n  let factory: (() => any)|undefined = undefined;\n  if (isTypeProvider(provider)) {\n    return injectableDefOrInjectorDefFactory(resolveForwardRef(provider));\n  } else {\n    if (isValueProvider(provider)) {\n      factory = () => resolveForwardRef(provider.useValue);\n    } else if (isExistingProvider(provider)) {\n      factory = () => inject(resolveForwardRef(provider.useExisting));\n    } else if (isFactoryProvider(provider)) {\n      factory = () => provider.useFactory(...injectArgs(provider.deps || []));\n    } else {\n      const classRef = resolveForwardRef(\n          provider &&\n          ((provider as StaticClassProvider | ClassProvider).useClass || provider.provide));\n      if (!classRef) {\n        let ngModuleDetail = '';\n        if (ngModuleType && providers) {\n          const providerDetail = providers.map(v => v == provider ? '?' + provider + '?' : '...');\n          ngModuleDetail =\n              ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;\n        }\n        throw new Error(\n            `Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);\n      }\n      if (hasDeps(provider)) {\n        factory = () => new (classRef)(...injectArgs(provider.deps));\n      } else {\n        return injectableDefOrInjectorDefFactory(classRef);\n      }\n    }\n  }\n  return factory;\n}\n\nfunction makeRecord<T>(\n    factory: (() => T) | undefined, value: T | {}, multi: boolean = false): Record<T> {\n  return {\n    factory: factory,\n    value: value,\n    multi: multi ? [] : undefined,\n  };\n}\n\nfunction deepForEach<T>(input: (T | any[])[], fn: (value: T) => void): void {\n  input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));\n}\n\nfunction isValueProvider(value: SingleProvider): value is ValueProvider {\n  return value && typeof value == 'object' && USE_VALUE in value;\n}\n\nfunction isExistingProvider(value: SingleProvider): value is ExistingProvider {\n  return !!(value && (value as ExistingProvider).useExisting);\n}\n\nfunction isFactoryProvider(value: SingleProvider): value is FactoryProvider {\n  return !!(value && (value as FactoryProvider).useFactory);\n}\n\nexport function isTypeProvider(value: SingleProvider): value is TypeProvider {\n  return typeof value === 'function';\n}\n\nfunction hasDeps(value: ClassProvider | ConstructorProvider | StaticClassProvider):\n    value is ClassProvider&{deps: any[]} {\n  return !!(value as any).deps;\n}\n\nfunction hasOnDestroy(value: any): value is OnDestroy {\n  return typeof value === 'object' && value != null && (value as OnDestroy).ngOnDestroy &&\n      typeof(value as OnDestroy).ngOnDestroy === 'function';\n}\n\nfunction couldBeInjectableType(value: any): value is Type<any>|InjectionToken<any> {\n  return (typeof value === 'function') ||\n      (typeof value === 'object' && value instanceof InjectionToken);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../interface/type';\nimport {makePropDecorator} from '../util/decorators';\n\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n *\n * @usageNotes\n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * Configures a content query.\n   *\n   * You can use ContentChildren to get the `QueryList` of elements or directives from the\n   * content DOM. Any time a child element is added, removed, or moved, the query list will be\n   * updated, and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **descendants** - include only direct children or all descendants.\n   * * **read** - read a different token from the queried elements.\n   *\n   * @usageNotes\n   * ### Basic Example\n   *\n   * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * ### Tab-pane Example\n   *\n   * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n   * can be used to implement a tab pane component.\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: false, isViewQuery: false, descendants: false, ...data}),\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n  /**\n   * Configures a content query.\n   *\n   * You can use ContentChild to get the first element or the directive matching the selector from\n   * the content DOM. If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried element.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @see `ContentChild`.\n *\n * @publicApi\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * Configures a view query.\n   *\n   * You can use ViewChildren to get the `QueryList` of elements or directives from the\n   * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   * The change detector looks for the first element or the directive matching the selector\n   * in the view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property is updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Supported selectors include:\n   *   * any class with the `@Component` or `@Directive` decorator\n   *   * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>`\n   * with `@ViewChild('cmp')`)\n   *   * any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChild(SomeService) someService: SomeService`)\n   *   * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n   * any`)\n   *   * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n   * template;`)\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../../di/injection_token';\nimport {InjectFlags} from '../../di/interface/injector';\nimport {Type} from '../../interface/type';\n\nimport {TElementNode} from './node';\nimport {LView, TData} from './view';\n\nexport const TNODE = 8;\nexport const PARENT_INJECTOR = 8;\nexport const INJECTOR_BLOOM_PARENT_SIZE = 9;\n\n/**\n * Represents a relative location of parent injector.\n *\n * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`\n * pointing to the parent injector.\n */\nexport interface RelativeInjectorLocation { __brand__: 'RelativeInjectorLocationFlags'; }\n\nexport const enum RelativeInjectorLocationFlags {\n  InjectorIndexMask = 0b111111111111111,\n  ViewOffsetShift = 16,\n  NO_PARENT = -1,\n}\n\nexport const NO_PARENT_INJECTOR: RelativeInjectorLocation = -1 as any;\n\n/**\n * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in\n * `TView.data`. This allows us to store information about the current node's tokens (which\n * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be\n * shared, so they live in `LView`).\n *\n * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter\n * determines whether a directive is available on the associated node or not. This prevents us\n * from searching the directives array at this level unless it's probable the directive is in it.\n *\n * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.\n *\n * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed\n * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`\n * will differ based on where it is flattened into the main array, so it's not possible to know\n * the indices ahead of time and save their types here. The interfaces are still included here\n * for documentation purposes.\n *\n * export interface LInjector extends Array<any> {\n *\n *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Cumulative bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Cumulative bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Cumulative bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Cumulative bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Cumulative bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Cumulative bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Cumulative bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // We need to store a reference to the injector's parent so DI can keep looking up\n *    // the injector tree until it finds the dependency it's looking for.\n *    [PARENT_INJECTOR]: number;\n * }\n *\n * export interface TInjector extends Array<any> {\n *\n *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)\n *    [0]: number;\n *\n *    // Shared node bloom for directive IDs 32-63\n *    [1]: number;\n *\n *    // Shared node bloom for directive IDs 64-95\n *    [2]: number;\n *\n *    // Shared node bloom for directive IDs 96-127\n *    [3]: number;\n *\n *    // Shared node bloom for directive IDs 128-159\n *    [4]: number;\n *\n *    // Shared node bloom for directive IDs 160 - 191\n *    [5]: number;\n *\n *    // Shared node bloom for directive IDs 192 - 223\n *    [6]: number;\n *\n *    // Shared node bloom for directive IDs 224 - 255\n *    [7]: number;\n *\n *    // Necessary to find directive indices for a particular node.\n *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;\n *  }\n */\n\n/**\n* Factory for creating instances of injectors in the NodeInjector.\n*\n* This factory is complicated by the fact that it can resolve `multi` factories as well.\n*\n* NOTE: Some of the fields are optional which means that this class has two hidden classes.\n* - One without `multi` support (most common)\n* - One with `multi` values, (rare).\n*\n* Since VMs can cache up to 4 inline hidden classes this is OK.\n*\n* - Single factory: Only `resolving` and `factory` is defined.\n* - `providers` factory: `componentProviders` is a number and `index = -1`.\n* - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.\n*/\nexport class NodeInjectorFactory {\n  /**\n   * The inject implementation to be activated when using the factory.\n   */\n  injectImpl: null|(<T>(token: Type<T>|InjectionToken<T>, flags: InjectFlags) => T);\n\n  /**\n   * Marker set to true during factory invocation to see if we get into recursive loop.\n   * Recursive loop causes an error to be displayed.\n   */\n  resolving = false;\n\n  /**\n   * Marks that the token can see other Tokens declared in `viewProviders` on the same node.\n   */\n  canSeeViewProviders: boolean;\n\n  /**\n   * An array of factories to use in case of `multi` provider.\n   */\n  multi?: Array<() => any>;\n\n  /**\n   * Number of `multi`-providers which belong to the component.\n   *\n   * This is needed because when multiple components and directives declare the `multi` provider\n   * they have to be concatenated in the correct order.\n   *\n   * Example:\n   *\n   * If we have a component and directive active an a single element as declared here\n   * ```\n   * component:\n   *   provides: [ {provide: String, useValue: 'component', multi: true} ],\n   *   viewProvides: [ {provide: String, useValue: 'componentView', multi: true} ],\n   *\n   * directive:\n   *   provides: [ {provide: String, useValue: 'directive', multi: true} ],\n   * ```\n   *\n   * Then the expected results are:\n   *\n   * ```\n   * providers: ['component', 'directive']\n   * viewProviders: ['component', 'componentView', 'directive']\n   * ```\n   *\n   * The way to think about it is that the `viewProviders` have been inserted after the component\n   * but before the directives, which is why we need to know how many `multi`s have been declared by\n   * the component.\n   */\n  componentProviders?: number;\n\n  /**\n   * Current index of the Factory in the `data`. Needed for `viewProviders` and `providers` merging.\n   * See `providerFactory`.\n   */\n  index?: number;\n\n  /**\n   * Because the same `multi` provider can be declared in `provides` and `viewProvides` it is\n   * possible for `viewProvides` to shadow the `provides`. For this reason we store the\n   * `provideFactory` of the `providers` so that `providers` can be extended with `viewProviders`.\n   *\n   * Example:\n   *\n   * Given:\n   * ```\n   * provides: [ {provide: String, useValue: 'all', multi: true} ],\n   * viewProvides: [ {provide: String, useValue: 'viewOnly', multi: true} ],\n   * ```\n   *\n   * We have to return `['all']` in case of content injection, but `['all', 'viewOnly']` in case\n   * of view injection. We further have to make sure that the shared instances (in our case\n   * `all`) are the exact same instance in both the content as well as the view injection. (We\n   * have to make sure that we don't double instantiate.) For this reason the `viewProvides`\n   * `Factory` has a pointer to the shadowed `provides` factory so that it can instantiate the\n   * `providers` (`['all']`) and then extend it with `viewProviders` (`['all'] + ['viewOnly'] =\n   * ['all', 'viewOnly']`).\n   */\n  providerFactory?: NodeInjectorFactory|null;\n\n\n  constructor(\n      /**\n       * Factory to invoke in order to create a new instance.\n       */\n      public factory:\n          (this: NodeInjectorFactory, _: null,\n           /**\n            * array where injectables tokens are stored. This is used in\n            * case of an error reporting to produce friendlier errors.\n            */\n           tData: TData,\n           /**\n            * array where existing instances of injectables are stored. This is used in case\n            * of multi shadow is needed. See `multi` field documentation.\n            */\n           lView: LView,\n           /**\n            * The TNode of the same element injector.\n            */\n           tNode: TElementNode) => any,\n      /**\n       * Set to `true` if the token is declared in `viewProviders` (or if it is component).\n       */\n      isViewProvider: boolean,\n      /**\n       * Set to `true` if the token is a provider, and not a directive.\n       */\n      public isProvider: boolean,\n      injectImplementation: null|(<T>(token: Type<T>|InjectionToken<T>, flags: InjectFlags) => T)) {\n    this.canSeeViewProviders = isViewProvider;\n    this.injectImpl = injectImplementation;\n  }\n}\n\nconst FactoryPrototype = NodeInjectorFactory.prototype;\nexport function isFactory(obj: any): obj is NodeInjectorFactory {\n  // See: https://jsperf.com/instanceof-vs-getprototypeof\n  return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == FactoryPrototype;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @publicApi\n */\nexport enum ChangeDetectionStrategy {\n  /**\n   * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated\n   * until reactivated by setting the strategy to `Default` (`CheckAlways`).\n   * Change detection can still be explicitly invoked.\n   */\n  OnPush = 0,\n\n  /**\n   * Use the default `CheckAlways` strategy, in which change detection is automatic until\n   * explicitly deactivated.\n   */\n  Default = 1,\n}\n\n/**\n * Defines the possible states of the default change detector.\n * @see `ChangeDetectorRef`\n */\nexport enum ChangeDetectorStatus {\n  /**\n   * A state in which, after calling `detectChanges()`, the change detector\n   * state becomes `Checked`, and must be explicitly invoked or reactivated.\n   */\n  CheckOnce,\n\n  /**\n   * A state in which change detection is skipped until the change detector mode\n   * becomes `CheckOnce`.\n   */\n  Checked,\n\n  /**\n   * A state in which change detection continues automatically until explicitly\n   * deactivated.\n   */\n  CheckAlways,\n\n  /**\n   * A state in which a change detector sub tree is not a part of the main tree and\n   * should be skipped.\n   */\n  Detached,\n\n  /**\n   * Indicates that the change detector encountered an error checking a binding\n   * or calling a directive lifecycle method and is now in an inconsistent state. Change\n   * detectors in this state do not detect changes.\n   */\n  Errored,\n\n  /**\n   * Indicates that the change detector has been destroyed.\n   */\n  Destroyed,\n}\n\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see `ChangeDetectorStatus`\n * @see `ChangeDetectorRef`\n */\nexport function isDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy):\n    boolean {\n  return changeDetectionStrategy == null ||\n      changeDetectionStrategy === ChangeDetectionStrategy.Default;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMPONENT_DEF = getClosureSafeProperty({ngComponentDef: getClosureSafeProperty});\nexport const NG_DIRECTIVE_DEF = getClosureSafeProperty({ngDirectiveDef: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ngPipeDef: getClosureSafeProperty});\nexport const NG_MODULE_DEF = getClosureSafeProperty({ngModuleDef: getClosureSafeProperty});\nexport const NG_BASE_DEF = getClosureSafeProperty({ngBaseDef: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\n// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Defines template and style encapsulation options available for Component's {@link Component}.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport enum ViewEncapsulation {\n  /**\n   * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host\n   * Element and pre-processing the style rules provided via {@link Component#styles styles} or\n   * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all\n   * selectors.\n   *\n   * This is the default option.\n   */\n  Emulated = 0,\n  /**\n   * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.\n   * Use the native encapsulation mechanism of the renderer.\n   *\n   * For the DOM this means using the deprecated [Shadow DOM\n   * v0](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  Native = 1,\n  /**\n   * Don't provide any template or style encapsulation.\n   */\n  None = 2,\n\n  /**\n   * Use Shadow DOM to encapsulate styles.\n   *\n   * For the DOM this means using modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * creating a ShadowRoot for Component's Host Element.\n   */\n  ShadowDom = 3\n}\n","/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nimport '../util/ng_dev_mode';\n\n/**\n * This file contains reuseable \"empty\" symbols that can be used as default return values\n * in different parts of the rendering code. Because the same symbols are returned, this\n * allows for identity checks against these values to be consistently used by the framework\n * code.\n */\n\nexport const EMPTY_OBJ: {} = {};\nexport const EMPTY_ARRAY: any[] = [];\n\n// freezing the values prevents any code from accidentally inserting new values in\nif (typeof ngDevMode !== 'undefined' && ngDevMode) {\n  Object.freeze(EMPTY_OBJ);\n  Object.freeze(EMPTY_ARRAY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LQueries} from './query';\nimport {RComment, RElement} from './renderer';\nimport {StylingContext} from './styling';\nimport {HOST, LView, NEXT, PARENT, QUERIES} from './view';\n\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\nexport const ACTIVE_INDEX = 0;\nexport const VIEWS = 1;\n// PARENT, NEXT, QUERIES, and HOST are indices 2, 3, 4, and 5.\n// As we already have these constants in LView, we don't need to re-create them.\nexport const NATIVE = 6;\n// Because interfaces in TS/JS cannot be instanceof-checked this means that we\n// need to rely on predictable characteristics of data-structures to check if they\n// are what we expect for them to be. The `LContainer` interface code below has a\n// fixed length and the constant value below references that. Using the length value\n// below we can predictably gaurantee that we are dealing with an `LContainer` array.\n// This value MUST be kept up to date with the length of the `LContainer` array\n// interface below so that runtime type checking can work.\nexport const LCONTAINER_LENGTH = 7;\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\nexport interface LContainer extends Array<any> {\n  /**\n   * The next active index in the views array to read or write to. This helps us\n   * keep track of where we are in the views array.\n   * In the case the LContainer is created for a ViewContainerRef,\n   * it is set to null to identify this scenario, as indices are \"absolute\" in that case,\n   * i.e. provided directly by the user of the ViewContainerRef API.\n   */\n  [ACTIVE_INDEX]: number;\n\n  /**\n   * A list of the container's currently active child views. Views will be inserted\n   * here as they are added and spliced from here when they are removed. We need\n   * to keep a record of current views so we know which views are already in the DOM\n   * (and don't need to be re-added) and so we can remove views from the DOM when they\n   * are no longer required.\n   */\n  [VIEWS]: LView[];\n\n  /**\n   * Access to the parent view is necessary so we can propagate back\n   * up from inside a container to parent[NEXT].\n   */\n  [PARENT]: LView|null;\n\n  /**\n   * This allows us to jump from a container to a sibling container or component\n   * view with the same parent, so we can remove listeners efficiently.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /**\n   * Queries active for this container - all the views inserted to / removed from\n   * this container are reported to queries referenced here.\n   */\n  [QUERIES]: LQueries|null;\n\n  /**\n   * The host element of this LContainer.\n   *\n   * The host could be an LView if this container is on a component node.\n   * In that case, the component LView is its HOST.\n   *\n   * It could also be a styling context if this is a node with a style/class\n   * binding.\n   */\n  [HOST]: RElement|RComment|StylingContext|LView;\n\n  /** The comment element that serves as an anchor for this LContainer. */\n  [NATIVE]: RComment;\n}\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RElement} from './renderer';\nimport {LView} from './view';\n\n/**\n * This property will be monkey-patched on elements, components and directives\n */\nexport const MONKEY_PATCH_KEY_NAME = '__ngContext__';\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport interface LContext {\n  /**\n   * The component's parent view data.\n   */\n  lView: LView;\n\n  /**\n   * The index instance of the node.\n   */\n  nodeIndex: number;\n\n  /**\n   * The instance of the DOM node that is attached to the lNode.\n   */\n  native: RElement;\n\n  /**\n   * The instance of the Component node.\n   */\n  component: {}|null|undefined;\n\n  /**\n   * The list of active directives that exist on this element.\n   */\n  directives: any[]|null|undefined;\n\n  /**\n   * The map of local references (local reference name => element or directive instance) that exist\n   * on this element.\n   */\n  localRefs: {[key: string]: any}|null|undefined;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../../di/injection_token';\nimport {Injector} from '../../di/injector';\nimport {SimpleChanges} from '../../interface/simple_change';\nimport {Type} from '../../interface/type';\nimport {QueryList} from '../../linker';\nimport {Sanitizer} from '../../sanitization/security';\n\nimport {LContainer} from './container';\nimport {ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefList, HostBindingsFunction, PipeDef, PipeDefList} from './definition';\nimport {I18nUpdateOpCodes, TI18n} from './i18n';\nimport {TElementNode, TNode, TViewNode} from './node';\nimport {PlayerHandler} from './player';\nimport {LQueries} from './query';\nimport {RElement, Renderer3, RendererFactory3} from './renderer';\nimport {StylingContext} from './styling';\n\n\n\n// Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\nexport const TVIEW = 0;\nexport const FLAGS = 1;\nexport const PARENT = 2;\nexport const NEXT = 3;\nexport const QUERIES = 4;\nexport const HOST = 5;\nexport const HOST_NODE = 6;  // Rename to `T_HOST`?\nexport const BINDING_INDEX = 7;\nexport const CLEANUP = 8;\nexport const CONTEXT = 9;\nexport const INJECTOR = 10;\nexport const RENDERER_FACTORY = 11;\nexport const RENDERER = 12;\nexport const SANITIZER = 13;\nexport const TAIL = 14;\nexport const CONTAINER_INDEX = 15;\nexport const CONTENT_QUERIES = 16;\nexport const DECLARATION_VIEW = 17;\n/** Size of LView's header. Necessary to adjust for it when setting slots.  */\nexport const HEADER_OFFSET = 18;\n\n\n// This interface replaces the real LView interface if it is an arg or a\n// return value of a public instruction. This ensures we don't need to expose\n// the actual interface, which should be kept private.\nexport interface OpaqueViewState {\n  '__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n\n/**\n * `LView` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own `LView`. When processing a particular view, we set the `viewData` to that\n * `LView`. When that view is done processing, the `viewData` is set back to\n * whatever the original `viewData` was before (the parent `LView`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\nexport interface LView extends Array<any> {\n  /**\n   * The static data for this view. We need a reference to this so we can easily walk up the\n   * node tree in DI and get the TView.data array associated with a node (where the\n   * directive defs are stored).\n   */\n  readonly[TVIEW]: TView;\n\n  /** Flags for this view. See LViewFlags for more info. */\n  [FLAGS]: LViewFlags;\n\n  /**\n   * The parent view is needed when we exit the view and must restore the previous\n   * `LView`. Without this, the render method would have to keep a stack of\n   * views as it is recursively rendering templates.\n   *\n   * This is the \"insertion\" view for embedded views. This allows us to properly\n   * destroy embedded views.\n   */\n  [PARENT]: LView|null;\n\n  /**\n   *\n   * The next sibling LView or LContainer.\n   *\n   * Allows us to propagate between sibling view states that aren't in the same\n   * container. Embedded views already have a node.next, but it is only set for\n   * views in the same container. We need a way to link component views and views\n   * across containers as well.\n   */\n  [NEXT]: LView|LContainer|null;\n\n  /** Queries active for this view - nodes from a view are reported to those queries. */\n  [QUERIES]: LQueries|null;\n\n  /**\n   * The host node for this LView instance, if this is a component view.\n   *\n   * If this is an embedded view, HOST will be null.\n   */\n  [HOST]: RElement|StylingContext|null;\n\n  /**\n   * Pointer to the `TViewNode` or `TElementNode` which represents the root of the view.\n   *\n   * If `TViewNode`, this is an embedded view of a container. We need this to be able to\n   * efficiently find the `LViewNode` when inserting the view into an anchor.\n   *\n   * If `TElementNode`, this is the LView of a component.\n   *\n   * If null, this is the root view of an application (root component is in this view).\n   */\n  [HOST_NODE]: TViewNode|TElementNode|null;\n\n  /**\n   * The binding index we should access next.\n   *\n   * This is stored so that bindings can continue where they left off\n   * if a view is left midway through processing bindings (e.g. if there is\n   * a setter that creates an embedded view, like in ngIf).\n   */\n  [BINDING_INDEX]: number;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This context array stores both listener functions wrapped with\n   * their context and output subscription instances for a particular view.\n   *\n   * These change per LView instance, so they cannot be stored on TView. Instead,\n   * TView.cleanup saves an index to the necessary context in this array.\n   */\n  // TODO: flatten into LView[]\n  [CLEANUP]: any[]|null;\n\n  /**\n   * - For dynamic views, this is the context with which to render the template (e.g.\n   *   `NgForContext`), or `{}` if not defined explicitly.\n   * - For root view of the root component the context contains change detection data.\n   * - For non-root components, the context is the component instance,\n   * - For inline views, the context is null.\n   */\n  [CONTEXT]: {}|RootContext|null;\n\n  /** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n  readonly[INJECTOR]: Injector|null;\n\n  /** Renderer to be used for this view. */\n  [RENDERER_FACTORY]: RendererFactory3;\n\n  /** Renderer to be used for this view. */\n  [RENDERER]: Renderer3;\n\n  /** An optional custom sanitizer. */\n  [SANITIZER]: Sanitizer|null;\n\n  /**\n   * The last LView or LContainer beneath this LView in the hierarchy.\n   *\n   * The tail allows us to quickly add a new state to the end of the view list\n   * without having to propagate starting from the first child.\n   */\n  [TAIL]: LView|LContainer|null;\n\n  /**\n   * The index of the parent container's host node. Applicable only to embedded views that\n   * have been inserted dynamically. Will be -1 for component views and inline views.\n   *\n   * This is necessary to jump from dynamically created embedded views to their parent\n   * containers because their parent cannot be stored on the TViewNode (views may be inserted\n   * in multiple containers, so the parent cannot be shared between view instances).\n   */\n  [CONTAINER_INDEX]: number;\n\n  /**\n   * Stores QueryLists associated with content queries of a directive. This data structure is\n   * filled-in as part of a directive creation process and is later used to retrieve a QueryList to\n   * be refreshed.\n   */\n  [CONTENT_QUERIES]: QueryList<any>[]|null;\n\n  /**\n   * View where this view's template was declared.\n   *\n   * Only applicable for dynamically created views. Will be null for inline/component views.\n   *\n   * The template for a dynamically created view may be declared in a different view than\n   * it is inserted. We already track the \"insertion view\" (view where the template was\n   * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n   * (view where the template was declared). Otherwise, we wouldn't be able to call the\n   * view's template function with the proper contexts. Context should be inherited from\n   * the declaration view tree, not the insertion view tree.\n   *\n   * Example (AppComponent template):\n   *\n   * <ng-template #foo></ng-template>       <-- declared here -->\n   * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n   *\n   * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n   * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n   * but the insertion view would be SomeComp. When we are removing views, we would want to\n   * traverse through the insertion view to clean up listeners. When we are calling the\n   * template function during change detection, we need the declaration view to get inherited\n   * context.\n   */\n  [DECLARATION_VIEW]: LView|null;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\nexport const enum LViewFlags {\n  /**\n   * Whether or not the view is in creationMode.\n   *\n   * This must be stored in the view rather than using `data` as a marker so that\n   * we can properly support embedded views. Otherwise, when exiting a child view\n   * back into the parent view, `data` will be defined and `creationMode` will be\n   * improperly reported as false.\n   */\n  CreationMode = 0b000000001,\n\n  /**\n   * Whether or not this LView instance is on its first processing pass.\n   *\n   * An LView instance is considered to be on its \"first pass\" until it\n   * has completed one creation mode run and one update mode run. At this\n   * time, the flag is turned off.\n   */\n  FirstLViewPass = 0b000000010,\n\n  /** Whether this view has default change detection strategy (checks always) or onPush */\n  CheckAlways = 0b000000100,\n\n  /** Whether or not this view is currently dirty (needing check) */\n  Dirty = 0b000001000,\n\n  /** Whether or not this view is currently attached to change detection tree. */\n  Attached = 0b000010000,\n\n  /**\n   *  Whether or not the init hooks have run.\n   *\n   * If on, the init hooks haven't yet been run and should be executed by the first component that\n   * runs OR the first cR() instruction that runs (so inits are run for the top level view before\n   * any embedded views).\n   */\n  RunInit = 0b000100000,\n\n  /** Whether or not this view is destroyed. */\n  Destroyed = 0b001000000,\n\n  /** Whether or not this view is the root view */\n  IsRoot = 0b010000000,\n}\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the template function as ngPrivateData.\n */\nexport interface TView {\n  /**\n   * ID for inline views to determine whether a view is the same as the previous view\n   * in a certain position. If it's not, we know the new view needs to be inserted\n   * and the one that exists needs to be removed (e.g. if/else statements)\n   *\n   * If this is -1, then this is a component view or a dynamically created view.\n   */\n  readonly id: number;\n\n  /**\n   * This is a blueprint used to generate LView instances for this TView. Copying this\n   * blueprint is faster than creating a new LView from scratch.\n   */\n  blueprint: LView;\n\n  /**\n   * The template function used to refresh the view of dynamically created views\n   * and components. Will be null for inline views.\n   */\n  template: ComponentTemplate<{}>|null;\n\n  /**\n   * A function containing query-related instructions.\n   */\n  viewQuery: ComponentQuery<{}>|null;\n\n  /**\n   * Pointer to the `TNode` that represents the root of the view.\n   *\n   * If this is a `TViewNode` for an `LViewNode`, this is an embedded view of a container.\n   * We need this pointer to be able to efficiently find this node when inserting the view\n   * into an anchor.\n   *\n   * If this is a `TElementNode`, this is the view of a root component. It has exactly one\n   * root TNode.\n   *\n   * If this is null, this is the view of a component that is not at root. We do not store\n   * the host TNodes for child component views because they can potentially have several\n   * different host TNodes, depending on where the component is being used. These host\n   * TNodes cannot be shared (due to different indices, etc).\n   */\n  node: TViewNode|TElementNode|null;\n\n  /** Whether or not this template has been processed. */\n  firstTemplatePass: boolean;\n\n  /** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n  data: TData;\n\n  /**\n   * The binding start index is the index at which the data array\n   * starts to store bindings only. Saving this value ensures that we\n   * will begin reading bindings at the correct point in the array when\n   * we are in update mode.\n   */\n  bindingStartIndex: number;\n\n  /**\n   * The index where the \"expando\" section of `LView` begins. The expando\n   * section contains injectors, directive instances, and host binding values.\n   * Unlike the \"consts\" and \"vars\" sections of `LView`, the length of this\n   * section cannot be calculated at compile-time because directives are matched\n   * at runtime to preserve locality.\n   *\n   * We store this start index so we know where to start checking host bindings\n   * in `setHostBindings`.\n   */\n  expandoStartIndex: number;\n\n  /**\n   * Index of the host node of the first LView or LContainer beneath this LView in\n   * the hierarchy.\n   *\n   * Necessary to store this so views can traverse through their nested views\n   * to remove listeners and call onDestroy callbacks.\n   *\n   * For embedded views, we store the index of an LContainer's host rather than the first\n   * LView to avoid managing splicing when views are added/removed.\n   */\n  childIndex: number;\n\n  /**\n   * A reference to the first child node located in the view.\n   */\n  firstChild: TNode|null;\n\n  /**\n   * Set of instructions used to process host bindings efficiently.\n   *\n   * See VIEW_DATA.md for more information.\n   */\n  expandoInstructions: (number|HostBindingsFunction<any>|null)[]|null;\n\n  /**\n   * Full registry of directives and components that may be found in this view.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  directiveRegistry: DirectiveDefList|null;\n\n  /**\n   * Full registry of pipes that may be found in this view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   *\n   * It's necessary to keep a copy of the full def list on the TView so it's possible\n   * to render template functions without a host component.\n   */\n  pipeRegistry: PipeDefList|null;\n\n  /**\n   * Array of ngOnInit and ngDoCheck hooks that should be executed for this view in\n   * creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  initHooks: HookData|null;\n\n  /**\n   * Array of ngDoCheck hooks that should be executed for this view in update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  checkHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n   * for this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentHooks: HookData|null;\n\n  /**\n   * Array of ngAfterContentChecked hooks that should be executed for this view in update\n   * mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  contentCheckHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n   * this view in creation mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewHooks: HookData|null;\n\n  /**\n   * Array of ngAfterViewChecked hooks that should be executed for this view in\n   * update mode.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  viewCheckHooks: HookData|null;\n\n  /**\n   * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n   *\n   * Even indices: Directive index\n   * Odd indices: Hook function\n   */\n  destroyHooks: HookData|null;\n\n  /**\n   * When a view is destroyed, listeners need to be released and outputs need to be\n   * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n   * and output data (in chunks of 2) for a particular view. Combining the arrays\n   * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n   * separate for loops).\n   *\n   * If it's a native DOM listener or output subscription being stored:\n   * 1st index is: event name  `name = tView.cleanup[i+0]`\n   * 2nd index is: index of native element or a function that retrieves global target (window,\n   *               document or body) reference based on the native element:\n   *    `typeof idxOrTargetGetter === 'function'`: global target getter function\n   *    `typeof idxOrTargetGetter === 'number'`: index of native element\n   *\n   * 3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`\n   * 4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`\n   *    `typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n   *    `typeof useCaptureOrIndx == 'number':\n   *         `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`\n   *         `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`\n   *\n   * If it's a renderer2 style listener or ViewRef destroy hook being stored:\n   * 1st index is: index of the cleanup function in LView.cleanupInstances[]\n   * 2nd index is: `null`\n   *               `lView[CLEANUP][tView.cleanup[i+0]]()`\n   *\n   * If it's an output subscription or query list destroy hook:\n   * 1st index is: output unsubscribe function / query list destroy function\n   * 2nd index is: index of function context in LView.cleanupInstances[]\n   *               `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n   */\n  cleanup: any[]|null;\n\n  /**\n   * A list of element indices for child components that will need to be\n   * refreshed when the current view has finished its check. These indices have\n   * already been adjusted for the HEADER_OFFSET.\n   *\n   */\n  components: number[]|null;\n\n  /**\n   * A list of indices for child directives that have content queries.\n   *\n   * Even indices: Directive indices\n   * Odd indices: Starting index of content queries (stored in CONTENT_QUERIES) for this directive\n   */\n  contentQueries: number[]|null;\n}\n\nexport const enum RootContextFlags {Empty = 0b00, DetectChanges = 0b01, FlushPlayers = 0b10}\n\n\n/**\n * RootContext contains information which is shared for all components which\n * were bootstrapped with {@link renderComponent}.\n */\nexport interface RootContext {\n  /**\n   * A function used for scheduling change detection in the future. Usually\n   * this is `requestAnimationFrame`.\n   */\n  scheduler: (workFn: () => void) => void;\n\n  /**\n   * A promise which is resolved when all components are considered clean (not dirty).\n   *\n   * This promise is overwritten every time a first call to {@link markDirty} is invoked.\n   */\n  clean: Promise<null>;\n\n  /**\n   * RootComponents - The components that were instantiated by the call to\n   * {@link renderComponent}.\n   */\n  components: {}[];\n\n  /**\n   * The player flushing handler to kick off all animations\n   */\n  playerHandler: PlayerHandler|null;\n\n  /**\n   * What render-related operations to run once a scheduler has been set\n   */\n  flags: RootContextFlags;\n}\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * Even indices: Directive index\n * Odd indices: Hook function\n */\nexport type HookData = (number | (() => void) | ((changes: SimpleChanges) => void))[];\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Injector bloom filters are also stored here.\n */\nexport type TData =\n    (TNode | PipeDef<any>| DirectiveDef<any>| ComponentDef<any>| number | Type<any>|\n     InjectionToken<any>| TI18n | I18nUpdateOpCodes | null)[];\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SimpleChange, SimpleChanges} from '../interface/simple_change';\n\n\ntype Constructor<T> = new (...args: any[]) => T;\n\n/**\n * Checks an object to see if it's an exact instance of a particular type\n * without traversing the inheritance hierarchy like `instanceof` does.\n * @param obj The object to check\n * @param type The type to check the object against\n */\nexport function isExactInstanceOf<T>(obj: any, type: Constructor<T>): obj is T {\n  return obj != null && typeof obj == 'object' && Object.getPrototypeOf(obj) == type.prototype;\n}\n\n/**\n * Checks to see if an object is an instance of {@link OnChangesDirectiveWrapper}\n * @param obj the object to check (generally from `LView`)\n */\nexport function isOnChangesDirectiveWrapper(obj: any): obj is OnChangesDirectiveWrapper<any> {\n  return isExactInstanceOf(obj, OnChangesDirectiveWrapper);\n}\n\n/**\n * Removes the `OnChangesDirectiveWrapper` if present.\n *\n * @param obj to unwrap.\n */\nexport function unwrapOnChangesDirectiveWrapper<T>(obj: T | OnChangesDirectiveWrapper<T>): T {\n  return isOnChangesDirectiveWrapper(obj) ? obj.instance : obj;\n}\n\n/**\n * A class that wraps directive instances for storage in LView when directives\n * have onChanges hooks to deal with.\n */\nexport class OnChangesDirectiveWrapper<T = any> {\n  seenProps = new Set<string>();\n  previous: SimpleChanges = {};\n  changes: SimpleChanges|null = null;\n\n  constructor(public instance: T) {}\n}\n\n/**\n * Updates the `changes` property on the `wrapper` instance, such that when it's\n * checked in {@link callHooks} it will fire the related `onChanges` hook.\n * @param wrapper the wrapper for the directive instance\n * @param declaredName the declared name to be used in `SimpleChange`\n * @param value The new value for the property\n */\nexport function recordChange(wrapper: OnChangesDirectiveWrapper, declaredName: string, value: any) {\n  const simpleChanges = wrapper.changes || (wrapper.changes = {});\n\n  const firstChange = !wrapper.seenProps.has(declaredName);\n  if (firstChange) {\n    wrapper.seenProps.add(declaredName);\n  }\n\n  const previous = wrapper.previous;\n  const previousValue: SimpleChange|undefined = previous[declaredName];\n  simpleChanges[declaredName] = new SimpleChange(\n      firstChange ? undefined : previousValue && previousValue.currentValue, value, firstChange);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDataInRange, assertDefined, assertGreaterThan, assertLessThan} from '../util/assert';\nimport {global} from '../util/global';\n\nimport {ACTIVE_INDEX, LCONTAINER_LENGTH, LContainer} from './interfaces/container';\nimport {LContext, MONKEY_PATCH_KEY_NAME} from './interfaces/context';\nimport {ComponentDef, DirectiveDef} from './interfaces/definition';\nimport {NO_PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags} from './interfaces/injector';\nimport {TContainerNode, TElementNode, TNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {GlobalTargetName, GlobalTargetResolver, RComment, RElement, RText} from './interfaces/renderer';\nimport {StylingContext} from './interfaces/styling';\nimport {CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, LView, LViewFlags, PARENT, RootContext, TData, TVIEW, TView} from './interfaces/view';\nimport {isOnChangesDirectiveWrapper} from './onchanges_util';\n\n\n/**\n * Returns whether the values are different from a change detection stand point.\n *\n * Constraints are relaxed in checkNoChanges mode. See `devModeEqual` for details.\n */\nexport function isDifferent(a: any, b: any): boolean {\n  // NaN is the only value that is not equal to itself so the first\n  // test checks if both a and b are not NaN\n  return !(a !== a && b !== b) && a !== b;\n}\n\n/**\n * Used for stringify render output in Ivy.\n */\nexport function renderStringify(value: any): string {\n  if (typeof value == 'function') return value.name || value;\n  if (typeof value == 'string') return value;\n  if (value == null) return '';\n  if (typeof value == 'object' && typeof value.type == 'function')\n    return value.type.name || value.type;\n  return '' + value;\n}\n\n/**\n * Flattens an array in non-recursive way. Input arrays are not modified.\n */\nexport function flatten(list: any[]): any[] {\n  const result: any[] = [];\n  let i = 0;\n\n  while (i < list.length) {\n    const item = list[i];\n    if (Array.isArray(item)) {\n      if (item.length > 0) {\n        list = item.concat(list.slice(i + 1));\n        i = 0;\n      } else {\n        i++;\n      }\n    } else {\n      result.push(item);\n      i++;\n    }\n  }\n\n  return result;\n}\n\n/** Retrieves a value from any `LView` or `TData`. */\nexport function loadInternal<T>(view: LView | TData, index: number): T {\n  ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);\n  const record = view[index + HEADER_OFFSET];\n  // If we're storing an array because of a directive or component with ngOnChanges,\n  // return the directive or component instance.\n  return isOnChangesDirectiveWrapper(record) ? record.instance : record;\n}\n\n\n\n/**\n * Takes the value of a slot in `LView` and returns the element node.\n *\n * Normally, element nodes are stored flat, but if the node has styles/classes on it,\n * it might be wrapped in a styling context. Or if that node has a directive that injects\n * ViewContainerRef, it may be wrapped in an LContainer. Or if that node is a component,\n * it will be wrapped in LView. It could even have all three, so we keep looping\n * until we find something that isn't an array.\n *\n * @param value The initial value in `LView`\n */\nexport function readElementValue(value: RElement | StylingContext | LContainer | LView): RElement {\n  while (Array.isArray(value)) {\n    value = value[HOST] as any;\n  }\n  return value;\n}\n\n/**\n * Retrieves an element value from the provided `viewData`, by unwrapping\n * from any containers, component views, or style contexts.\n */\nexport function getNativeByIndex(index: number, lView: LView): RElement {\n  return readElementValue(lView[index + HEADER_OFFSET]);\n}\n\nexport function getNativeByTNode(tNode: TNode, hostView: LView): RElement|RText|RComment {\n  return readElementValue(hostView[tNode.index]);\n}\n\nexport function getTNode(index: number, view: LView): TNode {\n  ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');\n  ngDevMode && assertLessThan(index, view[TVIEW].data.length, 'wrong index for TNode');\n  return view[TVIEW].data[index + HEADER_OFFSET] as TNode;\n}\n\nexport function getComponentViewByIndex(nodeIndex: number, hostView: LView): LView {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  const slotValue = hostView[nodeIndex];\n  return slotValue.length >= HEADER_OFFSET ? slotValue : slotValue[HOST];\n}\n\nexport function isContentQueryHost(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.hasContentQuery) !== 0;\n}\n\nexport function isComponent(tNode: TNode): boolean {\n  return (tNode.flags & TNodeFlags.isComponent) === TNodeFlags.isComponent;\n}\n\nexport function isComponentDef<T>(def: DirectiveDef<T>): def is ComponentDef<T> {\n  return (def as ComponentDef<T>).template !== null;\n}\n\nexport function isLContainer(value: RElement | RComment | LContainer | StylingContext): boolean {\n  // Styling contexts are also arrays, but their first index contains an element node\n  return Array.isArray(value) && value.length === LCONTAINER_LENGTH;\n}\n\nexport function isRootView(target: LView): boolean {\n  return (target[FLAGS] & LViewFlags.IsRoot) !== 0;\n}\n\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nexport function getRootView(target: LView | {}): LView {\n  ngDevMode && assertDefined(target, 'component');\n  let lView = Array.isArray(target) ? (target as LView) : readPatchedLView(target) !;\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = lView[PARENT] !;\n  }\n  return lView;\n}\n\nexport function getRootContext(viewOrComponent: LView | {}): RootContext {\n  const rootView = getRootView(viewOrComponent);\n  ngDevMode &&\n      assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');\n  return rootView[CONTEXT] as RootContext;\n}\n\n/**\n * Returns the monkey-patch value data present on the target (which could be\n * a component, directive or a DOM node).\n */\nexport function readPatchedData(target: any): LView|LContext|null {\n  ngDevMode && assertDefined(target, 'Target expected');\n  return target[MONKEY_PATCH_KEY_NAME];\n}\n\nexport function readPatchedLView(target: any): LView|null {\n  const value = readPatchedData(target);\n  if (value) {\n    return Array.isArray(value) ? value : (value as LContext).lView;\n  }\n  return null;\n}\n\nexport function hasParentInjector(parentLocation: RelativeInjectorLocation): boolean {\n  return parentLocation !== NO_PARENT_INJECTOR;\n}\n\nexport function getParentInjectorIndex(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) & RelativeInjectorLocationFlags.InjectorIndexMask;\n}\n\nexport function getParentInjectorViewOffset(parentLocation: RelativeInjectorLocation): number {\n  return (parentLocation as any as number) >> RelativeInjectorLocationFlags.ViewOffsetShift;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the view is found that contains the parent\n * injector.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @returns The LView instance that contains the parent injector\n */\nexport function getParentInjectorView(location: RelativeInjectorLocation, startView: LView): LView {\n  let viewOffset = getParentInjectorViewOffset(location);\n  let parentView = startView;\n  // For most cases, the parent injector can be found on the host node (e.g. for component\n  // or container), but we must keep the loop here to support the rarer case of deeply nested\n  // <ng-template> tags or inline views, where the parent injector might live many views\n  // above the child injector.\n  while (viewOffset > 0) {\n    parentView = parentView[DECLARATION_VIEW] !;\n    viewOffset--;\n  }\n  return parentView;\n}\n\n/**\n * Unwraps a parent injector location number to find the view offset from the current injector,\n * then walks up the declaration view tree until the TNode of the parent injector is found.\n *\n * @param location The location of the parent injector, which contains the view offset\n * @param startView The LView instance from which to start walking up the view tree\n * @param startTNode The TNode instance of the starting element\n * @returns The TNode of the parent injector\n */\nexport function getParentInjectorTNode(\n    location: RelativeInjectorLocation, startView: LView, startTNode: TNode): TElementNode|\n    TContainerNode|null {\n  if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {\n    // view offset is 0\n    const injectorIndex = startTNode.parent.injectorIndex;\n    let parentTNode = startTNode.parent;\n    while (parentTNode.parent != null && injectorIndex == parentTNode.injectorIndex) {\n      parentTNode = parentTNode.parent;\n    }\n    return parentTNode;\n  }\n\n  let viewOffset = getParentInjectorViewOffset(location);\n  // view offset is 1\n  let parentView = startView;\n  let parentTNode = startView[HOST_NODE] as TElementNode;\n\n  // view offset is superior to 1\n  while (viewOffset > 1) {\n    parentView = parentView[DECLARATION_VIEW] !;\n    parentTNode = parentView[HOST_NODE] as TElementNode;\n    viewOffset--;\n  }\n  return parentTNode;\n}\n\nexport const defaultScheduler =\n    (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame ||  // browser only\n     setTimeout                                                                // everything else\n     ).bind(global);\n\n/**\n * Equivalent to ES6 spread, add each item to an array.\n *\n * @param items The items to add\n * @param arr The array to which you want to add the items\n */\nexport function addAllToArray(items: any[], arr: any[]) {\n  for (let i = 0; i < items.length; i++) {\n    arr.push(items[i]);\n  }\n}\n\n/**\n * Given a current view, finds the nearest component's host (LElement).\n *\n * @param lView LView for which we want a host element node\n * @returns The host node\n */\nexport function findComponentView(lView: LView): LView {\n  let rootTNode = lView[HOST_NODE];\n\n  while (rootTNode && rootTNode.type === TNodeType.View) {\n    ngDevMode && assertDefined(lView[DECLARATION_VIEW], 'lView[DECLARATION_VIEW]');\n    lView = lView[DECLARATION_VIEW] !;\n    rootTNode = lView[HOST_NODE];\n  }\n\n  return lView;\n}\n\nexport function resolveWindow(element: RElement & {ownerDocument: Document}) {\n  return {name: 'window', target: element.ownerDocument.defaultView};\n}\n\nexport function resolveDocument(element: RElement & {ownerDocument: Document}) {\n  return {name: 'document', target: element.ownerDocument};\n}\n\nexport function resolveBody(element: RElement & {ownerDocument: Document}) {\n  return {name: 'body', target: element.ownerDocument.body};\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport '../util/ng_dev_mode';\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Mutable, Type} from '../interface/type';\nimport {NgModuleDef} from '../metadata/ng_module';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {noSideEffects} from '../util/closure';\nimport {stringify} from '../util/stringify';\n\nimport {EMPTY_ARRAY, EMPTY_OBJ} from './empty';\nimport {NG_COMPONENT_DEF, NG_DIRECTIVE_DEF, NG_MODULE_DEF, NG_PIPE_DEF} from './fields';\nimport {BaseDef, ComponentDef, ComponentDefFeature, ComponentQuery, ComponentTemplate, ComponentType, DirectiveDef, DirectiveDefFeature, DirectiveType, DirectiveTypesOrFactory, HostBindingsFunction, PipeDef, PipeType, PipeTypesOrFactory} from './interfaces/definition';\nimport {CssSelectorList} from './interfaces/projection';\n\nlet _renderCompCount = 0;\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngComponentDef = defineComponent({\n *     ...\n *   });\n * }\n * ```\n */\nexport function defineComponent<T>(componentDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this component. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: (t: Type<T>| null) => T;\n\n  /**\n   * The number of nodes, local refs, and pipes in this component template.\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the binding start index.\n   */\n  // TODO(kara): remove queries from this count\n  consts: number;\n\n  /**\n   * The number of bindings in this component template (including pure fn bindings).\n   *\n   * Used to calculate the length of this component's LView array, so we\n   * can pre-fill the array and set the host binding start index.\n   */\n  vars: number;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: ['publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['public', 'declared']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ((dirIndex: number) => void);\n\n  /** Refreshes content queries associated with directives in a given view */\n  contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n\n  /**\n   * Template function use for rendering DOM.\n   *\n   * This function has following structure.\n   *\n   * ```\n   * function Template<T>(ctx:T, creationMode: boolean) {\n   *   if (creationMode) {\n   *     // Contains creation mode instructions.\n   *   }\n   *   // Contains binding update instructions\n   * }\n   * ```\n   *\n   * Common instructions are:\n   * Creation mode instructions:\n   *  - `elementStart`, `elementEnd`\n   *  - `text`\n   *  - `container`\n   *  - `listener`\n   *\n   * Binding update instructions:\n   * - `bind`\n   * - `elementAttribute`\n   * - `elementProperty`\n   * - `elementClass`\n   * - `elementStyle`\n   *\n   */\n  template: ComponentTemplate<T>;\n\n  /**\n   * An array of `ngContent[selector]` values that were found in the template.\n   */\n  ngContentSelectors?: string[];\n\n  /**\n   * Additional set of instructions specific to view query processing. This could be seen as a\n   * set of instruction to be inserted into the template function.\n   *\n   * Query-related instructions need to be pulled out to a specific function as a timing of\n   * execution is different as compared to all other instructions (after change detection hooks but\n   * before view hooks).\n   */\n  viewQuery?: ComponentQuery<T>| null;\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link ProvidersFeature}\n   */\n  features?: ComponentDefFeature[];\n\n  /**\n   * Defines template and style encapsulation options available for Component's {@link Component}.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   *\n   * see: animation\n   */\n  data?: {[kind: string]: any};\n\n  /**\n   * A set of styles that the component needs to be present for component to render correctly.\n   */\n  styles?: string[];\n\n  /**\n   * The strategy that the default change detector uses to detect changes.\n   * When set, takes effect the next time change detection is triggered.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Registry of directives and components that may be found in this component's view.\n   *\n   * The property is either an array of `DirectiveDef`s or a function which returns the array of\n   * `DirectiveDef`s. The function is necessary to be able to support forward declarations.\n   */\n  directives?: DirectiveTypesOrFactory | null;\n\n  /**\n   * Registry of pipes that may be found in this component's view.\n   *\n   * The property is either an array of `PipeDefs`s or a function which returns the array of\n   * `PipeDefs`s. The function is necessary to be able to support forward declarations.\n   */\n  pipes?: PipeTypesOrFactory | null;\n}): never {\n  const type = componentDefinition.type;\n  const typePrototype = type.prototype;\n  const declaredInputs: {[key: string]: string} = {} as any;\n  const def: Mutable<ComponentDef<any>, keyof ComponentDef<any>> = {\n    type: type,\n    providersResolver: null,\n    consts: componentDefinition.consts,\n    vars: componentDefinition.vars,\n    factory: componentDefinition.factory,\n    template: componentDefinition.template || null !,\n    ngContentSelectors: componentDefinition.ngContentSelectors,\n    hostBindings: componentDefinition.hostBindings || null,\n    contentQueries: componentDefinition.contentQueries || null,\n    contentQueriesRefresh: componentDefinition.contentQueriesRefresh || null,\n    declaredInputs: declaredInputs,\n    inputs: null !,   // assigned in noSideEffects\n    outputs: null !,  // assigned in noSideEffects\n    exportAs: componentDefinition.exportAs || null,\n    onChanges: typePrototype.ngOnChanges || null,\n    onInit: typePrototype.ngOnInit || null,\n    doCheck: typePrototype.ngDoCheck || null,\n    afterContentInit: typePrototype.ngAfterContentInit || null,\n    afterContentChecked: typePrototype.ngAfterContentChecked || null,\n    afterViewInit: typePrototype.ngAfterViewInit || null,\n    afterViewChecked: typePrototype.ngAfterViewChecked || null,\n    onDestroy: typePrototype.ngOnDestroy || null,\n    onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,\n    directiveDefs: null !,  // assigned in noSideEffects\n    pipeDefs: null !,       // assigned in noSideEffects\n    selectors: componentDefinition.selectors,\n    viewQuery: componentDefinition.viewQuery || null,\n    features: componentDefinition.features || null,\n    data: componentDefinition.data || {},\n    // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in the\n    // next line. Also `None` should be 0 not 2.\n    encapsulation: componentDefinition.encapsulation || ViewEncapsulation.Emulated,\n    id: 'c',\n    styles: componentDefinition.styles || EMPTY_ARRAY,\n    _: null as never,\n  };\n  def._ = noSideEffects(() => {\n    const directiveTypes = componentDefinition.directives !;\n    const feature = componentDefinition.features;\n    const pipeTypes = componentDefinition.pipes !;\n    def.id += _renderCompCount++;\n    def.inputs = invertObject(componentDefinition.inputs, declaredInputs),\n    def.outputs = invertObject(componentDefinition.outputs),\n    feature && feature.forEach((fn) => fn(def));\n    def.directiveDefs = directiveTypes ?\n        () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)\n                  .map(extractDirectiveDef) :\n        null;\n    def.pipeDefs = pipeTypes ?\n        () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef) :\n        null;\n  }) as never;\n  return def as never;\n}\n\nexport function extractDirectiveDef(type: DirectiveType<any>& ComponentType<any>):\n    DirectiveDef<any>|ComponentDef<any> {\n  const def = getComponentDef(type) || getDirectiveDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);\n  }\n  return def !;\n}\n\nexport function extractPipeDef(type: PipeType<any>): PipeDef<any> {\n  const def = getPipeDef(type);\n  if (ngDevMode && !def) {\n    throw new Error(`'${type.name}' is not a 'PipeType'.`);\n  }\n  return def !;\n}\n\nexport function defineNgModule<T>(def: {type: T} & Partial<NgModuleDef<T>>): never {\n  const res: NgModuleDef<T> = {\n    type: def.type,\n    bootstrap: def.bootstrap || EMPTY_ARRAY,\n    declarations: def.declarations || EMPTY_ARRAY,\n    imports: def.imports || EMPTY_ARRAY,\n    exports: def.exports || EMPTY_ARRAY,\n    transitiveCompileScopes: null,\n  };\n  return res as never;\n}\n\n/**\n * Inverts an inputs or outputs lookup such that the keys, which were the\n * minified keys, are part of the values, and the values are parsed so that\n * the publicName of the property is the new key\n *\n * e.g. for\n *\n * ```\n * class Comp {\n *   @Input()\n *   propName1: string;\n *\n *   @Input('publicName2')\n *   declaredPropName2: number;\n * }\n * ```\n *\n * will be serialized as\n *\n * ```\n * {\n *   propName1: 'propName1',\n *   declaredPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * which is than translated by the minifier as:\n *\n * ```\n * {\n *   minifiedPropName1: 'propName1',\n *   minifiedPropName2: ['publicName2', 'declaredPropName2'],\n * }\n * ```\n *\n * becomes: (public name => minifiedName)\n *\n * ```\n * {\n *  'propName1': 'minifiedPropName1',\n *  'publicName2': 'minifiedPropName2',\n * }\n * ```\n *\n * Optionally the function can take `secondary` which will result in: (public name => declared name)\n *\n * ```\n * {\n *  'propName1': 'propName1',\n *  'publicName2': 'declaredPropName2',\n * }\n * ```\n *\n\n */\nfunction invertObject(obj: any, secondary?: any): any {\n  if (obj == null) return EMPTY_OBJ;\n  const newLookup: any = {};\n  for (const minifiedKey in obj) {\n    if (obj.hasOwnProperty(minifiedKey)) {\n      let publicName: string = obj[minifiedKey];\n      let declaredName = publicName;\n      if (Array.isArray(publicName)) {\n        declaredName = publicName[1];\n        publicName = publicName[0];\n      }\n      newLookup[publicName] = minifiedKey;\n      if (secondary) {\n        (secondary[publicName] = declaredName);\n      }\n    }\n  }\n  return newLookup;\n}\n\n/**\n * Create a base definition\n *\n * # Example\n * ```\n * class ShouldBeInherited {\n *   static ngBaseDef = defineBase({\n *      ...\n *   })\n * }\n * @param baseDefinition The base definition parameters\n */\nexport function defineBase<T>(baseDefinition: {\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: [ 'declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['declared', 'public']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `outputs`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n}): BaseDef<T> {\n  const declaredInputs: {[P in keyof T]: P} = {} as any;\n  return {\n    inputs: invertObject(baseDefinition.inputs, declaredInputs),\n    declaredInputs: declaredInputs,\n    outputs: invertObject(baseDefinition.outputs),\n  };\n}\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * ```\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ngDirectiveDef = defineDirective({\n *     ...\n *   });\n * }\n * ```\n */\nexport const defineDirective = defineComponent as any as<T>(directiveDefinition: {\n  /**\n   * Directive type, needed to configure the injector.\n   */\n  type: Type<T>;\n\n  /** The selectors that will be used to match nodes to this directive. */\n  selectors: CssSelectorList;\n\n  /**\n   * Factory method used to create an instance of directive.\n   */\n  factory: (t: Type<T>| null) => T;\n\n  /**\n   * A map of input names.\n   *\n   * The format is in: `{[actualPropertyName: string]:(string|[string, string])}`.\n   *\n   * Given:\n   * ```\n   * class MyComponent {\n   *   @Input()\n   *   publicInput1: string;\n   *\n   *   @Input('publicInput2')\n   *   declaredInput2: string;\n   * }\n   * ```\n   *\n   * is described as:\n   * ```\n   * {\n   *   publicInput1: 'publicInput1',\n   *   declaredInput2: ['declaredInput2', 'publicInput2'],\n   * }\n   * ```\n   *\n   * Which the minifier may translate to:\n   * ```\n   * {\n   *   minifiedPublicInput1: 'publicInput1',\n   *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n   * }\n   * ```\n   *\n   * This allows the render to re-construct the minified, public, and declared names\n   * of properties.\n   *\n   * NOTE:\n   *  - Because declared and public name are usually same we only generate the array\n   *    `['declared', 'public']` format when they differ.\n   *  - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has\n   *    inconsistent behavior in that it uses declared names rather than minified or public. For\n   *    this reason `NgOnChanges` will be deprecated and removed in future version and this\n   *    API will be simplified to be consistent with `output`.\n   */\n  inputs?: {[P in keyof T]?: string | [string, string]};\n\n  /**\n   * A map of output names.\n   *\n   * The format is in: `{[actualPropertyName: string]:string}`.\n   *\n   * Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.\n   *\n   * This allows the render to re-construct the minified and non-minified names\n   * of properties.\n   */\n  outputs?: {[P in keyof T]?: string};\n\n  /**\n   * A list of optional features to apply.\n   *\n   * See: {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n   */\n  features?: DirectiveDefFeature[];\n\n  /**\n   * Function executed by the parent template to allow child directive to apply host bindings.\n   */\n  hostBindings?: HostBindingsFunction<T>;\n\n  /**\n   * Function to create instances of content queries associated with a given directive.\n   */\n  contentQueries?: ((directiveIndex: number) => void);\n\n  /** Refreshes content queries associated with directives in a given view */\n  contentQueriesRefresh?: ((directiveIndex: number, queryIndex: number) => void);\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * See: {@link Directive.exportAs}\n   */\n  exportAs?: string[];\n}) => never;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * ```\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ngPipeDef = definePipe({\n *     ...\n *   });\n * }\n * ```\n * @param pipeDef Pipe definition generated by the compiler\n */\nexport function definePipe<T>(pipeDef: {\n  /** Name of the pipe. Used for matching pipes in template to pipe defs. */\n  name: string,\n\n  /** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n  type: Type<T>,\n\n  /** A factory for creating a pipe instance. */\n  factory: (t: Type<T>| null) => T,\n\n  /** Whether the pipe is pure. */\n  pure?: boolean\n}): never {\n  return (<PipeDef<T>>{\n    name: pipeDef.name,\n    factory: pipeDef.factory,\n    pure: pipeDef.pure !== false,\n    onDestroy: pipeDef.type.prototype.ngOnDestroy || null\n  }) as never;\n}\n\n/**\n * The following getter methods retrieve the definition form the type. Currently the retrieval\n * honors inheritance, but in the future we may change the rule to require that definitions are\n * explicit. This would require some sort of migration strategy.\n */\n\nexport function getComponentDef<T>(type: any): ComponentDef<T>|null {\n  return (type as any)[NG_COMPONENT_DEF] || null;\n}\n\nexport function getDirectiveDef<T>(type: any): DirectiveDef<T>|null {\n  return (type as any)[NG_DIRECTIVE_DEF] || null;\n}\n\nexport function getPipeDef<T>(type: any): PipeDef<T>|null {\n  return (type as any)[NG_PIPE_DEF] || null;\n}\n\nexport function getNgModuleDef<T>(type: any, throwNotFound: true): NgModuleDef<T>;\nexport function getNgModuleDef<T>(type: any): NgModuleDef<T>|null;\nexport function getNgModuleDef<T>(type: any, throwNotFound?: boolean): NgModuleDef<T>|null {\n  const ngModuleDef = (type as any)[NG_MODULE_DEF] || null;\n  if (!ngModuleDef && throwNotFound === true) {\n    throw new Error(`Type ${stringify(type)} does not have 'ngModuleDef' property.`);\n  }\n  return ngModuleDef;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects(fn: () => void): string {\n  return '' + {toString: fn};\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertDefined} from '../util/assert';\nimport {executeHooks} from './hooks';\nimport {ComponentDef, DirectiveDef} from './interfaces/definition';\nimport {TElementNode, TNode, TNodeFlags, TViewNode} from './interfaces/node';\nimport {LQueries} from './interfaces/query';\nimport {BINDING_INDEX, CONTEXT, DECLARATION_VIEW, FLAGS, HOST_NODE, LView, LViewFlags, OpaqueViewState, QUERIES, TVIEW} from './interfaces/view';\nimport {isContentQueryHost} from './util';\n\n\n\n/**\n * Store the element depth count. This is used to identify the root elements of the template\n * so that we can than attach `LView` to only those elements.\n */\nlet elementDepthCount !: number;\n\nexport function getElementDepthCount() {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return elementDepthCount;\n}\n\nexport function increaseElementDepthCount() {\n  elementDepthCount++;\n}\n\nexport function decreaseElementDepthCount() {\n  elementDepthCount--;\n}\n\nlet currentDirectiveDef: DirectiveDef<any>|ComponentDef<any>|null = null;\n\nexport function getCurrentDirectiveDef(): DirectiveDef<any>|ComponentDef<any>|null {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return currentDirectiveDef;\n}\n\nexport function setCurrentDirectiveDef(def: DirectiveDef<any>| ComponentDef<any>| null): void {\n  currentDirectiveDef = def;\n}\n\n/**\n * Stores whether directives should be matched to elements.\n *\n * When template contains `ngNonBindable` than we need to prevent the runtime form matching\n * directives on children of that element.\n *\n * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n * </div>\n * ```\n */\nlet bindingsEnabled !: boolean;\n\nexport function getBindingsEnabled(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return bindingsEnabled;\n}\n\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function enableBindings(): void {\n  bindingsEnabled = true;\n}\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * ```\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- disabledBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- enableBindings() -->\n * </div>\n * ```\n */\nexport function disableBindings(): void {\n  bindingsEnabled = false;\n}\n\nexport function getLView(): LView {\n  return lView;\n}\n\n/**\n * Restores `contextViewData` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n */\nexport function restoreView(viewToRestore: OpaqueViewState) {\n  contextLView = viewToRestore as any as LView;\n}\n\n/** Used to set the parent property when nodes are created and track query results. */\nlet previousOrParentTNode: TNode;\n\nexport function getPreviousOrParentTNode(): TNode {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return previousOrParentTNode;\n}\n\nexport function setPreviousOrParentTNode(tNode: TNode) {\n  previousOrParentTNode = tNode;\n}\n\nexport function setTNodeAndViewData(tNode: TNode, view: LView) {\n  previousOrParentTNode = tNode;\n  lView = view;\n}\n\n/**\n * If `isParent` is:\n *  - `true`: then `previousOrParentTNode` points to a parent node.\n *  - `false`: then `previousOrParentTNode` points to previous node (sibling).\n */\nlet isParent: boolean;\n\nexport function getIsParent(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return isParent;\n}\n\nexport function setIsParent(value: boolean): void {\n  isParent = value;\n}\n\n/**\n * Query instructions can ask for \"current queries\" in 2 different cases:\n * - when creating view queries (at the root of a component view, before any node is created - in\n * this case currentQueries points to view queries)\n * - when creating content queries (i.e. this previousOrParentTNode points to a node on which we\n * create content queries).\n */\nexport function getOrCreateCurrentQueries(\n    QueryType: {new (parent: null, shallow: null, deep: null): LQueries}): LQueries {\n  const lView = getLView();\n  let currentQueries = lView[QUERIES];\n  // If this is the first content query on a node, any existing LQueries needs to be cloned.\n  // In subsequent template passes, the cloning occurs before directive instantiation\n  // in `createDirectivesAndLocals`.\n  if (previousOrParentTNode && previousOrParentTNode !== lView[HOST_NODE] &&\n      !isContentQueryHost(previousOrParentTNode)) {\n    currentQueries && (currentQueries = lView[QUERIES] = currentQueries.clone());\n    previousOrParentTNode.flags |= TNodeFlags.hasContentQuery;\n  }\n\n  return currentQueries || (lView[QUERIES] = new QueryType(null, null, null));\n}\n\n/** Checks whether a given view is in creation mode */\nexport function isCreationMode(view: LView = lView): boolean {\n  return (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\n/**\n * State of the current view being processed.\n *\n * An array of nodes (text, element, container, etc), pipes, their bindings, and\n * any local variables that need to be stored between invocations.\n */\nlet lView: LView;\n\n/**\n * The last viewData retrieved by nextContext().\n * Allows building nextContext() and reference() calls.\n *\n * e.g. const inner = x().$implicit; const outer = x().$implicit;\n */\nlet contextLView: LView = null !;\n\nexport function getContextLView(): LView {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return contextLView;\n}\n\n/**\n * In this mode, any changes in bindings will throw an ExpressionChangedAfterChecked error.\n *\n * Necessary to support ChangeDetectorRef.checkNoChanges().\n */\nlet checkNoChangesMode = false;\n\nexport function getCheckNoChangesMode(): boolean {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return checkNoChangesMode;\n}\n\nexport function setCheckNoChangesMode(mode: boolean): void {\n  checkNoChangesMode = mode;\n}\n\n/** Whether or not this is the first time the current view has been processed. */\nlet firstTemplatePass = true;\n\nexport function getFirstTemplatePass(): boolean {\n  return firstTemplatePass;\n}\n\nexport function setFirstTemplatePass(value: boolean): void {\n  firstTemplatePass = value;\n}\n\n/**\n * The root index from which pure function instructions should calculate their binding\n * indices. In component views, this is TView.bindingStartIndex. In a host binding\n * context, this is the TView.expandoStartIndex + any dirs/hostVars before the given dir.\n */\nlet bindingRootIndex: number = -1;\n\n// top level variables should not be exported for performance reasons (PERF_NOTES.md)\nexport function getBindingRoot() {\n  return bindingRootIndex;\n}\n\nexport function setBindingRoot(value: number) {\n  bindingRootIndex = value;\n}\n\n/**\n * Swap the current state with a new state.\n *\n * For performance reasons we store the state in the top level of the module.\n * This way we minimize the number of properties to read. Whenever a new view\n * is entered we have to store the state for later, and when the view is\n * exited the state has to be restored\n *\n * @param newView New state to become active\n * @param host Element to which the View is a child of\n * @returns the previous state;\n */\nexport function enterView(newView: LView, hostTNode: TElementNode | TViewNode | null): LView {\n  const oldView = lView;\n  if (newView) {\n    const tView = newView[TVIEW];\n    firstTemplatePass = tView.firstTemplatePass;\n    bindingRootIndex = tView.bindingStartIndex;\n  }\n\n  previousOrParentTNode = hostTNode !;\n  isParent = true;\n\n  lView = contextLView = newView;\n  return oldView;\n}\n\nexport function nextContextImpl<T = any>(level: number = 1): T {\n  contextLView = walkUpViews(level, contextLView !);\n  return contextLView[CONTEXT] as T;\n}\n\nfunction walkUpViews(nestingLevel: number, currentView: LView): LView {\n  while (nestingLevel > 0) {\n    ngDevMode && assertDefined(\n                     currentView[DECLARATION_VIEW],\n                     'Declaration view should be defined if nesting level is greater than 0.');\n    currentView = currentView[DECLARATION_VIEW] !;\n    nestingLevel--;\n  }\n  return currentView;\n}\n\n/**\n * Resets the application state.\n */\nexport function resetComponentState() {\n  isParent = false;\n  previousOrParentTNode = null !;\n  elementDepthCount = 0;\n  bindingsEnabled = true;\n}\n\n/**\n * Used in lieu of enterView to make it clear when we are exiting a child view. This makes\n * the direction of traversal (up or down the view tree) a bit clearer.\n *\n * @param newView New state to become active\n */\nexport function leaveView(newView: LView): void {\n  const tView = lView[TVIEW];\n  if (isCreationMode(lView)) {\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n  } else {\n    try {\n      executeHooks(lView, tView.viewHooks, tView.viewCheckHooks, checkNoChangesMode);\n    } finally {\n      // Views are clean and in update mode after being checked, so these bits are cleared\n      lView[FLAGS] &= ~(LViewFlags.Dirty | LViewFlags.FirstLViewPass);\n      lView[FLAGS] |= LViewFlags.RunInit;\n      lView[BINDING_INDEX] = tView.bindingStartIndex;\n    }\n  }\n  enterView(newView, null);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {SimpleChanges} from '../interface/simple_change';\nimport {assertEqual} from '../util/assert';\n\nimport {DirectiveDef} from './interfaces/definition';\nimport {TNode} from './interfaces/node';\nimport {FLAGS, HookData, LView, LViewFlags, TView} from './interfaces/view';\nimport {OnChangesDirectiveWrapper, unwrapOnChangesDirectiveWrapper} from './onchanges_util';\n\n\n\n/**\n * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.\n *\n * Must be run *only* on the first template pass.\n *\n * The TView's hooks arrays are arranged in alternating pairs of directiveIndex and hookFunction,\n * i.e.: `[directiveIndexA, hookFunctionA, directiveIndexB, hookFunctionB, ...]`. For `OnChanges`\n * hooks, the `directiveIndex` will be *negative*, signaling {@link callHooks} that the\n * `hookFunction` must be passed the the appropriate {@link SimpleChanges} object.\n *\n * @param directiveIndex The index of the directive in LView\n * @param directiveDef The definition containing the hooks to setup in tView\n * @param tView The current TView\n */\nexport function registerPreOrderHooks(\n    directiveIndex: number, directiveDef: DirectiveDef<any>, tView: TView): void {\n  ngDevMode &&\n      assertEqual(tView.firstTemplatePass, true, 'Should only be called on first template pass');\n\n  const {onChanges, onInit, doCheck} = directiveDef;\n\n  if (onChanges) {\n    (tView.initHooks || (tView.initHooks = [])).push(-directiveIndex, onChanges);\n    (tView.checkHooks || (tView.checkHooks = [])).push(-directiveIndex, onChanges);\n  }\n\n  if (onInit) {\n    (tView.initHooks || (tView.initHooks = [])).push(directiveIndex, onInit);\n  }\n\n  if (doCheck) {\n    (tView.initHooks || (tView.initHooks = [])).push(directiveIndex, doCheck);\n    (tView.checkHooks || (tView.checkHooks = [])).push(directiveIndex, doCheck);\n  }\n}\n\n/**\n *\n * Loops through the directives on the provided `tNode` and queues hooks to be\n * run that are not initialization hooks.\n *\n * Should be executed during `elementEnd()` and similar to\n * preserve hook execution order. Content, view, and destroy hooks for projected\n * components and directives must be called *before* their hosts.\n *\n * Sets up the content, view, and destroy hooks on the provided `tView` such that\n * they're added in alternating pairs of directiveIndex and hookFunction,\n * i.e.: `[directiveIndexA, hookFunctionA, directiveIndexB, hookFunctionB, ...]`\n *\n * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up\n * separately at `elementStart`.\n *\n * @param tView The current TView\n * @param tNode The TNode whose directives are to be searched for hooks to queue\n */\nexport function registerPostOrderHooks(tView: TView, tNode: TNode): void {\n  if (tView.firstTemplatePass) {\n    // It's necessary to loop through the directives at elementEnd() (rather than processing in\n    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy\n    // hooks for projected components and directives must be called *before* their hosts.\n    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {\n      const directiveDef = tView.data[i] as DirectiveDef<any>;\n      if (directiveDef.afterContentInit) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentInit);\n      }\n\n      if (directiveDef.afterContentChecked) {\n        (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);\n        (tView.contentCheckHooks || (tView.contentCheckHooks = [\n         ])).push(i, directiveDef.afterContentChecked);\n      }\n\n      if (directiveDef.afterViewInit) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewInit);\n      }\n\n      if (directiveDef.afterViewChecked) {\n        (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);\n        (tView.viewCheckHooks || (tView.viewCheckHooks = [\n         ])).push(i, directiveDef.afterViewChecked);\n      }\n\n      if (directiveDef.onDestroy != null) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);\n      }\n    }\n  }\n}\n\n/**\n * Executes necessary hooks at the start of executing a template.\n *\n * Executes hooks that are to be run during the initialization of a directive such\n * as `onChanges`, `onInit`, and `doCheck`.\n *\n * Has the side effect of updating the RunInit flag in `lView` to be `0`, so that\n * this isn't run a second time.\n *\n * @param lView The current view\n * @param tView Static data for the view containing the hooks to be executed\n * @param checkNoChangesMode Whether or not we're in checkNoChanges mode.\n */\nexport function executeInitHooks(\n    currentView: LView, tView: TView, checkNoChangesMode: boolean): void {\n  if (!checkNoChangesMode && currentView[FLAGS] & LViewFlags.RunInit) {\n    executeHooks(currentView, tView.initHooks, tView.checkHooks, checkNoChangesMode);\n    currentView[FLAGS] &= ~LViewFlags.RunInit;\n  }\n}\n\n/**\n * Executes hooks against the given `LView` based off of whether or not\n * This is the first pass.\n *\n * @param lView The view instance data to run the hooks against\n * @param firstPassHooks An array of hooks to run if we're in the first view pass\n * @param checkHooks An Array of hooks to run if we're not in the first view pass.\n * @param checkNoChangesMode Whether or not we're in no changes mode.\n */\nexport function executeHooks(\n    currentView: LView, firstPassHooks: HookData | null, checkHooks: HookData | null,\n    checkNoChangesMode: boolean): void {\n  if (checkNoChangesMode) return;\n\n  const hooksToCall = currentView[FLAGS] & LViewFlags.FirstLViewPass ? firstPassHooks : checkHooks;\n  if (hooksToCall) {\n    callHooks(currentView, hooksToCall);\n  }\n}\n\n/**\n * Calls lifecycle hooks with their contexts, skipping init hooks if it's not\n * the first LView pass, and skipping onChanges hooks if there are no changes present.\n *\n * @param currentView The current view\n * @param arr The array in which the hooks are found\n */\nexport function callHooks(currentView: LView, arr: HookData): void {\n  for (let i = 0; i < arr.length; i += 2) {\n    const directiveIndex = arr[i] as number;\n    const hook = arr[i + 1] as((() => void) | ((changes: SimpleChanges) => void));\n    // Negative indices signal that we're dealing with an `onChanges` hook.\n    const isOnChangesHook = directiveIndex < 0;\n    const directiveOrWrappedDirective =\n        currentView[isOnChangesHook ? -directiveIndex : directiveIndex];\n    const directive = unwrapOnChangesDirectiveWrapper(directiveOrWrappedDirective);\n\n    if (isOnChangesHook) {\n      const onChanges: OnChangesDirectiveWrapper = directiveOrWrappedDirective;\n      const changes = onChanges.changes;\n      if (changes) {\n        onChanges.previous = changes;\n        onChanges.changes = null;\n        hook.call(onChanges.instance, changes);\n      }\n    } else {\n      hook.call(directive);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags, InjectionToken} from '../di';\nimport {Injector} from '../di/injector';\nimport {injectRootLimpMode, setInjectImplementation} from '../di/injector_compatibility';\nimport {getInjectableDef, getInjectorDef} from '../di/interface/defs';\nimport {Type} from '../interface/type';\nimport {assertDefined, assertEqual} from '../util/assert';\n\nimport {getComponentDef, getDirectiveDef, getPipeDef} from './definition';\nimport {NG_ELEMENT_ID} from './fields';\nimport {DirectiveDef} from './interfaces/definition';\nimport {NO_PARENT_INJECTOR, NodeInjectorFactory, PARENT_INJECTOR, RelativeInjectorLocation, RelativeInjectorLocationFlags, TNODE, isFactory} from './interfaces/injector';\nimport {AttributeMarker, TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeFlags, TNodeProviderIndexes, TNodeType} from './interfaces/node';\nimport {DECLARATION_VIEW, HOST_NODE, INJECTOR, LView, TData, TVIEW, TView} from './interfaces/view';\nimport {assertNodeOfPossibleTypes} from './node_assert';\nimport {unwrapOnChangesDirectiveWrapper} from './onchanges_util';\nimport {getLView, getPreviousOrParentTNode, setTNodeAndViewData} from './state';\nimport {findComponentView, getParentInjectorIndex, getParentInjectorView, hasParentInjector, isComponent, isComponentDef, renderStringify} from './util';\n\n\n\n/**\n * Defines if the call to `inject` should include `viewProviders` in its resolution.\n *\n * This is set to true when we try to instantiate a component. This value is reset in\n * `getNodeInjectable` to a value which matches the declaration location of the token about to be\n * instantiated. This is done so that if we are injecting a token which was declared outside of\n * `viewProviders` we don't accidentally pull `viewProviders` in.\n *\n * Example:\n *\n * ```\n * @Injectable()\n * class MyService {\n *   constructor(public value: String) {}\n * }\n *\n * @Component({\n *   providers: [\n *     MyService,\n *     {provide: String, value: 'providers' }\n *   ]\n *   viewProviders: [\n *     {provide: String, value: 'viewProviders'}\n *   ]\n * })\n * class MyComponent {\n *   constructor(myService: MyService, value: String) {\n *     // We expect that Component can see into `viewProviders`.\n *     expect(value).toEqual('viewProviders');\n *     // `MyService` was not declared in `viewProviders` hence it can't see it.\n *     expect(myService.value).toEqual('providers');\n *   }\n * }\n *\n * ```\n */\nlet includeViewProviders = true;\n\nfunction setIncludeViewProviders(v: boolean): boolean {\n  const oldValue = includeViewProviders;\n  includeViewProviders = v;\n  return oldValue;\n}\n\n/**\n * The number of slots in each bloom filter (used by DI). The larger this number, the fewer\n * directives that will share slots, and thus, the fewer false positives when checking for\n * the existence of a directive.\n */\nconst BLOOM_SIZE = 256;\nconst BLOOM_MASK = BLOOM_SIZE - 1;\n\n/** Counter used to generate unique IDs for directives. */\nlet nextNgElementId = 0;\n\n/**\n * Registers this directive as present in its node's injector by flipping the directive's\n * corresponding bit in the injector's bloom filter.\n *\n * @param injectorIndex The index of the node injector where this token should be registered\n * @param tView The TView for the injector's bloom filters\n * @param type The directive token to register\n */\nexport function bloomAdd(\n    injectorIndex: number, tView: TView, type: Type<any>| InjectionToken<any>| string): void {\n  ngDevMode && assertEqual(tView.firstTemplatePass, true, 'expected firstTemplatePass to be true');\n  let id: number|undefined =\n      typeof type !== 'string' ? (type as any)[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;\n\n  // Set a unique ID on the directive type, so if something tries to inject the directive,\n  // we can easily retrieve the ID and hash it into the bloom bit that should be checked.\n  if (id == null) {\n    id = (type as any)[NG_ELEMENT_ID] = nextNgElementId++;\n  }\n\n  // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),\n  // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.\n  const bloomBit = id & BLOOM_MASK;\n\n  // Create a mask that targets the specific bit associated with the directive.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomBit;\n\n  // Use the raw bloomBit number to determine which bloom filter bucket we should check\n  // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc\n  const b7 = bloomBit & 0x80;\n  const b6 = bloomBit & 0x40;\n  const b5 = bloomBit & 0x20;\n  const tData = tView.data as number[];\n\n  if (b7) {\n    b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :\n         (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));\n  } else {\n    b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :\n         (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));\n  }\n}\n\n/**\n * Creates (or gets an existing) injector for a given element or container.\n *\n * @param tNode for which an injector should be retrieved / created.\n * @param hostView View where the node is stored\n * @returns Node injector\n */\nexport function getOrCreateNodeInjectorForNode(\n    tNode: TElementNode | TContainerNode | TElementContainerNode, hostView: LView): number {\n  const existingInjectorIndex = getInjectorIndex(tNode, hostView);\n  if (existingInjectorIndex !== -1) {\n    return existingInjectorIndex;\n  }\n\n  const tView = hostView[TVIEW];\n  if (tView.firstTemplatePass) {\n    tNode.injectorIndex = hostView.length;\n    insertBloom(tView.data, tNode);  // foundation for node bloom\n    insertBloom(hostView, null);     // foundation for cumulative bloom\n    insertBloom(tView.blueprint, null);\n\n    ngDevMode && assertEqual(\n                     tNode.flags === 0 || tNode.flags === TNodeFlags.isComponent, true,\n                     'expected tNode.flags to not be initialized');\n  }\n\n  const parentLoc = getParentInjectorLocation(tNode, hostView);\n  const parentIndex = getParentInjectorIndex(parentLoc);\n  const parentLView = getParentInjectorView(parentLoc, hostView);\n\n  const injectorIndex = tNode.injectorIndex;\n\n  // If a parent injector can't be found, its location is set to -1.\n  // In that case, we don't need to set up a cumulative bloom\n  if (hasParentInjector(parentLoc)) {\n    const parentData = parentLView[TVIEW].data as any;\n    // Creates a cumulative bloom filter that merges the parent's bloom filter\n    // and its own cumulative bloom (which contains tokens for all ancestors)\n    for (let i = 0; i < 8; i++) {\n      hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];\n    }\n  }\n\n  hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;\n  return injectorIndex;\n}\n\nfunction insertBloom(arr: any[], footer: TNode | null): void {\n  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);\n}\n\n\nexport function getInjectorIndex(tNode: TNode, hostView: LView): number {\n  if (tNode.injectorIndex === -1 ||\n      // If the injector index is the same as its parent's injector index, then the index has been\n      // copied down from the parent node. No injector has been created yet on this node.\n      (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||\n      // After the first template pass, the injector index might exist but the parent values\n      // might not have been calculated yet for this instance\n      hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {\n    return -1;\n  } else {\n    return tNode.injectorIndex;\n  }\n}\n\n/**\n * Finds the index of the parent injector, with a view offset if applicable. Used to set the\n * parent injector initially.\n *\n * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`\n */\nexport function getParentInjectorLocation(tNode: TNode, view: LView): RelativeInjectorLocation {\n  if (tNode.parent && tNode.parent.injectorIndex !== -1) {\n    return tNode.parent.injectorIndex as any;  // ViewOffset is 0\n  }\n\n  // For most cases, the parent injector index can be found on the host node (e.g. for component\n  // or container), so this loop will be skipped, but we must keep the loop here to support\n  // the rarer case of deeply nested <ng-template> tags or inline views.\n  let hostTNode = view[HOST_NODE];\n  let viewOffset = 1;\n  while (hostTNode && hostTNode.injectorIndex === -1) {\n    view = view[DECLARATION_VIEW] !;\n    hostTNode = view ? view[HOST_NODE] : null;\n    viewOffset++;\n  }\n\n  return hostTNode ?\n      hostTNode.injectorIndex | (viewOffset << RelativeInjectorLocationFlags.ViewOffsetShift) :\n      -1 as any;\n}\n\n/**\n * Makes a type or an injection token public to the DI system by adding it to an\n * injector's bloom filter.\n *\n * @param di The node injector in which a directive will be added\n * @param token The type or the injection token to be made public\n */\nexport function diPublicInInjector(\n    injectorIndex: number, view: LView, token: InjectionToken<any>| Type<any>): void {\n  bloomAdd(injectorIndex, view[TVIEW], token);\n}\n\n/**\n * Inject static attribute value into directive constructor.\n *\n * This method is used with `factory` functions which are generated as part of\n * `defineDirective` or `defineComponent`. The method retrieves the static value\n * of an attribute. (Dynamic attributes are not supported since they are not resolved\n *  at the time of injection and can change over time.)\n *\n * # Example\n * Given:\n * ```\n * @Component(...)\n * class MyComponent {\n *   constructor(@Attribute('title') title: string) { ... }\n * }\n * ```\n * When instantiated with\n * ```\n * <my-component title=\"Hello\"></my-component>\n * ```\n *\n * Then factory method generated is:\n * ```\n * MyComponent.ngComponentDef = defineComponent({\n *   factory: () => new MyComponent(injectAttribute('title'))\n *   ...\n * })\n * ```\n *\n * @publicApi\n */\nexport function injectAttributeImpl(tNode: TNode, attrNameToInject: string): string|null {\n  ngDevMode && assertNodeOfPossibleTypes(\n                   tNode, TNodeType.Container, TNodeType.Element, TNodeType.ElementContainer);\n  ngDevMode && assertDefined(tNode, 'expecting tNode');\n  const attrs = tNode.attrs;\n  if (attrs) {\n    for (let i = 0; i < attrs.length; i = i + 2) {\n      const attrName = attrs[i];\n      if (attrName === AttributeMarker.SelectOnly) break;\n      if (attrName == attrNameToInject) {\n        return attrs[i + 1] as string;\n      }\n    }\n  }\n  return null;\n}\n\n\n/**\n * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.\n *\n * Look for the injector providing the token by walking up the node injector tree and then\n * the module injector tree.\n *\n * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom\n * filter. Negative values are reserved for special objects.\n *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)\n *\n * @param tNode The Node where the search for the injector should start\n * @param lView The `LView` that contains the `tNode`\n * @param token The token to look for\n * @param flags Injection flags\n * @param notFoundValue The value to return when the injection flags is `InjectFlags.Optional`\n * @returns the value from the injector, `null` when not found, or `notFoundValue` if provided\n */\nexport function getOrCreateInjectable<T>(\n    tNode: TElementNode | TContainerNode | TElementContainerNode | null, lView: LView,\n    token: Type<T>| InjectionToken<T>, flags: InjectFlags = InjectFlags.Default,\n    notFoundValue?: any): T|null {\n  if (tNode) {\n    const bloomHash = bloomHashBitOrFactory(token);\n    // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef\n    // so just call the factory function to create it.\n    if (typeof bloomHash === 'function') {\n      const savePreviousOrParentTNode = getPreviousOrParentTNode();\n      const saveLView = getLView();\n      setTNodeAndViewData(tNode, lView);\n      try {\n        const value = bloomHash();\n        if (value == null && !(flags & InjectFlags.Optional)) {\n          throw new Error(`No provider for ${renderStringify(token)}!`);\n        } else {\n          return value;\n        }\n      } finally {\n        setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n      }\n    } else if (typeof bloomHash == 'number') {\n      if (bloomHash === -1) {\n        // `-1` is a special value used to identify `Injector` types.\n        return new NodeInjector(tNode, lView) as any;\n      }\n      // If the token has a bloom hash, then it is a token which could be in NodeInjector.\n\n      // A reference to the previous injector TView that was found while climbing the element\n      // injector tree. This is used to know if viewProviders can be accessed on the current\n      // injector.\n      let previousTView: TView|null = null;\n      let injectorIndex = getInjectorIndex(tNode, lView);\n      let parentLocation: RelativeInjectorLocation = NO_PARENT_INJECTOR;\n      let hostTElementNode: TNode|null =\n          flags & InjectFlags.Host ? findComponentView(lView)[HOST_NODE] : null;\n\n      // If we should skip this injector, or if there is no injector on this node, start by\n      // searching\n      // the parent injector.\n      if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {\n        parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :\n                                                lView[injectorIndex + PARENT_INJECTOR];\n\n        if (!shouldSearchParent(flags, false)) {\n          injectorIndex = -1;\n        } else {\n          previousTView = lView[TVIEW];\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        }\n      }\n\n      // Traverse up the injector tree until we find a potential match or until we know there\n      // *isn't* a match.\n      while (injectorIndex !== -1) {\n        parentLocation = lView[injectorIndex + PARENT_INJECTOR];\n\n        // Check the current injector. If it matches, see if it contains token.\n        const tView = lView[TVIEW];\n        if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {\n          // At this point, we have an injector which *may* contain the token, so we step through\n          // the providers and directives associated with the injector's corresponding node to get\n          // the instance.\n          const instance: T|null = searchTokensOnInjector<T>(\n              injectorIndex, lView, token, previousTView, flags, hostTElementNode);\n          if (instance !== NOT_FOUND) {\n            return instance;\n          }\n        }\n        if (shouldSearchParent(\n                flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&\n            bloomHasToken(bloomHash, injectorIndex, lView)) {\n          // The def wasn't found anywhere on this node, so it was a false positive.\n          // Traverse up the tree and continue searching.\n          previousTView = tView;\n          injectorIndex = getParentInjectorIndex(parentLocation);\n          lView = getParentInjectorView(parentLocation, lView);\n        } else {\n          // If we should not search parent OR If the ancestor bloom filter value does not have the\n          // bit corresponding to the directive we can give up on traversing up to find the specific\n          // injector.\n          injectorIndex = -1;\n        }\n      }\n    }\n  }\n\n  if (flags & InjectFlags.Optional && notFoundValue === undefined) {\n    // This must be set or the NullInjector will throw for optional deps\n    notFoundValue = null;\n  }\n\n  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {\n    const moduleInjector = lView[INJECTOR];\n    if (moduleInjector) {\n      return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);\n    } else {\n      return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);\n    }\n  }\n  if (flags & InjectFlags.Optional) {\n    return notFoundValue;\n  } else {\n    throw new Error(`NodeInjector: NOT_FOUND [${renderStringify(token)}]`);\n  }\n}\n\nconst NOT_FOUND = {};\n\nfunction searchTokensOnInjector<T>(\n    injectorIndex: number, lView: LView, token: Type<T>| InjectionToken<T>,\n    previousTView: TView | null, flags: InjectFlags, hostTElementNode: TNode | null) {\n  const currentTView = lView[TVIEW];\n  const tNode = currentTView.data[injectorIndex + TNODE] as TNode;\n  // First, we need to determine if view providers can be accessed by the starting element.\n  // There are two possibities\n  const canAccessViewProviders = previousTView == null ?\n      // 1) This is the first invocation `previousTView == null` which means that we are at the\n      // `TNode` of where injector is starting to look. In such a case the only time we are allowed\n      // to look into the ViewProviders is if:\n      // - we are on a component\n      // - AND the injector set `includeViewProviders` to true (implying that the token can see\n      // ViewProviders because it is the Component or a Service which itself was declared in\n      // ViewProviders)\n      (isComponent(tNode) && includeViewProviders) :\n      // 2) `previousTView != null` which means that we are now walking across the parent nodes.\n      // In such a case we are only allowed to look into the ViewProviders if:\n      // - We just crossed from child View to Parent View `previousTView != currentTView`\n      // - AND the parent TNode is an Element.\n      // This means that we just came from the Component's View and therefore are allowed to see\n      // into the ViewProviders.\n      (previousTView != currentTView && (tNode.type === TNodeType.Element));\n\n  // This special case happens when there is a @host on the inject and when we are searching\n  // on the host element node.\n  const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;\n\n  const injectableIdx =\n      locateDirectiveOrProvider(tNode, lView, token, canAccessViewProviders, isHostSpecialCase);\n  if (injectableIdx !== null) {\n    return getNodeInjectable(currentTView.data, lView, injectableIdx, tNode as TElementNode);\n  } else {\n    return NOT_FOUND;\n  }\n}\n\n/**\n * Searches for the given token among the node's directives and providers.\n *\n * @param tNode TNode on which directives are present.\n * @param lView The view we are currently processing\n * @param token Provider token or type of a directive to look for.\n * @param canAccessViewProviders Whether view providers should be considered.\n * @param isHostSpecialCase Whether the host special case applies.\n * @returns Index of a found directive or provider, or null when none found.\n */\nexport function locateDirectiveOrProvider<T>(\n    tNode: TNode, lView: LView, token: Type<T>| InjectionToken<T>, canAccessViewProviders: boolean,\n    isHostSpecialCase: boolean | number): number|null {\n  const tView = lView[TVIEW];\n  const nodeProviderIndexes = tNode.providerIndexes;\n  const tInjectables = tView.data;\n\n  const injectablesStart = nodeProviderIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const directivesStart = tNode.directiveStart;\n  const directiveEnd = tNode.directiveEnd;\n  const cptViewProvidersCount =\n      nodeProviderIndexes >> TNodeProviderIndexes.CptViewProvidersCountShift;\n  const startingIndex =\n      canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;\n  // When the host special case applies, only the viewProviders and the component are visible\n  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;\n  for (let i = startingIndex; i < endIndex; i++) {\n    const providerTokenOrDef = tInjectables[i] as InjectionToken<any>| Type<any>| DirectiveDef<any>;\n    if (i < directivesStart && token === providerTokenOrDef ||\n        i >= directivesStart && (providerTokenOrDef as DirectiveDef<any>).type === token) {\n      return i;\n    }\n  }\n  if (isHostSpecialCase) {\n    const dirDef = tInjectables[directivesStart] as DirectiveDef<any>;\n    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {\n      return directivesStart;\n    }\n  }\n  return null;\n}\n\n/**\n* Retrieve or instantiate the injectable from the `lData` at particular `index`.\n*\n* This function checks to see if the value has already been instantiated and if so returns the\n* cached `injectable`. Otherwise if it detects that the value is still a factory it\n* instantiates the `injectable` and caches the value.\n*/\nexport function getNodeInjectable(\n    tData: TData, lData: LView, index: number, tNode: TElementNode): any {\n  let value = lData[index];\n  if (isFactory(value)) {\n    const factory: NodeInjectorFactory = value;\n    if (factory.resolving) {\n      throw new Error(`Circular dep for ${renderStringify(tData[index])}`);\n    }\n    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);\n    factory.resolving = true;\n    let previousInjectImplementation;\n    if (factory.injectImpl) {\n      previousInjectImplementation = setInjectImplementation(factory.injectImpl);\n    }\n    const savePreviousOrParentTNode = getPreviousOrParentTNode();\n    const saveLView = getLView();\n    setTNodeAndViewData(tNode, lData);\n    try {\n      value = lData[index] = factory.factory(null, tData, lData, tNode);\n      const tView = lData[TVIEW];\n      if (value && factory.isProvider && value.ngOnDestroy) {\n        (tView.destroyHooks || (tView.destroyHooks = [])).push(index, value.ngOnDestroy);\n      }\n    } finally {\n      if (factory.injectImpl) setInjectImplementation(previousInjectImplementation);\n      setIncludeViewProviders(previousIncludeViewProviders);\n      factory.resolving = false;\n      setTNodeAndViewData(savePreviousOrParentTNode, saveLView);\n    }\n  } else {\n    value = unwrapOnChangesDirectiveWrapper(value);\n  }\n  return value;\n}\n\n/**\n * Returns the bit in an injector's bloom filter that should be used to determine whether or not\n * the directive might be provided by the injector.\n *\n * When a directive is public, it is added to the bloom filter and given a unique ID that can be\n * retrieved on the Type. When the directive isn't public or the token is not a directive `null`\n * is returned as the node injector can not possibly provide that token.\n *\n * @param token the injection token\n * @returns the matching bit to check in the bloom filter or `null` if the token is not known.\n *   When the returned value is negative then it represents special values such as `Injector`.\n */\nexport function bloomHashBitOrFactory(token: Type<any>| InjectionToken<any>| string): number|\n    Function|undefined {\n  ngDevMode && assertDefined(token, 'token must be defined');\n  if (typeof token === 'string') {\n    return token.charCodeAt(0) || 0;\n  }\n  const tokenId: number|undefined = (token as any)[NG_ELEMENT_ID];\n  // Negative token IDs are used for special objects such as `Injector`\n  return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;\n}\n\nexport function bloomHasToken(\n    bloomHash: number, injectorIndex: number, injectorView: LView | TData) {\n  // Create a mask that targets the specific bit associated with the directive we're looking for.\n  // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding\n  // to bit positions 0 - 31 in a 32 bit integer.\n  const mask = 1 << bloomHash;\n  const b7 = bloomHash & 0x80;\n  const b6 = bloomHash & 0x40;\n  const b5 = bloomHash & 0x20;\n\n  // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:\n  // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.\n  // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.\n  let value: number;\n\n  if (b7) {\n    value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :\n                 (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);\n  } else {\n    value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :\n                 (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);\n  }\n\n  // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,\n  // this injector is a potential match.\n  return !!(value & mask);\n}\n\n/** Returns true if flags prevent parent injector from being searched for tokens */\nfunction shouldSearchParent(flags: InjectFlags, isFirstHostTNode: boolean): boolean|number {\n  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);\n}\n\nexport class NodeInjector implements Injector {\n  constructor(\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode|null,\n      private _lView: LView) {}\n\n  get(token: any, notFoundValue?: any): any {\n    return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);\n  }\n}\n\nexport function getFactoryOf<T>(type: Type<any>): ((type: Type<T>| null) => T)|null {\n  const typeAny = type as any;\n  const def = getComponentDef<T>(typeAny) || getDirectiveDef<T>(typeAny) ||\n      getPipeDef<T>(typeAny) || getInjectableDef<T>(typeAny) || getInjectorDef<T>(typeAny);\n  if (!def || def.factory === undefined) {\n    return null;\n  }\n  return def.factory;\n}\n\nexport function getInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T {\n  const proto = Object.getPrototypeOf(type.prototype).constructor as Type<any>;\n  const factory = getFactoryOf<T>(proto);\n  if (factory !== null) {\n    return factory;\n  } else {\n    // There is no factory defined. Either this was improper usage of inheritance\n    // (no Angular decorator on the superclass) or there is no constructor at all\n    // in the inheritance chain. Since the two cases cannot be distinguished, the\n    // latter has to be assumed.\n    return (t) => new t();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../util/ng_dev_mode';\nimport {assertDomNode} from '../util/assert';\nimport {EMPTY_ARRAY} from './empty';\nimport {LContext, MONKEY_PATCH_KEY_NAME} from './interfaces/context';\nimport {TNode, TNodeFlags} from './interfaces/node';\nimport {RElement} from './interfaces/renderer';\nimport {CONTEXT, HEADER_OFFSET, HOST, LView, TVIEW} from './interfaces/view';\nimport {unwrapOnChangesDirectiveWrapper} from './onchanges_util';\nimport {getComponentViewByIndex, getNativeByTNode, readElementValue, readPatchedData} from './util';\n\n\n\n/** Returns the matching `LContext` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched\n * value will be that of the newly created `LContext`.\n *\n * If the monkey-patched value is the `LView` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport function getLContext(target: any): LContext|null {\n  let mpValue = readPatchedData(target);\n  if (mpValue) {\n    // only when it's an array is it considered an LView instance\n    // ... otherwise it's an already constructed LContext instance\n    if (Array.isArray(mpValue)) {\n      const lView: LView = mpValue !;\n      let nodeIndex: number;\n      let component: any = undefined;\n      let directives: any[]|null|undefined = undefined;\n\n      if (isComponentInstance(target)) {\n        nodeIndex = findViaComponent(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided component was not found in the application');\n        }\n        component = target;\n      } else if (isDirectiveInstance(target)) {\n        nodeIndex = findViaDirective(lView, target);\n        if (nodeIndex == -1) {\n          throw new Error('The provided directive was not found in the application');\n        }\n        directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);\n      } else {\n        nodeIndex = findViaNativeElement(lView, target as RElement);\n        if (nodeIndex == -1) {\n          return null;\n        }\n      }\n\n      // the goal is not to fill the entire context full of data because the lookups\n      // are expensive. Instead, only the target data (the element, component, container, ICU\n      // expression or directive details) are filled into the context. If called multiple times\n      // with different target values then the missing target data will be filled in.\n      const native = readElementValue(lView[nodeIndex]);\n      const existingCtx = readPatchedData(native);\n      const context: LContext = (existingCtx && !Array.isArray(existingCtx)) ?\n          existingCtx :\n          createLContext(lView, nodeIndex, native);\n\n      // only when the component has been discovered then update the monkey-patch\n      if (component && context.component === undefined) {\n        context.component = component;\n        attachPatchData(context.component, context);\n      }\n\n      // only when the directives have been discovered then update the monkey-patch\n      if (directives && context.directives === undefined) {\n        context.directives = directives;\n        for (let i = 0; i < directives.length; i++) {\n          attachPatchData(directives[i], context);\n        }\n      }\n\n      attachPatchData(context.native, context);\n      mpValue = context;\n    }\n  } else {\n    const rElement = target as RElement;\n    ngDevMode && assertDomNode(rElement);\n\n    // if the context is not found then we need to traverse upwards up the DOM\n    // to find the nearest element that has already been monkey patched with data\n    let parent = rElement as any;\n    while (parent = parent.parentNode) {\n      const parentContext = readPatchedData(parent);\n      if (parentContext) {\n        let lView: LView|null;\n        if (Array.isArray(parentContext)) {\n          lView = parentContext as LView;\n        } else {\n          lView = parentContext.lView;\n        }\n\n        // the edge of the app was also reached here through another means\n        // (maybe because the DOM was changed manually).\n        if (!lView) {\n          return null;\n        }\n\n        const index = findViaNativeElement(lView, rElement);\n        if (index >= 0) {\n          const native = readElementValue(lView[index]);\n          const context = createLContext(lView, index, native);\n          attachPatchData(native, context);\n          mpValue = context;\n          break;\n        }\n      }\n    }\n  }\n  return (mpValue as LContext) || null;\n}\n\n/**\n * Creates an empty instance of a `LContext` context\n */\nfunction createLContext(lView: LView, nodeIndex: number, native: RElement): LContext {\n  return {\n    lView,\n    nodeIndex,\n    native,\n    component: undefined,\n    directives: undefined,\n    localRefs: undefined,\n  };\n}\n\n/**\n * Takes a component instance and returns the view for that component.\n *\n * @param componentInstance\n * @returns The component's view\n */\nexport function getComponentViewByInstance(componentInstance: {}): LView {\n  let lView = readPatchedData(componentInstance);\n  let view: LView;\n\n  if (Array.isArray(lView)) {\n    const nodeIndex = findViaComponent(lView, componentInstance);\n    view = getComponentViewByIndex(nodeIndex, lView);\n    const context = createLContext(lView, nodeIndex, view[HOST] as RElement);\n    context.component = componentInstance;\n    attachPatchData(componentInstance, context);\n    attachPatchData(context.native, context);\n  } else {\n    const context = lView as any as LContext;\n    view = getComponentViewByIndex(context.nodeIndex, context.lView);\n  }\n  return view;\n}\n\n/**\n * Assigns the given data to the given target (which could be a component,\n * directive or DOM node instance) using monkey-patching.\n */\nexport function attachPatchData(target: any, data: LView | LContext) {\n  target[MONKEY_PATCH_KEY_NAME] = data;\n}\n\nexport function isComponentInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ngComponentDef;\n}\n\nexport function isDirectiveInstance(instance: any): boolean {\n  return instance && instance.constructor && instance.constructor.ngDirectiveDef;\n}\n\n/**\n * Locates the element within the given LView and returns the matching index\n */\nfunction findViaNativeElement(lView: LView, target: RElement): number {\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const native = getNativeByTNode(tNode, lView) !;\n    if (native === target) {\n      return tNode.index;\n    }\n    tNode = traverseNextElement(tNode);\n  }\n\n  return -1;\n}\n\n/**\n * Locates the next tNode (child, sibling or parent).\n */\nfunction traverseNextElement(tNode: TNode): TNode|null {\n  if (tNode.child) {\n    return tNode.child;\n  } else if (tNode.next) {\n    return tNode.next;\n  } else {\n    // Let's take the following template: <div><span>text</span></div><component/>\n    // After checking the text node, we need to find the next parent that has a \"next\" TNode,\n    // in this case the parent `div`, so that we can find the component.\n    while (tNode.parent && !tNode.parent.next) {\n      tNode = tNode.parent;\n    }\n    return tNode.parent && tNode.parent.next;\n  }\n}\n\n/**\n * Locates the component within the given LView and returns the matching index\n */\nfunction findViaComponent(lView: LView, componentInstance: {}): number {\n  const componentIndices = lView[TVIEW].components;\n  if (componentIndices) {\n    for (let i = 0; i < componentIndices.length; i++) {\n      const elementComponentIndex = componentIndices[i];\n      const componentView = getComponentViewByIndex(elementComponentIndex, lView);\n      if (componentView[CONTEXT] === componentInstance) {\n        return elementComponentIndex;\n      }\n    }\n  } else {\n    const rootComponentView = getComponentViewByIndex(HEADER_OFFSET, lView);\n    const rootComponent = rootComponentView[CONTEXT];\n    if (rootComponent === componentInstance) {\n      // we are dealing with the root element here therefore we know that the\n      // element is the very first element after the HEADER data in the lView\n      return HEADER_OFFSET;\n    }\n  }\n  return -1;\n}\n\n/**\n * Locates the directive within the given LView and returns the matching index\n */\nfunction findViaDirective(lView: LView, directiveInstance: {}): number {\n  // if a directive is monkey patched then it will (by default)\n  // have a reference to the LView of the current view. The\n  // element bound to the directive being search lives somewhere\n  // in the view data. We loop through the nodes and check their\n  // list of directives for the instance.\n  let tNode = lView[TVIEW].firstChild;\n  while (tNode) {\n    const directiveIndexStart = tNode.directiveStart;\n    const directiveIndexEnd = tNode.directiveEnd;\n    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {\n      if (unwrapOnChangesDirectiveWrapper(lView[i]) === directiveInstance) {\n        return tNode.index;\n      }\n    }\n    tNode = traverseNextElement(tNode);\n  }\n  return -1;\n}\n\n/**\n * Returns a list of directives extracted from the given view based on the\n * provided list of directive index values.\n *\n * @param nodeIndex The node index\n * @param lView The target view data\n * @param includeComponents Whether or not to include components in returned directives\n */\nexport function getDirectivesAtNodeIndex(\n    nodeIndex: number, lView: LView, includeComponents: boolean): any[]|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  if (directiveStartIndex == 0) return EMPTY_ARRAY;\n  const directiveEndIndex = tNode.directiveEnd;\n  if (!includeComponents && tNode.flags & TNodeFlags.isComponent) directiveStartIndex++;\n  return lView.slice(directiveStartIndex, directiveEndIndex);\n}\n\nexport function getComponentAtNodeIndex(nodeIndex: number, lView: LView): {}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  let directiveStartIndex = tNode.directiveStart;\n  return tNode.flags & TNodeFlags.isComponent ? lView[directiveStartIndex] : null;\n}\n\n/**\n * Returns a map of local references (local reference name => element or directive instance) that\n * exist on a given element.\n */\nexport function discoverLocalRefs(lView: LView, nodeIndex: number): {[key: string]: any}|null {\n  const tNode = lView[TVIEW].data[nodeIndex] as TNode;\n  if (tNode && tNode.localNames) {\n    const result: {[key: string]: any} = {};\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < tNode.localNames.length; i += 2) {\n      result[tNode.localNames[i]] = lView[localIndex];\n      localIndex++;\n    }\n    return result;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\n\nimport {assertDefined} from '../util/assert';\nimport {discoverLocalRefs, getComponentAtNodeIndex, getDirectivesAtNodeIndex, getLContext} from './context_discovery';\nimport {NodeInjector} from './di';\nimport {LContext} from './interfaces/context';\nimport {DirectiveDef} from './interfaces/definition';\nimport {TElementNode, TNode, TNodeProviderIndexes} from './interfaces/node';\nimport {CLEANUP, CONTEXT, FLAGS, HOST, LView, LViewFlags, PARENT, RootContext, TVIEW} from './interfaces/view';\nimport {readElementValue, readPatchedLView, renderStringify} from './util';\n\n\n\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport function getComponent<T = {}>(element: Element): T|null {\n  const context = loadLContextFromNode(element);\n\n  if (context.component === undefined) {\n    context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);\n  }\n\n  return context.component as T;\n}\n\n/**\n * Returns the component instance associated with a given DOM host element.\n * Elements which don't represent components return `null`.\n *\n * @param element Host DOM element from which the component should be retrieved.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getComponent(<child-comp>) instanceof ChildComponent).toBeTruthy();\n * expect(getComponent(<my-app>) instanceof MyApp).toBeTruthy();\n * ```\n *\n * @publicApi\n */\nexport function getContext<T = {}>(element: Element): T|null {\n  const context = loadLContextFromNode(element) !;\n  return context.lView[CONTEXT] as T;\n}\n\n/**\n * Returns the component instance associated with view which owns the DOM element (`null`\n * otherwise).\n *\n * @param element DOM element which is owned by an existing component's view.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div>\n *       <child-comp></child-comp>\n *     </div>\n * </mp-app>\n *\n * expect(getViewComponent(<child-comp>) instanceof MyApp).toBeTruthy();\n * expect(getViewComponent(<my-app>)).toEqual(null);\n * ```\n *\n * @publicApi\n */\nexport function getViewComponent<T = {}>(element: Element | {}): T|null {\n  const context = loadLContext(element) !;\n  let lView: LView = context.lView;\n  while (lView[PARENT] && lView[HOST] === null) {\n    // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`\n    lView = lView[PARENT] !;\n  }\n\n  return lView[FLAGS] & LViewFlags.IsRoot ? null : lView[CONTEXT] as T;\n}\n\n\n\n/**\n * Returns the `RootContext` instance that is associated with\n * the application where the target is situated.\n *\n */\nexport function getRootContext(target: LView | {}): RootContext {\n  const lViewData = Array.isArray(target) ? target : loadLContext(target) !.lView;\n  const rootLView = getRootView(lViewData);\n  return rootLView[CONTEXT] as RootContext;\n}\n\n/**\n * Retrieve all root components.\n *\n * Root components are those which have been bootstrapped by Angular.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getRootComponents(target: {}): any[] {\n  return [...getRootContext(target).components];\n}\n\n/**\n * Retrieves an `Injector` associated with the element, component or directive.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getInjector(target: {}): Injector {\n  const context = loadLContext(target);\n  const tNode = context.lView[TVIEW].data[context.nodeIndex] as TElementNode;\n  return new NodeInjector(tNode, context.lView);\n}\n\n/**\n * Retrieve a set of injection tokens at a given DOM node.\n *\n * @param element Element for which the injection tokens should be retrieved.\n * @publicApi\n */\nexport function getInjectionTokens(element: Element): any[] {\n  const context = loadLContext(element, false);\n  if (!context) return [];\n  const lView = context.lView;\n  const tView = lView[TVIEW];\n  const tNode = tView.data[context.nodeIndex] as TNode;\n  const providerTokens: any[] = [];\n  const startIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const endIndex = tNode.directiveEnd;\n  for (let i = startIndex; i < endIndex; i++) {\n    let value = tView.data[i];\n    if (isDirectiveDefHack(value)) {\n      // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a\n      // design flaw.  We should always store same type so that we can be monomorphic. The issue\n      // is that for Components/Directives we store the def instead the type. The correct behavior\n      // is that we should always be storing injectable type in this location.\n      value = value.type;\n    }\n    providerTokens.push(value);\n  }\n  return providerTokens;\n}\n\n/**\n * Retrieves directives associated with a given DOM host element.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getDirectives(target: {}): Array<{}> {\n  const context = loadLContext(target) !;\n\n  if (context.directives === undefined) {\n    context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);\n  }\n\n  return context.directives || [];\n}\n\n/**\n * Returns LContext associated with a target passed as an argument.\n * Throws if a given target doesn't have associated LContext.\n *\n */\nexport function loadLContext(target: {}): LContext;\nexport function loadLContext(target: {}, throwOnNotFound: false): LContext|null;\nexport function loadLContext(target: {}, throwOnNotFound: boolean = true): LContext|null {\n  const context = getLContext(target);\n  if (!context && throwOnNotFound) {\n    throw new Error(\n        ngDevMode ? `Unable to find context associated with ${renderStringify(target)}` :\n                    'Invalid ng target');\n  }\n  return context;\n}\n\n/**\n * Retrieve the root view from any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param componentOrView any component or view\n *\n */\nexport function getRootView(componentOrView: LView | {}): LView {\n  let lView: LView;\n  if (Array.isArray(componentOrView)) {\n    ngDevMode && assertDefined(componentOrView, 'lView');\n    lView = componentOrView as LView;\n  } else {\n    ngDevMode && assertDefined(componentOrView, 'component');\n    lView = readPatchedLView(componentOrView) !;\n  }\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView = lView[PARENT] !;\n  }\n  return lView;\n}\n\n/**\n * Retrieve map of local references.\n *\n * The references are retrieved as a map of local reference name to element or directive instance.\n *\n * @param target A DOM element, component or directive instance.\n *\n * @publicApi\n */\nexport function getLocalRefs(target: {}): {[key: string]: any} {\n  const context = loadLContext(target) !;\n\n  if (context.localRefs === undefined) {\n    context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);\n  }\n\n  return context.localRefs || {};\n}\n\n/**\n * Retrieve the host element of the component.\n *\n * Use this function to retrieve the host element of the component. The host\n * element is the element which the component is associated with.\n *\n * @param directive Component or Directive for which the host element should be retrieved.\n *\n * @publicApi\n */\nexport function getHostElement<T>(directive: T): Element {\n  return getLContext(directive) !.native as never as Element;\n}\n\n/**\n * Retrieves the rendered text for a given component.\n *\n * This function retrieves the host element of a component and\n * and then returns the `textContent` for that element. This implies\n * that the text returned will include re-projected content of\n * the component as well.\n *\n * @param component The component to return the content text for.\n */\nexport function getRenderedText(component: any): string {\n  const hostElement = getHostElement(component);\n  return hostElement.textContent || '';\n}\n\nexport function loadLContextFromNode(node: Node): LContext {\n  if (!(node instanceof Node)) throw new Error('Expecting instance of DOM Node');\n  return loadLContext(node) !;\n}\n\nexport interface Listener {\n  name: string;\n  element: Element;\n  callback: (value: any) => any;\n  useCapture: boolean|null;\n}\n\nexport function isBrowserEvents(listener: Listener): boolean {\n  // Browser events are those which don't have `useCapture` as boolean.\n  return typeof listener.useCapture === 'boolean';\n}\n\n\n/**\n * Retrieves a list of DOM listeners.\n *\n * ```\n * <my-app>\n *   #VIEW\n *     <div (click)=\"doSomething()\">\n *     </div>\n * </mp-app>\n *\n * expect(getListeners(<div>)).toEqual({\n *   name: 'click',\n *   element: <div>,\n *   callback: () => doSomething(),\n *   useCapture: false\n * });\n * ```\n *\n * @param element Element for which the DOM listeners should be retrieved.\n * @publicApi\n */\nexport function getListeners(element: Element): Listener[] {\n  const lContext = loadLContextFromNode(element);\n  const lView = lContext.lView;\n  const tView = lView[TVIEW];\n  const lCleanup = lView[CLEANUP];\n  const tCleanup = tView.cleanup;\n  const listeners: Listener[] = [];\n  if (tCleanup && lCleanup) {\n    for (let i = 0; i < tCleanup.length;) {\n      const firstParam = tCleanup[i++];\n      const secondParam = tCleanup[i++];\n      if (typeof firstParam === 'string') {\n        const name: string = firstParam;\n        const listenerElement = readElementValue(lView[secondParam]) as any as Element;\n        const callback: (value: any) => any = lCleanup[tCleanup[i++]];\n        const useCaptureOrIndx = tCleanup[i++];\n        // if useCaptureOrIndx is boolean then report it as is.\n        // if useCaptureOrIndx is positive number then it in unsubscribe method\n        // if useCaptureOrIndx is negative number then it is a Subscription\n        const useCapture = typeof useCaptureOrIndx === 'boolean' ?\n            useCaptureOrIndx :\n            (useCaptureOrIndx >= 0 ? false : null);\n        if (element == listenerElement) {\n          listeners.push({element, name, callback, useCapture});\n        }\n      }\n    }\n  }\n  listeners.sort(sortListeners);\n  return listeners;\n}\n\nfunction sortListeners(a: Listener, b: Listener) {\n  if (a.name == b.name) return 0;\n  return a.name < b.name ? -1 : 1;\n}\n\n/**\n * This function should not exist because it is megamorphic and only mostly correct.\n *\n * See call site for more info.\n */\nfunction isDirectiveDefHack(obj: any): obj is DirectiveDef<any> {\n  return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\n\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML\n * that needs sanitizing.\n * Depending upon browser support we must use one of three strategies for doing this.\n * Support: Safari 10.x -> XHR strategy\n * Support: Firefox -> DomParser strategy\n * Default: InertDocument strategy\n */\nexport class InertBodyHelper {\n  private inertBodyElement: HTMLElement;\n  private inertDocument: Document;\n\n  constructor(private defaultDoc: Document) {\n    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');\n    this.inertBodyElement = this.inertDocument.body;\n\n    if (this.inertBodyElement == null) {\n      // usually there should be only one body element in the document, but IE doesn't have any, so\n      // we need to create one.\n      const inertHtml = this.inertDocument.createElement('html');\n      this.inertDocument.appendChild(inertHtml);\n      this.inertBodyElement = this.inertDocument.createElement('body');\n      inertHtml.appendChild(this.inertBodyElement);\n    }\n\n    this.inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n    if (this.inertBodyElement.querySelector && !this.inertBodyElement.querySelector('svg')) {\n      // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element\n      // so use the XHR strategy.\n      this.getInertBodyElement = this.getInertBodyElement_XHR;\n      return;\n    }\n\n    this.inertBodyElement.innerHTML =\n        '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n    if (this.inertBodyElement.querySelector && this.inertBodyElement.querySelector('svg img')) {\n      // We just hit the Firefox bug - which prevents the inner img JS from being sanitized\n      // so use the DOMParser strategy, if it is available.\n      // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we\n      // fall through to the default strategy below.\n      if (isDOMParserAvailable()) {\n        this.getInertBodyElement = this.getInertBodyElement_DOMParser;\n        return;\n      }\n    }\n\n    // None of the bugs were hit so it is safe for us to use the default InertDocument strategy\n    this.getInertBodyElement = this.getInertBodyElement_InertDocument;\n  }\n\n  /**\n   * Get an inert DOM element containing DOM created from the dirty HTML string provided.\n   * The implementation of this is determined in the constructor, when the class is instantiated.\n   */\n  getInertBodyElement: (html: string) => HTMLElement | null;\n\n  /**\n   * Use XHR to create and fill an inert body element (on Safari 10.1)\n   * See\n   * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449\n   */\n  private getInertBodyElement_XHR(html: string) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag.\n    html = '<body><remove></remove>' + html + '</body>';\n    try {\n      html = encodeURI(html);\n    } catch {\n      return null;\n    }\n    const xhr = new XMLHttpRequest();\n    xhr.responseType = 'document';\n    xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n    xhr.send(undefined);\n    const body: HTMLBodyElement = xhr.response.body;\n    body.removeChild(body.firstChild !);\n    return body;\n  }\n\n  /**\n   * Use DOMParser to create and fill an inert body element (on Firefox)\n   * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7\n   *\n   */\n  private getInertBodyElement_DOMParser(html: string) {\n    // We add these extra elements to ensure that the rest of the content is parsed as expected\n    // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the\n    // `<head>` tag.\n    html = '<body><remove></remove>' + html + '</body>';\n    try {\n      const body = new (window as any)\n                       .DOMParser()\n                       .parseFromString(html, 'text/html')\n                       .body as HTMLBodyElement;\n      body.removeChild(body.firstChild !);\n      return body;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Use an HTML5 `template` element, if supported, or an inert body element created via\n   * `createHtmlDocument` to create and fill an inert DOM element.\n   * This is the default sane strategy to use if the browser does not require one of the specialised\n   * strategies above.\n   */\n  private getInertBodyElement_InertDocument(html: string) {\n    // Prefer using <template> element if supported.\n    const templateEl = this.inertDocument.createElement('template');\n    if ('content' in templateEl) {\n      templateEl.innerHTML = html;\n      return templateEl;\n    }\n\n    this.inertBodyElement.innerHTML = html;\n\n    // Support: IE 9-11 only\n    // strip custom-namespaced attributes on IE<=11\n    if ((this.defaultDoc as any).documentMode) {\n      this.stripCustomNsAttrs(this.inertBodyElement);\n    }\n\n    return this.inertBodyElement;\n  }\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n   * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.\n   * 'ns1:xlink:foo').\n   *\n   * This is undesirable since we don't want to allow any of these custom attributes. This method\n   * strips them all.\n   */\n  private stripCustomNsAttrs(el: Element) {\n    const elAttrs = el.attributes;\n    // loop backwards so that we can support removals.\n    for (let i = elAttrs.length - 1; 0 < i; i--) {\n      const attrib = elAttrs.item(i);\n      const attrName = attrib !.name;\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        el.removeAttribute(attrName);\n      }\n    }\n    let childNode = el.firstChild as Node | null;\n    while (childNode) {\n      if (childNode.nodeType === Node.ELEMENT_NODE) this.stripCustomNsAttrs(childNode as Element);\n      childNode = childNode.nextSibling;\n    }\n  }\n}\n\n/**\n * We need to determine whether the DOMParser exists in the global context.\n * The try-catch is because, on some browsers, trying to access this property\n * on window can actually throw an error.\n *\n * @suppress {uselessCode}\n */\nfunction isDOMParserAvailable() {\n  try {\n    return !!(window as any).DOMParser;\n  } catch {\n    return false;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../util/is_dev_mode';\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n\nexport function _sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (isDevMode()) {\n    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => _sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../util/is_dev_mode';\nimport {InertBodyHelper} from './inert_body';\nimport {_sanitizeUrl, sanitizeSrcset} from './url_sanitizer';\n\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const t of tags.split(',')) res[t] = true;\n  return res;\n}\n\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const res: {[k: string]: boolean} = {};\n  for (const s of sets) {\n    for (const v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nexport const VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nexport const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nexport const SRCSET_ATTRS = tagSet('srcset');\n\nconst HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nexport const VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\n  // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just\n  // because characters were re-encoded.\n  public sanitizedSomething = false;\n  private buf: string[] = [];\n\n  sanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let current: Node = el.firstChild !;\n    let elementValid = true;\n    while (current) {\n      if (current.nodeType === Node.ELEMENT_NODE) {\n        elementValid = this.startElement(current as Element);\n      } else if (current.nodeType === Node.TEXT_NODE) {\n        this.chars(current.nodeValue !);\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (elementValid && current.firstChild) {\n        current = current.firstChild !;\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (current.nodeType === Node.ELEMENT_NODE) {\n          this.endElement(current as Element);\n        }\n\n        let next = this.checkClobberedElement(current, current.nextSibling !);\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = this.checkClobberedElement(current, current.parentNode !);\n      }\n    }\n    return this.buf.join('');\n  }\n\n  /**\n   * Outputs only valid Elements.\n   *\n   * Invalid elements are skipped.\n   *\n   * @param element element to sanitize\n   * Returns true if the element is valid.\n   */\n  private startElement(element: Element): boolean {\n    const tagName = element.nodeName.toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return false;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const elAttr = elAttrs.item(i);\n      const attrName = elAttr !.name;\n      const lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        continue;\n      }\n      let value = elAttr !.value;\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = _sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ', attrName, '=\"', encodeEntities(value), '\"');\n    }\n    this.buf.push('>');\n    return true;\n  }\n\n  private endElement(current: Element) {\n    const tagName = current.nodeName.toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n\n  private chars(chars: string) { this.buf.push(encodeEntities(chars)); }\n\n  checkClobberedElement(node: Node, nextNode: Node): Node {\n    if (nextNode &&\n        (node.compareDocumentPosition(nextNode) &\n         Node.DOCUMENT_POSITION_CONTAINED_BY) ===Â Node.DOCUMENT_POSITION_CONTAINED_BY) {\n      throw new Error(\n          `Failed to sanitize html because the element is clobbered: ${(node as Element).outerHTML}`);\n    }\n    return nextNode;\n  }\n}\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const hi = match.charCodeAt(0);\n            const low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n\nlet inertBodyHelper: InertBodyHelper;\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport function _sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  let inertBodyElement: HTMLElement|null = null;\n  try {\n    inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let mXSSAttempts = 5;\n    let parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      parsedHtml = inertBodyElement !.innerHTML;\n      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);\n    } while (unsafeHtml !== parsedHtml);\n\n    const sanitizer = new SanitizingHtmlSerializer();\n    const safeHtml = sanitizer.sanitizeChildren(\n        getTemplateContent(inertBodyElement !) as Element || inertBodyElement);\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      console.warn(\n          'WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');\n    }\n\n    return safeHtml;\n  } finally {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    if (inertBodyElement) {\n      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;\n      while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n      }\n    }\n  }\n}\n\nexport function getTemplateContent(el: Node): Node|null {\n  return 'content' in (el as any /** Microsoft/TypeScript#21517 */) && isTemplateElement(el) ?\n      el.content :\n      null;\n}\nfunction isTemplateElement(el: Node): el is HTMLTemplateElement {\n  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport abstract class Sanitizer {\n  abstract sanitize(context: SecurityContext, value: {}|string|null): string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '../util/is_dev_mode';\nimport {_sanitizeUrl} from './url_sanitizer';\n\n\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst COLOR_FNS = '(?:rgb|hsl)a?';\nconst GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst CSS3_FNS = '(?:calc|attr)';\nconst FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst URL_RE = /^url\\(([^)]+)\\)$/;\n\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n *\n * This code was taken from the Closure sanitization library.\n */\nfunction hasBalancedQuotes(value: string) {\n  let outsideSingle = true;\n  let outsideDouble = true;\n  for (let i = 0; i < value.length; i++) {\n    const c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n */\nexport function _sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const urlMatch = value.match(URL_RE);\n  if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    console.warn(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n\n\n/**\n * Used to intercept and sanitize style values before they are written to the renderer.\n *\n * This function is designed to be called in two modes. When a value is not provided\n * then the function will return a boolean whether a property will be sanitized later.\n * If a value is provided then the sanitized version of that will be returned.\n */\nexport interface StyleSanitizeFn {\n  /** This mode is designed to instruct whether the property will be used for sanitization\n   * at a later point */\n  (prop: string): boolean;\n  /** This mode is designed to sanitize the provided value */\n  (prop: string, value: string): string;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise(obj: any): obj is Promise<any> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is an Observable\n */\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n  // TODO: use isObservable once we update pass rxjs 6.1\n  // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n  return !!obj && typeof obj.subscribe === 'function';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global as _global} from './global';\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    const Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            (Map as any).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {areIterablesEqual, isListLikeIterable} from './iterable';\n\n\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean {\n  return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return looseIdentical(a, b);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical} from '../util/comparison';\nimport {getSymbolIterator} from '../util/symbol';\n\nexport function devModeEqual(a: any, b: any): boolean {\n  const isListLikeIterableA = isListLikeIterable(a);\n  const isListLikeIterableB = isListLikeIterable(b);\n  if (isListLikeIterableA && isListLikeIterableB) {\n    return areIterablesEqual(a, b, devModeEqual);\n  } else {\n    const isAObject = a && (typeof a === 'object' || typeof a === 'function');\n    const isBObject = b && (typeof b === 'object' || typeof b === 'function');\n    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {\n      return true;\n    } else {\n      return looseIdentical(a, b);\n    }\n  }\n}\n\n/**\n * Indicates that the result of a {@link Pipe} transformation has changed even though the\n * reference has not changed.\n *\n * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value\n * is stored.\n *\n * Example:\n *\n * ```\n * if (this._latestValue === this._latestReturnedValue) {\n *    return this._latestReturnedValue;\n *  } else {\n *    this._latestReturnedValue = this._latestValue;\n *    return WrappedValue.wrap(this._latestValue); // this will force update\n *  }\n * ```\n *\n * @publicApi\n */\nexport class WrappedValue {\n  /** @deprecated from 5.3, use `unwrap()` instead - will switch to protected */\n  wrapped: any;\n\n  constructor(value: any) { this.wrapped = value; }\n\n  /** Creates a wrapped value. */\n  static wrap(value: any): WrappedValue { return new WrappedValue(value); }\n\n  /**\n   * Returns the underlying value of a wrapped value.\n   * Returns the given `value` when it is not wrapped.\n   **/\n  static unwrap(value: any): any { return WrappedValue.isWrapped(value) ? value.wrapped : value; }\n\n  /** Returns true if `value` is a wrapped value. */\n  static isWrapped(value: any): value is WrappedValue { return value instanceof WrappedValue; }\n}\n\nexport function isListLikeIterable(obj: any): boolean {\n  if (!isJsObject(obj)) return false;\n  return Array.isArray(obj) ||\n      (!(obj instanceof Map) &&      // JS Map are iterables but return entries as [k, v]\n       getSymbolIterator() in obj);  // JS Iterable have a Symbol.iterator prop\n}\n\nexport function areIterablesEqual(\n    a: any, b: any, comparator: (a: any, b: any) => boolean): boolean {\n  const iterator1 = a[getSymbolIterator()]();\n  const iterator2 = b[getSymbolIterator()]();\n\n  while (true) {\n    const item1 = iterator1.next();\n    const item2 = iterator2.next();\n    if (item1.done && item2.done) return true;\n    if (item1.done || item2.done) return false;\n    if (!comparator(item1.value, item2.value)) return false;\n  }\n}\n\nexport function iterateListLike(obj: any, fn: (p: any) => any) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      fn(obj[i]);\n    }\n  } else {\n    const iterator = obj[getSymbolIterator()]();\n    let item: any;\n    while (!((item = iterator.next()).done)) {\n      fn(item.value);\n    }\n  }\n}\n\nexport function isJsObject(o: any): boolean {\n  return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface NO_CHANGE {\n  // This is a brand that ensures that this type can never match anything else\n  brand: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport const NO_CHANGE = {} as NO_CHANGE;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and than\n * use that time for rendering.\n *\n * At runtime we can than use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n\nimport {RendererStyleFlags2, RendererType2} from '../../render/api';\n\n\n// TODO: cleanup once the code is merged in angular/angular\nexport enum RendererStyleFlags3 {\n  Important = 1 << 0,\n  DashCase = 1 << 1\n}\n\nexport type Renderer3 = ObjectOrientedRenderer3 | ProceduralRenderer3;\n\nexport type GlobalTargetName = 'document' | 'window' | 'body';\n\nexport type GlobalTargetResolver = (element: any) => {\n  name: GlobalTargetName, target: EventTarget\n};\n\n/**\n * Object Oriented style of API needed to create elements and text nodes.\n *\n * This is the native browser API style, e.g. operations are methods on individual objects\n * like HTMLElement. With this style, no additional code is needed as a facade\n * (reducing payload size).\n * */\nexport interface ObjectOrientedRenderer3 {\n  createComment(data: string): RComment;\n  createElement(tagName: string): RElement;\n  createElementNS(namespace: string, tagName: string): RElement;\n  createTextNode(data: string): RText;\n\n  querySelector(selectors: string): RElement|null;\n}\n\n/** Returns whether the `renderer` is a `ProceduralRenderer3` */\nexport function isProceduralRenderer(renderer: ProceduralRenderer3 | ObjectOrientedRenderer3):\n    renderer is ProceduralRenderer3 {\n  return !!((renderer as any).listen);\n}\n\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. This also facilitates backwards compatibility\n * with Renderer2.\n */\nexport interface ProceduralRenderer3 {\n  destroy(): void;\n  createComment(value: string): RComment;\n  createElement(name: string, namespace?: string|null): RElement;\n  createText(value: string): RText;\n  /**\n   * This property is allowed to be null / undefined,\n   * in which case the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  destroyNode?: ((node: RNode) => void)|null;\n  appendChild(parent: RElement, newChild: RNode): void;\n  insertBefore(parent: RNode, newChild: RNode, refChild: RNode|null): void;\n  removeChild(parent: RElement, oldChild: RNode): void;\n  selectRootElement(selectorOrNode: string|any): RElement;\n\n  parentNode(node: RNode): RElement|null;\n  nextSibling(node: RNode): RNode|null;\n\n  setAttribute(el: RElement, name: string, value: string, namespace?: string|null): void;\n  removeAttribute(el: RElement, name: string, namespace?: string|null): void;\n  addClass(el: RElement, name: string): void;\n  removeClass(el: RElement, name: string): void;\n  setStyle(\n      el: RElement, style: string, value: any,\n      flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  removeStyle(el: RElement, style: string, flags?: RendererStyleFlags2|RendererStyleFlags3): void;\n  setProperty(el: RElement, name: string, value: any): void;\n  setValue(node: RText|RComment, value: string): void;\n\n  // TODO(misko): Deprecate in favor of addEventListener/removeEventListener\n  listen(\n      target: GlobalTargetName|RNode, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n}\n\nexport interface RendererFactory3 {\n  createRenderer(hostElement: RElement|null, rendererType: RendererType2|null): Renderer3;\n  begin?(): void;\n  end?(): void;\n}\n\nexport const domRendererFactory3: RendererFactory3 = {\n  createRenderer: (hostElement: RElement | null, rendererType: RendererType2 | null):\n                      Renderer3 => { return document;}\n};\n\n/** Subset of API needed for appending elements and text nodes. */\nexport interface RNode {\n  parentNode: RNode|null;\n\n  nextSibling: RNode|null;\n\n  removeChild(oldChild: RNode): void;\n\n  /**\n   * Insert a child node.\n   *\n   * Used exclusively for adding View root nodes into ViewAnchor location.\n   */\n  insertBefore(newChild: RNode, refChild: RNode|null, isViewRoot: boolean): void;\n\n  /**\n   * Append a child node.\n   *\n   * Used exclusively for building up DOM which are static (ie not View roots)\n   */\n  appendChild(newChild: RNode): RNode;\n}\n\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n */\nexport interface RElement extends RNode {\n  style: RCssStyleDeclaration;\n  classList: RDomTokenList;\n  className: string;\n  setAttribute(name: string, value: string): void;\n  removeAttribute(name: string): void;\n  setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n  addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n  removeEventListener(type: string, listener?: EventListener, options?: boolean): void;\n\n  setProperty?(name: string, value: any): void;\n}\n\nexport interface RCssStyleDeclaration {\n  removeProperty(propertyName: string): string;\n  setProperty(propertyName: string, value: string|null, priority?: string): void;\n}\n\nexport interface RDomTokenList {\n  add(token: string): void;\n  remove(token: string): void;\n}\n\nexport interface RText extends RNode { textContent: string|null; }\n\nexport interface RComment extends RNode { textContent: string|null; }\n\n// Note: This hack is necessary so we don't erroneously get a circular dependency\n// failure based on types.\nexport const unusedValueExportToPlacateAjd = 1;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {attachPatchData} from './context_discovery';\nimport {callHooks} from './hooks';\nimport {LContainer, NATIVE, VIEWS, unusedValueExportToPlacateAjd as unused1} from './interfaces/container';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeFlags, TNodeType, TViewNode, unusedValueExportToPlacateAjd as unused2} from './interfaces/node';\nimport {unusedValueExportToPlacateAjd as unused3} from './interfaces/projection';\nimport {ProceduralRenderer3, RComment, RElement, RNode, RText, Renderer3, isProceduralRenderer, unusedValueExportToPlacateAjd as unused4} from './interfaces/renderer';\nimport {CLEANUP, CONTAINER_INDEX, FLAGS, HEADER_OFFSET, HOST_NODE, HookData, LView, LViewFlags, NEXT, PARENT, QUERIES, RENDERER, TVIEW, unusedValueExportToPlacateAjd as unused5} from './interfaces/view';\nimport {assertNodeType} from './node_assert';\nimport {findComponentView, getNativeByTNode, isLContainer, isRootView, readElementValue, renderStringify} from './util';\n\nconst unusedValueToPlacateAjd = unused1 + unused2 + unused3 + unused4 + unused5;\n\nexport function getLContainer(tNode: TViewNode, embeddedView: LView): LContainer|null {\n  if (tNode.index === -1) {\n    // This is a dynamically created view inside a dynamic container.\n    // If the host index is -1, the view has not yet been inserted, so it has no parent.\n    const containerHostIndex = embeddedView[CONTAINER_INDEX];\n    return containerHostIndex > -1 ? embeddedView[PARENT] ![containerHostIndex] : null;\n  } else {\n    // This is a inline view node (e.g. embeddedViewStart)\n    return embeddedView[PARENT] ![tNode.parent !.index] as LContainer;\n  }\n}\n\n\n/**\n * Retrieves render parent for a given view.\n * Might be null if a view is not yet attached to any container.\n */\nfunction getContainerRenderParent(tViewNode: TViewNode, view: LView): RElement|null {\n  const container = getLContainer(tViewNode, view);\n  return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;\n}\n\nconst enum WalkTNodeTreeAction {\n  /** node insert in the native environment */\n  Insert = 0,\n\n  /** node detach from the native environment */\n  Detach = 1,\n\n  /** node destruction using the renderer's API */\n  Destroy = 2,\n}\n\n\n/**\n * Stack used to keep track of projection nodes in walkTNodeTree.\n *\n * This is deliberately created outside of walkTNodeTree to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n */\nconst projectionNodeStack: (LView | TNode)[] = [];\n\n/**\n * Walks a tree of TNodes, applying a transformation on the element nodes, either only on the first\n * one found, or on all of them.\n *\n * @param viewToWalk the view to walk\n * @param action identifies the action to be performed on the elements\n * @param renderer the current renderer.\n * @param renderParent Optional the render parent node to be set in all LContainers found,\n * required for action modes Insert and Destroy.\n * @param beforeNode Optional the node before which elements should be added, required for action\n * Insert.\n */\nfunction walkTNodeTree(\n    viewToWalk: LView, action: WalkTNodeTreeAction, renderer: Renderer3,\n    renderParent: RElement | null, beforeNode?: RNode | null) {\n  const rootTNode = viewToWalk[TVIEW].node as TViewNode;\n  let projectionNodeIndex = -1;\n  let currentView = viewToWalk;\n  let tNode: TNode|null = rootTNode.child as TNode;\n  while (tNode) {\n    let nextTNode: TNode|null = null;\n    if (tNode.type === TNodeType.Element) {\n      executeNodeAction(\n          action, renderer, renderParent, getNativeByTNode(tNode, currentView), beforeNode);\n      const nodeOrContainer = currentView[tNode.index];\n      if (isLContainer(nodeOrContainer)) {\n        // This element has an LContainer, and its comment needs to be handled\n        executeNodeAction(action, renderer, renderParent, nodeOrContainer[NATIVE], beforeNode);\n      }\n    } else if (tNode.type === TNodeType.Container) {\n      const lContainer = currentView ![tNode.index] as LContainer;\n      executeNodeAction(action, renderer, renderParent, lContainer[NATIVE], beforeNode);\n\n      if (lContainer[VIEWS].length) {\n        currentView = lContainer[VIEWS][0];\n        nextTNode = currentView[TVIEW].node;\n\n        // When the walker enters a container, then the beforeNode has to become the local native\n        // comment node.\n        beforeNode = lContainer[NATIVE];\n      }\n    } else if (tNode.type === TNodeType.Projection) {\n      const componentView = findComponentView(currentView !);\n      const componentHost = componentView[HOST_NODE] as TElementNode;\n      const head: TNode|null =\n          (componentHost.projection as(TNode | null)[])[tNode.projection as number];\n\n      // Must store both the TNode and the view because this projection node could be nested\n      // deeply inside embedded views, and we need to get back down to this particular nested view.\n      projectionNodeStack[++projectionNodeIndex] = tNode;\n      projectionNodeStack[++projectionNodeIndex] = currentView !;\n      if (head) {\n        currentView = componentView[PARENT] !;\n        nextTNode = currentView[TVIEW].data[head.index] as TNode;\n      }\n    } else {\n      // Otherwise, this is a View or an ElementContainer\n      nextTNode = tNode.child;\n    }\n\n    if (nextTNode === null) {\n      // this last node was projected, we need to get back down to its projection node\n      if (tNode.next === null && (tNode.flags & TNodeFlags.isProjected)) {\n        currentView = projectionNodeStack[projectionNodeIndex--] as LView;\n        tNode = projectionNodeStack[projectionNodeIndex--] as TNode;\n      }\n      nextTNode = tNode.next;\n\n      /**\n       * Find the next node in the TNode tree, taking into account the place where a node is\n       * projected (in the shadow DOM) rather than where it comes from (in the light DOM).\n       *\n       * If there is no sibling node, then it goes to the next sibling of the parent node...\n       * until it reaches rootNode (at which point null is returned).\n       */\n      while (!nextTNode) {\n        // If parent is null, we're crossing the view boundary, so we should get the host TNode.\n        tNode = tNode.parent || currentView[TVIEW].node;\n\n        if (tNode === null || tNode === rootTNode) return null;\n\n        // When exiting a container, the beforeNode must be restored to the previous value\n        if (tNode.type === TNodeType.Container) {\n          currentView = currentView[PARENT] !;\n          beforeNode = currentView[tNode.index][NATIVE];\n        }\n\n        if (tNode.type === TNodeType.View && currentView[NEXT]) {\n          currentView = currentView[NEXT] as LView;\n          nextTNode = currentView[TVIEW].node;\n        } else {\n          nextTNode = tNode.next;\n        }\n      }\n    }\n    tNode = nextTNode;\n  }\n}\n\n/**\n * NOTE: for performance reasons, the possible actions are inlined within the function instead of\n * being passed as an argument.\n */\nfunction executeNodeAction(\n    action: WalkTNodeTreeAction, renderer: Renderer3, parent: RElement | null,\n    node: RComment | RElement | RText, beforeNode?: RNode | null) {\n  if (action === WalkTNodeTreeAction.Insert) {\n    nativeInsertBefore(renderer, parent !, node, beforeNode || null);\n  } else if (action === WalkTNodeTreeAction.Detach) {\n    nativeRemoveChild(renderer, parent !, node);\n  } else if (action === WalkTNodeTreeAction.Destroy) {\n    ngDevMode && ngDevMode.rendererDestroyNode++;\n    (renderer as ProceduralRenderer3).destroyNode !(node);\n  }\n}\n\nexport function createTextNode(value: any, renderer: Renderer3): RText {\n  return isProceduralRenderer(renderer) ? renderer.createText(renderStringify(value)) :\n                                          renderer.createTextNode(renderStringify(value));\n}\n\n/**\n * Adds or removes all DOM elements associated with a view.\n *\n * Because some root nodes of the view may be containers, we sometimes need\n * to propagate deeply into the nested containers to remove all elements in the\n * views beneath it.\n *\n * @param viewToWalk The view from which elements should be added or removed\n * @param insertMode Whether or not elements should be added (if false, removing)\n * @param beforeNode The node before which elements should be added, if insert mode\n */\nexport function addRemoveViewFromContainer(\n    viewToWalk: LView, insertMode: true, beforeNode: RNode | null): void;\nexport function addRemoveViewFromContainer(viewToWalk: LView, insertMode: false): void;\nexport function addRemoveViewFromContainer(\n    viewToWalk: LView, insertMode: boolean, beforeNode?: RNode | null): void {\n  const renderParent = getContainerRenderParent(viewToWalk[TVIEW].node as TViewNode, viewToWalk);\n  ngDevMode && assertNodeType(viewToWalk[TVIEW].node as TNode, TNodeType.View);\n  if (renderParent) {\n    const renderer = viewToWalk[RENDERER];\n    walkTNodeTree(\n        viewToWalk, insertMode ? WalkTNodeTreeAction.Insert : WalkTNodeTreeAction.Detach, renderer,\n        renderParent, beforeNode);\n  }\n}\n\n/**\n * Traverses down and up the tree of views and containers to remove listeners and\n * call onDestroy callbacks.\n *\n * Notes:\n *  - Because it's used for onDestroy calls, it needs to be bottom-up.\n *  - Must process containers instead of their views to avoid splicing\n *  when views are destroyed and re-added.\n *  - Using a while loop because it's faster than recursion\n *  - Destroy only called on movement to sibling or movement to parent (laterally or up)\n *\n *  @param rootView The view to destroy\n */\nexport function destroyViewTree(rootView: LView): void {\n  // If the view has no children, we can clean it up and return early.\n  if (rootView[TVIEW].childIndex === -1) {\n    return cleanUpView(rootView);\n  }\n  let viewOrContainer: LView|LContainer|null = getLViewChild(rootView);\n\n  while (viewOrContainer) {\n    let next: LView|LContainer|null = null;\n\n    if (viewOrContainer.length >= HEADER_OFFSET) {\n      // If LView, traverse down to child.\n      const view = viewOrContainer as LView;\n      if (view[TVIEW].childIndex > -1) next = getLViewChild(view);\n    } else {\n      // If container, traverse down to its first LView.\n      const container = viewOrContainer as LContainer;\n      if (container[VIEWS].length) next = container[VIEWS][0];\n    }\n\n    if (next == null) {\n      // Only clean up view when moving to the side or up, as destroy hooks\n      // should be called in order from the bottom up.\n      while (viewOrContainer && !viewOrContainer ![NEXT] && viewOrContainer !== rootView) {\n        cleanUpView(viewOrContainer);\n        viewOrContainer = getParentState(viewOrContainer, rootView);\n      }\n      cleanUpView(viewOrContainer || rootView);\n      next = viewOrContainer && viewOrContainer ![NEXT];\n    }\n    viewOrContainer = next;\n  }\n}\n\n/**\n * Inserts a view into a container.\n *\n * This adds the view to the container's array of active views in the correct\n * position. It also adds the view's elements to the DOM if the container isn't a\n * root node of another view (in that case, the view's elements will be added when\n * the container's parent view is added later).\n *\n * @param lView The view to insert\n * @param lContainer The container into which the view should be inserted\n * @param parentView The new parent of the inserted view\n * @param index The index at which to insert the view\n * @param containerIndex The index of the container node, if dynamic\n */\nexport function insertView(\n    lView: LView, lContainer: LContainer, parentView: LView, index: number,\n    containerIndex: number) {\n  const views = lContainer[VIEWS];\n\n  if (index > 0) {\n    // This is a new view, we need to add it to the children.\n    views[index - 1][NEXT] = lView;\n  }\n\n  if (index < views.length) {\n    lView[NEXT] = views[index];\n    views.splice(index, 0, lView);\n  } else {\n    views.push(lView);\n    lView[NEXT] = null;\n  }\n\n  // Dynamically inserted views need a reference to their parent container's host so it's\n  // possible to jump from a view to its container's next when walking the node tree.\n  if (containerIndex > -1) {\n    lView[CONTAINER_INDEX] = containerIndex;\n    lView[PARENT] = parentView;\n  }\n\n  // Notify query that a new view has been added\n  if (lView[QUERIES]) {\n    lView[QUERIES] !.insertView(index);\n  }\n\n  // Sets the attached flag\n  lView[FLAGS] |= LViewFlags.Attached;\n}\n\n/**\n * Detaches a view from a container.\n *\n * This method splices the view from the container's array of active views. It also\n * removes the view's elements from the DOM.\n *\n * @param lContainer The container from which to detach a view\n * @param removeIndex The index of the view to detach\n * @param detached Whether or not this view is already detached.\n * @returns Detached LView instance.\n */\nexport function detachView(lContainer: LContainer, removeIndex: number, detached: boolean): LView {\n  const views = lContainer[VIEWS];\n  const viewToDetach = views[removeIndex];\n  if (removeIndex > 0) {\n    views[removeIndex - 1][NEXT] = viewToDetach[NEXT] as LView;\n  }\n  views.splice(removeIndex, 1);\n  if (!detached) {\n    addRemoveViewFromContainer(viewToDetach, false);\n  }\n\n  if (viewToDetach[QUERIES]) {\n    viewToDetach[QUERIES] !.removeView();\n  }\n  viewToDetach[CONTAINER_INDEX] = -1;\n  viewToDetach[PARENT] = null;\n  // Unsets the attached flag\n  viewToDetach[FLAGS] &= ~LViewFlags.Attached;\n  return viewToDetach;\n}\n\n/**\n * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.\n *\n * @param lContainer The container from which to remove a view\n * @param tContainer The TContainer node associated with the LContainer\n * @param removeIndex The index of the view to remove\n */\nexport function removeView(\n    lContainer: LContainer, containerHost: TElementNode | TContainerNode | TElementContainerNode,\n    removeIndex: number) {\n  const view = lContainer[VIEWS][removeIndex];\n  detachView(lContainer, removeIndex, !!containerHost.detached);\n  destroyLView(view);\n}\n\n/** Gets the child of the given LView */\nexport function getLViewChild(lView: LView): LView|LContainer|null {\n  const childIndex = lView[TVIEW].childIndex;\n  return childIndex === -1 ? null : lView[childIndex];\n}\n\n/**\n * A standalone function which destroys an LView,\n * conducting cleanup (e.g. removing listeners, calling onDestroys).\n *\n * @param view The view to be destroyed.\n */\nexport function destroyLView(view: LView) {\n  const renderer = view[RENDERER];\n  if (isProceduralRenderer(renderer) && renderer.destroyNode) {\n    walkTNodeTree(view, WalkTNodeTreeAction.Destroy, renderer, null);\n  }\n  destroyViewTree(view);\n  // Sets the destroyed flag\n  view[FLAGS] |= LViewFlags.Destroyed;\n}\n\n/**\n * Determines which LViewOrLContainer to jump to when traversing back up the\n * tree in destroyViewTree.\n *\n * Normally, the view's parent LView should be checked, but in the case of\n * embedded views, the container (which is the view node's parent, but not the\n * LView's parent) needs to be checked for a possible next property.\n *\n * @param state The LViewOrLContainer for which we need a parent state\n * @param rootView The rootView, so we don't propagate too far up the view tree\n * @returns The correct parent LViewOrLContainer\n */\nexport function getParentState(state: LView | LContainer, rootView: LView): LView|LContainer|null {\n  let tNode;\n  if (state.length >= HEADER_OFFSET && (tNode = (state as LView) ![HOST_NODE]) &&\n      tNode.type === TNodeType.View) {\n    // if it's an embedded view, the state needs to go up to the container, in case the\n    // container has a next\n    return getLContainer(tNode as TViewNode, state as LView) as LContainer;\n  } else {\n    // otherwise, use parent view for containers or component views\n    return state[PARENT] === rootView ? null : state[PARENT];\n  }\n}\n\n/**\n * Calls onDestroys hooks for all directives and pipes in a given view and then removes all\n * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks\n * can be propagated to @Output listeners.\n *\n * @param view The LView to clean up\n */\nfunction cleanUpView(viewOrContainer: LView | LContainer): void {\n  if ((viewOrContainer as LView).length >= HEADER_OFFSET) {\n    const view = viewOrContainer as LView;\n    executeOnDestroys(view);\n    removeListeners(view);\n    const hostTNode = view[HOST_NODE];\n    // For component views only, the local renderer is destroyed as clean up time.\n    if (hostTNode && hostTNode.type === TNodeType.Element && isProceduralRenderer(view[RENDERER])) {\n      ngDevMode && ngDevMode.rendererDestroy++;\n      (view[RENDERER] as ProceduralRenderer3).destroy();\n    }\n  }\n}\n\n/** Removes listeners and unsubscribes from output subscriptions */\nfunction removeListeners(lView: LView): void {\n  const tCleanup = lView[TVIEW].cleanup !;\n  if (tCleanup != null) {\n    const lCleanup = lView[CLEANUP] !;\n    for (let i = 0; i < tCleanup.length - 1; i += 2) {\n      if (typeof tCleanup[i] === 'string') {\n        // This is a listener with the native renderer\n        const idxOrTargetGetter = tCleanup[i + 1];\n        const target = typeof idxOrTargetGetter === 'function' ?\n            idxOrTargetGetter(lView) :\n            readElementValue(lView[idxOrTargetGetter]);\n        const listener = lCleanup[tCleanup[i + 2]];\n        const useCaptureOrSubIdx = tCleanup[i + 3];\n        if (typeof useCaptureOrSubIdx === 'boolean') {\n          // DOM listener\n          target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);\n        } else {\n          if (useCaptureOrSubIdx >= 0) {\n            // unregister\n            lCleanup[useCaptureOrSubIdx]();\n          } else {\n            // Subscription\n            lCleanup[-useCaptureOrSubIdx].unsubscribe();\n          }\n        }\n        i += 2;\n      } else if (typeof tCleanup[i] === 'number') {\n        // This is a listener with renderer2 (cleanup fn can be found by index)\n        const cleanupFn = lCleanup[tCleanup[i]];\n        cleanupFn();\n      } else {\n        // This is a cleanup function that is grouped with the index of its context\n        const context = lCleanup[tCleanup[i + 1]];\n        tCleanup[i].call(context);\n      }\n    }\n    lView[CLEANUP] = null;\n  }\n}\n\n/** Calls onDestroy hooks for this view */\nfunction executeOnDestroys(view: LView): void {\n  const tView = view[TVIEW];\n  let destroyHooks: HookData|null;\n  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {\n    callHooks(view, destroyHooks);\n  }\n}\n\n/**\n * Returns a native element if a node can be inserted into the given parent.\n *\n * There are two reasons why we may not be able to insert a element immediately.\n * - Projection: When creating a child content element of a component, we have to skip the\n *   insertion because the content of a component will be projected.\n *   `<component><content>delayed due to projection</content></component>`\n * - Parent container is disconnected: This can happen when we are inserting a view into\n *   parent container, which itself is disconnected. For example the parent container is part\n *   of a View which has not be inserted or is mare for projection but has not been inserted\n *   into destination.\n */\nfunction getRenderParent(tNode: TNode, currentView: LView): RElement|null {\n  // Nodes of the top-most view can be inserted eagerly.\n  if (isRootView(currentView)) {\n    return nativeParentNode(currentView[RENDERER], getNativeByTNode(tNode, currentView));\n  }\n\n  // Skip over element and ICU containers as those are represented by a comment node and\n  // can't be used as a render parent.\n  const parent = getHighestElementOrICUContainer(tNode).parent;\n\n  // If the parent is null, then we are inserting across views: either into an embedded view or a\n  // component view.\n  if (parent == null) {\n    const hostTNode = currentView[HOST_NODE] !;\n    if (hostTNode.type === TNodeType.View) {\n      // We are inserting a root element of an embedded view We might delay insertion of children\n      // for a given view if it is disconnected. This might happen for 2 main reasons:\n      // - view is not inserted into any container(view was created but not inserted yet)\n      // - view is inserted into a container but the container itself is not inserted into the DOM\n      // (container might be part of projection or child of a view that is not inserted yet).\n      // In other words we can insert children of a given view if this view was inserted into a\n      // container and the container itself has its render parent determined.\n      return getContainerRenderParent(hostTNode as TViewNode, currentView);\n    } else {\n      // We are inserting a root element of the component view into the component host element and\n      // it should always be eager.\n      return getHostNative(currentView);\n    }\n  } else {\n    ngDevMode && assertNodeType(parent, TNodeType.Element);\n    // We've got a parent which is an element in the current view. We just need to verify if the\n    // parent element is not a component. Component's content nodes are not inserted immediately\n    // because they will be projected, and so doing insert at this point would be wasteful.\n    // Since the projection would then move it to its final destination.\n    if (parent.flags & TNodeFlags.isComponent) {\n      return null;\n    } else {\n      return getNativeByTNode(parent, currentView) as RElement;\n    }\n  }\n}\n\n/**\n * Gets the native host element for a given view. Will return null if the current view does not have\n * a host element.\n */\nfunction getHostNative(currentView: LView): RElement|null {\n  const hostTNode = currentView[HOST_NODE];\n  return hostTNode && hostTNode.type === TNodeType.Element ?\n      (getNativeByTNode(hostTNode, currentView[PARENT] !) as RElement) :\n      null;\n}\n\n/**\n * Inserts a native node before another native node for a given parent using {@link Renderer3}.\n * This is a utility function that can be used when native nodes were determined - it abstracts an\n * actual renderer being used.\n */\nexport function nativeInsertBefore(\n    renderer: Renderer3, parent: RElement, child: RNode, beforeNode: RNode | null): void {\n  if (isProceduralRenderer(renderer)) {\n    renderer.insertBefore(parent, child, beforeNode);\n  } else {\n    parent.insertBefore(child, beforeNode, true);\n  }\n}\n\n/**\n * Removes a native child node from a given native parent node.\n */\nexport function nativeRemoveChild(renderer: Renderer3, parent: RElement, child: RNode): void {\n  isProceduralRenderer(renderer) ? renderer.removeChild(parent as RElement, child) :\n                                   parent.removeChild(child);\n}\n\n/**\n * Returns a native parent of a given native node.\n */\nexport function nativeParentNode(renderer: Renderer3, node: RNode): RElement|null {\n  return (isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode) as RElement;\n}\n\n/**\n * Returns a native sibling of a given native node.\n */\nexport function nativeNextSibling(renderer: Renderer3, node: RNode): RNode|null {\n  return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;\n}\n\n/**\n * Appends the `child` element to the `parent`.\n *\n * The element insertion might be delayed {@link canInsertNativeNode}.\n *\n * @param childEl The child that should be appended\n * @param childTNode The TNode of the child element\n * @param currentView The current LView\n * @returns Whether or not the child was appended\n */\nexport function appendChild(childEl: RNode, childTNode: TNode, currentView: LView): void {\n  const renderParent = getRenderParent(childTNode, currentView);\n  if (renderParent != null) {\n    const renderer = currentView[RENDERER];\n    const parentTNode: TNode = childTNode.parent || currentView[HOST_NODE] !;\n\n    if (parentTNode.type === TNodeType.View) {\n      const lContainer = getLContainer(parentTNode as TViewNode, currentView) !;\n      const views = lContainer[VIEWS];\n      const index = views.indexOf(currentView);\n      nativeInsertBefore(\n          renderer, renderParent, childEl, getBeforeNodeForView(index, views, lContainer[NATIVE]));\n    } else if (\n        parentTNode.type === TNodeType.ElementContainer ||\n        parentTNode.type === TNodeType.IcuContainer) {\n      const anchorNode = getNativeByTNode(parentTNode, currentView);\n      nativeInsertBefore(renderer, renderParent, childEl, anchorNode);\n    } else {\n      isProceduralRenderer(renderer) ? renderer.appendChild(renderParent, childEl) :\n                                       renderParent.appendChild(childEl);\n    }\n  }\n}\n\n/**\n * Gets the top-level element or an ICU container if those containers are nested.\n *\n * @param tNode The starting TNode for which we should skip element and ICU containers\n * @returns The TNode of the highest level ICU container or element container\n */\nfunction getHighestElementOrICUContainer(tNode: TNode): TNode {\n  while (tNode.parent != null && (tNode.parent.type === TNodeType.ElementContainer ||\n                                  tNode.parent.type === TNodeType.IcuContainer)) {\n    tNode = tNode.parent;\n  }\n  return tNode;\n}\n\nexport function getBeforeNodeForView(index: number, views: LView[], containerNative: RComment) {\n  if (index + 1 < views.length) {\n    const view = views[index + 1] as LView;\n    const viewTNode = view[HOST_NODE] as TViewNode;\n    return viewTNode.child ? getNativeByTNode(viewTNode.child, view) : containerNative;\n  } else {\n    return containerNative;\n  }\n}\n\n/**\n * Removes the `child` element from the DOM if not in view and not projected.\n *\n * @param childTNode The TNode of the child to remove\n * @param childEl The child that should be removed\n * @param currentView The current LView\n * @returns Whether or not the child was removed\n */\nexport function removeChild(childTNode: TNode, childEl: RNode, currentView: LView): void {\n  const parentNative = getRenderParent(childTNode, currentView);\n  // We only remove the element if it already has a render parent.\n  if (parentNative) {\n    nativeRemoveChild(currentView[RENDERER], parentNative, childEl);\n  }\n}\n\n/**\n * Appends a projected node to the DOM, or in the case of a projected container,\n * appends the nodes from all of the container's active views to the DOM.\n *\n * @param projectedTNode The TNode to be projected\n * @param tProjectionNode The projection (ng-content) TNode\n * @param currentView Current LView\n * @param projectionView Projection view (view above current)\n */\nexport function appendProjectedNode(\n    projectedTNode: TNode, tProjectionNode: TNode, currentView: LView,\n    projectionView: LView): void {\n  const native = getNativeByTNode(projectedTNode, projectionView);\n  appendChild(native, tProjectionNode, currentView);\n\n  // the projected contents are processed while in the shadow view (which is the currentView)\n  // therefore we need to extract the view where the host element lives since it's the\n  // logical container of the content projected views\n  attachPatchData(native, projectionView);\n\n  const nodeOrContainer = projectionView[projectedTNode.index];\n  if (projectedTNode.type === TNodeType.Container) {\n    // The node we are adding is a container and we are adding it to an element which\n    // is not a component (no more re-projection).\n    // Alternatively a container is projected at the root of a component's template\n    // and can't be re-projected (as not content of any component).\n    // Assign the final projection location in those cases.\n    const views = nodeOrContainer[VIEWS];\n    for (let i = 0; i < views.length; i++) {\n      addRemoveViewFromContainer(views[i], true, nodeOrContainer[NATIVE]);\n    }\n  } else {\n    if (projectedTNode.type === TNodeType.ElementContainer) {\n      let ngContainerChildTNode: TNode|null = projectedTNode.child as TNode;\n      while (ngContainerChildTNode) {\n        appendProjectedNode(ngContainerChildTNode, tProjectionNode, currentView, projectionView);\n        ngContainerChildTNode = ngContainerChildTNode.next;\n      }\n    }\n\n    if (isLContainer(nodeOrContainer)) {\n      appendChild(nodeOrContainer[NATIVE], tProjectionNode, currentView);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport '../../util/ng_dev_mode';\n\nimport {StyleSanitizeFn} from '../../sanitization/style_sanitizer';\nimport {getLContext} from '../context_discovery';\nimport {LContainer} from '../interfaces/container';\nimport {LContext} from '../interfaces/context';\nimport {AttributeMarker, TAttributes, TNode, TNodeFlags} from '../interfaces/node';\nimport {PlayState, Player, PlayerContext, PlayerIndex} from '../interfaces/player';\nimport {RElement} from '../interfaces/renderer';\nimport {InitialStylingValues, StylingContext, StylingFlags, StylingIndex} from '../interfaces/styling';\nimport {HEADER_OFFSET, HOST, LView, RootContext} from '../interfaces/view';\nimport {getTNode} from '../util';\n\nimport {CorePlayerHandler} from './core_player_handler';\n\nconst ANIMATION_PROP_PREFIX = '@';\n\nexport function createEmptyStylingContext(\n    element?: RElement | null, sanitizer?: StyleSanitizeFn | null,\n    initialStyles?: InitialStylingValues | null,\n    initialClasses?: InitialStylingValues | null): StylingContext {\n  return [\n    0,                                     // MasterFlags\n    [null, -1, false, sanitizer || null],  // DirectiveRefs\n    initialStyles || [null],               // InitialStyles\n    initialClasses || [null],              // InitialClasses\n    [0, 0],                                // SinglePropOffsets\n    element || null,                       // Element\n    null,                                  // PreviousMultiClassValue\n    null,                                  // PreviousMultiStyleValue\n    null,                                  // PlayerContext\n  ];\n}\n\n/**\n * Used clone a copy of a pre-computed template of a styling context.\n *\n * A pre-computed template is designed to be computed once for a given element\n * (instructions.ts has logic for caching this).\n */\nexport function allocStylingContext(\n    element: RElement | null, templateStyleContext: StylingContext): StylingContext {\n  // each instance gets a copy\n  const context = templateStyleContext.slice() as any as StylingContext;\n  context[StylingIndex.ElementPosition] = element;\n\n  // this will prevent any other directives from extending the context\n  context[StylingIndex.MasterFlagPosition] |= StylingFlags.BindingAllocationLocked;\n  return context;\n}\n\n/**\n * Retrieve the `StylingContext` at a given index.\n *\n * This method lazily creates the `StylingContext`. This is because in most cases\n * we have styling without any bindings. Creating `StylingContext` eagerly would mean that\n * every style declaration such as `<div style=\"color: red\">` would result `StyleContext`\n * which would create unnecessary memory pressure.\n *\n * @param index Index of the style allocation. See: `elementStyling`.\n * @param viewData The view to search for the styling context\n */\nexport function getStylingContext(index: number, viewData: LView): StylingContext {\n  let storageIndex = index;\n  let slotValue: LContainer|LView|StylingContext|RElement = viewData[storageIndex];\n  let wrapper: LContainer|LView|StylingContext = viewData;\n\n  while (Array.isArray(slotValue)) {\n    wrapper = slotValue;\n    slotValue = slotValue[HOST] as LView | StylingContext | RElement;\n  }\n\n  if (isStylingContext(wrapper)) {\n    return wrapper as StylingContext;\n  } else {\n    // This is an LView or an LContainer\n    const stylingTemplate = getTNode(index - HEADER_OFFSET, viewData).stylingTemplate;\n\n    if (wrapper !== viewData) {\n      storageIndex = HOST;\n    }\n\n    return wrapper[storageIndex] = stylingTemplate ?\n        allocStylingContext(slotValue, stylingTemplate) :\n        createEmptyStylingContext(slotValue);\n  }\n}\n\nexport function isStylingContext(value: any): value is StylingContext {\n  // Not an LView or an LContainer\n  return Array.isArray(value) && typeof value[StylingIndex.MasterFlagPosition] === 'number' &&\n      Array.isArray(value[StylingIndex.InitialStyleValuesPosition]);\n}\n\nexport function isAnimationProp(name: string): boolean {\n  return name[0] === ANIMATION_PROP_PREFIX;\n}\n\nexport function addPlayerInternal(\n    playerContext: PlayerContext, rootContext: RootContext, element: HTMLElement,\n    player: Player | null, playerContextIndex: number, ref?: any): boolean {\n  ref = ref || element;\n  if (playerContextIndex) {\n    playerContext[playerContextIndex] = player;\n  } else {\n    playerContext.push(player);\n  }\n\n  if (player) {\n    player.addEventListener(PlayState.Destroyed, () => {\n      const index = playerContext.indexOf(player);\n      const nonFactoryPlayerIndex = playerContext[PlayerIndex.NonBuilderPlayersStart];\n\n      // if the player is being removed from the factory side of the context\n      // (which is where the [style] and [class] bindings do their thing) then\n      // that side of the array cannot be resized since the respective bindings\n      // have pointer index values that point to the associated factory instance\n      if (index) {\n        if (index < nonFactoryPlayerIndex) {\n          playerContext[index] = null;\n        } else {\n          playerContext.splice(index, 1);\n        }\n      }\n      player.destroy();\n    });\n\n    const playerHandler =\n        rootContext.playerHandler || (rootContext.playerHandler = new CorePlayerHandler());\n    playerHandler.queuePlayer(player, ref);\n    return true;\n  }\n\n  return false;\n}\n\nexport function getPlayersInternal(playerContext: PlayerContext): Player[] {\n  const players: Player[] = [];\n  const nonFactoryPlayersStart = playerContext[PlayerIndex.NonBuilderPlayersStart];\n\n  // add all factory-based players (which are apart of [style] and [class] bindings)\n  for (let i = PlayerIndex.PlayerBuildersStartPosition + PlayerIndex.PlayerOffsetPosition;\n       i < nonFactoryPlayersStart; i += PlayerIndex.PlayerAndPlayerBuildersTupleSize) {\n    const player = playerContext[i] as Player | null;\n    if (player) {\n      players.push(player);\n    }\n  }\n\n  // add all custom players (not apart of [style] and [class] bindings)\n  for (let i = nonFactoryPlayersStart; i < playerContext.length; i++) {\n    players.push(playerContext[i] as Player);\n  }\n\n  return players;\n}\n\n\nexport function getOrCreatePlayerContext(target: {}, context?: LContext | null): PlayerContext|\n    null {\n  context = context || getLContext(target) !;\n  if (!context) {\n    ngDevMode && throwInvalidRefError();\n    return null;\n  }\n\n  const {lView, nodeIndex} = context;\n  const stylingContext = getStylingContext(nodeIndex, lView);\n  return getPlayerContext(stylingContext) || allocPlayerContext(stylingContext);\n}\n\nexport function getPlayerContext(stylingContext: StylingContext): PlayerContext|null {\n  return stylingContext[StylingIndex.PlayerContext];\n}\n\nexport function allocPlayerContext(data: StylingContext): PlayerContext {\n  return data[StylingIndex.PlayerContext] =\n             [PlayerIndex.SinglePlayerBuildersStartPosition, null, null, null, null];\n}\n\nexport function throwInvalidRefError() {\n  throw new Error('Only elements that exist in an Angular application can be used for animations');\n}\n\nexport function hasStyling(attrs: TAttributes): boolean {\n  for (let i = 0; i < attrs.length; i++) {\n    const attr = attrs[i];\n    if (attr == AttributeMarker.Classes || attr == AttributeMarker.Styles) return true;\n  }\n  return false;\n}\n\nexport function hasClassInput(tNode: TNode) {\n  return tNode.flags & TNodeFlags.hasClassInput ? true : false;\n}\n","/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nimport {StyleSanitizeFn} from '../../sanitization/style_sanitizer';\nimport {assertNotEqual} from '../../util/assert';\nimport {EMPTY_ARRAY, EMPTY_OBJ} from '../empty';\nimport {AttributeMarker, TAttributes} from '../interfaces/node';\nimport {BindingStore, BindingType, Player, PlayerBuilder, PlayerFactory, PlayerIndex} from '../interfaces/player';\nimport {RElement, Renderer3, RendererStyleFlags3, isProceduralRenderer} from '../interfaces/renderer';\nimport {DirectiveOwnerAndPlayerBuilderIndex, DirectiveRegistryValues, DirectiveRegistryValuesIndex, InitialStylingValues, InitialStylingValuesIndex, SinglePropOffsetValues, SinglePropOffsetValuesIndex, StylingContext, StylingFlags, StylingIndex} from '../interfaces/styling';\nimport {LView, RootContext} from '../interfaces/view';\nimport {NO_CHANGE} from '../tokens';\nimport {getRootContext} from '../util';\n\nimport {BoundPlayerFactory} from './player_factory';\nimport {addPlayerInternal, allocPlayerContext, createEmptyStylingContext, getPlayerContext} from './util';\n\n\n\n/**\n * This file includes the code to power all styling-binding operations in Angular.\n *\n * These include:\n * [style]=\"myStyleObj\"\n * [class]=\"myClassObj\"\n * [style.prop]=\"myPropValue\"\n * [class.name]=\"myClassValue\"\n *\n * There are many different ways in which these functions below are called. Please see\n * `interfaces/styles.ts` to get a better idea of how the styling algorithm works.\n */\n\n\n\n/**\n * Creates a new StylingContext an fills it with the provided static styling attribute values.\n */\nexport function initializeStaticContext(attrs: TAttributes) {\n  const context = createEmptyStylingContext();\n  const initialClasses: InitialStylingValues = context[StylingIndex.InitialClassValuesPosition] =\n      [null];\n  const initialStyles: InitialStylingValues = context[StylingIndex.InitialStyleValuesPosition] =\n      [null];\n\n  // The attributes array has marker values (numbers) indicating what the subsequent\n  // values represent. When we encounter a number, we set the mode to that type of attribute.\n  let mode = -1;\n  for (let i = 0; i < attrs.length; i++) {\n    const attr = attrs[i];\n    if (typeof attr == 'number') {\n      mode = attr;\n    } else if (mode === AttributeMarker.Styles) {\n      initialStyles.push(attr as string, attrs[++i] as string);\n    } else if (mode === AttributeMarker.Classes) {\n      initialClasses.push(attr as string, true);\n    } else if (mode === AttributeMarker.SelectOnly) {\n      break;\n    }\n  }\n\n  return context;\n}\n\n/**\n * Designed to update an existing styling context with new static styling\n * data (classes and styles).\n *\n * @param context the existing styling context\n * @param attrs an array of new static styling attributes that will be\n *              assigned to the context\n * @param directive the directive instance with which static data is associated with.\n */\nexport function patchContextWithStaticAttrs(\n    context: StylingContext, attrs: TAttributes, startingIndex: number, directive: any): void {\n  // If the styling context has already been patched with the given directive's bindings,\n  // then there is no point in doing it again. The reason why this may happen (the directive\n  // styling being patched twice) is because the `stylingBinding` function is called each time\n  // an element is created (both within a template function and within directive host bindings).\n  const directives = context[StylingIndex.DirectiveRegistryPosition];\n  if (getDirectiveRegistryValuesIndexOf(directives, directive) == -1) {\n    // this is a new directive which we have not seen yet.\n    directives.push(directive, -1, false, null);\n\n    let initialClasses: InitialStylingValues|null = null;\n    let initialStyles: InitialStylingValues|null = null;\n\n    let mode = -1;\n    for (let i = startingIndex; i < attrs.length; i++) {\n      const attr = attrs[i];\n      if (typeof attr == 'number') {\n        mode = attr;\n      } else if (mode == AttributeMarker.Classes) {\n        initialClasses = initialClasses || context[StylingIndex.InitialClassValuesPosition];\n        patchInitialStylingValue(initialClasses, attr, true);\n      } else if (mode == AttributeMarker.Styles) {\n        initialStyles = initialStyles || context[StylingIndex.InitialStyleValuesPosition];\n        patchInitialStylingValue(initialStyles, attr, attrs[++i]);\n      }\n    }\n  }\n}\n\n/**\n * Designed to add a style or class value into the existing set of initial styles.\n *\n * The function will search and figure out if a style/class value is already present\n * within the provided initial styling array. If and when a style/class value is not\n * present (or if it's value is falsy) then it will be inserted/updated in the list\n * of initial styling values.\n */\nfunction patchInitialStylingValue(\n    initialStyling: InitialStylingValues, prop: string, value: any): void {\n  // Even values are keys; Odd numbers are values; Search keys only\n  for (let i = InitialStylingValuesIndex.KeyValueStartPosition; i < initialStyling.length;) {\n    const key = initialStyling[i];\n    if (key === prop) {\n      const existingValue = initialStyling[i + InitialStylingValuesIndex.ValueOffset];\n\n      // If there is no previous style value (when `null`) or no previous class\n      // applied (when `false`) then we update the the newly given value.\n      if (existingValue == null || existingValue == false) {\n        initialStyling[i + InitialStylingValuesIndex.ValueOffset] = value;\n      }\n      return;\n    }\n    i = i + InitialStylingValuesIndex.Size;\n  }\n  // We did not find existing key, add a new one.\n  initialStyling.push(prop, value);\n}\n\n/**\n * Runs through the initial styling data present in the context and renders\n * them via the renderer on the element.\n */\nexport function renderInitialStylesAndClasses(\n    element: RElement, context: StylingContext, renderer: Renderer3) {\n  const initialClasses = context[StylingIndex.InitialClassValuesPosition];\n  renderInitialStylingValues(element, renderer, initialClasses, true);\n\n  const initialStyles = context[StylingIndex.InitialStyleValuesPosition];\n  renderInitialStylingValues(element, renderer, initialStyles, false);\n}\n\n/**\n * This is a helper function designed to render each entry present within the\n * provided list of initialStylingValues.\n */\nfunction renderInitialStylingValues(\n    element: RElement, renderer: Renderer3, initialStylingValues: InitialStylingValues,\n    isEntryClassBased: boolean) {\n  for (let i = InitialStylingValuesIndex.KeyValueStartPosition; i < initialStylingValues.length;\n       i += InitialStylingValuesIndex.Size) {\n    const value = initialStylingValues[i + InitialStylingValuesIndex.ValueOffset];\n    if (value) {\n      if (isEntryClassBased) {\n        setClass(\n            element, initialStylingValues[i + InitialStylingValuesIndex.PropOffset] as string, true,\n            renderer, null);\n      } else {\n        setStyle(\n            element, initialStylingValues[i + InitialStylingValuesIndex.PropOffset] as string,\n            value as string, renderer, null);\n      }\n    }\n  }\n}\n\nexport function allowNewBindingsForStylingContext(context: StylingContext): boolean {\n  return (context[StylingIndex.MasterFlagPosition] & StylingFlags.BindingAllocationLocked) === 0;\n}\n\n/**\n * Adds in new binding values to a styling context.\n *\n * If a directive value is provided then all provided class/style binding names will\n * reference the provided directive.\n *\n * @param context the existing styling context\n * @param directiveRef the directive that the new bindings will reference\n * @param classBindingNames an array of class binding names that will be added to the context\n * @param styleBindingNames an array of style binding names that will be added to the context\n * @param styleSanitizer an optional sanitizer that handle all sanitization on for each of\n *    the bindings added to the context. Note that if a directive is provided then the sanitizer\n *    instance will only be active if and when the directive updates the bindings that it owns.\n */\nexport function updateContextWithBindings(\n    context: StylingContext, directiveRef: any | null, classBindingNames?: string[] | null,\n    styleBindingNames?: string[] | null, styleSanitizer?: StyleSanitizeFn | null,\n    onlyProcessSingleClasses?: boolean) {\n  if (context[StylingIndex.MasterFlagPosition] & StylingFlags.BindingAllocationLocked) return;\n\n  // this means the context has already been patched with the directive's bindings\n  const directiveIndex = findOrPatchDirectiveIntoRegistry(context, directiveRef, styleSanitizer);\n  if (directiveIndex === -1) {\n    // this means the directive has already been patched in ... No point in doing anything\n    return;\n  }\n\n  // there are alot of variables being used below to track where in the context the new\n  // binding values will be placed. Because the context consists of multiple types of\n  // entries (single classes/styles and multi classes/styles) alot of the index positions\n  // need to be computed ahead of time and the context needs to be extended before the values\n  // are inserted in.\n  const singlePropOffsetValues = context[StylingIndex.SinglePropOffsetPositions];\n  const totalCurrentClassBindings =\n      singlePropOffsetValues[SinglePropOffsetValuesIndex.ClassesCountPosition];\n  const totalCurrentStyleBindings =\n      singlePropOffsetValues[SinglePropOffsetValuesIndex.StylesCountPosition];\n\n  const classesOffset = totalCurrentClassBindings * StylingIndex.Size;\n  const stylesOffset = totalCurrentStyleBindings * StylingIndex.Size;\n\n  const singleStylesStartIndex = StylingIndex.SingleStylesStartPosition;\n  let singleClassesStartIndex = singleStylesStartIndex + stylesOffset;\n  let multiStylesStartIndex = singleClassesStartIndex + classesOffset;\n  let multiClassesStartIndex = multiStylesStartIndex + stylesOffset;\n\n  // because we're inserting more bindings into the context, this means that the\n  // binding values need to be referenced the singlePropOffsetValues array so that\n  // the template/directive can easily find them inside of the `elementStyleProp`\n  // and the `elementClassProp` functions without iterating through the entire context.\n  // The first step to setting up these reference points is to mark how many bindings\n  // are being added. Even if these bindings already exist in the context, the directive\n  // or template code will still call them unknowingly. Therefore the total values need\n  // to be registered so that we know how many bindings are assigned to each directive.\n  const currentSinglePropsLength = singlePropOffsetValues.length;\n  singlePropOffsetValues.push(\n      styleBindingNames ? styleBindingNames.length : 0,\n      classBindingNames ? classBindingNames.length : 0);\n\n  // the code below will check to see if a new style binding already exists in the context\n  // if so then there is no point in inserting it into the context again. Whether or not it\n  // exists the styling offset code will now know exactly where it is\n  let insertionOffset = 0;\n  const filteredStyleBindingNames: string[] = [];\n  if (styleBindingNames && styleBindingNames.length) {\n    for (let i = 0; i < styleBindingNames.length; i++) {\n      const name = styleBindingNames[i];\n      let singlePropIndex =\n          getMatchingBindingIndex(context, name, singleStylesStartIndex, singleClassesStartIndex);\n      if (singlePropIndex == -1) {\n        singlePropIndex = singleClassesStartIndex + insertionOffset;\n        insertionOffset += StylingIndex.Size;\n        filteredStyleBindingNames.push(name);\n      }\n      singlePropOffsetValues.push(singlePropIndex);\n    }\n  }\n\n  // just like with the style binding loop above, the new class bindings get the same treatment...\n  const filteredClassBindingNames: string[] = [];\n  if (classBindingNames && classBindingNames.length) {\n    for (let i = 0; i < classBindingNames.length; i++) {\n      const name = classBindingNames[i];\n      let singlePropIndex =\n          getMatchingBindingIndex(context, name, singleClassesStartIndex, multiStylesStartIndex);\n      if (singlePropIndex == -1) {\n        singlePropIndex = multiStylesStartIndex + insertionOffset;\n        insertionOffset += StylingIndex.Size;\n        filteredClassBindingNames.push(name);\n      } else {\n        singlePropIndex += filteredStyleBindingNames.length * StylingIndex.Size;\n      }\n      singlePropOffsetValues.push(singlePropIndex);\n    }\n  }\n\n  // because new styles are being inserted, this means the existing collection of style offset\n  // index values are incorrect (they point to the wrong values). The code below will run through\n  // the entire offset array and update the existing set of index values to point to their new\n  // locations while taking the new binding values into consideration.\n  let i = SinglePropOffsetValuesIndex.ValueStartPosition;\n  if (filteredStyleBindingNames.length) {\n    while (i < currentSinglePropsLength) {\n      const totalStyles =\n          singlePropOffsetValues[i + SinglePropOffsetValuesIndex.StylesCountPosition];\n      const totalClasses =\n          singlePropOffsetValues[i + SinglePropOffsetValuesIndex.ClassesCountPosition];\n      if (totalClasses) {\n        const start = i + SinglePropOffsetValuesIndex.ValueStartPosition + totalStyles;\n        for (let j = start; j < start + totalClasses; j++) {\n          singlePropOffsetValues[j] += filteredStyleBindingNames.length * StylingIndex.Size;\n        }\n      }\n\n      const total = totalStyles + totalClasses;\n      i += SinglePropOffsetValuesIndex.ValueStartPosition + total;\n    }\n  }\n\n  const totalNewEntries = filteredClassBindingNames.length + filteredStyleBindingNames.length;\n\n  // in the event that there are new style values being inserted, all existing class and style\n  // bindings need to have their pointer values offsetted with the new amount of space that is\n  // used for the new style/class bindings.\n  for (let i = singleStylesStartIndex; i < context.length; i += StylingIndex.Size) {\n    const isMultiBased = i >= multiStylesStartIndex;\n    const isClassBased = i >= (isMultiBased ? multiClassesStartIndex : singleClassesStartIndex);\n    const flag = getPointers(context, i);\n    const staticIndex = getInitialIndex(flag);\n    let singleOrMultiIndex = getMultiOrSingleIndex(flag);\n    if (isMultiBased) {\n      singleOrMultiIndex +=\n          isClassBased ? (filteredStyleBindingNames.length * StylingIndex.Size) : 0;\n    } else {\n      singleOrMultiIndex += (totalNewEntries * StylingIndex.Size) +\n          ((isClassBased ? filteredStyleBindingNames.length : 0) * StylingIndex.Size);\n    }\n    setFlag(context, i, pointers(flag, staticIndex, singleOrMultiIndex));\n  }\n\n  // this is where we make space in the context for the new style bindings\n  for (let i = 0; i < filteredStyleBindingNames.length * StylingIndex.Size; i++) {\n    context.splice(multiClassesStartIndex, 0, null);\n    context.splice(singleClassesStartIndex, 0, null);\n    singleClassesStartIndex++;\n    multiStylesStartIndex++;\n    multiClassesStartIndex += 2;  // both single + multi slots were inserted\n  }\n\n  // this is where we make space in the context for the new class bindings\n  for (let i = 0; i < filteredClassBindingNames.length * StylingIndex.Size; i++) {\n    context.splice(multiStylesStartIndex, 0, null);\n    context.push(null);\n    multiStylesStartIndex++;\n    multiClassesStartIndex++;\n  }\n\n  const initialClasses = context[StylingIndex.InitialClassValuesPosition];\n  const initialStyles = context[StylingIndex.InitialStyleValuesPosition];\n\n  // the code below will insert each new entry into the context and assign the appropriate\n  // flags and index values to them. It's important this runs at the end of this function\n  // because the context, property offset and index values have all been computed just before.\n  for (let i = 0; i < totalNewEntries; i++) {\n    const entryIsClassBased = i >= filteredStyleBindingNames.length;\n    const adjustedIndex = entryIsClassBased ? (i - filteredStyleBindingNames.length) : i;\n    const propName = entryIsClassBased ? filteredClassBindingNames[adjustedIndex] :\n                                         filteredStyleBindingNames[adjustedIndex];\n\n    let multiIndex, singleIndex;\n    if (entryIsClassBased) {\n      multiIndex = multiClassesStartIndex +\n          ((totalCurrentClassBindings + adjustedIndex) * StylingIndex.Size);\n      singleIndex = singleClassesStartIndex +\n          ((totalCurrentClassBindings + adjustedIndex) * StylingIndex.Size);\n    } else {\n      multiIndex =\n          multiStylesStartIndex + ((totalCurrentStyleBindings + adjustedIndex) * StylingIndex.Size);\n      singleIndex = singleStylesStartIndex +\n          ((totalCurrentStyleBindings + adjustedIndex) * StylingIndex.Size);\n    }\n\n    // if a property is not found in the initial style values list then it\n    // is ALWAYS added incase a follow-up directive introduces the same initial\n    // style/class value later on.\n    let initialValuesToLookup = entryIsClassBased ? initialClasses : initialStyles;\n    let indexForInitial = getInitialStylingValuesIndexOf(initialValuesToLookup, propName);\n    if (indexForInitial === -1) {\n      indexForInitial = initialValuesToLookup.length + InitialStylingValuesIndex.ValueOffset;\n      initialValuesToLookup.push(propName, entryIsClassBased ? false : null);\n    } else {\n      indexForInitial += InitialStylingValuesIndex.ValueOffset;\n    }\n\n    const initialFlag =\n        prepareInitialFlag(context, propName, entryIsClassBased, styleSanitizer || null);\n\n    setFlag(context, singleIndex, pointers(initialFlag, indexForInitial, multiIndex));\n    setProp(context, singleIndex, propName);\n    setValue(context, singleIndex, null);\n    setPlayerBuilderIndex(context, singleIndex, 0, directiveIndex);\n\n    setFlag(context, multiIndex, pointers(initialFlag, indexForInitial, singleIndex));\n    setProp(context, multiIndex, propName);\n    setValue(context, multiIndex, null);\n    setPlayerBuilderIndex(context, multiIndex, 0, directiveIndex);\n  }\n\n  // the total classes/style values are updated so the next time the context is patched\n  // additional style/class bindings from another directive then it knows exactly where\n  // to insert them in the context\n  singlePropOffsetValues[SinglePropOffsetValuesIndex.ClassesCountPosition] =\n      totalCurrentClassBindings + filteredClassBindingNames.length;\n  singlePropOffsetValues[SinglePropOffsetValuesIndex.StylesCountPosition] =\n      totalCurrentStyleBindings + filteredStyleBindingNames.length;\n\n  // there is no initial value flag for the master index since it doesn't\n  // reference an initial style value\n  const masterFlag = pointers(0, 0, multiStylesStartIndex) |\n      (onlyProcessSingleClasses ? StylingFlags.OnlyProcessSingleClasses : 0);\n  setFlag(context, StylingIndex.MasterFlagPosition, masterFlag);\n}\n\n/**\n * Searches through the existing registry of directives\n */\nfunction findOrPatchDirectiveIntoRegistry(\n    context: StylingContext, directiveRef: any, styleSanitizer?: StyleSanitizeFn | null) {\n  const directiveRefs = context[StylingIndex.DirectiveRegistryPosition];\n  const nextOffsetInsertionIndex = context[StylingIndex.SinglePropOffsetPositions].length;\n\n  let directiveIndex: number;\n  const detectedIndex = getDirectiveRegistryValuesIndexOf(directiveRefs, directiveRef);\n\n  if (detectedIndex === -1) {\n    directiveIndex = directiveRefs.length / DirectiveRegistryValuesIndex.Size;\n    directiveRefs.push(directiveRef, nextOffsetInsertionIndex, false, styleSanitizer || null);\n  } else {\n    const singlePropStartPosition =\n        detectedIndex + DirectiveRegistryValuesIndex.SinglePropValuesIndexOffset;\n    if (directiveRefs[singlePropStartPosition] ! >= 0) {\n      // the directive has already been patched into the context\n      return -1;\n    }\n\n    directiveIndex = detectedIndex / DirectiveRegistryValuesIndex.Size;\n\n    // because the directive already existed this means that it was set during elementHostAttrs or\n    // elementStart which means that the binding values were not here. Therefore, the values below\n    // need to be applied so that single class and style properties can be assigned later.\n    const singlePropPositionIndex =\n        detectedIndex + DirectiveRegistryValuesIndex.SinglePropValuesIndexOffset;\n    directiveRefs[singlePropPositionIndex] = nextOffsetInsertionIndex;\n\n    // the sanitizer is also apart of the binding process and will be used when bindings are\n    // applied.\n    const styleSanitizerIndex = detectedIndex + DirectiveRegistryValuesIndex.StyleSanitizerOffset;\n    directiveRefs[styleSanitizerIndex] = styleSanitizer || null;\n  }\n\n  return directiveIndex;\n}\n\nfunction getMatchingBindingIndex(\n    context: StylingContext, bindingName: string, start: number, end: number) {\n  for (let j = start; j < end; j += StylingIndex.Size) {\n    if (getProp(context, j) === bindingName) return j;\n  }\n  return -1;\n}\n\n/**\n * Sets and resolves all `multi` styling on an `StylingContext` so that they can be\n * applied to the element once `renderStyling` is called.\n *\n * All missing styles/class (any values that are not provided in the new `styles`\n * or `classes` params) will resolve to `null` within their respective positions\n * in the context.\n *\n * @param context The styling context that will be updated with the\n *    newly provided style values.\n * @param classesInput The key/value map of CSS class names that will be used for the update.\n * @param stylesInput The key/value map of CSS styles that will be used for the update.\n */\nexport function updateStylingMap(\n    context: StylingContext, classesInput: {[key: string]: any} | string |\n        BoundPlayerFactory<null|string|{[key: string]: any}>| NO_CHANGE | null,\n    stylesInput?: {[key: string]: any} | BoundPlayerFactory<null|{[key: string]: any}>| NO_CHANGE |\n        null,\n    directiveRef?: any): void {\n  stylesInput = stylesInput || null;\n\n  const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n  const element = context[StylingIndex.ElementPosition] !as HTMLElement;\n  const classesPlayerBuilder = classesInput instanceof BoundPlayerFactory ?\n      new ClassAndStylePlayerBuilder(classesInput as any, element, BindingType.Class) :\n      null;\n  const stylesPlayerBuilder = stylesInput instanceof BoundPlayerFactory ?\n      new ClassAndStylePlayerBuilder(stylesInput as any, element, BindingType.Style) :\n      null;\n\n  const classesValue = classesPlayerBuilder ?\n      (classesInput as BoundPlayerFactory<{[key: string]: any}|string>) !.value :\n      classesInput;\n  const stylesValue = stylesPlayerBuilder ? stylesInput !.value : stylesInput;\n  // early exit (this is what's done to avoid using ctx.bind() to cache the value)\n  const ignoreAllClassUpdates = limitToSingleClasses(context) || classesValue === NO_CHANGE ||\n      classesValue === context[StylingIndex.CachedClassValueOrInitialClassString];\n  const ignoreAllStyleUpdates =\n      stylesValue === NO_CHANGE || stylesValue === context[StylingIndex.CachedStyleValue];\n  if (ignoreAllClassUpdates && ignoreAllStyleUpdates) return;\n\n  context[StylingIndex.CachedClassValueOrInitialClassString] = classesValue;\n  context[StylingIndex.CachedStyleValue] = stylesValue;\n\n  let classNames: string[] = EMPTY_ARRAY;\n  let applyAllClasses = false;\n  let playerBuildersAreDirty = false;\n\n  const classesPlayerBuilderIndex =\n      classesPlayerBuilder ? PlayerIndex.ClassMapPlayerBuilderPosition : 0;\n  if (hasPlayerBuilderChanged(\n          context, classesPlayerBuilder, PlayerIndex.ClassMapPlayerBuilderPosition)) {\n    setPlayerBuilder(context, classesPlayerBuilder, PlayerIndex.ClassMapPlayerBuilderPosition);\n    playerBuildersAreDirty = true;\n  }\n\n  const stylesPlayerBuilderIndex =\n      stylesPlayerBuilder ? PlayerIndex.StyleMapPlayerBuilderPosition : 0;\n  if (hasPlayerBuilderChanged(\n          context, stylesPlayerBuilder, PlayerIndex.StyleMapPlayerBuilderPosition)) {\n    setPlayerBuilder(context, stylesPlayerBuilder, PlayerIndex.StyleMapPlayerBuilderPosition);\n    playerBuildersAreDirty = true;\n  }\n\n  // each time a string-based value pops up then it shouldn't require a deep\n  // check of what's changed.\n  if (!ignoreAllClassUpdates) {\n    if (typeof classesValue == 'string') {\n      classNames = classesValue.split(/\\s+/);\n      // this boolean is used to avoid having to create a key/value map of `true` values\n      // since a classname string implies that all those classes are added\n      applyAllClasses = true;\n    } else {\n      classNames = classesValue ? Object.keys(classesValue) : EMPTY_ARRAY;\n    }\n  }\n\n  const classes = (classesValue || EMPTY_OBJ) as{[key: string]: any};\n  const styleProps = stylesValue ? Object.keys(stylesValue) : EMPTY_ARRAY;\n  const styles = stylesValue || EMPTY_OBJ;\n\n  const classesStartIndex = styleProps.length;\n  let multiStartIndex = getMultiStartIndex(context);\n\n  let dirty = false;\n  let ctxIndex = multiStartIndex;\n\n  let propIndex = 0;\n  const propLimit = styleProps.length + classNames.length;\n\n  // the main loop here will try and figure out how the shape of the provided\n  // styles differ with respect to the context. Later if the context/styles/classes\n  // are off-balance then they will be dealt in another loop after this one\n  while (ctxIndex < context.length && propIndex < propLimit) {\n    const isClassBased = propIndex >= classesStartIndex;\n    const processValue =\n        (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n\n    // when there is a cache-hit for a string-based class then we should\n    // avoid doing any work diffing any of the changes\n    if (processValue) {\n      const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n      const newProp: string =\n          isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n      const newValue: string|boolean =\n          isClassBased ? (applyAllClasses ? true : classes[newProp]) : styles[newProp];\n      const playerBuilderIndex =\n          isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n\n      const prop = getProp(context, ctxIndex);\n      if (prop === newProp) {\n        const value = getValue(context, ctxIndex);\n        const flag = getPointers(context, ctxIndex);\n        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n\n        if (hasValueChanged(flag, value, newValue)) {\n          setValue(context, ctxIndex, newValue);\n          playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n\n          const initialValue = getInitialValue(context, flag);\n\n          // SKIP IF INITIAL CHECK\n          // If the former `value` is `null` then it means that an initial value\n          // could be being rendered on screen. If that is the case then there is\n          // no point in updating the value incase it matches. In other words if the\n          // new value is the exact same as the previously rendered value (which\n          // happens to be the initial value) then do nothing.\n          if (value != null || hasValueChanged(flag, initialValue, newValue)) {\n            setDirty(context, ctxIndex, true);\n            dirty = true;\n          }\n        }\n      } else {\n        const indexOfEntry = findEntryPositionByProp(context, newProp, ctxIndex);\n        if (indexOfEntry > 0) {\n          // it was found at a later point ... just swap the values\n          const valueToCompare = getValue(context, indexOfEntry);\n          const flagToCompare = getPointers(context, indexOfEntry);\n          swapMultiContextEntries(context, ctxIndex, indexOfEntry);\n          if (hasValueChanged(flagToCompare, valueToCompare, newValue)) {\n            const initialValue = getInitialValue(context, flagToCompare);\n            setValue(context, ctxIndex, newValue);\n\n            // same if statement logic as above (look for SKIP IF INITIAL CHECK).\n            if (valueToCompare != null || hasValueChanged(flagToCompare, initialValue, newValue)) {\n              setDirty(context, ctxIndex, true);\n              playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n              dirty = true;\n            }\n          }\n        } else {\n          // we only care to do this if the insertion is in the middle\n          const newFlag = prepareInitialFlag(\n              context, newProp, isClassBased, getStyleSanitizer(context, directiveIndex));\n          playerBuildersAreDirty = playerBuildersAreDirty || !!playerBuilderIndex;\n          insertNewMultiProperty(\n              context, ctxIndex, isClassBased, newProp, newFlag, newValue, directiveIndex,\n              playerBuilderIndex);\n          dirty = true;\n        }\n      }\n    }\n\n    ctxIndex += StylingIndex.Size;\n    propIndex++;\n  }\n\n  // this means that there are left-over values in the context that\n  // were not included in the provided styles/classes and in this\n  // case the  goal is to \"remove\" them from the context (by nullifying)\n  while (ctxIndex < context.length) {\n    const flag = getPointers(context, ctxIndex);\n    const isClassBased = (flag & StylingFlags.Class) === StylingFlags.Class;\n    const processValue =\n        (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n    if (processValue) {\n      const value = getValue(context, ctxIndex);\n      const doRemoveValue = valueExists(value, isClassBased);\n      if (doRemoveValue) {\n        setDirty(context, ctxIndex, true);\n        setValue(context, ctxIndex, null);\n\n        // we keep the player factory the same so that the `nulled` value can\n        // be instructed into the player because removing a style and/or a class\n        // is a valid animation player instruction.\n        const playerBuilderIndex =\n            isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n        setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n        dirty = true;\n      }\n    }\n    ctxIndex += StylingIndex.Size;\n  }\n\n  // this means that there are left-over properties in the context that\n  // were not detected in the context during the loop above. In that\n  // case we want to add the new entries into the list\n  const sanitizer = getStyleSanitizer(context, directiveIndex);\n  while (propIndex < propLimit) {\n    const isClassBased = propIndex >= classesStartIndex;\n    const processValue =\n        (!isClassBased && !ignoreAllStyleUpdates) || (isClassBased && !ignoreAllClassUpdates);\n    if (processValue) {\n      const adjustedPropIndex = isClassBased ? propIndex - classesStartIndex : propIndex;\n      const prop = isClassBased ? classNames[adjustedPropIndex] : styleProps[adjustedPropIndex];\n      const value: string|boolean =\n          isClassBased ? (applyAllClasses ? true : classes[prop]) : styles[prop];\n      const flag = prepareInitialFlag(context, prop, isClassBased, sanitizer) | StylingFlags.Dirty;\n      const playerBuilderIndex =\n          isClassBased ? classesPlayerBuilderIndex : stylesPlayerBuilderIndex;\n      const ctxIndex = context.length;\n      context.push(flag, prop, value, 0);\n      setPlayerBuilderIndex(context, ctxIndex, playerBuilderIndex, directiveIndex);\n      dirty = true;\n    }\n    propIndex++;\n  }\n\n  if (dirty) {\n    setContextDirty(context, true);\n    setDirectiveDirty(context, directiveIndex, true);\n  }\n\n  if (playerBuildersAreDirty) {\n    setContextPlayersDirty(context, true);\n  }\n}\n\n/**\n * This method will toggle the referenced CSS class (by the provided index)\n * within the given context.\n *\n * @param context The styling context that will be updated with the\n *    newly provided class value.\n * @param offset The index of the CSS class which is being updated.\n * @param addOrRemove Whether or not to add or remove the CSS class\n */\nexport function updateClassProp(\n    context: StylingContext, offset: number, addOrRemove: boolean | BoundPlayerFactory<boolean>,\n    directiveRef?: any): void {\n  _updateSingleStylingValue(context, offset, addOrRemove, true, directiveRef);\n}\n\n/**\n * Sets and resolves a single style value on the provided `StylingContext` so\n * that they can be applied to the element once `renderStyling` is called.\n *\n * Note that prop-level styling values are considered higher priority than any styling that\n * has been applied using `updateStylingMap`, therefore, when styling values are rendered\n * then any styles/classes that have been applied using this function will be considered first\n * (then multi values second and then initial values as a backup).\n *\n * @param context The styling context that will be updated with the\n *    newly provided style value.\n * @param offset The index of the property which is being updated.\n * @param value The CSS style value that will be assigned\n * @param directiveRef an optional reference to the directive responsible\n *    for this binding change. If present then style binding will only\n *    actualize if the directive has ownership over this binding\n *    (see styling.ts#directives for more information about the algorithm).\n */\nexport function updateStyleProp(\n    context: StylingContext, offset: number,\n    input: string | boolean | null | BoundPlayerFactory<string|boolean|null>,\n    directiveRef?: any): void {\n  _updateSingleStylingValue(context, offset, input, false, directiveRef);\n}\n\nfunction _updateSingleStylingValue(\n    context: StylingContext, offset: number,\n    input: string | boolean | null | BoundPlayerFactory<string|boolean|null>, isClassBased: boolean,\n    directiveRef: any): void {\n  const directiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n  const singleIndex = getSinglePropIndexValue(context, directiveIndex, offset, isClassBased);\n  const currValue = getValue(context, singleIndex);\n  const currFlag = getPointers(context, singleIndex);\n  const currDirective = getDirectiveIndexFromEntry(context, singleIndex);\n  const value: string|boolean|null = (input instanceof BoundPlayerFactory) ? input.value : input;\n\n  if (hasValueChanged(currFlag, currValue, value) &&\n      allowValueChange(currValue, value, currDirective, directiveIndex)) {\n    const isClassBased = (currFlag & StylingFlags.Class) === StylingFlags.Class;\n    const element = context[StylingIndex.ElementPosition] !as HTMLElement;\n    const playerBuilder = input instanceof BoundPlayerFactory ?\n        new ClassAndStylePlayerBuilder(\n            input as any, element, isClassBased ? BindingType.Class : BindingType.Style) :\n        null;\n    const value = (playerBuilder ? (input as BoundPlayerFactory<any>).value : input) as string |\n        boolean | null;\n    const currPlayerIndex = getPlayerBuilderIndex(context, singleIndex);\n\n    let playerBuildersAreDirty = false;\n    let playerBuilderIndex = playerBuilder ? currPlayerIndex : 0;\n    if (hasPlayerBuilderChanged(context, playerBuilder, currPlayerIndex)) {\n      const newIndex = setPlayerBuilder(context, playerBuilder, currPlayerIndex);\n      playerBuilderIndex = playerBuilder ? newIndex : 0;\n      playerBuildersAreDirty = true;\n    }\n\n    if (playerBuildersAreDirty || currDirective !== directiveIndex) {\n      setPlayerBuilderIndex(context, singleIndex, playerBuilderIndex, directiveIndex);\n    }\n\n    if (currDirective !== directiveIndex) {\n      const prop = getProp(context, singleIndex);\n      const sanitizer = getStyleSanitizer(context, directiveIndex);\n      setSanitizeFlag(context, singleIndex, (sanitizer && sanitizer(prop)) ? true : false);\n    }\n\n    // the value will always get updated (even if the dirty flag is skipped)\n    setValue(context, singleIndex, value);\n    const indexForMulti = getMultiOrSingleIndex(currFlag);\n\n    // if the value is the same in the multi-area then there's no point in re-assembling\n    const valueForMulti = getValue(context, indexForMulti);\n    if (!valueForMulti || hasValueChanged(currFlag, valueForMulti, value)) {\n      let multiDirty = false;\n      let singleDirty = true;\n\n      // only when the value is set to `null` should the multi-value get flagged\n      if (!valueExists(value, isClassBased) && valueExists(valueForMulti, isClassBased)) {\n        multiDirty = true;\n        singleDirty = false;\n      }\n\n      setDirty(context, indexForMulti, multiDirty);\n      setDirty(context, singleIndex, singleDirty);\n      setDirectiveDirty(context, directiveIndex, true);\n      setContextDirty(context, true);\n    }\n\n    if (playerBuildersAreDirty) {\n      setContextPlayersDirty(context, true);\n    }\n  }\n}\n\n\n/**\n * Renders all queued styling using a renderer onto the given element.\n *\n * This function works by rendering any styles (that have been applied\n * using `updateStylingMap`) and any classes (that have been applied using\n * `updateStyleProp`) onto the provided element using the provided renderer.\n * Just before the styles/classes are rendered a final key/value style map\n * will be assembled (if `styleStore` or `classStore` are provided).\n *\n * @param lElement the element that the styles will be rendered on\n * @param context The styling context that will be used to determine\n *      what styles will be rendered\n * @param renderer the renderer that will be used to apply the styling\n * @param classesStore if provided, the updated class values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param stylesStore if provided, the updated style values will be applied\n *    to this key/value map instead of being renderered via the renderer.\n * @param directiveRef an optional directive that will be used to target which\n *    styling values are rendered. If left empty, only the bindings that are\n *    registered on the template will be rendered.\n * @returns number the total amount of players that got queued for animation (if any)\n */\nexport function renderStyling(\n    context: StylingContext, renderer: Renderer3, rootOrView: RootContext | LView,\n    isFirstRender: boolean, classesStore?: BindingStore | null, stylesStore?: BindingStore | null,\n    directiveRef?: any): number {\n  let totalPlayersQueued = 0;\n  const targetDirectiveIndex = getDirectiveIndexFromRegistry(context, directiveRef || null);\n\n  if (isContextDirty(context) && isDirectiveDirty(context, targetDirectiveIndex)) {\n    const flushPlayerBuilders: any =\n        context[StylingIndex.MasterFlagPosition] & StylingFlags.PlayerBuildersDirty;\n    const native = context[StylingIndex.ElementPosition] !;\n    const multiStartIndex = getMultiStartIndex(context);\n    const onlySingleClasses = limitToSingleClasses(context);\n\n    let stillDirty = false;\n    for (let i = StylingIndex.SingleStylesStartPosition; i < context.length;\n         i += StylingIndex.Size) {\n      // there is no point in rendering styles that have not changed on screen\n      if (isDirty(context, i)) {\n        const flag = getPointers(context, i);\n        const directiveIndex = getDirectiveIndexFromEntry(context, i);\n        if (targetDirectiveIndex !== directiveIndex) {\n          stillDirty = true;\n          continue;\n        }\n\n        const prop = getProp(context, i);\n        const value = getValue(context, i);\n        const styleSanitizer =\n            (flag & StylingFlags.Sanitize) ? getStyleSanitizer(context, directiveIndex) : null;\n        const playerBuilder = getPlayerBuilder(context, i);\n        const isClassBased = flag & StylingFlags.Class ? true : false;\n        const isInSingleRegion = i < multiStartIndex;\n        const readInitialValue = !isClassBased || !onlySingleClasses;\n\n        let valueToApply: string|boolean|null = value;\n\n        // VALUE DEFER CASE 1: Use a multi value instead of a null single value\n        // this check implies that a single value was removed and we\n        // should now defer to a multi value and use that (if set).\n        if (isInSingleRegion && !valueExists(valueToApply, isClassBased)) {\n          // single values ALWAYS have a reference to a multi index\n          const multiIndex = getMultiOrSingleIndex(flag);\n          valueToApply = getValue(context, multiIndex);\n        }\n\n        // VALUE DEFER CASE 2: Use the initial value if all else fails (is falsy)\n        // the initial value will always be a string or null,\n        // therefore we can safely adopt it incase there's nothing else\n        // note that this should always be a falsy check since `false` is used\n        // for both class and style comparisons (styles can't be false and false\n        // classes are turned off and should therefore defer to their initial values)\n        // Note that we ignore class-based deferals because otherwise a class can never\n        // be removed in the case that it exists as true in the initial classes list...\n        if (!isClassBased && !valueExists(valueToApply, isClassBased) && readInitialValue) {\n          valueToApply = getInitialValue(context, flag);\n        }\n\n        // if the first render is true then we do not want to start applying falsy\n        // values to the DOM element's styling. Otherwise then we know there has\n        // been a change and even if it's falsy then it's removing something that\n        // was truthy before.\n        const doApplyValue = isFirstRender ? valueToApply : true;\n        if (doApplyValue) {\n          if (isClassBased) {\n            setClass(\n                native, prop, valueToApply ? true : false, renderer, classesStore, playerBuilder);\n          } else {\n            setStyle(\n                native, prop, valueToApply as string | null, renderer, styleSanitizer, stylesStore,\n                playerBuilder);\n          }\n        }\n\n        setDirty(context, i, false);\n      }\n    }\n\n    if (flushPlayerBuilders) {\n      const rootContext =\n          Array.isArray(rootOrView) ? getRootContext(rootOrView) : rootOrView as RootContext;\n      const playerContext = getPlayerContext(context) !;\n      const playersStartIndex = playerContext[PlayerIndex.NonBuilderPlayersStart];\n      for (let i = PlayerIndex.PlayerBuildersStartPosition; i < playersStartIndex;\n           i += PlayerIndex.PlayerAndPlayerBuildersTupleSize) {\n        const builder = playerContext[i] as ClassAndStylePlayerBuilder<any>| null;\n        const playerInsertionIndex = i + PlayerIndex.PlayerOffsetPosition;\n        const oldPlayer = playerContext[playerInsertionIndex] as Player | null;\n        if (builder) {\n          const player = builder.buildPlayer(oldPlayer, isFirstRender);\n          if (player !== undefined) {\n            if (player != null) {\n              const wasQueued = addPlayerInternal(\n                  playerContext, rootContext, native as HTMLElement, player, playerInsertionIndex);\n              wasQueued && totalPlayersQueued++;\n            }\n            if (oldPlayer) {\n              oldPlayer.destroy();\n            }\n          }\n        } else if (oldPlayer) {\n          // the player builder has been removed ... therefore we should delete the associated\n          // player\n          oldPlayer.destroy();\n        }\n      }\n      setContextPlayersDirty(context, false);\n    }\n\n    setDirectiveDirty(context, targetDirectiveIndex, false);\n    setContextDirty(context, stillDirty);\n  }\n\n  return totalPlayersQueued;\n}\n\n/**\n * This function renders a given CSS prop/value entry using the\n * provided renderer. If a `store` value is provided then\n * that will be used a render context instead of the provided\n * renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nexport function setStyle(\n    native: any, prop: string, value: string | null, renderer: Renderer3,\n    sanitizer: StyleSanitizeFn | null, store?: BindingStore | null,\n    playerBuilder?: ClassAndStylePlayerBuilder<any>| null) {\n  value = sanitizer && value ? sanitizer(prop, value) : value;\n  if (store || playerBuilder) {\n    if (store) {\n      store.setValue(prop, value);\n    }\n    if (playerBuilder) {\n      playerBuilder.setValue(prop, value);\n    }\n  } else if (value) {\n    value = value.toString();  // opacity, z-index and flexbox all have number values which may not\n                               // assign as numbers\n    ngDevMode && ngDevMode.rendererSetStyle++;\n    isProceduralRenderer(renderer) ?\n        renderer.setStyle(native, prop, value, RendererStyleFlags3.DashCase) :\n        native['style'].setProperty(prop, value);\n  } else {\n    ngDevMode && ngDevMode.rendererRemoveStyle++;\n    isProceduralRenderer(renderer) ?\n        renderer.removeStyle(native, prop, RendererStyleFlags3.DashCase) :\n        native['style'].removeProperty(prop);\n  }\n}\n\n/**\n * This function renders a given CSS class value using the provided\n * renderer (by adding or removing it from the provided element).\n * If a `store` value is provided then that will be used a render\n * context instead of the provided renderer.\n *\n * @param native the DOM Element\n * @param prop the CSS style property that will be rendered\n * @param value the CSS style value that will be rendered\n * @param renderer\n * @param store an optional key/value map that will be used as a context to render styles on\n */\nfunction setClass(\n    native: any, className: string, add: boolean, renderer: Renderer3, store?: BindingStore | null,\n    playerBuilder?: ClassAndStylePlayerBuilder<any>| null) {\n  if (store || playerBuilder) {\n    if (store) {\n      store.setValue(className, add);\n    }\n    if (playerBuilder) {\n      playerBuilder.setValue(className, add);\n    }\n  } else if (add) {\n    ngDevMode && ngDevMode.rendererAddClass++;\n    isProceduralRenderer(renderer) ? renderer.addClass(native, className) :\n                                     native['classList'].add(className);\n  } else {\n    ngDevMode && ngDevMode.rendererRemoveClass++;\n    isProceduralRenderer(renderer) ? renderer.removeClass(native, className) :\n                                     native['classList'].remove(className);\n  }\n}\n\nfunction setSanitizeFlag(context: StylingContext, index: number, sanitizeYes: boolean) {\n  if (sanitizeYes) {\n    (context[index] as number) |= StylingFlags.Sanitize;\n  } else {\n    (context[index] as number) &= ~StylingFlags.Sanitize;\n  }\n}\n\nfunction setDirty(context: StylingContext, index: number, isDirtyYes: boolean) {\n  const adjustedIndex =\n      index >= StylingIndex.SingleStylesStartPosition ? (index + StylingIndex.FlagsOffset) : index;\n  if (isDirtyYes) {\n    (context[adjustedIndex] as number) |= StylingFlags.Dirty;\n  } else {\n    (context[adjustedIndex] as number) &= ~StylingFlags.Dirty;\n  }\n}\n\nfunction isDirty(context: StylingContext, index: number): boolean {\n  const adjustedIndex =\n      index >= StylingIndex.SingleStylesStartPosition ? (index + StylingIndex.FlagsOffset) : index;\n  return ((context[adjustedIndex] as number) & StylingFlags.Dirty) == StylingFlags.Dirty;\n}\n\nexport function isClassBasedValue(context: StylingContext, index: number): boolean {\n  const adjustedIndex =\n      index >= StylingIndex.SingleStylesStartPosition ? (index + StylingIndex.FlagsOffset) : index;\n  return ((context[adjustedIndex] as number) & StylingFlags.Class) == StylingFlags.Class;\n}\n\nfunction isSanitizable(context: StylingContext, index: number): boolean {\n  const adjustedIndex =\n      index >= StylingIndex.SingleStylesStartPosition ? (index + StylingIndex.FlagsOffset) : index;\n  return ((context[adjustedIndex] as number) & StylingFlags.Sanitize) == StylingFlags.Sanitize;\n}\n\nfunction pointers(configFlag: number, staticIndex: number, dynamicIndex: number) {\n  return (configFlag & StylingFlags.BitMask) | (staticIndex << StylingFlags.BitCountSize) |\n      (dynamicIndex << (StylingIndex.BitCountSize + StylingFlags.BitCountSize));\n}\n\nfunction getInitialValue(context: StylingContext, flag: number): string|boolean|null {\n  const index = getInitialIndex(flag);\n  const entryIsClassBased = flag & StylingFlags.Class;\n  const initialValues = entryIsClassBased ? context[StylingIndex.InitialClassValuesPosition] :\n                                            context[StylingIndex.InitialStyleValuesPosition];\n  return initialValues[index];\n}\n\nfunction getInitialIndex(flag: number): number {\n  return (flag >> StylingFlags.BitCountSize) & StylingIndex.BitMask;\n}\n\nfunction getMultiOrSingleIndex(flag: number): number {\n  const index =\n      (flag >> (StylingIndex.BitCountSize + StylingFlags.BitCountSize)) & StylingIndex.BitMask;\n  return index >= StylingIndex.SingleStylesStartPosition ? index : -1;\n}\n\nfunction getMultiStartIndex(context: StylingContext): number {\n  return getMultiOrSingleIndex(context[StylingIndex.MasterFlagPosition]) as number;\n}\n\nfunction setProp(context: StylingContext, index: number, prop: string) {\n  context[index + StylingIndex.PropertyOffset] = prop;\n}\n\nfunction setValue(context: StylingContext, index: number, value: string | null | boolean) {\n  context[index + StylingIndex.ValueOffset] = value;\n}\n\nfunction hasPlayerBuilderChanged(\n    context: StylingContext, builder: ClassAndStylePlayerBuilder<any>| null, index: number) {\n  const playerContext = context[StylingIndex.PlayerContext] !;\n  if (builder) {\n    if (!playerContext || index === 0) {\n      return true;\n    }\n  } else if (!playerContext) {\n    return false;\n  }\n  return playerContext[index] !== builder;\n}\n\nfunction setPlayerBuilder(\n    context: StylingContext, builder: ClassAndStylePlayerBuilder<any>| null,\n    insertionIndex: number): number {\n  let playerContext = context[StylingIndex.PlayerContext] || allocPlayerContext(context);\n  if (insertionIndex > 0) {\n    playerContext[insertionIndex] = builder;\n  } else {\n    insertionIndex = playerContext[PlayerIndex.NonBuilderPlayersStart];\n    playerContext.splice(insertionIndex, 0, builder, null);\n    playerContext[PlayerIndex.NonBuilderPlayersStart] +=\n        PlayerIndex.PlayerAndPlayerBuildersTupleSize;\n  }\n  return insertionIndex;\n}\n\nexport function directiveOwnerPointers(directiveIndex: number, playerIndex: number) {\n  return (playerIndex << DirectiveOwnerAndPlayerBuilderIndex.BitCountSize) | directiveIndex;\n}\n\nfunction setPlayerBuilderIndex(\n    context: StylingContext, index: number, playerBuilderIndex: number, directiveIndex: number) {\n  const value = directiveOwnerPointers(directiveIndex, playerBuilderIndex);\n  context[index + StylingIndex.PlayerBuilderIndexOffset] = value;\n}\n\nfunction getPlayerBuilderIndex(context: StylingContext, index: number): number {\n  const flag = context[index + StylingIndex.PlayerBuilderIndexOffset] as number;\n  const playerBuilderIndex = (flag >> DirectiveOwnerAndPlayerBuilderIndex.BitCountSize) &\n      DirectiveOwnerAndPlayerBuilderIndex.BitMask;\n  return playerBuilderIndex;\n}\n\nfunction getPlayerBuilder(context: StylingContext, index: number): ClassAndStylePlayerBuilder<any>|\n    null {\n  const playerBuilderIndex = getPlayerBuilderIndex(context, index);\n  if (playerBuilderIndex) {\n    const playerContext = context[StylingIndex.PlayerContext];\n    if (playerContext) {\n      return playerContext[playerBuilderIndex] as ClassAndStylePlayerBuilder<any>| null;\n    }\n  }\n  return null;\n}\n\nfunction setFlag(context: StylingContext, index: number, flag: number) {\n  const adjustedIndex =\n      index === StylingIndex.MasterFlagPosition ? index : (index + StylingIndex.FlagsOffset);\n  context[adjustedIndex] = flag;\n}\n\nfunction getPointers(context: StylingContext, index: number): number {\n  const adjustedIndex =\n      index === StylingIndex.MasterFlagPosition ? index : (index + StylingIndex.FlagsOffset);\n  return context[adjustedIndex] as number;\n}\n\nexport function getValue(context: StylingContext, index: number): string|boolean|null {\n  return context[index + StylingIndex.ValueOffset] as string | boolean | null;\n}\n\nexport function getProp(context: StylingContext, index: number): string {\n  return context[index + StylingIndex.PropertyOffset] as string;\n}\n\nexport function isContextDirty(context: StylingContext): boolean {\n  return isDirty(context, StylingIndex.MasterFlagPosition);\n}\n\nexport function limitToSingleClasses(context: StylingContext) {\n  return context[StylingIndex.MasterFlagPosition] & StylingFlags.OnlyProcessSingleClasses;\n}\n\nexport function setContextDirty(context: StylingContext, isDirtyYes: boolean): void {\n  setDirty(context, StylingIndex.MasterFlagPosition, isDirtyYes);\n}\n\nexport function setContextPlayersDirty(context: StylingContext, isDirtyYes: boolean): void {\n  if (isDirtyYes) {\n    (context[StylingIndex.MasterFlagPosition] as number) |= StylingFlags.PlayerBuildersDirty;\n  } else {\n    (context[StylingIndex.MasterFlagPosition] as number) &= ~StylingFlags.PlayerBuildersDirty;\n  }\n}\n\nfunction findEntryPositionByProp(\n    context: StylingContext, prop: string, startIndex?: number): number {\n  for (let i = (startIndex || 0) + StylingIndex.PropertyOffset; i < context.length;\n       i += StylingIndex.Size) {\n    const thisProp = context[i];\n    if (thisProp == prop) {\n      return i - StylingIndex.PropertyOffset;\n    }\n  }\n  return -1;\n}\n\nfunction swapMultiContextEntries(context: StylingContext, indexA: number, indexB: number) {\n  const tmpValue = getValue(context, indexA);\n  const tmpProp = getProp(context, indexA);\n  const tmpFlag = getPointers(context, indexA);\n  const tmpPlayerBuilderIndex = getPlayerBuilderIndex(context, indexA);\n\n  let flagA = tmpFlag;\n  let flagB = getPointers(context, indexB);\n\n  const singleIndexA = getMultiOrSingleIndex(flagA);\n  if (singleIndexA >= 0) {\n    const _flag = getPointers(context, singleIndexA);\n    const _initial = getInitialIndex(_flag);\n    setFlag(context, singleIndexA, pointers(_flag, _initial, indexB));\n  }\n\n  const singleIndexB = getMultiOrSingleIndex(flagB);\n  if (singleIndexB >= 0) {\n    const _flag = getPointers(context, singleIndexB);\n    const _initial = getInitialIndex(_flag);\n    setFlag(context, singleIndexB, pointers(_flag, _initial, indexA));\n  }\n\n  setValue(context, indexA, getValue(context, indexB));\n  setProp(context, indexA, getProp(context, indexB));\n  setFlag(context, indexA, getPointers(context, indexB));\n  const playerIndexA = getPlayerBuilderIndex(context, indexB);\n  const directiveIndexA = 0;\n  setPlayerBuilderIndex(context, indexA, playerIndexA, directiveIndexA);\n\n  setValue(context, indexB, tmpValue);\n  setProp(context, indexB, tmpProp);\n  setFlag(context, indexB, tmpFlag);\n  setPlayerBuilderIndex(context, indexB, tmpPlayerBuilderIndex, directiveIndexA);\n}\n\nfunction updateSinglePointerValues(context: StylingContext, indexStartPosition: number) {\n  for (let i = indexStartPosition; i < context.length; i += StylingIndex.Size) {\n    const multiFlag = getPointers(context, i);\n    const singleIndex = getMultiOrSingleIndex(multiFlag);\n    if (singleIndex > 0) {\n      const singleFlag = getPointers(context, singleIndex);\n      const initialIndexForSingle = getInitialIndex(singleFlag);\n      const flagValue = (isDirty(context, singleIndex) ? StylingFlags.Dirty : StylingFlags.None) |\n          (isClassBasedValue(context, singleIndex) ? StylingFlags.Class : StylingFlags.None) |\n          (isSanitizable(context, singleIndex) ? StylingFlags.Sanitize : StylingFlags.None);\n      const updatedFlag = pointers(flagValue, initialIndexForSingle, i);\n      setFlag(context, singleIndex, updatedFlag);\n    }\n  }\n}\n\nfunction insertNewMultiProperty(\n    context: StylingContext, index: number, classBased: boolean, name: string, flag: number,\n    value: string | boolean, directiveIndex: number, playerIndex: number): void {\n  const doShift = index < context.length;\n\n  // prop does not exist in the list, add it in\n  context.splice(\n      index, 0, flag | StylingFlags.Dirty | (classBased ? StylingFlags.Class : StylingFlags.None),\n      name, value, 0);\n  setPlayerBuilderIndex(context, index, playerIndex, directiveIndex);\n\n  if (doShift) {\n    // because the value was inserted midway into the array then we\n    // need to update all the shifted multi values' single value\n    // pointers to point to the newly shifted location\n    updateSinglePointerValues(context, index + StylingIndex.Size);\n  }\n}\n\nfunction valueExists(value: string | null | boolean, isClassBased?: boolean) {\n  if (isClassBased) {\n    return value ? true : false;\n  }\n  return value !== null;\n}\n\nfunction prepareInitialFlag(\n    context: StylingContext, prop: string, entryIsClassBased: boolean,\n    sanitizer?: StyleSanitizeFn | null) {\n  let flag = (sanitizer && sanitizer(prop)) ? StylingFlags.Sanitize : StylingFlags.None;\n\n  let initialIndex: number;\n  if (entryIsClassBased) {\n    flag |= StylingFlags.Class;\n    initialIndex =\n        getInitialStylingValuesIndexOf(context[StylingIndex.InitialClassValuesPosition], prop);\n  } else {\n    initialIndex =\n        getInitialStylingValuesIndexOf(context[StylingIndex.InitialStyleValuesPosition], prop);\n  }\n\n  initialIndex = initialIndex > 0 ? (initialIndex + InitialStylingValuesIndex.ValueOffset) : 0;\n  return pointers(flag, initialIndex, 0);\n}\n\nfunction hasValueChanged(\n    flag: number, a: string | boolean | null, b: string | boolean | null): boolean {\n  const isClassBased = flag & StylingFlags.Class;\n  const hasValues = a && b;\n  const usesSanitizer = flag & StylingFlags.Sanitize;\n  // the toString() comparison ensures that a value is checked\n  // ... otherwise (during sanitization bypassing) the === comparsion\n  // would fail since a new String() instance is created\n  if (!isClassBased && hasValues && usesSanitizer) {\n    // we know for sure we're dealing with strings at this point\n    return (a as string).toString() !== (b as string).toString();\n  }\n\n  // everything else is safe to check with a normal equality check\n  return a !== b;\n}\n\nexport class ClassAndStylePlayerBuilder<T> implements PlayerBuilder {\n  private _values: {[key: string]: string | null} = {};\n  private _dirty = false;\n  private _factory: BoundPlayerFactory<T>;\n\n  constructor(factory: PlayerFactory, private _element: HTMLElement, private _type: BindingType) {\n    this._factory = factory as any;\n  }\n\n  setValue(prop: string, value: any) {\n    if (this._values[prop] !== value) {\n      this._values[prop] = value;\n      this._dirty = true;\n    }\n  }\n\n  buildPlayer(currentPlayer: Player|null, isFirstRender: boolean): Player|undefined|null {\n    // if no values have been set here then this means the binding didn't\n    // change and therefore the binding values were not updated through\n    // `setValue` which means no new player will be provided.\n    if (this._dirty) {\n      const player = this._factory.fn(\n          this._element, this._type, this._values !, isFirstRender, currentPlayer || null);\n      this._values = {};\n      this._dirty = false;\n      return player;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Used to provide a summary of the state of the styling context.\n *\n * This is an internal interface that is only used inside of test tooling to\n * help summarize what's going on within the styling context. None of this code\n * is designed to be exported publicly and will, therefore, be tree-shaken away\n * during runtime.\n */\nexport interface LogSummary {\n  name: string;          //\n  staticIndex: number;   //\n  dynamicIndex: number;  //\n  value: number;         //\n  flags: {\n    dirty: boolean;                     //\n    class: boolean;                     //\n    sanitize: boolean;                  //\n    playerBuildersDirty: boolean;       //\n    onlyProcessSingleClasses: boolean;  //\n    bindingAllocationLocked: boolean;   //\n  };\n}\n\n/**\n * This function is not designed to be used in production.\n * It is a utility tool for debugging and testing and it\n * will automatically be tree-shaken away during production.\n */\nexport function generateConfigSummary(source: number): LogSummary;\nexport function generateConfigSummary(source: StylingContext): LogSummary;\nexport function generateConfigSummary(source: StylingContext, index: number): LogSummary;\nexport function generateConfigSummary(source: number | StylingContext, index?: number): LogSummary {\n  let flag, name = 'config value for ';\n  if (Array.isArray(source)) {\n    if (index) {\n      name += 'index: ' + index;\n    } else {\n      name += 'master config';\n    }\n    index = index || StylingIndex.MasterFlagPosition;\n    flag = source[index] as number;\n  } else {\n    flag = source;\n    name += 'index: ' + flag;\n  }\n  const dynamicIndex = getMultiOrSingleIndex(flag);\n  const staticIndex = getInitialIndex(flag);\n  return {\n    name,\n    staticIndex,\n    dynamicIndex,\n    value: flag,\n    flags: {\n      dirty: flag & StylingFlags.Dirty ? true : false,\n      class: flag & StylingFlags.Class ? true : false,\n      sanitize: flag & StylingFlags.Sanitize ? true : false,\n      playerBuildersDirty: flag & StylingFlags.PlayerBuildersDirty ? true : false,\n      onlyProcessSingleClasses: flag & StylingFlags.OnlyProcessSingleClasses ? true : false,\n      bindingAllocationLocked: flag & StylingFlags.BindingAllocationLocked ? true : false,\n    }\n  };\n}\n\nexport function getDirectiveIndexFromEntry(context: StylingContext, index: number) {\n  const value = context[index + StylingIndex.PlayerBuilderIndexOffset] as number;\n  return value & DirectiveOwnerAndPlayerBuilderIndex.BitMask;\n}\n\nfunction getDirectiveIndexFromRegistry(context: StylingContext, directive: any) {\n  const index =\n      getDirectiveRegistryValuesIndexOf(context[StylingIndex.DirectiveRegistryPosition], directive);\n  ngDevMode &&\n      assertNotEqual(\n          index, -1,\n          `The provided directive ${directive} has not been allocated to the element\\'s style/class bindings`);\n  return index > 0 ? index / DirectiveRegistryValuesIndex.Size : 0;\n  // return index / DirectiveRegistryValuesIndex.Size;\n}\n\nfunction getDirectiveRegistryValuesIndexOf(\n    directives: DirectiveRegistryValues, directive: {}): number {\n  for (let i = 0; i < directives.length; i += DirectiveRegistryValuesIndex.Size) {\n    if (directives[i] === directive) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction getInitialStylingValuesIndexOf(keyValues: InitialStylingValues, key: string): number {\n  for (let i = InitialStylingValuesIndex.KeyValueStartPosition; i < keyValues.length;\n       i += InitialStylingValuesIndex.Size) {\n    if (keyValues[i] === key) return i;\n  }\n  return -1;\n}\n\nexport function compareLogSummaries(a: LogSummary, b: LogSummary) {\n  const log: string[] = [];\n  const diffs: [string, any, any][] = [];\n  diffSummaryValues(diffs, 'staticIndex', 'staticIndex', a, b);\n  diffSummaryValues(diffs, 'dynamicIndex', 'dynamicIndex', a, b);\n  Object.keys(a.flags).forEach(\n      name => { diffSummaryValues(diffs, 'flags.' + name, name, a.flags, b.flags); });\n\n  if (diffs.length) {\n    log.push('Log Summaries for:');\n    log.push('  A: ' + a.name);\n    log.push('  B: ' + b.name);\n    log.push('\\n  Differ in the following way (A !== B):');\n    diffs.forEach(result => {\n      const [name, aVal, bVal] = result;\n      log.push('    => ' + name);\n      log.push('    => ' + aVal + ' !== ' + bVal + '\\n');\n    });\n  }\n\n  return log;\n}\n\nfunction diffSummaryValues(result: any[], name: string, prop: string, a: any, b: any) {\n  const aVal = a[prop];\n  const bVal = b[prop];\n  if (aVal !== bVal) {\n    result.push([name, aVal, bVal]);\n  }\n}\n\nfunction getSinglePropIndexValue(\n    context: StylingContext, directiveIndex: number, offset: number, isClassBased: boolean) {\n  const singlePropOffsetRegistryIndex =\n      context[StylingIndex.DirectiveRegistryPosition]\n             [(directiveIndex * DirectiveRegistryValuesIndex.Size) +\n              DirectiveRegistryValuesIndex.SinglePropValuesIndexOffset] as number;\n  const offsets = context[StylingIndex.SinglePropOffsetPositions];\n  const indexForOffset = singlePropOffsetRegistryIndex +\n      SinglePropOffsetValuesIndex.ValueStartPosition +\n      (isClassBased ?\n           offsets\n               [singlePropOffsetRegistryIndex + SinglePropOffsetValuesIndex.StylesCountPosition] :\n           0) +\n      offset;\n  return offsets[indexForOffset];\n}\n\nfunction getStyleSanitizer(context: StylingContext, directiveIndex: number): StyleSanitizeFn|null {\n  const dirs = context[StylingIndex.DirectiveRegistryPosition];\n  const value = dirs\n                    [directiveIndex * DirectiveRegistryValuesIndex.Size +\n                     DirectiveRegistryValuesIndex.StyleSanitizerOffset] ||\n      dirs[DirectiveRegistryValuesIndex.StyleSanitizerOffset] || null;\n  return value as StyleSanitizeFn | null;\n}\n\nfunction isDirectiveDirty(context: StylingContext, directiveIndex: number): boolean {\n  const dirs = context[StylingIndex.DirectiveRegistryPosition];\n  return dirs\n      [directiveIndex * DirectiveRegistryValuesIndex.Size +\n       DirectiveRegistryValuesIndex.DirtyFlagOffset] as boolean;\n}\n\nfunction setDirectiveDirty(\n    context: StylingContext, directiveIndex: number, dirtyYes: boolean): void {\n  const dirs = context[StylingIndex.DirectiveRegistryPosition];\n  dirs\n      [directiveIndex * DirectiveRegistryValuesIndex.Size +\n       DirectiveRegistryValuesIndex.DirtyFlagOffset] = dirtyYes;\n}\n\nfunction allowValueChange(\n    currentValue: string | boolean | null, newValue: string | boolean | null,\n    currentDirectiveOwner: number, newDirectiveOwner: number) {\n  // the code below relies the importance of directive's being tied to their\n  // index value. The index values for each directive are derived from being\n  // registered into the styling context directive registry. The most important\n  // directive is the parent component directive (the template) and each directive\n  // that is added after is considered less important than the previous entry. This\n  // prioritization of directives enables the styling algorithm to decide if a style\n  // or class should be allowed to be updated/replaced incase an earlier directive\n  // already wrote to the exact same style-property or className value. In other words\n  // ... this decides what to do if and when there is a collision.\n  if (currentValue) {\n    if (newValue) {\n      // if a directive index is lower than it always has priority over the\n      // previous directive's value...\n      return newDirectiveOwner <= currentDirectiveOwner;\n    } else {\n      // only write a null value incase it's the same owner writing it.\n      // this avoids having a higher-priority directive write to null\n      // only to have a lesser-priority directive change right to a\n      // non-null value immediately afterwards.\n      return currentDirectiveOwner === newDirectiveOwner;\n    }\n  }\n  return true;\n}\n\n/**\n * This function is only designed to be called for `[class]` bindings when\n * `[ngClass]` (or something that uses `class` as an input) is present. Once\n * directive host bindings fully work for `[class]` and `[style]` inputs\n * then this can be deleted.\n */\nexport function getInitialClassNameValue(context: StylingContext): string {\n  let className = context[StylingIndex.CachedClassValueOrInitialClassString] as string;\n  if (className == null) {\n    className = '';\n    const initialClassValues = context[StylingIndex.InitialClassValuesPosition];\n    for (let i = InitialStylingValuesIndex.KeyValueStartPosition; i < initialClassValues.length;\n         i += InitialStylingValuesIndex.Size) {\n      const isPresent = initialClassValues[i + 1];\n      if (isPresent) {\n        className += (className.length ? ' ' : '') + initialClassValues[i];\n      }\n    }\n    context[StylingIndex.CachedClassValueOrInitialClassString] = className;\n  }\n  return className;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectFlags, InjectionToken, Injector} from '../di';\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {Type} from '../interface/type';\nimport {QueryList} from '../linker';\nimport {validateAttribute, validateProperty} from '../sanitization/sanitization';\nimport {Sanitizer} from '../sanitization/security';\nimport {StyleSanitizeFn} from '../sanitization/style_sanitizer';\nimport {assertDataInRange, assertDefined, assertEqual, assertLessThan, assertNotEqual} from '../util/assert';\nimport {isObservable} from '../util/lang';\nimport {normalizeDebugBindingName, normalizeDebugBindingValue} from '../util/ng_reflect';\n\nimport {assertHasParent, assertPreviousIsParent} from './assert';\nimport {bindingUpdated, bindingUpdated2, bindingUpdated3, bindingUpdated4} from './bindings';\nimport {attachPatchData, getComponentViewByInstance} from './context_discovery';\nimport {diPublicInInjector, getNodeInjectable, getOrCreateInjectable, getOrCreateNodeInjectorForNode, injectAttributeImpl} from './di';\nimport {throwMultipleComponentError} from './errors';\nimport {executeHooks, executeInitHooks, registerPostOrderHooks, registerPreOrderHooks} from './hooks';\nimport {ACTIVE_INDEX, LContainer, VIEWS} from './interfaces/container';\nimport {ComponentDef, ComponentQuery, ComponentTemplate, DirectiveDef, DirectiveDefListOrFactory, PipeDefListOrFactory, RenderFlags} from './interfaces/definition';\nimport {INJECTOR_BLOOM_PARENT_SIZE, NodeInjectorFactory} from './interfaces/injector';\nimport {AttributeMarker, InitialInputData, InitialInputs, LocalRefExtractor, PropertyAliasValue, PropertyAliases, TAttributes, TContainerNode, TElementContainerNode, TElementNode, TIcuContainerNode, TNode, TNodeFlags, TNodeProviderIndexes, TNodeType, TProjectionNode, TViewNode} from './interfaces/node';\nimport {PlayerFactory} from './interfaces/player';\nimport {CssSelectorList, NG_PROJECT_AS_ATTR_NAME} from './interfaces/projection';\nimport {LQueries} from './interfaces/query';\nimport {GlobalTargetResolver, ProceduralRenderer3, RComment, RElement, RText, Renderer3, RendererFactory3, isProceduralRenderer} from './interfaces/renderer';\nimport {SanitizerFn} from './interfaces/sanitization';\nimport {BINDING_INDEX, CLEANUP, CONTAINER_INDEX, CONTENT_QUERIES, CONTEXT, DECLARATION_VIEW, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, INJECTOR, LView, LViewFlags, NEXT, OpaqueViewState, PARENT, QUERIES, RENDERER, RENDERER_FACTORY, RootContext, RootContextFlags, SANITIZER, TAIL, TVIEW, TView} from './interfaces/view';\nimport {assertNodeOfPossibleTypes, assertNodeType} from './node_assert';\nimport {appendChild, appendProjectedNode, createTextNode, getLViewChild, insertView, removeView} from './node_manipulation';\nimport {isNodeMatchingSelectorList, matchingSelectorIndex} from './node_selector_matcher';\nimport {OnChangesDirectiveWrapper, isOnChangesDirectiveWrapper, recordChange, unwrapOnChangesDirectiveWrapper} from './onchanges_util';\nimport {decreaseElementDepthCount, enterView, getBindingsEnabled, getCheckNoChangesMode, getContextLView, getCurrentDirectiveDef, getElementDepthCount, getFirstTemplatePass, getIsParent, getLView, getPreviousOrParentTNode, increaseElementDepthCount, isCreationMode, leaveView, nextContextImpl, resetComponentState, setBindingRoot, setCheckNoChangesMode, setCurrentDirectiveDef, setFirstTemplatePass, setIsParent, setPreviousOrParentTNode} from './state';\nimport {getInitialClassNameValue, initializeStaticContext as initializeStaticStylingContext, patchContextWithStaticAttrs, renderInitialStylesAndClasses, renderStyling, updateClassProp as updateElementClassProp, updateContextWithBindings, updateStyleProp as updateElementStyleProp, updateStylingMap} from './styling/class_and_style_bindings';\nimport {BoundPlayerFactory} from './styling/player_factory';\nimport {createEmptyStylingContext, getStylingContext, hasClassInput, hasStyling, isAnimationProp} from './styling/util';\nimport {NO_CHANGE} from './tokens';\nimport {findComponentView, getComponentViewByIndex, getNativeByIndex, getNativeByTNode, getRootContext, getRootView, getTNode, isComponent, isComponentDef, isContentQueryHost, loadInternal, readElementValue, readPatchedLView, renderStringify} from './util';\n\n\n\n/**\n * A permanent marker promise which signifies that the current CD tree is\n * clean.\n */\nconst _CLEAN_PROMISE = Promise.resolve(null);\n\nconst enum BindingDirection {\n  Input,\n  Output,\n}\n\n/**\n * Refreshes the view, executing the following steps in that order:\n * triggers init hooks, refreshes dynamic embedded views, triggers content hooks, sets host\n * bindings, refreshes child components.\n * Note: view hooks are triggered later when leaving the view.\n */\nexport function refreshDescendantViews(lView: LView) {\n  const tView = lView[TVIEW];\n  // This needs to be set before children are processed to support recursive components\n  tView.firstTemplatePass = false;\n  setFirstTemplatePass(false);\n\n  // If this is a creation pass, we should not call lifecycle hooks or evaluate bindings.\n  // This will be done in the update pass.\n  if (!isCreationMode(lView)) {\n    const checkNoChangesMode = getCheckNoChangesMode();\n\n    executeInitHooks(lView, tView, checkNoChangesMode);\n\n    refreshDynamicEmbeddedViews(lView);\n\n    // Content query results must be refreshed before content hooks are called.\n    refreshContentQueries(tView);\n\n    executeHooks(lView, tView.contentHooks, tView.contentCheckHooks, checkNoChangesMode);\n\n    setHostBindings(tView, lView);\n  }\n\n  refreshChildComponents(tView.components);\n}\n\n\n/** Sets the host bindings for the current view. */\nexport function setHostBindings(tView: TView, viewData: LView): void {\n  if (tView.expandoInstructions) {\n    let bindingRootIndex = viewData[BINDING_INDEX] = tView.expandoStartIndex;\n    setBindingRoot(bindingRootIndex);\n    let currentDirectiveIndex = -1;\n    let currentElementIndex = -1;\n    for (let i = 0; i < tView.expandoInstructions.length; i++) {\n      const instruction = tView.expandoInstructions[i];\n      if (typeof instruction === 'number') {\n        if (instruction <= 0) {\n          // Negative numbers mean that we are starting new EXPANDO block and need to update\n          // the current element and directive index.\n          currentElementIndex = -instruction;\n          // Injector block and providers are taken into account.\n          const providerCount = (tView.expandoInstructions[++i] as number);\n          bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;\n\n          currentDirectiveIndex = bindingRootIndex;\n        } else {\n          // This is either the injector size (so the binding root can skip over directives\n          // and get to the first set of host bindings on this node) or the host var count\n          // (to get to the next set of host bindings on this node).\n          bindingRootIndex += instruction;\n        }\n        setBindingRoot(bindingRootIndex);\n      } else {\n        // If it's not a number, it's a host binding function that needs to be executed.\n        if (instruction !== null) {\n          viewData[BINDING_INDEX] = bindingRootIndex;\n          instruction(\n              RenderFlags.Update, unwrapOnChangesDirectiveWrapper(viewData[currentDirectiveIndex]),\n              currentElementIndex);\n        }\n        currentDirectiveIndex++;\n      }\n    }\n  }\n}\n\n/** Refreshes content queries for all directives in the given view. */\nfunction refreshContentQueries(tView: TView): void {\n  if (tView.contentQueries != null) {\n    for (let i = 0; i < tView.contentQueries.length; i += 2) {\n      const directiveDefIdx = tView.contentQueries[i];\n      const directiveDef = tView.data[directiveDefIdx] as DirectiveDef<any>;\n\n      directiveDef.contentQueriesRefresh !(\n          directiveDefIdx - HEADER_OFFSET, tView.contentQueries[i + 1]);\n    }\n  }\n}\n\n/** Refreshes child components in the current view. */\nfunction refreshChildComponents(components: number[] | null): void {\n  if (components != null) {\n    for (let i = 0; i < components.length; i++) {\n      componentRefresh(components[i]);\n    }\n  }\n}\n\nexport function createLView<T>(\n    parentLView: LView | null, tView: TView, context: T | null, flags: LViewFlags,\n    rendererFactory?: RendererFactory3 | null, renderer?: Renderer3 | null,\n    sanitizer?: Sanitizer | null, injector?: Injector | null): LView {\n  const lView = tView.blueprint.slice() as LView;\n  lView[FLAGS] = flags | LViewFlags.CreationMode | LViewFlags.Attached | LViewFlags.RunInit |\n      LViewFlags.FirstLViewPass;\n  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;\n  lView[CONTEXT] = context;\n  lView[RENDERER_FACTORY] = (rendererFactory || parentLView && parentLView[RENDERER_FACTORY]) !;\n  ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');\n  lView[RENDERER] = (renderer || parentLView && parentLView[RENDERER]) !;\n  ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');\n  lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || null !;\n  lView[INJECTOR as any] = injector || parentLView && parentLView[INJECTOR] || null;\n  return lView;\n}\n\n/**\n * Create and stores the TNode, and hooks it up to the tree.\n *\n * @param index The index at which the TNode should be saved (null if view, since they are not\n * saved).\n * @param type The type of TNode to create\n * @param native The native element for this node, if applicable\n * @param name The tag name of the associated native element, if applicable\n * @param attrs Any attrs for the native element, if applicable\n */\nexport function createNodeAtIndex(\n    index: number, type: TNodeType.Element, native: RElement | RText | null, name: string | null,\n    attrs: TAttributes | null): TElementNode;\nexport function createNodeAtIndex(\n    index: number, type: TNodeType.Container, native: RComment, name: string | null,\n    attrs: TAttributes | null): TContainerNode;\nexport function createNodeAtIndex(\n    index: number, type: TNodeType.Projection, native: null, name: null,\n    attrs: TAttributes | null): TProjectionNode;\nexport function createNodeAtIndex(\n    index: number, type: TNodeType.ElementContainer, native: RComment, name: string | null,\n    attrs: TAttributes | null): TElementContainerNode;\nexport function createNodeAtIndex(\n    index: number, type: TNodeType.IcuContainer, native: RComment, name: null,\n    attrs: TAttributes | null): TElementContainerNode;\nexport function createNodeAtIndex(\n    index: number, type: TNodeType, native: RText | RElement | RComment | null, name: string | null,\n    attrs: TAttributes | null): TElementNode&TContainerNode&TElementContainerNode&TProjectionNode&\n    TIcuContainerNode {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  const adjustedIndex = index + HEADER_OFFSET;\n  ngDevMode &&\n      assertLessThan(adjustedIndex, lView.length, `Slot should have been initialized with null`);\n  lView[adjustedIndex] = native;\n\n  let tNode = tView.data[adjustedIndex] as TNode;\n  if (tNode == null) {\n    // TODO(misko): Refactor createTNode so that it does not depend on LView.\n    tNode = tView.data[adjustedIndex] = createTNode(lView, type, adjustedIndex, name, attrs, null);\n  }\n\n  // Now link ourselves into the tree.\n  // We need this even if tNode exists, otherwise we might end up pointing to unexisting tNodes when\n  // we use i18n (especially with ICU expressions that update the DOM during the update phase).\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  const isParent = getIsParent();\n  if (previousOrParentTNode) {\n    if (isParent && previousOrParentTNode.child == null &&\n        (tNode.parent !== null || previousOrParentTNode.type === TNodeType.View)) {\n      // We are in the same view, which means we are adding content node to the parent view.\n      previousOrParentTNode.child = tNode;\n    } else if (!isParent) {\n      previousOrParentTNode.next = tNode;\n    }\n  }\n\n  if (tView.firstChild == null) {\n    tView.firstChild = tNode;\n  }\n\n  setPreviousOrParentTNode(tNode);\n  setIsParent(true);\n  return tNode as TElementNode & TViewNode & TContainerNode & TElementContainerNode &\n      TProjectionNode & TIcuContainerNode;\n}\n\nexport function createViewNode(index: number, view: LView) {\n  // View nodes are not stored in data because they can be added / removed at runtime (which\n  // would cause indices to change). Their TNodes are instead stored in tView.node.\n  if (view[TVIEW].node == null) {\n    view[TVIEW].node = createTNode(view, TNodeType.View, index, null, null, null) as TViewNode;\n  }\n\n  return view[HOST_NODE] = view[TVIEW].node as TViewNode;\n}\n\n\n/**\n * When elements are created dynamically after a view blueprint is created (e.g. through\n * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future\n * template passes.\n */\nexport function allocExpando(view: LView) {\n  const tView = view[TVIEW];\n  if (tView.firstTemplatePass) {\n    tView.expandoStartIndex++;\n    tView.blueprint.push(null);\n    tView.data.push(null);\n    view.push(null);\n  }\n}\n\n\n//////////////////////////\n//// Render\n//////////////////////////\n\n/**\n *\n * @param hostNode Existing node to render into.\n * @param templateFn Template function with the instructions.\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param context to pass into the template.\n * @param providedRendererFactory renderer factory to use\n * @param host The host element node to use\n * @param directives Directive defs that should be used for matching\n * @param pipes Pipe defs that should be used for matching\n */\nexport function renderTemplate<T>(\n    hostNode: RElement, templateFn: ComponentTemplate<T>, consts: number, vars: number, context: T,\n    providedRendererFactory: RendererFactory3, hostView: LView | null,\n    directives?: DirectiveDefListOrFactory | null, pipes?: PipeDefListOrFactory | null,\n    sanitizer?: Sanitizer | null): LView {\n  if (hostView == null) {\n    resetComponentState();\n    const renderer = providedRendererFactory.createRenderer(null, null);\n\n    // We need to create a root view so it's possible to look up the host element through its index\n    const hostLView = createLView(\n        null, createTView(-1, null, 1, 0, null, null, null), {},\n        LViewFlags.CheckAlways | LViewFlags.IsRoot, providedRendererFactory, renderer);\n    enterView(hostLView, null);  // SUSPECT! why do we need to enter the View?\n\n    const componentTView =\n        getOrCreateTView(templateFn, consts, vars, directives || null, pipes || null, null);\n    hostView = createLView(\n        hostLView, componentTView, context, LViewFlags.CheckAlways, providedRendererFactory,\n        renderer, sanitizer);\n    hostView[HOST_NODE] = createNodeAtIndex(0, TNodeType.Element, hostNode, null, null);\n  }\n  renderComponentOrTemplate(hostView, context, templateFn);\n  return hostView;\n}\n\n/**\n * Used for creating the LViewNode of a dynamic embedded view,\n * either through ViewContainerRef.createEmbeddedView() or TemplateRef.createEmbeddedView().\n * Such lViewNode will then be renderer with renderEmbeddedTemplate() (see below).\n */\nexport function createEmbeddedViewAndNode<T>(\n    tView: TView, context: T, declarationView: LView, renderer: Renderer3, queries: LQueries | null,\n    injectorIndex: number): LView {\n  const _isParent = getIsParent();\n  const _previousOrParentTNode = getPreviousOrParentTNode();\n  setIsParent(true);\n  setPreviousOrParentTNode(null !);\n\n  const lView = createLView(declarationView, tView, context, LViewFlags.CheckAlways);\n  lView[DECLARATION_VIEW] = declarationView;\n\n  if (queries) {\n    lView[QUERIES] = queries.createView();\n  }\n  createViewNode(-1, lView);\n\n  if (tView.firstTemplatePass) {\n    tView.node !.injectorIndex = injectorIndex;\n  }\n\n  setIsParent(_isParent);\n  setPreviousOrParentTNode(_previousOrParentTNode);\n  return lView;\n}\n\n/**\n * Used for rendering embedded views (e.g. dynamically created views)\n *\n * Dynamically created views must store/retrieve their TViews differently from component views\n * because their template functions are nested in the template functions of their hosts, creating\n * closures. If their host template happens to be an embedded template in a loop (e.g. ngFor inside\n * an ngFor), the nesting would mean we'd have multiple instances of the template function, so we\n * can't store TViews in the template function itself (as we do for comps). Instead, we store the\n * TView for dynamically created views on their host TNode, which only has one instance.\n */\nexport function renderEmbeddedTemplate<T>(viewToRender: LView, tView: TView, context: T) {\n  const _isParent = getIsParent();\n  const _previousOrParentTNode = getPreviousOrParentTNode();\n  let oldView: LView;\n  if (viewToRender[FLAGS] & LViewFlags.IsRoot) {\n    // This is a root view inside the view tree\n    tickRootContext(getRootContext(viewToRender));\n  } else {\n    try {\n      setIsParent(true);\n      setPreviousOrParentTNode(null !);\n\n      oldView = enterView(viewToRender, viewToRender[HOST_NODE]);\n      namespaceHTML();\n      tView.template !(getRenderFlags(viewToRender), context);\n      // This must be set to false immediately after the first creation run because in an\n      // ngFor loop, all the views will be created together before update mode runs and turns\n      // off firstTemplatePass. If we don't set it here, instances will perform directive\n      // matching, etc again and again.\n      viewToRender[TVIEW].firstTemplatePass = false;\n      setFirstTemplatePass(false);\n\n      refreshDescendantViews(viewToRender);\n    } finally {\n      leaveView(oldView !);\n      setIsParent(_isParent);\n      setPreviousOrParentTNode(_previousOrParentTNode);\n    }\n  }\n}\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n */\nexport function nextContext<T = any>(level: number = 1): T {\n  return nextContextImpl(level);\n}\n\nfunction renderComponentOrTemplate<T>(\n    hostView: LView, context: T, templateFn?: ComponentTemplate<T>) {\n  const rendererFactory = hostView[RENDERER_FACTORY];\n  const oldView = enterView(hostView, hostView[HOST_NODE]);\n  const normalExecutionPath = !getCheckNoChangesMode();\n  try {\n    if (normalExecutionPath && rendererFactory.begin) {\n      rendererFactory.begin();\n    }\n\n    if (isCreationMode(hostView)) {\n      // creation mode pass\n      if (templateFn) {\n        namespaceHTML();\n        templateFn(RenderFlags.Create, context !);\n      }\n\n      refreshDescendantViews(hostView);\n      hostView[FLAGS] &= ~LViewFlags.CreationMode;\n    }\n\n    // update mode pass\n    templateFn && templateFn(RenderFlags.Update, context !);\n    refreshDescendantViews(hostView);\n  } finally {\n    if (normalExecutionPath && rendererFactory.end) {\n      rendererFactory.end();\n    }\n    leaveView(oldView);\n  }\n}\n\n/**\n * This function returns the default configuration of rendering flags depending on when the\n * template is in creation mode or update mode. Update block and create block are\n * always run separately.\n */\nfunction getRenderFlags(view: LView): RenderFlags {\n  return isCreationMode(view) ? RenderFlags.Create : RenderFlags.Update;\n}\n\n//////////////////////////\n//// Namespace\n//////////////////////////\n\nlet _currentNamespace: string|null = null;\n\nexport function namespaceSVG() {\n  _currentNamespace = 'http://www.w3.org/2000/svg';\n}\n\nexport function namespaceMathML() {\n  _currentNamespace = 'http://www.w3.org/1998/MathML/';\n}\n\nexport function namespaceHTML() {\n  _currentNamespace = null;\n}\n\n//////////////////////////\n//// Element\n//////////////////////////\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param localRefs A set of local reference bindings on the element.\n */\nexport function element(\n    index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void {\n  elementStart(index, name, attrs, localRefs);\n  elementEnd();\n}\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by `elementContainerEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param attrs Set of attributes to be used when matching directives.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n */\nexport function elementContainerStart(\n    index: number, attrs?: TAttributes | null, localRefs?: string[] | null): void {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  const renderer = lView[RENDERER];\n  const tagName = 'ng-container';\n  ngDevMode && assertEqual(\n                   lView[BINDING_INDEX], tView.bindingStartIndex,\n                   'element containers should be created before any bindings');\n\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const native = renderer.createComment(ngDevMode ? tagName : '');\n\n  ngDevMode && assertDataInRange(lView, index - 1);\n  const tNode =\n      createNodeAtIndex(index, TNodeType.ElementContainer, native, tagName, attrs || null);\n\n  appendChild(native, tNode, lView);\n  createDirectivesAndLocals(tView, lView, localRefs);\n  attachPatchData(native, lView);\n}\n\n/** Mark the end of the <ng-container>. */\nexport function elementContainerEnd(): void {\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertHasParent(getPreviousOrParentTNode());\n    previousOrParentTNode = previousOrParentTNode.parent !;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n\n  ngDevMode && assertNodeType(previousOrParentTNode, TNodeType.ElementContainer);\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode(previousOrParentTNode as TElementContainerNode);\n  }\n\n  registerPostOrderHooks(tView, previousOrParentTNode);\n}\n\n/**\n * Create DOM element. The instruction must later be followed by `elementEnd()` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrs Statically bound set of attributes, classes, and styles to be written into the DOM\n *              element on creation. Use [AttributeMarker] to denote the meaning of this array.\n * @param localRefs A set of local reference bindings on the element.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n */\nexport function elementStart(\n    index: number, name: string, attrs?: TAttributes | null, localRefs?: string[] | null): void {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  ngDevMode && assertEqual(\n                   lView[BINDING_INDEX], tView.bindingStartIndex,\n                   'elements should be created before any bindings ');\n\n  ngDevMode && ngDevMode.rendererCreateElement++;\n\n  const native = elementCreate(name);\n\n  ngDevMode && assertDataInRange(lView, index - 1);\n\n  const tNode = createNodeAtIndex(index, TNodeType.Element, native !, name, attrs || null);\n\n  if (attrs) {\n    // it's important to only prepare styling-related datastructures once for a given\n    // tNode and not each time an element is created. Also, the styling code is designed\n    // to be patched and constructed at various points, but only up until the first element\n    // is created. Then the styling context is locked and can only be instantiated for each\n    // successive element that is created.\n    if (tView.firstTemplatePass && !tNode.stylingTemplate && hasStyling(attrs)) {\n      tNode.stylingTemplate = initializeStaticStylingContext(attrs);\n    }\n    setUpAttributes(native, attrs);\n  }\n\n  appendChild(native, tNode, lView);\n  createDirectivesAndLocals(tView, lView, localRefs);\n\n  // any immediate children of a component or template container must be pre-emptively\n  // monkey-patched with the component view data so that the element can be inspected\n  // later on using any element discovery utility methods (see `element_discovery.ts`)\n  if (getElementDepthCount() === 0) {\n    attachPatchData(native, lView);\n  }\n  increaseElementDepthCount();\n\n  // if a directive contains a host binding for \"class\" then all class-based data will\n  // flow through that (except for `[class.prop]` bindings). This also includes initial\n  // static class values as well. (Note that this will be fixed once map-based `[style]`\n  // and `[class]` bindings work for multiple directives.)\n  if (tView.firstTemplatePass) {\n    const inputData = initializeTNodeInputs(tNode);\n    if (inputData && inputData.hasOwnProperty('class')) {\n      tNode.flags |= TNodeFlags.hasClassInput;\n    }\n  }\n\n  // There is no point in rendering styles when a class directive is present since\n  // it will take that over for us (this will be removed once #FW-882 is in).\n  if (tNode.stylingTemplate && (tNode.flags & TNodeFlags.hasClassInput) === 0) {\n    renderInitialStylesAndClasses(native, tNode.stylingTemplate, lView[RENDERER]);\n  }\n}\n\n/**\n * Creates a native element from a tag name, using a renderer.\n * @param name the tag name\n * @param overriddenRenderer Optional A renderer to override the default one\n * @returns the element created\n */\nexport function elementCreate(name: string, overriddenRenderer?: Renderer3): RElement {\n  let native: RElement;\n  const rendererToUse = overriddenRenderer || getLView()[RENDERER];\n\n  if (isProceduralRenderer(rendererToUse)) {\n    native = rendererToUse.createElement(name, _currentNamespace);\n  } else {\n    if (_currentNamespace === null) {\n      native = rendererToUse.createElement(name);\n    } else {\n      native = rendererToUse.createElementNS(_currentNamespace, name);\n    }\n  }\n  return native;\n}\n\n/**\n * Creates directive instances and populates local refs.\n *\n * @param localRefs Local refs of the node in question\n * @param localRefExtractor mapping function that extracts local ref value from TNode\n */\nfunction createDirectivesAndLocals(\n    tView: TView, lView: LView, localRefs: string[] | null | undefined,\n    localRefExtractor: LocalRefExtractor = getNativeByTNode) {\n  if (!getBindingsEnabled()) return;\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  if (getFirstTemplatePass()) {\n    ngDevMode && ngDevMode.firstTemplatePass++;\n\n    resolveDirectives(\n        tView, lView, findDirectiveMatches(tView, lView, previousOrParentTNode),\n        previousOrParentTNode, localRefs || null);\n  } else {\n    // During first template pass, queries are created or cloned when first requested\n    // using `getOrCreateCurrentQueries`. For subsequent template passes, we clone\n    // any current LQueries here up-front if the current node hosts a content query.\n    if (isContentQueryHost(getPreviousOrParentTNode()) && lView[QUERIES]) {\n      lView[QUERIES] = lView[QUERIES] !.clone();\n    }\n  }\n  instantiateAllDirectives(tView, lView, previousOrParentTNode);\n  invokeDirectivesHostBindings(tView, lView, previousOrParentTNode);\n  saveResolvedLocalsInData(lView, previousOrParentTNode, localRefExtractor);\n}\n\n/**\n * Takes a list of local names and indices and pushes the resolved local variable values\n * to LView in the same order as they are loaded in the template with load().\n */\nfunction saveResolvedLocalsInData(\n    viewData: LView, tNode: TNode, localRefExtractor: LocalRefExtractor): void {\n  const localNames = tNode.localNames;\n  if (localNames) {\n    let localIndex = tNode.index + 1;\n    for (let i = 0; i < localNames.length; i += 2) {\n      const index = localNames[i + 1] as number;\n      const value = index === -1 ?\n          localRefExtractor(\n              tNode as TElementNode | TContainerNode | TElementContainerNode, viewData) :\n          viewData[index];\n      viewData[localIndex++] = value;\n    }\n  }\n}\n\n/**\n * Gets TView from a template function or creates a new TView\n * if it doesn't already exist.\n *\n * @param templateFn The template from which to get static data\n * @param consts The number of nodes, local refs, and pipes in this view\n * @param vars The number of bindings and pure function bindings in this view\n * @param directives Directive defs that should be saved on TView\n * @param pipes Pipe defs that should be saved on TView\n * @returns TView\n */\nexport function getOrCreateTView(\n    templateFn: ComponentTemplate<any>, consts: number, vars: number,\n    directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null,\n    viewQuery: ComponentQuery<any>| null): TView {\n  // TODO(misko): reading `ngPrivateData` here is problematic for two reasons\n  // 1. It is a megamorphic call on each invocation.\n  // 2. For nested embedded views (ngFor inside ngFor) the template instance is per\n  //    outer template invocation, which means that no such property will exist\n  // Correct solution is to only put `ngPrivateData` on the Component template\n  // and not on embedded templates.\n\n  return templateFn.ngPrivateData ||\n      (templateFn.ngPrivateData =\n           createTView(-1, templateFn, consts, vars, directives, pipes, viewQuery) as never);\n}\n\n/**\n * Creates a TView instance\n *\n * @param viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic\n * @param templateFn Template function\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param directives Registry of directives for this view\n * @param pipes Registry of pipes for this view\n */\nexport function createTView(\n    viewIndex: number, templateFn: ComponentTemplate<any>| null, consts: number, vars: number,\n    directives: DirectiveDefListOrFactory | null, pipes: PipeDefListOrFactory | null,\n    viewQuery: ComponentQuery<any>| null): TView {\n  ngDevMode && ngDevMode.tView++;\n  const bindingStartIndex = HEADER_OFFSET + consts;\n  // This length does not yet contain host bindings from child directives because at this point,\n  // we don't know which directives are active on this template. As soon as a directive is matched\n  // that has a host binding, we will update the blueprint with that def's hostVars count.\n  const initialViewLength = bindingStartIndex + vars;\n  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);\n  return blueprint[TVIEW as any] = {\n    id: viewIndex,\n    blueprint: blueprint,\n    template: templateFn,\n    viewQuery: viewQuery,\n    node: null !,\n    data: blueprint.slice(),  // Fill in to match HEADER_OFFSET in LView\n    childIndex: -1,           // Children set in addToViewTree(), if any\n    bindingStartIndex: bindingStartIndex,\n    expandoStartIndex: initialViewLength,\n    expandoInstructions: null,\n    firstTemplatePass: true,\n    changesHooks: null,\n    initHooks: null,\n    checkHooks: null,\n    contentHooks: null,\n    contentCheckHooks: null,\n    viewHooks: null,\n    viewCheckHooks: null,\n    destroyHooks: null,\n    cleanup: null,\n    contentQueries: null,\n    components: null,\n    directiveRegistry: typeof directives === 'function' ? directives() : directives,\n    pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,\n    firstChild: null,\n  };\n}\n\nfunction createViewBlueprint(bindingStartIndex: number, initialViewLength: number): LView {\n  const blueprint = new Array(initialViewLength)\n                        .fill(null, 0, bindingStartIndex)\n                        .fill(NO_CHANGE, bindingStartIndex) as LView;\n  blueprint[CONTAINER_INDEX] = -1;\n  blueprint[BINDING_INDEX] = bindingStartIndex;\n  return blueprint;\n}\n\n/**\n * Assigns all attribute values to the provided element via the inferred renderer.\n *\n * This function accepts two forms of attribute entries:\n *\n * default: (key, value):\n *  attrs = [key1, value1, key2, value2]\n *\n * namespaced: (NAMESPACE_MARKER, uri, name, value)\n *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]\n *\n * The `attrs` array can contain a mix of both the default and namespaced entries.\n * The \"default\" values are set without a marker, but if the function comes across\n * a marker value then it will attempt to set a namespaced value. If the marker is\n * not of a namespaced value then the function will quit and return the index value\n * where it stopped during the iteration of the attrs array.\n *\n * See [AttributeMarker] to understand what the namespace marker value is.\n *\n * Note that this instruction does not support assigning style and class values to\n * an element. See `elementStart` and `elementHostAttrs` to learn how styling values\n * are applied to an element.\n *\n * @param native The element that the attributes will be assigned to\n * @param attrs The attribute array of values that will be assigned to the element\n * @returns the index value that was last accessed in the attributes array\n */\nfunction setUpAttributes(native: RElement, attrs: TAttributes): number {\n  const renderer = getLView()[RENDERER];\n  const isProc = isProceduralRenderer(renderer);\n\n  let i = 0;\n  while (i < attrs.length) {\n    const value = attrs[i];\n    if (typeof value === 'number') {\n      // only namespaces are supported. Other value types (such as style/class\n      // entries) are not supported in this function.\n      if (value !== AttributeMarker.NamespaceURI) {\n        break;\n      }\n\n      // we just landed on the marker value ... therefore\n      // we should skip to the next entry\n      i++;\n\n      const namespaceURI = attrs[i++] as string;\n      const attrName = attrs[i++] as string;\n      const attrVal = attrs[i++] as string;\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProc ?\n          (renderer as ProceduralRenderer3).setAttribute(native, attrName, attrVal, namespaceURI) :\n          native.setAttributeNS(namespaceURI, attrName, attrVal);\n    } else {\n      /// attrName is string;\n      const attrName = value as string;\n      const attrVal = attrs[++i];\n      if (attrName !== NG_PROJECT_AS_ATTR_NAME) {\n        // Standard attributes\n        ngDevMode && ngDevMode.rendererSetAttribute++;\n        if (isAnimationProp(attrName)) {\n          if (isProc) {\n            (renderer as ProceduralRenderer3).setProperty(native, attrName, attrVal);\n          }\n        } else {\n          isProc ?\n              (renderer as ProceduralRenderer3)\n                  .setAttribute(native, attrName as string, attrVal as string) :\n              native.setAttribute(attrName as string, attrVal as string);\n        }\n      }\n      i++;\n    }\n  }\n\n  // another piece of code may iterate over the same attributes array. Therefore\n  // it may be helpful to return the exact spot where the attributes array exited\n  // whether by running into an unsupported marker or if all the static values were\n  // iterated over.\n  return i;\n}\n\nexport function createError(text: string, token: any) {\n  return new Error(`Renderer: ${text} [${renderStringify(token)}]`);\n}\n\n\n/**\n * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.\n *\n * @param elementOrSelector Render element or CSS selector to locate the element.\n */\nexport function locateHostElement(\n    factory: RendererFactory3, elementOrSelector: RElement | string): RElement|null {\n  const defaultRenderer = factory.createRenderer(null, null);\n  const rNode = typeof elementOrSelector === 'string' ?\n      (isProceduralRenderer(defaultRenderer) ?\n           defaultRenderer.selectRootElement(elementOrSelector) :\n           defaultRenderer.querySelector(elementOrSelector)) :\n      elementOrSelector;\n  if (ngDevMode && !rNode) {\n    if (typeof elementOrSelector === 'string') {\n      throw createError('Host node with selector not found:', elementOrSelector);\n    } else {\n      throw createError('Host node is required:', elementOrSelector);\n    }\n  }\n  return rNode;\n}\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n */\nexport function listener(\n    eventName: string, listenerFn: (e?: any) => any, useCapture = false,\n    eventTargetResolver?: GlobalTargetResolver): void {\n  const lView = getLView();\n  const tNode = getPreviousOrParentTNode();\n  const tView = lView[TVIEW];\n  const firstTemplatePass = tView.firstTemplatePass;\n  const tCleanup: false|any[] = firstTemplatePass && (tView.cleanup || (tView.cleanup = []));\n  ngDevMode && assertNodeOfPossibleTypes(\n                   tNode, TNodeType.Element, TNodeType.Container, TNodeType.ElementContainer);\n\n  // add native event listener - applicable to elements only\n  if (tNode.type === TNodeType.Element) {\n    const native = getNativeByTNode(tNode, lView) as RElement;\n    const resolved = eventTargetResolver ? eventTargetResolver(native) : {} as any;\n    const target = resolved.target || native;\n    ngDevMode && ngDevMode.rendererAddEventListener++;\n    const renderer = lView[RENDERER];\n    const lCleanup = getCleanup(lView);\n    const lCleanupIndex = lCleanup.length;\n    let useCaptureOrSubIdx: boolean|number = useCapture;\n\n    // In order to match current behavior, native DOM event listeners must be added for all\n    // events (including outputs).\n    if (isProceduralRenderer(renderer)) {\n      // The first argument of `listen` function in Procedural Renderer is:\n      // - either a target name (as a string) in case of global target (window, document, body)\n      // - or element reference (in all other cases)\n      const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);\n      lCleanup.push(listenerFn, cleanupFn);\n      useCaptureOrSubIdx = lCleanupIndex + 1;\n    } else {\n      const wrappedListener = wrapListenerWithPreventDefault(listenerFn);\n      target.addEventListener(eventName, wrappedListener, useCapture);\n      lCleanup.push(wrappedListener);\n    }\n\n    const idxOrTargetGetter = eventTargetResolver ?\n        (_lView: LView) => eventTargetResolver(readElementValue(_lView[tNode.index])).target :\n        tNode.index;\n    tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCaptureOrSubIdx);\n  }\n\n  // subscribe to directive outputs\n  if (tNode.outputs === undefined) {\n    // if we create TNode here, inputs must be undefined so we know they still need to be\n    // checked\n    tNode.outputs = generatePropertyAliases(tNode, BindingDirection.Output);\n  }\n\n  const outputs = tNode.outputs;\n  let props: PropertyAliasValue|undefined;\n  if (outputs && (props = outputs[eventName])) {\n    const propsLength = props.length;\n    if (propsLength) {\n      const lCleanup = getCleanup(lView);\n      // Subscribe to listeners for each output, and setup clean up for each.\n      for (let i = 0; i < propsLength;) {\n        const directiveIndex = props[i++] as number;\n        const minifiedName = props[i++] as string;\n        const declaredName = props[i++] as string;\n        ngDevMode && assertDataInRange(lView, directiveIndex as number);\n        const directive = unwrapOnChangesDirectiveWrapper(lView[directiveIndex]);\n        const output = directive[minifiedName];\n\n        if (ngDevMode && !isObservable(output)) {\n          throw new Error(\n              `@Output ${minifiedName} not initialized in '${directive.constructor.name}'.`);\n        }\n\n        const subscription = output.subscribe(listenerFn);\n        const idx = lCleanup.length;\n        lCleanup.push(listenerFn, subscription);\n        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));\n      }\n    }\n  }\n}\n\n/**\n * Saves context for this cleanup function in LView.cleanupInstances.\n *\n * On the first template pass, saves in TView:\n * - Cleanup function\n * - Index of context we just saved in LView.cleanupInstances\n */\nexport function storeCleanupWithContext(lView: LView, context: any, cleanupFn: Function): void {\n  const lCleanup = getCleanup(lView);\n  lCleanup.push(context);\n\n  if (lView[TVIEW].firstTemplatePass) {\n    getTViewCleanup(lView).push(cleanupFn, lCleanup.length - 1);\n  }\n}\n\n/**\n * Saves the cleanup function itself in LView.cleanupInstances.\n *\n * This is necessary for functions that are wrapped with their contexts, like in renderer2\n * listeners.\n *\n * On the first template pass, the index of the cleanup function is saved in TView.\n */\nexport function storeCleanupFn(view: LView, cleanupFn: Function): void {\n  getCleanup(view).push(cleanupFn);\n\n  if (view[TVIEW].firstTemplatePass) {\n    getTViewCleanup(view).push(view[CLEANUP] !.length - 1, null);\n  }\n}\n\n/** Mark the end of the element. */\nexport function elementEnd(): void {\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertHasParent(getPreviousOrParentTNode());\n    previousOrParentTNode = previousOrParentTNode.parent !;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n  ngDevMode && assertNodeType(previousOrParentTNode, TNodeType.Element);\n  const lView = getLView();\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode(previousOrParentTNode as TElementNode);\n  }\n\n  registerPostOrderHooks(getLView()[TVIEW], previousOrParentTNode);\n  decreaseElementDepthCount();\n\n  // this is fired at the end of elementEnd because ALL of the stylingBindings code\n  // (for directives and the template) have now executed which means the styling\n  // context can be instantiated properly.\n  if (hasClassInput(previousOrParentTNode)) {\n    const stylingContext = getStylingContext(previousOrParentTNode.index, lView);\n    setInputsForProperty(\n        lView, previousOrParentTNode.inputs !, 'class', getInitialClassNameValue(stylingContext));\n  }\n}\n\n/**\n * Updates the value of removes an attribute on an Element.\n *\n * @param number index The index of the element in the data array\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is `null` or `undefined`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n */\nexport function elementAttribute(\n    index: number, name: string, value: any, sanitizer?: SanitizerFn | null): void {\n  if (value !== NO_CHANGE) {\n    ngDevMode && validateAttribute(name);\n    const lView = getLView();\n    const renderer = lView[RENDERER];\n    const element = getNativeByIndex(index, lView);\n    if (value == null) {\n      ngDevMode && ngDevMode.rendererRemoveAttribute++;\n      isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name) :\n                                       element.removeAttribute(name);\n    } else {\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      const tNode = getTNode(index, lView);\n      const strValue =\n          sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);\n      isProceduralRenderer(renderer) ? renderer.setAttribute(element, name, strValue) :\n                                       element.setAttribute(name, strValue);\n    }\n  }\n}\n\n/**\n * Update a property on an element.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new @Inputs don't have to be re-compiled.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @param nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n */\nexport function elementProperty<T>(\n    index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn | null,\n    nativeOnly?: boolean): void {\n  elementPropertyInternal(index, propName, value, sanitizer, nativeOnly);\n}\n\n/**\n * Updates a synthetic host binding (e.g. `[@foo]`) on a component.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. `@HostBinding('@foo')`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub components renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for `elementProperty`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @param nativeOnly Whether or not we should only set native properties and skip input check\n * (this is necessary for host property bindings)\n */\nexport function componentHostSyntheticProperty<T>(\n    index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn | null,\n    nativeOnly?: boolean) {\n  elementPropertyInternal(index, propName, value, sanitizer, nativeOnly, loadComponentRenderer);\n}\n\nfunction loadComponentRenderer(tNode: TNode, lView: LView): Renderer3 {\n  const componentLView = lView[tNode.index] as LView;\n  return componentLView[RENDERER];\n}\n\nfunction elementPropertyInternal<T>(\n    index: number, propName: string, value: T | NO_CHANGE, sanitizer?: SanitizerFn | null,\n    nativeOnly?: boolean,\n    loadRendererFn?: ((tNode: TNode, lView: LView) => Renderer3) | null): void {\n  if (value === NO_CHANGE) return;\n  const lView = getLView();\n  const element = getNativeByIndex(index, lView) as RElement | RComment;\n  const tNode = getTNode(index, lView);\n  let inputData: PropertyAliases|null|undefined;\n  let dataValue: PropertyAliasValue|undefined;\n  if (!nativeOnly && (inputData = initializeTNodeInputs(tNode)) &&\n      (dataValue = inputData[propName])) {\n    setInputsForProperty(lView, inputData, propName, value);\n    if (isComponent(tNode)) markDirtyIfOnPush(lView, index + HEADER_OFFSET);\n    if (ngDevMode) {\n      if (tNode.type === TNodeType.Element || tNode.type === TNodeType.Container) {\n        setNgReflectProperties(lView, element, tNode.type, dataValue, value);\n      }\n    }\n  } else if (tNode.type === TNodeType.Element) {\n    if (ngDevMode) {\n      validateProperty(propName);\n      ngDevMode.rendererSetProperty++;\n    }\n    const renderer = loadRendererFn ? loadRendererFn(tNode, lView) : lView[RENDERER];\n    // It is assumed that the sanitizer is only added when the compiler determines that the property\n    // is risky, so sanitization can be done without further checks.\n    value = sanitizer != null ? (sanitizer(value, tNode.tagName || '', propName) as any) : value;\n    if (isProceduralRenderer(renderer)) {\n      renderer.setProperty(element as RElement, propName, value);\n    } else if (!isAnimationProp(propName)) {\n      (element as RElement).setProperty ? (element as any).setProperty(propName, value) :\n                                          (element as any)[propName] = value;\n    }\n  }\n}\n\n/**\n * Constructs a TNode object from the arguments.\n *\n * @param type The type of the node\n * @param adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET\n * @param tagName The tag name of the node\n * @param attrs The attributes defined on this node\n * @param tViews Any TViews attached to this node\n * @returns the TNode object\n */\nexport function createTNode(\n    lView: LView, type: TNodeType, adjustedIndex: number, tagName: string | null,\n    attrs: TAttributes | null, tViews: TView[] | null): TNode {\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  ngDevMode && ngDevMode.tNode++;\n  const parent =\n      getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;\n\n  // Parents cannot cross component boundaries because components will be used in multiple places,\n  // so it's only set if the view is the same.\n  const parentInSameView = parent && lView && parent !== lView[HOST_NODE];\n  const tParent = parentInSameView ? parent as TElementNode | TContainerNode : null;\n\n  return {\n    type: type,\n    index: adjustedIndex,\n    injectorIndex: tParent ? tParent.injectorIndex : -1,\n    directiveStart: -1,\n    directiveEnd: -1,\n    flags: 0,\n    providerIndexes: 0,\n    tagName: tagName,\n    attrs: attrs,\n    localNames: null,\n    initialInputs: undefined,\n    inputs: undefined,\n    outputs: undefined,\n    tViews: tViews,\n    next: null,\n    child: null,\n    parent: tParent,\n    detached: null,\n    stylingTemplate: null,\n    projection: null\n  };\n}\n\n/**\n * Set the inputs of directives at the current node to corresponding value.\n *\n * @param lView the `LView` which contains the directives.\n * @param inputAliases mapping between the public \"input\" name and privately-known,\n * possibly minified, property names to write to.\n * @param publicName public binding name. (This is the `<div [publicName]=value>`)\n * @param value Value to set.\n */\nfunction setInputsForProperty(\n    lView: LView, inputAliases: PropertyAliases, publicName: string, value: any): void {\n  const inputs = inputAliases[publicName];\n  for (let i = 0; i < inputs.length;) {\n    const directiveIndex = inputs[i++] as number;\n    const privateName = inputs[i++] as string;\n    const declaredName = inputs[i++] as string;\n    ngDevMode && assertDataInRange(lView, directiveIndex);\n    recordChangeAndUpdateProperty(lView[directiveIndex], declaredName, privateName, value);\n  }\n}\n\nfunction setNgReflectProperties(\n    lView: LView, element: RElement | RComment, type: TNodeType, inputs: PropertyAliasValue,\n    value: any) {\n  for (let i = 0; i < inputs.length;) {\n    const directiveIndex = inputs[i++] as number;\n    const privateName = inputs[i++] as string;\n    const declaredName = inputs[i++] as string;\n    const renderer = lView[RENDERER];\n    const attrName = normalizeDebugBindingName(privateName);\n    const debugValue = normalizeDebugBindingValue(value);\n    if (type === TNodeType.Element) {\n      isProceduralRenderer(renderer) ?\n          renderer.setAttribute((element as RElement), attrName, debugValue) :\n          (element as RElement).setAttribute(attrName, debugValue);\n    } else if (value !== undefined) {\n      const value = `bindings=${JSON.stringify({[attrName]: debugValue}, null, 2)}`;\n      if (isProceduralRenderer(renderer)) {\n        renderer.setValue((element as RComment), value);\n      } else {\n        (element as RComment).textContent = value;\n      }\n    }\n  }\n}\n\n/**\n * Consolidates all inputs or outputs of all directives on this logical node.\n *\n * @param tNodeFlags node flags\n * @param direction whether to consider inputs or outputs\n * @returns PropertyAliases|null aggregate of all properties if any, `null` otherwise\n */\nfunction generatePropertyAliases(tNode: TNode, direction: BindingDirection): PropertyAliases|null {\n  const tView = getLView()[TVIEW];\n  let propStore: PropertyAliases|null = null;\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n\n  if (end > start) {\n    const isInput = direction === BindingDirection.Input;\n    const defs = tView.data;\n\n    for (let i = start; i < end; i++) {\n      const directiveDef = defs[i] as DirectiveDef<any>;\n      const publicToMinifiedNames: {[publicName: string]: string} =\n          isInput ? directiveDef.inputs : directiveDef.outputs;\n      const publicToDeclaredNames: {[publicName: string]: string}|null =\n          isInput ? directiveDef.declaredInputs : null;\n      for (let publicName in publicToMinifiedNames) {\n        if (publicToMinifiedNames.hasOwnProperty(publicName)) {\n          propStore = propStore || {};\n          const minifiedName = publicToMinifiedNames[publicName];\n          const declaredName =\n              publicToDeclaredNames ? publicToDeclaredNames[publicName] : minifiedName;\n          const aliases: PropertyAliasValue = propStore.hasOwnProperty(publicName) ?\n              propStore[publicName] :\n              propStore[publicName] = [];\n          aliases.push(i, minifiedName, declaredName);\n        }\n      }\n    }\n  }\n  return propStore;\n}\n\n/**\n * Assign any inline style values to the element during creation mode.\n *\n * This instruction is meant to be called during creation mode to register all\n * dynamic style and class bindings on the element. Note for static values (no binding)\n * see `elementStart` and `elementHostAttrs`.\n *\n * @param classBindingNames An array containing bindable class names.\n *        The `elementClassProp` refers to the class name by index in this array.\n *        (i.e. `['foo', 'bar']` means `foo=0` and `bar=1`).\n * @param styleBindingNames An array containing bindable style properties.\n *        The `elementStyleProp` refers to the class name by index in this array.\n *        (i.e. `['width', 'height']` means `width=0` and `height=1`).\n * @param styleSanitizer An optional sanitizer function that will be used to sanitize any CSS\n *        property values that are applied to the element (during rendering).\n *        Note that the sanitizer instance itself is tied to the `directive` (if  provided).\n * @param directive A directive instance the styling is associated with. If not provided\n *        current view's controller instance is assumed.\n *\n * @publicApi\n */\nexport function elementStyling(\n    classBindingNames?: string[] | null, styleBindingNames?: string[] | null,\n    styleSanitizer?: StyleSanitizeFn | null, directive?: {}): void {\n  const tNode = getPreviousOrParentTNode();\n  if (!tNode.stylingTemplate) {\n    tNode.stylingTemplate = createEmptyStylingContext();\n  }\n  updateContextWithBindings(\n      tNode.stylingTemplate !, directive || null, classBindingNames, styleBindingNames,\n      styleSanitizer, hasClassInput(tNode));\n}\n\n/**\n * Assign static attribute values to a host element.\n *\n * This instruction will assign static attribute values as well as class and style\n * values to an element within the host bindings function. Since attribute values\n * can consist of different types of values, the `attrs` array must include the values in\n * the following format:\n *\n * attrs = [\n *   // static attributes (like `title`, `name`, `id`...)\n *   attr1, value1, attr2, value,\n *\n *   // a single namespace value (like `x:id`)\n *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n *\n *   // another single namespace value (like `x:name`)\n *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n *\n *   // a series of CSS classes that will be applied to the element (no spaces)\n *   CLASSES_MARKER, class1, class2, class3,\n *\n *   // a series of CSS styles (property + value) that will be applied to the element\n *   STYLES_MARKER, prop1, value1, prop2, value2\n * ]\n *\n * All non-class and non-style attributes must be defined at the start of the list\n * first before all class and style values are set. When there is a change in value\n * type (like when classes and styles are introduced) a marker must be used to separate\n * the entries. The marker values themselves are set via entries found in the\n * [AttributeMarker] enum.\n *\n * NOTE: This instruction is meant to used from `hostBindings` function only.\n *\n * @param directive A directive instance the styling is associated with.\n * @param attrs An array of static values (attributes, classes and styles) with the correct marker\n * values.\n *\n * @publicApi\n */\nexport function elementHostAttrs(directive: any, attrs: TAttributes) {\n  const tNode = getPreviousOrParentTNode();\n  if (!tNode.stylingTemplate) {\n    tNode.stylingTemplate = initializeStaticStylingContext(attrs);\n  }\n  const lView = getLView();\n  const native = getNativeByTNode(tNode, lView) as RElement;\n  const i = setUpAttributes(native, attrs);\n  patchContextWithStaticAttrs(tNode.stylingTemplate, attrs, i, directive);\n}\n\n/**\n * Apply styling binding to the element.\n *\n * This instruction is meant to be run after `elementStyle` and/or `elementStyleProp`.\n * if any styling bindings have changed then the changes are flushed to the element.\n *\n *\n * @param index Index of the element's with which styling is associated.\n * @param directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\ncomponents\n *\n * @publicApi\n */\nexport function elementStylingApply(index: number, directive?: any): void {\n  const lView = getLView();\n  const isFirstRender = (lView[FLAGS] & LViewFlags.FirstLViewPass) !== 0;\n  const totalPlayersQueued = renderStyling(\n      getStylingContext(index + HEADER_OFFSET, lView), lView[RENDERER], lView, isFirstRender, null,\n      null, directive);\n  if (totalPlayersQueued > 0) {\n    const rootContext = getRootContext(lView);\n    scheduleTick(rootContext, RootContextFlags.FlushPlayers);\n  }\n}\n\n/**\n * Update a style bindings value on an element.\n *\n * If the style value is `null` then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with `elementStyle` or any styles that are present\n * from when the element was created (with `elementStyling`).\n *\n * (Note that the styling element is updated as part of `elementStylingApply`.)\n *\n * @param index Index of the element's with which styling is associated.\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        `elementStlyingBindings`.\n * @param value New value to write (null to remove). Note that if a directive also\n *        attempts to write to the same binding value then it will only be able to\n *        do so if the template binding value is `null` (or doesn't exist at all).\n * @param suffix Optional suffix. Used with scalar values to add unit such as `px`.\n *        Note that when a suffix is provided then the underlying sanitizer will\n *        be ignored.\n * @param directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\ncomponents\n *\n * @publicApi\n */\nexport function elementStyleProp(\n    index: number, styleIndex: number, value: string | number | String | PlayerFactory | null,\n    suffix?: string | null, directive?: {}): void {\n  let valueToAdd: string|null = null;\n  if (value !== null) {\n    if (suffix) {\n      // when a suffix is applied then it will bypass\n      // sanitization entirely (b/c a new string is created)\n      valueToAdd = renderStringify(value) + suffix;\n    } else {\n      // sanitization happens by dealing with a String value\n      // this means that the string value will be passed through\n      // into the style rendering later (which is where the value\n      // will be sanitized before it is applied)\n      valueToAdd = value as any as string;\n    }\n  }\n  updateElementStyleProp(\n      getStylingContext(index + HEADER_OFFSET, getLView()), styleIndex, valueToAdd, directive);\n}\n\n/**\n * Add or remove a class via a class binding on a DOM element.\n *\n * This instruction is meant to handle the [class.foo]=\"exp\" case and, therefore,\n * the class itself must already be applied using `elementStyling` within\n * the creation block.\n *\n * @param index Index of the element's with which styling is associated.\n * @param classIndex Index of class to toggle. This index value refers to the\n *        index of the class in the class bindings array that was passed into\n *        `elementStlyingBindings` (which is meant to be called before this\n *        function is).\n * @param value A true/false value which will turn the class on or off.\n * @param directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\ncomponents\n *\n * @publicApi\n */\nexport function elementClassProp(\n    index: number, classIndex: number, value: boolean | PlayerFactory, directive?: {}): void {\n  const onOrOffClassValue =\n      (value instanceof BoundPlayerFactory) ? (value as BoundPlayerFactory<boolean>) : (!!value);\n  updateElementClassProp(\n      getStylingContext(index + HEADER_OFFSET, getLView()), classIndex, onOrOffClassValue,\n      directive);\n}\n\n/**\n * Update style and/or class bindings using object literal.\n *\n * This instruction is meant apply styling via the `[style]=\"exp\"` and `[class]=\"exp\"` template\n * bindings. When styles are applied to the Element they will then be placed with respect to\n * any styles set with `elementStyleProp`. If any styles are set to `null` then they will be\n * removed from the element.\n *\n * (Note that the styling instruction will not be applied until `elementStylingApply` is called.)\n *\n * @param index Index of the element's with which styling is associated.\n * @param classes A key/value style map of CSS classes that will be added to the given element.\n *        Any missing classes (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's list of CSS classes.\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n * @param directive Directive instance that is attempting to change styling. (Defaults to the\n *        component of the current view).\n *\n * @publicApi\n */\nexport function elementStylingMap<T>(\n    index: number, classes: {[key: string]: any} | string | NO_CHANGE | null,\n    styles?: {[styleName: string]: any} | NO_CHANGE | null, directive?: {}): void {\n  if (directive != undefined)\n    return hackImplementationOfElementStylingMap(\n        index, classes, styles, directive);  // supported in next PR\n  const lView = getLView();\n  const tNode = getTNode(index, lView);\n  const stylingContext = getStylingContext(index + HEADER_OFFSET, lView);\n  if (hasClassInput(tNode) && classes !== NO_CHANGE) {\n    const initialClasses = getInitialClassNameValue(stylingContext);\n    const classInputVal =\n        (initialClasses.length ? (initialClasses + ' ') : '') + (classes as string);\n    setInputsForProperty(lView, tNode.inputs !, 'class', classInputVal);\n  } else {\n    updateStylingMap(stylingContext, classes, styles);\n  }\n}\n\n/* START OF HACK BLOCK */\nfunction hackImplementationOfElementStylingMap<T>(\n    index: number, classes: {[key: string]: any} | string | NO_CHANGE | null,\n    styles?: {[styleName: string]: any} | NO_CHANGE | null, directive?: {}): void {\n  throw new Error('unimplemented. Should not be needed by ViewEngine compatibility');\n}\n/* END OF HACK BLOCK */\n\n//////////////////////////\n//// Text\n//////////////////////////\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Value to write. This value will be stringified.\n */\nexport function text(index: number, value?: any): void {\n  const lView = getLView();\n  ngDevMode && assertEqual(\n                   lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex,\n                   'text nodes should be created before any bindings');\n  ngDevMode && ngDevMode.rendererCreateTextNode++;\n  const textNative = createTextNode(value, lView[RENDERER]);\n  const tNode = createNodeAtIndex(index, TNodeType.Element, textNative, null, null);\n\n  // Text nodes are self closing.\n  setIsParent(false);\n  appendChild(textNative, tNode, lView);\n}\n\n/**\n * Create text node with binding\n * Bindings should be handled externally with the proper interpolation(1-8) method\n *\n * @param index Index of the node in the data array.\n * @param value Stringified value to write.\n */\nexport function textBinding<T>(index: number, value: T | NO_CHANGE): void {\n  if (value !== NO_CHANGE) {\n    const lView = getLView();\n    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);\n    const element = getNativeByIndex(index, lView) as any as RText;\n    ngDevMode && assertDefined(element, 'native element should exist');\n    ngDevMode && ngDevMode.rendererSetText++;\n    const renderer = lView[RENDERER];\n    isProceduralRenderer(renderer) ? renderer.setValue(element, renderStringify(value)) :\n                                     element.textContent = renderStringify(value);\n  }\n}\n\n//////////////////////////\n//// Directive\n//////////////////////////\n\n/**\n * Instantiate a root component.\n */\nexport function instantiateRootComponent<T>(\n    tView: TView, viewData: LView, def: ComponentDef<T>): T {\n  const rootTNode = getPreviousOrParentTNode();\n  if (tView.firstTemplatePass) {\n    if (def.providersResolver) def.providersResolver(def);\n    generateExpandoInstructionBlock(tView, rootTNode, 1);\n    baseResolveDirective(tView, viewData, def, def.factory);\n  }\n  const directive =\n      getNodeInjectable(tView.data, viewData, viewData.length - 1, rootTNode as TElementNode);\n  postProcessBaseDirective(viewData, rootTNode, directive, def as DirectiveDef<T>);\n  return directive;\n}\n\n/**\n * Resolve the matched directives on a node.\n */\nfunction resolveDirectives(\n    tView: TView, viewData: LView, directives: DirectiveDef<any>[] | null, tNode: TNode,\n    localRefs: string[] | null): void {\n  // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in tsickle.\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n  const exportsMap: ({[key: string]: number} | null) = localRefs ? {'': -1} : null;\n  if (directives) {\n    initNodeFlags(tNode, tView.data.length, directives.length);\n    // When the same token is provided by several directives on the same node, some rules apply in\n    // the viewEngine:\n    // - viewProviders have priority over providers\n    // - the last directive in NgModule.declarations has priority over the previous one\n    // So to match these rules, the order in which providers are added in the arrays is very\n    // important.\n    for (let i = 0; i < directives.length; i++) {\n      const def = directives[i] as DirectiveDef<any>;\n      if (def.providersResolver) def.providersResolver(def);\n    }\n    generateExpandoInstructionBlock(tView, tNode, directives.length);\n    for (let i = 0; i < directives.length; i++) {\n      const def = directives[i] as DirectiveDef<any>;\n\n      const directiveDefIdx = tView.data.length;\n      baseResolveDirective(tView, viewData, def, def.factory);\n\n      saveNameToExportMap(tView.data !.length - 1, def, exportsMap);\n\n      // Init hooks are queued now so ngOnInit is called in host components before\n      // any projected components.\n      registerPreOrderHooks(directiveDefIdx, def, tView);\n    }\n  }\n  if (exportsMap) cacheMatchingLocalNames(tNode, localRefs, exportsMap);\n}\n\n/**\n * Instantiate all the directives that were previously resolved on the current node.\n */\nfunction instantiateAllDirectives(tView: TView, lView: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  if (!getFirstTemplatePass() && start < end) {\n    getOrCreateNodeInjectorForNode(\n        tNode as TElementNode | TContainerNode | TElementContainerNode, lView);\n  }\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    if (isComponentDef(def)) {\n      addComponentLogic(lView, tNode, def as ComponentDef<any>);\n    }\n    const directive = getNodeInjectable(tView.data, lView !, i, tNode as TElementNode);\n\n    postProcessDirective(lView, directive, def, i);\n  }\n}\n\nfunction invokeDirectivesHostBindings(tView: TView, viewData: LView, tNode: TNode) {\n  const start = tNode.directiveStart;\n  const end = tNode.directiveEnd;\n  const expando = tView.expandoInstructions !;\n  const firstTemplatePass = getFirstTemplatePass();\n  for (let i = start; i < end; i++) {\n    const def = tView.data[i] as DirectiveDef<any>;\n    const directive = unwrapOnChangesDirectiveWrapper(viewData[i]);\n    if (def.hostBindings) {\n      const previousExpandoLength = expando.length;\n      setCurrentDirectiveDef(def);\n      def.hostBindings !(RenderFlags.Create, directive, tNode.index - HEADER_OFFSET);\n      setCurrentDirectiveDef(null);\n      // `hostBindings` function may or may not contain `allocHostVars` call\n      // (e.g. it may not if it only contains host listeners), so we need to check whether\n      // `expandoInstructions` has changed and if not - we still push `hostBindings` to\n      // expando block, to make sure we execute it for DI cycle\n      if (previousExpandoLength === expando.length && firstTemplatePass) {\n        expando.push(def.hostBindings);\n      }\n    } else if (firstTemplatePass) {\n      expando.push(null);\n    }\n  }\n}\n\n/**\n* Generates a new block in TView.expandoInstructions for this node.\n*\n* Each expando block starts with the element index (turned negative so we can distinguish\n* it from the hostVar count) and the directive count. See more in VIEW_DATA.md.\n*/\nexport function generateExpandoInstructionBlock(\n    tView: TView, tNode: TNode, directiveCount: number): void {\n  ngDevMode && assertEqual(\n                   tView.firstTemplatePass, true,\n                   'Expando block should only be generated on first template pass.');\n\n  const elementIndex = -(tNode.index - HEADER_OFFSET);\n  const providerStartIndex = tNode.providerIndexes & TNodeProviderIndexes.ProvidersStartIndexMask;\n  const providerCount = tView.data.length - providerStartIndex;\n  (tView.expandoInstructions || (tView.expandoInstructions = [\n   ])).push(elementIndex, providerCount, directiveCount);\n}\n\n/**\n* On the first template pass, we need to reserve space for host binding values\n* after directives are matched (so all directives are saved, then bindings).\n* Because we are updating the blueprint, we only need to do this once.\n*/\nfunction prefillHostVars(tView: TView, lView: LView, totalHostVars: number): void {\n  ngDevMode &&\n      assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  for (let i = 0; i < totalHostVars; i++) {\n    lView.push(NO_CHANGE);\n    tView.blueprint.push(NO_CHANGE);\n    tView.data.push(null);\n  }\n}\n\n/**\n * Process a directive on the current node after its creation.\n */\nfunction postProcessDirective<T>(\n    lView: LView, directive: T, def: DirectiveDef<T>, directiveDefIdx: number): void {\n  if (def.onChanges) {\n    // We have onChanges, wrap it so that we can track changes.\n    lView[directiveDefIdx] = new OnChangesDirectiveWrapper(lView[directiveDefIdx]);\n  }\n\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  postProcessBaseDirective(lView, previousOrParentTNode, directive, def);\n  ngDevMode && assertDefined(previousOrParentTNode, 'previousOrParentTNode');\n  if (previousOrParentTNode && previousOrParentTNode.attrs) {\n    setInputsFromAttrs(lView, directiveDefIdx, def, previousOrParentTNode);\n  }\n\n  if (def.contentQueries) {\n    def.contentQueries(directiveDefIdx);\n  }\n\n  if (isComponentDef(def)) {\n    const componentView = getComponentViewByIndex(previousOrParentTNode.index, lView);\n    componentView[CONTEXT] = directive;\n  }\n}\n\n/**\n * A lighter version of postProcessDirective() that is used for the root component.\n */\nfunction postProcessBaseDirective<T>(\n    lView: LView, previousOrParentTNode: TNode, directive: T, def: DirectiveDef<T>): void {\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n\n  ngDevMode && assertEqual(\n                   lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex,\n                   'directives should be created before any bindings');\n  ngDevMode && assertPreviousIsParent(getIsParent());\n\n  attachPatchData(directive, lView);\n  if (native) {\n    attachPatchData(native, lView);\n  }\n}\n\n\n\n/**\n* Matches the current node against all available selectors.\n* If a component is matched (at most one), it is returned in first position in the array.\n*/\nfunction findDirectiveMatches(tView: TView, viewData: LView, tNode: TNode): DirectiveDef<any>[]|\n    null {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'should run on first template pass only');\n  const registry = tView.directiveRegistry;\n  let matches: any[]|null = null;\n  if (registry) {\n    for (let i = 0; i < registry.length; i++) {\n      const def = registry[i] as ComponentDef<any>| DirectiveDef<any>;\n      if (isNodeMatchingSelectorList(tNode, def.selectors !, /* isProjectionMode */ false)) {\n        matches || (matches = []);\n        diPublicInInjector(\n            getOrCreateNodeInjectorForNode(\n                getPreviousOrParentTNode() as TElementNode | TContainerNode | TElementContainerNode,\n                viewData),\n            viewData, def.type);\n\n        if (isComponentDef(def)) {\n          if (tNode.flags & TNodeFlags.isComponent) throwMultipleComponentError(tNode);\n          tNode.flags = TNodeFlags.isComponent;\n\n          // The component is always stored first with directives after.\n          matches.unshift(def);\n        } else {\n          matches.push(def);\n        }\n      }\n    }\n  }\n  return matches;\n}\n\n/** Stores index of component's host element so it will be queued for view refresh during CD. */\nexport function queueComponentIndexForCheck(previousOrParentTNode: TNode): void {\n  ngDevMode &&\n      assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  const tView = getLView()[TVIEW];\n  (tView.components || (tView.components = [])).push(previousOrParentTNode.index);\n}\n\n/**\n * Stores host binding fn and number of host vars so it will be queued for binding refresh during\n * CD.\n*/\nfunction queueHostBindingForCheck(\n    tView: TView, def: DirectiveDef<any>| ComponentDef<any>, hostVars: number): void {\n  ngDevMode &&\n      assertEqual(getFirstTemplatePass(), true, 'Should only be called in first template pass.');\n  const expando = tView.expandoInstructions !;\n  const length = expando.length;\n  // Check whether a given `hostBindings` function already exists in expandoInstructions,\n  // which can happen in case directive definition was extended from base definition (as a part of\n  // the `InheritDefinitionFeature` logic). If we found the same `hostBindings` function in the\n  // list, we just increase the number of host vars associated with that function, but do not add it\n  // into the list again.\n  if (length >= 2 && expando[length - 2] === def.hostBindings) {\n    expando[length - 1] = (expando[length - 1] as number) + hostVars;\n  } else {\n    expando.push(def.hostBindings !, hostVars);\n  }\n}\n\n/** Caches local names and their matching directive indices for query and template lookups. */\nfunction cacheMatchingLocalNames(\n    tNode: TNode, localRefs: string[] | null, exportsMap: {[key: string]: number}): void {\n  if (localRefs) {\n    const localNames: (string | number)[] = tNode.localNames = [];\n\n    // Local names must be stored in tNode in the same order that localRefs are defined\n    // in the template to ensure the data is loaded in the same slots as their refs\n    // in the template (for template queries).\n    for (let i = 0; i < localRefs.length; i += 2) {\n      const index = exportsMap[localRefs[i + 1]];\n      if (index == null) throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);\n      localNames.push(localRefs[i], index);\n    }\n  }\n}\n\n/**\n* Builds up an export map as directives are created, so local refs can be quickly mapped\n* to their directive instances.\n*/\nfunction saveNameToExportMap(\n    index: number, def: DirectiveDef<any>| ComponentDef<any>,\n    exportsMap: {[key: string]: number} | null) {\n  if (exportsMap) {\n    if (def.exportAs) {\n      for (let i = 0; i < def.exportAs.length; i++) {\n        exportsMap[def.exportAs[i]] = index;\n      }\n    }\n    if ((def as ComponentDef<any>).template) exportsMap[''] = index;\n  }\n}\n\n/**\n * Initializes the flags on the current node, setting all indices to the initial index,\n * the directive count to 0, and adding the isComponent flag.\n * @param index the initial index\n */\nexport function initNodeFlags(tNode: TNode, index: number, numberOfDirectives: number) {\n  ngDevMode && assertEqual(getFirstTemplatePass(), true, 'expected firstTemplatePass to be true');\n  const flags = tNode.flags;\n  ngDevMode && assertEqual(\n                   flags === 0 || flags === TNodeFlags.isComponent, true,\n                   'expected node flags to not be initialized');\n\n  ngDevMode && assertNotEqual(\n                   numberOfDirectives, tNode.directiveEnd - tNode.directiveStart,\n                   'Reached the max number of directives');\n  // When the first directive is created on a node, save the index\n  tNode.flags = flags & TNodeFlags.isComponent;\n  tNode.directiveStart = index;\n  tNode.directiveEnd = index + numberOfDirectives;\n  tNode.providerIndexes = index;\n}\n\nfunction baseResolveDirective<T>(\n    tView: TView, viewData: LView, def: DirectiveDef<T>,\n    directiveFactory: (t: Type<T>| null) => any) {\n  tView.data.push(def);\n  const nodeInjectorFactory =\n      new NodeInjectorFactory(directiveFactory, isComponentDef(def), false, null);\n  tView.blueprint.push(nodeInjectorFactory);\n  viewData.push(nodeInjectorFactory);\n}\n\nfunction addComponentLogic<T>(\n    lView: LView, previousOrParentTNode: TNode, def: ComponentDef<T>): void {\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n\n  const tView = getOrCreateTView(\n      def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery);\n\n  // Only component views should be added to the view tree directly. Embedded views are\n  // accessed through their containers because they may be removed / re-added later.\n  const rendererFactory = lView[RENDERER_FACTORY];\n  const componentView = addToViewTree(\n      lView, previousOrParentTNode.index as number,\n      createLView(\n          lView, tView, null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways,\n          rendererFactory, lView[RENDERER_FACTORY].createRenderer(native as RElement, def)));\n\n  componentView[HOST_NODE] = previousOrParentTNode as TElementNode;\n\n  // Component view will always be created before any injected LContainers,\n  // so this is a regular element, wrap it with the component view\n  componentView[HOST] = lView[previousOrParentTNode.index];\n  lView[previousOrParentTNode.index] = componentView;\n\n  if (getFirstTemplatePass()) {\n    queueComponentIndexForCheck(previousOrParentTNode);\n  }\n}\n\n/**\n * Sets initial input properties on directive instances from attribute data\n *\n * @param directiveIndex Index of the directive in directives array\n * @param instance Instance of the directive on which to set the initial inputs\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data for this node\n */\nfunction setInputsFromAttrs<T>(\n    lView: LView, directiveIndex: number, def: DirectiveDef<any>, tNode: TNode): void {\n  let initialInputData = tNode.initialInputs as InitialInputData | undefined;\n  if (initialInputData === undefined || directiveIndex >= initialInputData.length) {\n    initialInputData = generateInitialInputs(directiveIndex, def, tNode);\n  }\n\n  const initialInputs: InitialInputs|null = initialInputData[directiveIndex];\n  if (initialInputs) {\n    const directiveOrWrappedDirective = lView[directiveIndex];\n\n    for (let i = 0; i < initialInputs.length;) {\n      const privateName = initialInputs[i++];\n      const declaredName = initialInputs[i++];\n      const attrValue = initialInputs[i++];\n      recordChangeAndUpdateProperty(\n          directiveOrWrappedDirective, declaredName, privateName, attrValue);\n    }\n  }\n}\n\n/**\n * Checks to see if the instanced passed as `directiveOrWrappedDirective` is wrapped in {@link\n * OnChangesDirectiveWrapper} or not.\n * If it is, it will update the related {@link SimpleChanges} object with the change to signal\n * `ngOnChanges` hook\n * should fire, then it will unwrap the instance. After that, it will set the property with the key\n * provided\n * in `privateName` on the instance with the passed value.\n * @param directiveOrWrappedDirective The directive instance or a directive instance wrapped in\n * {@link OnChangesDirectiveWrapper}\n * @param declaredName The original, declared name of the property to update.\n * @param privateName The private, possibly minified name of the property to update.\n * @param value The value to update the property with.\n */\nfunction recordChangeAndUpdateProperty<T, K extends keyof T>(\n    directiveOrWrappedDirective: OnChangesDirectiveWrapper<T>| T, declaredName: string,\n    privateName: K, value: any) {\n  let instance: T;\n  if (isOnChangesDirectiveWrapper(directiveOrWrappedDirective)) {\n    instance = unwrapOnChangesDirectiveWrapper(directiveOrWrappedDirective);\n    recordChange(directiveOrWrappedDirective, declaredName, value);\n  } else {\n    instance = directiveOrWrappedDirective;\n  }\n  instance[privateName] = value;\n}\n\n/**\n * Generates initialInputData for a node and stores it in the template's static storage\n * so subsequent template invocations don't have to recalculate it.\n *\n * initialInputData is an array containing values that need to be set as input properties\n * for directives on this node, but only once on creation. We need this array to support\n * the case where you set an @Input property of a directive using attribute-like syntax.\n * e.g. if you have a `name` @Input, you can set it once like this:\n *\n * <my-component name=\"Bess\"></my-component>\n *\n * @param directiveIndex Index to store the initial input data\n * @param inputs The list of inputs from the directive def\n * @param tNode The static data on this node\n */\nfunction generateInitialInputs(\n    directiveIndex: number, directiveDef: DirectiveDef<any>, tNode: TNode): InitialInputData {\n  const initialInputData: InitialInputData = tNode.initialInputs || (tNode.initialInputs = []);\n  initialInputData[directiveIndex] = null;\n\n  const attrs = tNode.attrs !;\n  let i = 0;\n  while (i < attrs.length) {\n    const attrName = attrs[i];\n    // If we hit Select-Only, Classes or Styles, we're done anyway. None of those are valid inputs.\n    if (attrName === AttributeMarker.SelectOnly || attrName === AttributeMarker.Classes ||\n        attrName === AttributeMarker.Styles)\n      break;\n    if (attrName === AttributeMarker.NamespaceURI) {\n      // We do not allow inputs on namespaced attributes.\n      i += 4;\n      continue;\n    }\n    const privateName = directiveDef.inputs[attrName];\n    const declaredName = directiveDef.declaredInputs[attrName];\n    const attrValue = attrs[i + 1];\n\n    if (privateName !== undefined) {\n      const inputsToStore: InitialInputs =\n          initialInputData[directiveIndex] || (initialInputData[directiveIndex] = []);\n      inputsToStore.push(privateName, declaredName, attrValue as string);\n    }\n\n    i += 2;\n  }\n  return initialInputData;\n}\n\n//////////////////////////\n//// ViewContainer & View\n//////////////////////////\n\n/**\n * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.\n *\n * @param hostNative The host element for the LContainer\n * @param hostTNode The host TNode for the LContainer\n * @param currentView The parent view of the LContainer\n * @param native The native comment element\n * @param isForViewContainerRef Optional a flag indicating the ViewContainerRef case\n * @returns LContainer\n */\nexport function createLContainer(\n    hostNative: RElement | RComment, currentView: LView, native: RComment,\n    isForViewContainerRef?: boolean): LContainer {\n  return [\n    isForViewContainerRef ? -1 : 0,  // active index\n    [],                              // views\n    currentView,                     // parent\n    null,                            // next\n    null,                            // queries\n    hostNative,                      // host native\n    native,                          // native\n  ];\n}\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param consts The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrs The attrs attached to the container, if applicable\n * @param localRefs A set of local reference bindings on the element.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n */\nexport function template(\n    index: number, templateFn: ComponentTemplate<any>| null, consts: number, vars: number,\n    tagName?: string | null, attrs?: TAttributes | null, localRefs?: string[] | null,\n    localRefExtractor?: LocalRefExtractor) {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  // TODO: consider a separate node type for templates\n  const tNode = containerInternal(index, tagName || null, attrs || null);\n\n  if (getFirstTemplatePass()) {\n    tNode.tViews = createTView(\n        -1, templateFn, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n  }\n\n  createDirectivesAndLocals(tView, lView, localRefs, localRefExtractor);\n  const currentQueries = lView[QUERIES];\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  const native = getNativeByTNode(previousOrParentTNode, lView);\n  attachPatchData(native, lView);\n  if (currentQueries) {\n    lView[QUERIES] = currentQueries.addNode(previousOrParentTNode as TContainerNode);\n  }\n  registerPostOrderHooks(tView, tNode);\n  setIsParent(false);\n}\n\n/**\n * Creates an LContainer for inline views, e.g.\n *\n * % if (showing) {\n *   <div></div>\n * % }\n *\n * @param index The index of the container in the data array\n */\nexport function container(index: number): void {\n  const tNode = containerInternal(index, null, null);\n  getFirstTemplatePass() && (tNode.tViews = []);\n  setIsParent(false);\n}\n\nfunction containerInternal(\n    index: number, tagName: string | null, attrs: TAttributes | null): TNode {\n  const lView = getLView();\n  ngDevMode && assertEqual(\n                   lView[BINDING_INDEX], lView[TVIEW].bindingStartIndex,\n                   'container nodes should be created before any bindings');\n\n  const adjustedIndex = index + HEADER_OFFSET;\n  const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');\n  ngDevMode && ngDevMode.rendererCreateComment++;\n  const tNode = createNodeAtIndex(index, TNodeType.Container, comment, tagName, attrs);\n  const lContainer = lView[adjustedIndex] = createLContainer(lView[adjustedIndex], lView, comment);\n\n  appendChild(comment, tNode, lView);\n\n  // Containers are added to the current view tree instead of their embedded views\n  // because views can be removed and re-inserted.\n  addToViewTree(lView, index + HEADER_OFFSET, lContainer);\n\n  const currentQueries = lView[QUERIES];\n  if (currentQueries) {\n    // prepare place for matching nodes from views inserted into a given container\n    lContainer[QUERIES] = currentQueries.container();\n  }\n\n  ngDevMode && assertNodeType(getPreviousOrParentTNode(), TNodeType.Container);\n  return tNode;\n}\n\n/**\n * Sets a container up to receive views.\n *\n * @param index The index of the container in the data array\n */\nexport function containerRefreshStart(index: number): void {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  let previousOrParentTNode = loadInternal(tView.data, index) as TNode;\n  setPreviousOrParentTNode(previousOrParentTNode);\n\n  ngDevMode && assertNodeType(previousOrParentTNode, TNodeType.Container);\n  setIsParent(true);\n\n  lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;\n\n  // We need to execute init hooks here so ngOnInit hooks are called in top level views\n  // before they are called in embedded views (for backwards compatibility).\n  executeInitHooks(lView, tView, getCheckNoChangesMode());\n}\n\n/**\n * Marks the end of the LContainer.\n *\n * Marking the end of LContainer is the time when to child views get inserted or removed.\n */\nexport function containerRefreshEnd(): void {\n  let previousOrParentTNode = getPreviousOrParentTNode();\n  if (getIsParent()) {\n    setIsParent(false);\n  } else {\n    ngDevMode && assertNodeType(previousOrParentTNode, TNodeType.View);\n    ngDevMode && assertHasParent(previousOrParentTNode);\n    previousOrParentTNode = previousOrParentTNode.parent !;\n    setPreviousOrParentTNode(previousOrParentTNode);\n  }\n\n  ngDevMode && assertNodeType(previousOrParentTNode, TNodeType.Container);\n\n  const lContainer = getLView()[previousOrParentTNode.index];\n  const nextIndex = lContainer[ACTIVE_INDEX];\n\n  // remove extra views at the end of the container\n  while (nextIndex < lContainer[VIEWS].length) {\n    removeView(lContainer, previousOrParentTNode as TContainerNode, nextIndex);\n  }\n}\n\n/**\n * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes them\n * by executing an associated template function.\n */\nfunction refreshDynamicEmbeddedViews(lView: LView) {\n  for (let current = getLViewChild(lView); current !== null; current = current[NEXT]) {\n    // Note: current can be an LView or an LContainer instance, but here we are only interested\n    // in LContainer. We can tell it's an LContainer because its length is less than the LView\n    // header.\n    if (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n      const container = current as LContainer;\n      for (let i = 0; i < container[VIEWS].length; i++) {\n        const dynamicViewData = container[VIEWS][i];\n        // The directives and pipes are not needed here as an existing view is only being refreshed.\n        ngDevMode && assertDefined(dynamicViewData[TVIEW], 'TView must be allocated');\n        renderEmbeddedTemplate(dynamicViewData, dynamicViewData[TVIEW], dynamicViewData[CONTEXT] !);\n      }\n    }\n  }\n}\n\n\n/**\n * Looks for a view with a given view block id inside a provided LContainer.\n * Removes views that need to be deleted in the process.\n *\n * @param lContainer to search for views\n * @param tContainerNode to search for views\n * @param startIdx starting index in the views array to search from\n * @param viewBlockId exact view block id to look for\n * @returns index of a found view or -1 if not found\n */\nfunction scanForView(\n    lContainer: LContainer, tContainerNode: TContainerNode, startIdx: number,\n    viewBlockId: number): LView|null {\n  const views = lContainer[VIEWS];\n  for (let i = startIdx; i < views.length; i++) {\n    const viewAtPositionId = views[i][TVIEW].id;\n    if (viewAtPositionId === viewBlockId) {\n      return views[i];\n    } else if (viewAtPositionId < viewBlockId) {\n      // found a view that should not be at this position - remove\n      removeView(lContainer, tContainerNode, i);\n    } else {\n      // found a view with id greater than the one we are searching for\n      // which means that required view doesn't exist and can't be found at\n      // later positions in the views array - stop the searchdef.cont here\n      break;\n    }\n  }\n  return null;\n}\n\n/**\n * Marks the start of an embedded view.\n *\n * @param viewBlockId The ID of this view\n * @return boolean Whether or not this view is in creation mode\n */\nexport function embeddedViewStart(viewBlockId: number, consts: number, vars: number): RenderFlags {\n  const lView = getLView();\n  const previousOrParentTNode = getPreviousOrParentTNode();\n  // The previous node can be a view node if we are processing an inline for loop\n  const containerTNode = previousOrParentTNode.type === TNodeType.View ?\n      previousOrParentTNode.parent ! :\n      previousOrParentTNode;\n  const lContainer = lView[containerTNode.index] as LContainer;\n\n  ngDevMode && assertNodeType(containerTNode, TNodeType.Container);\n  let viewToRender = scanForView(\n      lContainer, containerTNode as TContainerNode, lContainer[ACTIVE_INDEX] !, viewBlockId);\n\n  if (viewToRender) {\n    setIsParent(true);\n    enterView(viewToRender, viewToRender[TVIEW].node);\n  } else {\n    // When we create a new LView, we always reset the state of the instructions.\n    viewToRender = createLView(\n        lView,\n        getOrCreateEmbeddedTView(viewBlockId, consts, vars, containerTNode as TContainerNode), null,\n        LViewFlags.CheckAlways);\n\n    if (lContainer[QUERIES]) {\n      viewToRender[QUERIES] = lContainer[QUERIES] !.createView();\n    }\n\n    createViewNode(viewBlockId, viewToRender);\n    enterView(viewToRender, viewToRender[TVIEW].node);\n  }\n  if (lContainer) {\n    if (isCreationMode(viewToRender)) {\n      // it is a new view, insert it into collection of views for a given container\n      insertView(viewToRender, lContainer, lView, lContainer[ACTIVE_INDEX] !, -1);\n    }\n    lContainer[ACTIVE_INDEX] !++;\n  }\n  return isCreationMode(viewToRender) ? RenderFlags.Create | RenderFlags.Update :\n                                        RenderFlags.Update;\n}\n\n/**\n * Initialize the TView (e.g. static data) for the active embedded view.\n *\n * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's\n * static data for a particular node would overwrite the static data for a node in the view above\n * it with the same index (since it's in the same template).\n *\n * @param viewIndex The index of the TView in TNode.tViews\n * @param consts The number of nodes, local refs, and pipes in this template\n * @param vars The number of bindings and pure function bindings in this template\n * @param container The parent container in which to look for the view's static data\n * @returns TView\n */\nfunction getOrCreateEmbeddedTView(\n    viewIndex: number, consts: number, vars: number, parent: TContainerNode): TView {\n  const tView = getLView()[TVIEW];\n  ngDevMode && assertNodeType(parent, TNodeType.Container);\n  const containerTViews = parent.tViews as TView[];\n  ngDevMode && assertDefined(containerTViews, 'TView expected');\n  ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');\n  if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {\n    containerTViews[viewIndex] = createTView(\n        viewIndex, null, consts, vars, tView.directiveRegistry, tView.pipeRegistry, null);\n  }\n  return containerTViews[viewIndex];\n}\n\n/** Marks the end of an embedded view. */\nexport function embeddedViewEnd(): void {\n  const lView = getLView();\n  const viewHost = lView[HOST_NODE];\n\n  if (isCreationMode(lView)) {\n    refreshDescendantViews(lView);  // creation mode pass\n    lView[FLAGS] &= ~LViewFlags.CreationMode;\n  }\n  refreshDescendantViews(lView);  // update mode pass\n  leaveView(lView[PARENT] !);\n  setPreviousOrParentTNode(viewHost !);\n  setIsParent(false);\n}\n\n/////////////\n\n/**\n * Refreshes components by entering the component view and processing its bindings, queries, etc.\n *\n * @param adjustedElementIndex  Element index in LView[] (adjusted for HEADER_OFFSET)\n */\nexport function componentRefresh<T>(adjustedElementIndex: number): void {\n  const lView = getLView();\n  ngDevMode && assertDataInRange(lView, adjustedElementIndex);\n  const hostView = getComponentViewByIndex(adjustedElementIndex, lView);\n  ngDevMode && assertNodeType(lView[TVIEW].data[adjustedElementIndex] as TNode, TNodeType.Element);\n\n  // Only attached CheckAlways components or attached, dirty OnPush components should be checked\n  if (viewAttached(hostView) && hostView[FLAGS] & (LViewFlags.CheckAlways | LViewFlags.Dirty)) {\n    syncViewWithBlueprint(hostView);\n    checkView(hostView, hostView[CONTEXT]);\n  }\n}\n\n/**\n * Syncs an LView instance with its blueprint if they have gotten out of sync.\n *\n * Typically, blueprints and their view instances should always be in sync, so the loop here\n * will be skipped. However, consider this case of two components side-by-side:\n *\n * App template:\n * ```\n * <comp></comp>\n * <comp></comp>\n * ```\n *\n * The following will happen:\n * 1. App template begins processing.\n * 2. First <comp> is matched as a component and its LView is created.\n * 3. Second <comp> is matched as a component and its LView is created.\n * 4. App template completes processing, so it's time to check child templates.\n * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.\n * 6. Second <comp> template is checked. Its blueprint has been updated by the first\n * <comp> template, but its LView was created before this update, so it is out of sync.\n *\n * Note that embedded views inside ngFor loops will never be out of sync because these views\n * are processed as soon as they are created.\n *\n * @param componentView The view to sync\n */\nfunction syncViewWithBlueprint(componentView: LView) {\n  const componentTView = componentView[TVIEW];\n  for (let i = componentView.length; i < componentTView.blueprint.length; i++) {\n    componentView[i] = componentTView.blueprint[i];\n  }\n}\n\n/** Returns a boolean for whether the view is attached */\nexport function viewAttached(view: LView): boolean {\n  return (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param selectors A collection of parsed CSS selectors\n * @param rawSelectors A collection of CSS selectors in the raw, un-parsed form\n */\nexport function projectionDef(selectors?: CssSelectorList[], textSelectors?: string[]): void {\n  const componentNode = findComponentView(getLView())[HOST_NODE] as TElementNode;\n\n  if (!componentNode.projection) {\n    const noOfNodeBuckets = selectors ? selectors.length + 1 : 1;\n    const pData: (TNode | null)[] = componentNode.projection =\n        new Array(noOfNodeBuckets).fill(null);\n    const tails: (TNode | null)[] = pData.slice();\n\n    let componentChild: TNode|null = componentNode.child;\n\n    while (componentChild !== null) {\n      const bucketIndex =\n          selectors ? matchingSelectorIndex(componentChild, selectors, textSelectors !) : 0;\n      const nextNode = componentChild.next;\n\n      if (tails[bucketIndex]) {\n        tails[bucketIndex] !.next = componentChild;\n      } else {\n        pData[bucketIndex] = componentChild;\n        componentChild.next = null;\n      }\n      tails[bucketIndex] = componentChild;\n\n      componentChild = nextNode;\n    }\n  }\n}\n\n/**\n * Stack used to keep track of projection nodes in projection() instruction.\n *\n * This is deliberately created outside of projection() to avoid allocating\n * a new array each time the function is called. Instead the array will be\n * re-used by each invocation. This works because the function is not reentrant.\n */\nconst projectionNodeStack: (LView | TNode)[] = [];\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is `*` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n */\nexport function projection(nodeIndex: number, selectorIndex: number = 0, attrs?: string[]): void {\n  const lView = getLView();\n  const tProjectionNode =\n      createNodeAtIndex(nodeIndex, TNodeType.Projection, null, null, attrs || null);\n\n  // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.\n  if (tProjectionNode.projection === null) tProjectionNode.projection = selectorIndex;\n\n  // `<ng-content>` has no content\n  setIsParent(false);\n\n  // re-distribution of projectable nodes is stored on a component's view level\n  const componentView = findComponentView(lView);\n  const componentNode = componentView[HOST_NODE] as TElementNode;\n  let nodeToProject = (componentNode.projection as(TNode | null)[])[selectorIndex];\n  let projectedView = componentView[PARENT] !;\n  let projectionNodeIndex = -1;\n\n  while (nodeToProject) {\n    if (nodeToProject.type === TNodeType.Projection) {\n      // This node is re-projected, so we must go up the tree to get its projected nodes.\n      const currentComponentView = findComponentView(projectedView);\n      const currentComponentHost = currentComponentView[HOST_NODE] as TElementNode;\n      const firstProjectedNode =\n          (currentComponentHost.projection as(TNode | null)[])[nodeToProject.projection as number];\n\n      if (firstProjectedNode) {\n        projectionNodeStack[++projectionNodeIndex] = nodeToProject;\n        projectionNodeStack[++projectionNodeIndex] = projectedView;\n\n        nodeToProject = firstProjectedNode;\n        projectedView = currentComponentView[PARENT] !;\n        continue;\n      }\n    } else {\n      // This flag must be set now or we won't know that this node is projected\n      // if the nodes are inserted into a container later.\n      nodeToProject.flags |= TNodeFlags.isProjected;\n      appendProjectedNode(nodeToProject, tProjectionNode, lView, projectedView);\n    }\n\n    // If we are finished with a list of re-projected nodes, we need to get\n    // back to the root projection node that was re-projected.\n    if (nodeToProject.next === null && projectedView !== componentView[PARENT] !) {\n      projectedView = projectionNodeStack[projectionNodeIndex--] as LView;\n      nodeToProject = projectionNodeStack[projectionNodeIndex--] as TNode;\n    }\n    nodeToProject = nodeToProject.next;\n  }\n}\n\n/**\n * Adds LView or LContainer to the end of the current view tree.\n *\n * This structure will be used to traverse through nested views to remove listeners\n * and call onDestroy callbacks.\n *\n * @param lView The view where LView or LContainer should be added\n * @param adjustedHostIndex Index of the view's host node in LView[], adjusted for header\n * @param state The LView or LContainer to add to the view tree\n * @returns The state passed in\n */\nexport function addToViewTree<T extends LView|LContainer>(\n    lView: LView, adjustedHostIndex: number, state: T): T {\n  const tView = lView[TVIEW];\n  const firstTemplatePass = getFirstTemplatePass();\n  if (lView[TAIL]) {\n    lView[TAIL] ![NEXT] = state;\n  } else if (firstTemplatePass) {\n    tView.childIndex = adjustedHostIndex;\n  }\n  lView[TAIL] = state;\n  return state;\n}\n\n///////////////////////////////\n//// Change detection\n///////////////////////////////\n\n/** If node is an OnPush component, marks its LView dirty. */\nfunction markDirtyIfOnPush(lView: LView, viewIndex: number): void {\n  const childComponentLView = getComponentViewByIndex(viewIndex, lView);\n  if (!(childComponentLView[FLAGS] & LViewFlags.CheckAlways)) {\n    childComponentLView[FLAGS] |= LViewFlags.Dirty;\n  }\n}\n\n/** Wraps an event listener with preventDefault behavior. */\nfunction wrapListenerWithPreventDefault(listenerFn: (e?: any) => any): EventListener {\n  return function wrapListenerIn_preventDefault(e: Event) {\n    if (listenerFn(e) === false) {\n      e.preventDefault();\n      // Necessary for legacy browsers that don't support preventDefault (e.g. IE)\n      e.returnValue = false;\n    }\n  };\n}\n\n/**\n * Marks current view and all ancestors dirty.\n *\n * Returns the root view because it is found as a byproduct of marking the view tree\n * dirty, and can be used by methods that consume markViewDirty() to easily schedule\n * change detection. Otherwise, such methods would need to traverse up the view tree\n * an additional time to get the root view and schedule a tick on it.\n *\n * @param lView The starting LView to mark dirty\n * @returns the root LView\n */\nexport function markViewDirty(lView: LView): LView {\n  while (lView && !(lView[FLAGS] & LViewFlags.IsRoot)) {\n    lView[FLAGS] |= LViewFlags.Dirty;\n    lView = lView[PARENT] !;\n  }\n  lView[FLAGS] |= LViewFlags.Dirty;\n  return lView;\n}\n\n/**\n * Used to schedule change detection on the whole application.\n *\n * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.\n * It is usually called indirectly by calling `markDirty` when the view needs to be\n * re-rendered.\n *\n * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple\n * `scheduleTick` requests. The scheduling function can be overridden in\n * `renderComponent`'s `scheduler` option.\n */\nexport function scheduleTick<T>(rootContext: RootContext, flags: RootContextFlags) {\n  const nothingScheduled = rootContext.flags === RootContextFlags.Empty;\n  rootContext.flags |= flags;\n\n  if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {\n    let res: null|((val: null) => void);\n    rootContext.clean = new Promise<null>((r) => res = r);\n    rootContext.scheduler(() => {\n      if (rootContext.flags & RootContextFlags.DetectChanges) {\n        rootContext.flags &= ~RootContextFlags.DetectChanges;\n        tickRootContext(rootContext);\n      }\n\n      if (rootContext.flags & RootContextFlags.FlushPlayers) {\n        rootContext.flags &= ~RootContextFlags.FlushPlayers;\n        const playerHandler = rootContext.playerHandler;\n        if (playerHandler) {\n          playerHandler.flushPlayers();\n        }\n      }\n\n      rootContext.clean = _CLEAN_PROMISE;\n      res !(null);\n    });\n  }\n}\n\n/**\n * Used to perform change detection on the whole application.\n *\n * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`\n * executes lifecycle hooks and conditionally checks components based on their\n * `ChangeDetectionStrategy` and dirtiness.\n *\n * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally\n * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a\n * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can\n * be changed when calling `renderComponent` and providing the `scheduler` option.\n */\nexport function tick<T>(component: T): void {\n  const rootView = getRootView(component);\n  const rootContext = rootView[CONTEXT] as RootContext;\n  tickRootContext(rootContext);\n}\n\nfunction tickRootContext(rootContext: RootContext) {\n  for (let i = 0; i < rootContext.components.length; i++) {\n    const rootComponent = rootContext.components[i];\n    renderComponentOrTemplate(readPatchedLView(rootComponent) !, rootComponent);\n  }\n}\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component. There should\n * be very little reason to call this function directly since a preferred way to do change\n * detection is to {@link markDirty} the component and wait for the scheduler to call this method\n * at some future point in time. This is because a single user action often results in many\n * components being invalidated and calling change detection on each component synchronously\n * would be inefficient. It is better to wait until all components are marked as dirty and\n * then perform single change detection across all of the components\n *\n * @param component The component which the change detection should be performed on.\n */\nexport function detectChanges<T>(component: T): void {\n  const view = getComponentViewByInstance(component) !;\n  detectChangesInternal<T>(view, component);\n}\n\nexport function detectChangesInternal<T>(view: LView, context: T) {\n  const rendererFactory = view[RENDERER_FACTORY];\n\n  if (rendererFactory.begin) rendererFactory.begin();\n\n  if (isCreationMode(view)) {\n    checkView(view, context);  // creation mode pass\n  }\n  checkView(view, context);  // update mode pass\n\n  if (rendererFactory.end) rendererFactory.end();\n}\n\n/**\n * Synchronously perform change detection on a root view and its components.\n *\n * @param lView The view which the change detection should be performed on.\n */\nexport function detectChangesInRootView(lView: LView): void {\n  tickRootContext(lView[CONTEXT] as RootContext);\n}\n\n\n/**\n * Checks the change detector and its children, and throws if any changes are detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n */\nexport function checkNoChanges<T>(component: T): void {\n  setCheckNoChangesMode(true);\n  try {\n    detectChanges(component);\n  } finally {\n    setCheckNoChangesMode(false);\n  }\n}\n\n/**\n * Checks the change detector on a root view and its components, and throws if any changes are\n * detected.\n *\n * This is used in development mode to verify that running change detection doesn't\n * introduce other changes.\n *\n * @param lView The view which the change detection should be checked on.\n */\nexport function checkNoChangesInRootView(lView: LView): void {\n  setCheckNoChangesMode(true);\n  try {\n    detectChangesInRootView(lView);\n  } finally {\n    setCheckNoChangesMode(false);\n  }\n}\n\n/** Checks the view of the component provided. Does not gate on dirty checks or execute doCheck. */\nexport function checkView<T>(hostView: LView, component: T) {\n  const hostTView = hostView[TVIEW];\n  const oldView = enterView(hostView, hostView[HOST_NODE]);\n  const templateFn = hostTView.template !;\n  const viewQuery = hostTView.viewQuery;\n\n  try {\n    namespaceHTML();\n    createViewQuery(viewQuery, hostView, component);\n    templateFn(getRenderFlags(hostView), component);\n    refreshDescendantViews(hostView);\n    updateViewQuery(viewQuery, hostView, component);\n  } finally {\n    leaveView(oldView);\n  }\n}\n\nfunction createViewQuery<T>(viewQuery: ComponentQuery<{}>| null, view: LView, component: T): void {\n  if (viewQuery && isCreationMode(view)) {\n    viewQuery(RenderFlags.Create, component);\n  }\n}\n\nfunction updateViewQuery<T>(viewQuery: ComponentQuery<{}>| null, view: LView, component: T): void {\n  if (viewQuery && !isCreationMode(view)) {\n    viewQuery(RenderFlags.Update, component);\n  }\n}\n\n\n/**\n * Mark the component as dirty (needing change detection).\n *\n * Marking a component dirty will schedule a change detection on this\n * component at some point in the future. Marking an already dirty\n * component as dirty is a noop. Only one outstanding change detection\n * can be scheduled per component tree. (Two components bootstrapped with\n * separate `renderComponent` will have separate schedulers)\n *\n * When the root component is bootstrapped with `renderComponent`, a scheduler\n * can be provided.\n *\n * @param component Component to mark as dirty.\n *\n * @publicApi\n */\nexport function markDirty<T>(component: T) {\n  ngDevMode && assertDefined(component, 'component');\n  const rootView = markViewDirty(getComponentViewByInstance(component));\n\n  ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');\n  scheduleTick(rootView[CONTEXT] as RootContext, RootContextFlags.DetectChanges);\n}\n\n///////////////////////////////\n//// Bindings & interpolations\n///////////////////////////////\n\n/**\n * Creates a single value binding.\n *\n * @param value Value to diff\n */\nexport function bind<T>(value: T): T|NO_CHANGE {\n  const lView = getLView();\n  return bindingUpdated(lView, lView[BINDING_INDEX]++, value) ? value : NO_CHANGE;\n}\n\n/**\n * Allocates the necessary amount of slots for host vars.\n *\n * @param count Amount of vars to be allocated\n */\nexport function allocHostVars(count: number): void {\n  if (!getFirstTemplatePass()) return;\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  queueHostBindingForCheck(tView, getCurrentDirectiveDef() !, count);\n  prefillHostVars(tView, lView, count);\n}\n\n/**\n * Create interpolation bindings with a variable number of expressions.\n *\n * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.\n * Those are faster because there is no need to create an array of expressions and iterate over it.\n *\n * `values`:\n * - has static text at even indexes,\n * - has evaluated expressions at odd indexes.\n *\n * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.\n */\nexport function interpolationV(values: any[]): string|NO_CHANGE {\n  ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');\n  ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');\n  let different = false;\n  const lView = getLView();\n\n  let bindingIndex = lView[BINDING_INDEX];\n  for (let i = 1; i < values.length; i += 2) {\n    // Check if bindings (odd indexes) have changed\n    bindingUpdated(lView, bindingIndex++, values[i]) && (different = true);\n  }\n  lView[BINDING_INDEX] = bindingIndex;\n\n  if (!different) {\n    return NO_CHANGE;\n  }\n\n  // Build the updated content\n  let content = values[0];\n  for (let i = 1; i < values.length; i += 2) {\n    content += renderStringify(values[i]) + values[i + 1];\n  }\n\n  return content;\n}\n\n/**\n * Creates an interpolation binding with 1 expression.\n *\n * @param prefix static value used for concatenation only.\n * @param v0 value checked for change.\n * @param suffix static value used for concatenation only.\n */\nexport function interpolation1(prefix: string, v0: any, suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const different = bindingUpdated(lView, lView[BINDING_INDEX], v0);\n  lView[BINDING_INDEX] += 1;\n  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 2 expressions. */\nexport function interpolation2(\n    prefix: string, v0: any, i0: string, v1: any, suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const different = bindingUpdated2(lView, lView[BINDING_INDEX], v0, v1);\n  lView[BINDING_INDEX] += 2;\n\n  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 3 expressions. */\nexport function interpolation3(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): string|\n    NO_CHANGE {\n  const lView = getLView();\n  const different = bindingUpdated3(lView, lView[BINDING_INDEX], v0, v1, v2);\n  lView[BINDING_INDEX] += 3;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :\n      NO_CHANGE;\n}\n\n/** Create an interpolation binding with 4 expressions. */\nexport function interpolation4(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const different = bindingUpdated4(lView, lView[BINDING_INDEX], v0, v1, v2, v3);\n  lView[BINDING_INDEX] += 4;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + suffix :\n      NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 5 expressions. */\nexport function interpolation5(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const bindingIndex = lView[BINDING_INDEX];\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;\n  lView[BINDING_INDEX] += 5;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + suffix :\n      NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 6 expressions. */\nexport function interpolation6(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const bindingIndex = lView[BINDING_INDEX];\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;\n  lView[BINDING_INDEX] += 6;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :\n      NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 7 expressions. */\nexport function interpolation7(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): string|\n    NO_CHANGE {\n  const lView = getLView();\n  const bindingIndex = lView[BINDING_INDEX];\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;\n  lView[BINDING_INDEX] += 7;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n          renderStringify(v6) + suffix :\n      NO_CHANGE;\n}\n\n/** Creates an interpolation binding with 8 expressions. */\nexport function interpolation8(\n    prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any,\n    i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any,\n    suffix: string): string|NO_CHANGE {\n  const lView = getLView();\n  const bindingIndex = lView[BINDING_INDEX];\n  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);\n  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;\n  lView[BINDING_INDEX] += 8;\n\n  return different ?\n      prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +\n          renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +\n          renderStringify(v6) + i6 + renderStringify(v7) + suffix :\n      NO_CHANGE;\n}\n\n/** Store a value in the `data` at a given `index`. */\nexport function store<T>(index: number, value: T): void {\n  const lView = getLView();\n  const tView = lView[TVIEW];\n  // We don't store any static data for local variables, so the first time\n  // we see the template, we should store as null to avoid a sparse array\n  const adjustedIndex = index + HEADER_OFFSET;\n  if (adjustedIndex >= tView.data.length) {\n    tView.data[adjustedIndex] = null;\n  }\n  lView[adjustedIndex] = value;\n}\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n */\nexport function reference<T>(index: number) {\n  const contextLView = getContextLView();\n  return loadInternal<T>(contextLView, index);\n}\n\nexport function loadQueryList<T>(queryListIdx: number): QueryList<T> {\n  const lView = getLView();\n  ngDevMode &&\n      assertDefined(\n          lView[CONTENT_QUERIES], 'Content QueryList array should be defined if reading a query.');\n  ngDevMode && assertDataInRange(lView[CONTENT_QUERIES] !, queryListIdx);\n\n  return lView[CONTENT_QUERIES] ![queryListIdx];\n}\n\n/** Retrieves a value from current `viewData`. */\nexport function load<T>(index: number): T {\n  return loadInternal<T>(getLView(), index);\n}\n\n\n\n///////////////////////////////\n//// DI\n///////////////////////////////\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * `directiveInject` is intended to be used for directive, component and pipe factories.\n *  All other injection use `inject` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ngDirectiveDef = defineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(directiveInject(DirectiveA))\n *   });\n * }\n *\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or `null` when not found\n */\nexport function directiveInject<T>(token: Type<T>| InjectionToken<T>): T;\nexport function directiveInject<T>(token: Type<T>| InjectionToken<T>, flags: InjectFlags): T;\nexport function directiveInject<T>(\n    token: Type<T>| InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  token = resolveForwardRef(token);\n  return getOrCreateInjectable<T>(\n      getPreviousOrParentTNode() as TElementNode | TContainerNode | TElementContainerNode,\n      getLView(), token, flags);\n}\n\n/**\n * Facade for the attribute injection from DI.\n */\nexport function injectAttribute(attrNameToInject: string): string|null {\n  return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);\n}\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n */\nexport function registerContentQuery<Q>(\n    queryList: QueryList<Q>, currentDirectiveIndex: number): void {\n  const viewData = getLView();\n  const tView = viewData[TVIEW];\n  const savedContentQueriesLength =\n      (viewData[CONTENT_QUERIES] || (viewData[CONTENT_QUERIES] = [])).push(queryList);\n  if (getFirstTemplatePass()) {\n    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);\n    const lastSavedDirectiveIndex =\n        tView.contentQueries.length ? tView.contentQueries[tView.contentQueries.length - 2] : -1;\n    if (currentDirectiveIndex !== lastSavedDirectiveIndex) {\n      tViewContentQueries.push(currentDirectiveIndex, savedContentQueriesLength - 1);\n    }\n  }\n}\n\nexport const CLEAN_PROMISE = _CLEAN_PROMISE;\n\nfunction initializeTNodeInputs(tNode: TNode | null): PropertyAliases|null {\n  // If tNode.inputs is undefined, a listener has created outputs, but inputs haven't\n  // yet been checked.\n  if (tNode) {\n    if (tNode.inputs === undefined) {\n      // mark inputs as checked\n      tNode.inputs = generatePropertyAliases(tNode, BindingDirection.Input);\n    }\n    return tNode.inputs;\n  }\n  return null;\n}\n\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n */\nexport function getCurrentView(): OpaqueViewState {\n  return getLView() as any as OpaqueViewState;\n}\n\nfunction getCleanup(view: LView): any[] {\n  // top level variables should not be exported for performance reasons (PERF_NOTES.md)\n  return view[CLEANUP] || (view[CLEANUP] = []);\n}\n\nfunction getTViewCleanup(view: LView): any[] {\n  return view[TVIEW].cleanup || (view[TVIEW].cleanup = []);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// We are temporarily importing the existing viewEngine from core so we can be sure we are\n// correctly implementing its interfaces for backwards compatibility.\nimport {Type} from '../core';\nimport {Injector} from '../di/injector';\nimport {Sanitizer} from '../sanitization/security';\nimport {assertDefined} from '../util/assert';\n\nimport {assertComponentType} from './assert';\nimport {getComponentDef} from './definition';\nimport {diPublicInInjector, getOrCreateNodeInjectorForNode} from './di';\nimport {publishDefaultGlobalUtils} from './global_utils';\nimport {registerPostOrderHooks, registerPreOrderHooks} from './hooks';\nimport {CLEAN_PROMISE, createLView, createNodeAtIndex, createTNode, createTView, getOrCreateTView, initNodeFlags, instantiateRootComponent, locateHostElement, queueComponentIndexForCheck, refreshDescendantViews} from './instructions';\nimport {ComponentDef, ComponentType, RenderFlags} from './interfaces/definition';\nimport {TElementNode, TNode, TNodeFlags, TNodeType} from './interfaces/node';\nimport {PlayerHandler} from './interfaces/player';\nimport {RElement, Renderer3, RendererFactory3, domRendererFactory3} from './interfaces/renderer';\nimport {CONTEXT, FLAGS, HEADER_OFFSET, HOST, HOST_NODE, LView, LViewFlags, RootContext, RootContextFlags, TVIEW} from './interfaces/view';\nimport {enterView, getPreviousOrParentTNode, leaveView, resetComponentState, setCurrentDirectiveDef} from './state';\nimport {defaultScheduler, getRootView, readPatchedLView, renderStringify} from './util';\n\n\n\n/** Options that control how the component should be bootstrapped. */\nexport interface CreateComponentOptions {\n  /** Which renderer factory to use. */\n  rendererFactory?: RendererFactory3;\n\n  /** A custom sanitizer instance */\n  sanitizer?: Sanitizer;\n\n  /** A custom animation player handler */\n  playerHandler?: PlayerHandler;\n\n  /**\n   * Host element on which the component will be bootstrapped. If not specified,\n   * the component definition's `tag` is used to query the existing DOM for the\n   * element to bootstrap.\n   */\n  host?: RElement|string;\n\n  /** Module injector for the component. If unspecified, the injector will be NULL_INJECTOR. */\n  injector?: Injector;\n\n  /**\n   * List of features to be applied to the created component. Features are simply\n   * functions that decorate a component with a certain behavior.\n   *\n   * Typically, the features in this list are features that cannot be added to the\n   * other features list in the component definition because they rely on other factors.\n   *\n   * Example: `RootLifecycleHooks` is a function that adds lifecycle hook capabilities\n   * to root components in a tree-shakable way. It cannot be added to the component\n   * features list because there's no way of knowing when the component will be used as\n   * a root component.\n   */\n  hostFeatures?: HostFeature[];\n\n  /**\n   * A function which is used to schedule change detection work in the future.\n   *\n   * When marking components as dirty, it is necessary to schedule the work of\n   * change detection in the future. This is done to coalesce multiple\n   * {@link markDirty} calls into a single changed detection processing.\n   *\n   * The default value of the scheduler is the `requestAnimationFrame` function.\n   *\n   * It is also useful to override this function for testing purposes.\n   */\n  scheduler?: (work: () => void) => void;\n}\n\n/** See CreateComponentOptions.hostFeatures */\ntype HostFeature = (<T>(component: T, componentDef: ComponentDef<T>) => void);\n\n// TODO: A hack to not pull in the NullInjector from @angular/core.\nexport const NULL_INJECTOR: Injector = {\n  get: (token: any, notFoundValue?: any) => {\n    throw new Error('NullInjector: Not found: ' + renderStringify(token));\n  }\n};\n\n/**\n * Bootstraps a Component into an existing host element and returns an instance\n * of the component.\n *\n * Use this function to bootstrap a component into the DOM tree. Each invocation\n * of this function will create a separate tree of components, injectors and\n * change detection cycles and lifetimes. To dynamically insert a new component\n * into an existing tree such that it shares the same injection, change detection\n * and object lifetime, use {@link ViewContainer#createComponent}.\n *\n * @param componentType Component to bootstrap\n * @param options Optional parameters which control bootstrapping\n */\nexport function renderComponent<T>(\n    componentType: ComponentType<T>|\n        Type<T>/* Type as workaround for: Microsoft/TypeScript/issues/4881 */\n    ,\n    opts: CreateComponentOptions = {}): T {\n  ngDevMode && publishDefaultGlobalUtils();\n  ngDevMode && assertComponentType(componentType);\n  const rendererFactory = opts.rendererFactory || domRendererFactory3;\n  const sanitizer = opts.sanitizer || null;\n  const componentDef = getComponentDef<T>(componentType) !;\n  if (componentDef.type != componentType) componentDef.type = componentType;\n\n  // The first index of the first selector is the tag name.\n  const componentTag = componentDef.selectors ![0] ![0] as string;\n  const hostRNode = locateHostElement(rendererFactory, opts.host || componentTag);\n  const rootFlags = componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                          LViewFlags.CheckAlways | LViewFlags.IsRoot;\n  const rootContext = createRootContext(opts.scheduler, opts.playerHandler);\n\n  const renderer = rendererFactory.createRenderer(hostRNode, componentDef);\n  const rootView: LView = createLView(\n      null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags, rendererFactory,\n      renderer, undefined, opts.injector || null);\n\n  const oldView = enterView(rootView, null);\n  let component: T;\n  try {\n    if (rendererFactory.begin) rendererFactory.begin();\n    const componentView = createRootComponentView(\n        hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);\n    component = createRootComponent(\n        componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);\n\n    refreshDescendantViews(rootView);  // creation mode pass\n    rootView[FLAGS] &= ~LViewFlags.CreationMode;\n    refreshDescendantViews(rootView);  // update mode pass\n  } finally {\n    leaveView(oldView);\n    if (rendererFactory.end) rendererFactory.end();\n  }\n\n  return component;\n}\n\n/**\n * Creates the root component view and the root component node.\n *\n * @param rNode Render host element.\n * @param def ComponentDef\n * @param rootView The parent view where the host node is stored\n * @param renderer The current renderer\n * @param sanitizer The sanitizer, if provided\n *\n * @returns Component view created\n */\nexport function createRootComponentView(\n    rNode: RElement | null, def: ComponentDef<any>, rootView: LView,\n    rendererFactory: RendererFactory3, renderer: Renderer3, sanitizer?: Sanitizer | null): LView {\n  resetComponentState();\n  const tView = rootView[TVIEW];\n  const componentView = createLView(\n      rootView,\n      getOrCreateTView(\n          def.template, def.consts, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery),\n      null, def.onPush ? LViewFlags.Dirty : LViewFlags.CheckAlways, rendererFactory, renderer,\n      sanitizer);\n  const tNode = createNodeAtIndex(0, TNodeType.Element, rNode, null, null);\n\n  if (tView.firstTemplatePass) {\n    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), rootView, def.type);\n    tNode.flags = TNodeFlags.isComponent;\n    initNodeFlags(tNode, rootView.length, 1);\n    queueComponentIndexForCheck(tNode);\n  }\n\n  // Store component view at node index, with node as the HOST\n  componentView[HOST] = rootView[HEADER_OFFSET];\n  componentView[HOST_NODE] = tNode as TElementNode;\n  return rootView[HEADER_OFFSET] = componentView;\n}\n\n/**\n * Creates a root component and sets it up with features and host bindings. Shared by\n * renderComponent() and ViewContainerRef.createComponent().\n */\nexport function createRootComponent<T>(\n    componentView: LView, componentDef: ComponentDef<T>, rootView: LView, rootContext: RootContext,\n    hostFeatures: HostFeature[] | null): any {\n  const tView = rootView[TVIEW];\n  // Create directive instance with factory() and store at next index in viewData\n  const component = instantiateRootComponent(tView, rootView, componentDef);\n\n  rootContext.components.push(component);\n  componentView[CONTEXT] = component;\n\n  hostFeatures && hostFeatures.forEach((feature) => feature(component, componentDef));\n\n  if (tView.firstTemplatePass && componentDef.hostBindings) {\n    const rootTNode = getPreviousOrParentTNode();\n    setCurrentDirectiveDef(componentDef);\n    componentDef.hostBindings(RenderFlags.Create, component, rootTNode.index - HEADER_OFFSET);\n    setCurrentDirectiveDef(null);\n  }\n\n  return component;\n}\n\n\nexport function createRootContext(\n    scheduler?: (workFn: () => void) => void, playerHandler?: PlayerHandler|null): RootContext {\n  return {\n    components: [],\n    scheduler: scheduler || defaultScheduler,\n    clean: CLEAN_PROMISE,\n    playerHandler: playerHandler || null,\n    flags: RootContextFlags.Empty\n  };\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling `renderComponent` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * ```\n * renderComponent(AppComponent, {features: [RootLifecycleHooks]});\n * ```\n */\nexport function LifecycleHooksFeature(component: any, def: ComponentDef<any>): void {\n  const rootTView = readPatchedLView(component) ![TVIEW];\n  const dirIndex = rootTView.data.length - 1;\n\n  registerPreOrderHooks(dirIndex, def, rootTView);\n  // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on\n  // LNode).\n  registerPostOrderHooks(\n      rootTView, { directiveStart: dirIndex, directiveEnd: dirIndex + 1 } as TNode);\n}\n\n/**\n * Retrieve the root context for any component by walking the parent `LView` until\n * reaching the root `LView`.\n *\n * @param component any component\n */\nfunction getRootContext(component: any): RootContext {\n  const rootContext = getRootView(component)[CONTEXT] as RootContext;\n  ngDevMode && assertDefined(rootContext, 'rootContext');\n  return rootContext;\n}\n\n\n/**\n * Wait on component until it is rendered.\n *\n * This function returns a `Promise` which is resolved when the component's\n * change detection is executed. This is determined by finding the scheduler\n * associated with the `component`'s render tree and waiting until the scheduler\n * flushes. If nothing is scheduled, the function returns a resolved promise.\n *\n * Example:\n * ```\n * await whenRendered(myComponent);\n * ```\n *\n * @param component Component to wait upon\n * @returns Promise which resolves when the component is rendered.\n */\nexport function whenRendered(component: any): Promise<null> {\n  return getRootContext(component).clean;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * The host or anchor [element](guide/glossary#element) for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The [host view](guide/glossary#view-tree) defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The component type.\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * @publicApi\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The component's type\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {propName: string, templateName: string}[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string, templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {Injector, NullInjector} from '../di/injector';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ElementRef as ViewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {TemplateRef as ViewEngine_TemplateRef} from '../linker/template_ref';\nimport {ViewContainerRef as ViewEngine_ViewContainerRef} from '../linker/view_container_ref';\nimport {EmbeddedViewRef as viewEngine_EmbeddedViewRef, ViewRef as viewEngine_ViewRef} from '../linker/view_ref';\nimport {Renderer2} from '../render/api';\nimport {assertDefined, assertGreaterThan, assertLessThan} from '../util/assert';\nimport {NodeInjector, getParentInjectorLocation} from './di';\nimport {addToViewTree, createEmbeddedViewAndNode, createLContainer, renderEmbeddedTemplate} from './instructions';\nimport {ACTIVE_INDEX, LContainer, NATIVE, VIEWS} from './interfaces/container';\nimport {RenderFlags} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType, TViewNode} from './interfaces/node';\nimport {LQueries} from './interfaces/query';\nimport {RComment, RElement, Renderer3, isProceduralRenderer} from './interfaces/renderer';\nimport {CONTAINER_INDEX, CONTEXT, HOST_NODE, LView, QUERIES, RENDERER, TView} from './interfaces/view';\nimport {assertNodeOfPossibleTypes} from './node_assert';\nimport {addRemoveViewFromContainer, appendChild, detachView, getBeforeNodeForView, insertView, nativeInsertBefore, nativeNextSibling, nativeParentNode, removeView} from './node_manipulation';\nimport {getLView, getPreviousOrParentTNode} from './state';\nimport {findComponentView, getComponentViewByIndex, getNativeByTNode, getParentInjectorTNode, getParentInjectorView, hasParentInjector, isComponent, isLContainer, isRootView} from './util';\nimport {ViewRef} from './view_ref';\n\n\n/**\n * Creates an ElementRef from the most recent node.\n *\n * @returns The ElementRef instance to use\n */\nexport function injectElementRef(ElementRefToken: typeof ViewEngine_ElementRef):\n    ViewEngine_ElementRef {\n  return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n\nlet R3ElementRef: {new (native: RElement | RComment): ViewEngine_ElementRef};\n\n/**\n * Creates an ElementRef given a node.\n *\n * @param ElementRefToken The ElementRef type\n * @param tNode The node for which you'd like an ElementRef\n * @param view The view to which the node belongs\n * @returns The ElementRef instance to use\n */\nexport function createElementRef(\n    ElementRefToken: typeof ViewEngine_ElementRef, tNode: TNode,\n    view: LView): ViewEngine_ElementRef {\n  if (!R3ElementRef) {\n    // TODO: Fix class name, should be ElementRef, but there appears to be a rollup bug\n    R3ElementRef = class ElementRef_ extends ElementRefToken {};\n  }\n  return new R3ElementRef(getNativeByTNode(tNode, view));\n}\n\nlet R3TemplateRef: {\n  new (\n      _declarationParentView: LView, elementRef: ViewEngine_ElementRef, _tView: TView,\n      _renderer: Renderer3, _queries: LQueries | null, _injectorIndex: number):\n      ViewEngine_TemplateRef<any>\n};\n\n/**\n * Creates a TemplateRef given a node.\n *\n * @returns The TemplateRef instance to use\n */\nexport function injectTemplateRef<T>(\n    TemplateRefToken: typeof ViewEngine_TemplateRef,\n    ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_TemplateRef<T>|null {\n  return createTemplateRef<T>(\n      TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());\n}\n\n/**\n * Creates a TemplateRef and stores it on the injector.\n *\n * @param TemplateRefToken The TemplateRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a TemplateRef\n * @param hostView The view to which the node belongs\n * @returns The TemplateRef instance to use\n */\nexport function createTemplateRef<T>(\n    TemplateRefToken: typeof ViewEngine_TemplateRef, ElementRefToken: typeof ViewEngine_ElementRef,\n    hostTNode: TNode, hostView: LView): ViewEngine_TemplateRef<T>|null {\n  if (!R3TemplateRef) {\n    // TODO: Fix class name, should be TemplateRef, but there appears to be a rollup bug\n    R3TemplateRef = class TemplateRef_<T> extends TemplateRefToken<T> {\n      constructor(\n          private _declarationParentView: LView, readonly elementRef: ViewEngine_ElementRef,\n          private _tView: TView, private _renderer: Renderer3, private _queries: LQueries|null,\n          private _injectorIndex: number) {\n        super();\n      }\n\n      createEmbeddedView(\n          context: T, container?: LContainer,\n          hostTNode?: TElementNode|TContainerNode|TElementContainerNode, hostView?: LView,\n          index?: number): viewEngine_EmbeddedViewRef<T> {\n        const lView = createEmbeddedViewAndNode(\n            this._tView, context, this._declarationParentView, this._renderer, this._queries,\n            this._injectorIndex);\n        if (container) {\n          insertView(lView, container, hostView !, index !, hostTNode !.index);\n        }\n        renderEmbeddedTemplate(lView, this._tView, context);\n        const viewRef = new ViewRef(lView, context, -1);\n        viewRef._tViewNode = lView[HOST_NODE] as TViewNode;\n        return viewRef;\n      }\n    };\n  }\n\n  if (hostTNode.type === TNodeType.Container) {\n    const hostContainer: LContainer = hostView[hostTNode.index];\n    ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');\n    return new R3TemplateRef(\n        hostView, createElementRef(ElementRefToken, hostTNode, hostView), hostTNode.tViews as TView,\n        getLView()[RENDERER], hostContainer[QUERIES], hostTNode.injectorIndex);\n  } else {\n    return null;\n  }\n}\n\nlet R3ViewContainerRef: {\n  new (\n      lContainer: LContainer, hostTNode: TElementNode | TContainerNode | TElementContainerNode,\n      hostView: LView): ViewEngine_ViewContainerRef\n};\n\n/**\n * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef\n * already exists, retrieves the existing ViewContainerRef.\n *\n * @returns The ViewContainerRef instance to use\n */\nexport function injectViewContainerRef(\n    ViewContainerRefToken: typeof ViewEngine_ViewContainerRef,\n    ElementRefToken: typeof ViewEngine_ElementRef): ViewEngine_ViewContainerRef {\n  const previousTNode =\n      getPreviousOrParentTNode() as TElementNode | TElementContainerNode | TContainerNode;\n  return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());\n}\n\n/**\n * Creates a ViewContainerRef and stores it on the injector.\n *\n * @param ViewContainerRefToken The ViewContainerRef type\n * @param ElementRefToken The ElementRef type\n * @param hostTNode The node that is requesting a ViewContainerRef\n * @param hostView The view to which the node belongs\n * @returns The ViewContainerRef instance to use\n */\nexport function createContainerRef(\n    ViewContainerRefToken: typeof ViewEngine_ViewContainerRef,\n    ElementRefToken: typeof ViewEngine_ElementRef,\n    hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n    hostView: LView): ViewEngine_ViewContainerRef {\n  if (!R3ViewContainerRef) {\n    // TODO: Fix class name, should be ViewContainerRef, but there appears to be a rollup bug\n    R3ViewContainerRef = class ViewContainerRef_ extends ViewContainerRefToken {\n      private _viewRefs: viewEngine_ViewRef[] = [];\n\n      constructor(\n          private _lContainer: LContainer,\n          private _hostTNode: TElementNode|TContainerNode|TElementContainerNode,\n          private _hostView: LView) {\n        super();\n      }\n\n      get element(): ViewEngine_ElementRef {\n        return createElementRef(ElementRefToken, this._hostTNode, this._hostView);\n      }\n\n      get injector(): Injector { return new NodeInjector(this._hostTNode, this._hostView); }\n\n      /** @deprecated No replacement */\n      get parentInjector(): Injector {\n        const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);\n        const parentView = getParentInjectorView(parentLocation, this._hostView);\n        const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);\n\n        return !hasParentInjector(parentLocation) || parentTNode == null ?\n            new NodeInjector(null, this._hostView) :\n            new NodeInjector(parentTNode, parentView);\n      }\n\n      clear(): void {\n        while (this._lContainer[VIEWS].length) {\n          this.remove(0);\n        }\n      }\n\n      get(index: number): viewEngine_ViewRef|null { return this._viewRefs[index] || null; }\n\n      get length(): number { return this._lContainer[VIEWS].length; }\n\n      createEmbeddedView<C>(templateRef: ViewEngine_TemplateRef<C>, context?: C, index?: number):\n          viewEngine_EmbeddedViewRef<C> {\n        const adjustedIdx = this._adjustIndex(index);\n        const viewRef = (templateRef as any)\n                            .createEmbeddedView(\n                                context || <any>{}, this._lContainer, this._hostTNode,\n                                this._hostView, adjustedIdx);\n        (viewRef as ViewRef<any>).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n        return viewRef;\n      }\n\n      createComponent<C>(\n          componentFactory: viewEngine_ComponentFactory<C>, index?: number|undefined,\n          injector?: Injector|undefined, projectableNodes?: any[][]|undefined,\n          ngModuleRef?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<C> {\n        const contextInjector = injector || this.parentInjector;\n        if (!ngModuleRef && (componentFactory as any).ngModule == null && contextInjector) {\n          ngModuleRef = contextInjector.get(viewEngine_NgModuleRef, null);\n        }\n\n        const componentRef =\n            componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);\n        this.insert(componentRef.hostView, index);\n        return componentRef;\n      }\n\n      insert(viewRef: viewEngine_ViewRef, index?: number): viewEngine_ViewRef {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot insert a destroyed View in a ViewContainer!');\n        }\n        const lView = (viewRef as ViewRef<any>)._lView !;\n        const adjustedIdx = this._adjustIndex(index);\n\n        insertView(lView, this._lContainer, this._hostView, adjustedIdx, this._hostTNode.index);\n\n        const beforeNode =\n            getBeforeNodeForView(adjustedIdx, this._lContainer[VIEWS], this._lContainer[NATIVE]);\n        addRemoveViewFromContainer(lView, true, beforeNode);\n\n        (viewRef as ViewRef<any>).attachToViewContainerRef(this);\n        this._viewRefs.splice(adjustedIdx, 0, viewRef);\n\n        return viewRef;\n      }\n\n      move(viewRef: viewEngine_ViewRef, newIndex: number): viewEngine_ViewRef {\n        if (viewRef.destroyed) {\n          throw new Error('Cannot move a destroyed View in a ViewContainer!');\n        }\n        const index = this.indexOf(viewRef);\n        this.detach(index);\n        this.insert(viewRef, this._adjustIndex(newIndex));\n        return viewRef;\n      }\n\n      indexOf(viewRef: viewEngine_ViewRef): number { return this._viewRefs.indexOf(viewRef); }\n\n      remove(index?: number): void {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        removeView(this._lContainer, this._hostTNode, adjustedIdx);\n        this._viewRefs.splice(adjustedIdx, 1);\n      }\n\n      detach(index?: number): viewEngine_ViewRef|null {\n        const adjustedIdx = this._adjustIndex(index, -1);\n        const view = detachView(this._lContainer, adjustedIdx, !!this._hostTNode.detached);\n        const wasDetached = this._viewRefs.splice(adjustedIdx, 1)[0] != null;\n        return wasDetached ? new ViewRef(view, view[CONTEXT], view[CONTAINER_INDEX]) : null;\n      }\n\n      private _adjustIndex(index?: number, shift: number = 0) {\n        if (index == null) {\n          return this._lContainer[VIEWS].length + shift;\n        }\n        if (ngDevMode) {\n          assertGreaterThan(index, -1, 'index must be positive');\n          // +1 because it's legal to insert at the end.\n          assertLessThan(index, this._lContainer[VIEWS].length + 1 + shift, 'index');\n        }\n        return index;\n      }\n    };\n  }\n\n  ngDevMode && assertNodeOfPossibleTypes(\n                   hostTNode, TNodeType.Container, TNodeType.Element, TNodeType.ElementContainer);\n\n  let lContainer: LContainer;\n  const slotValue = hostView[hostTNode.index];\n  if (isLContainer(slotValue)) {\n    // If the host is a container, we don't need to create a new LContainer\n    lContainer = slotValue;\n    lContainer[ACTIVE_INDEX] = -1;\n  } else {\n    const commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');\n    ngDevMode && ngDevMode.rendererCreateComment++;\n\n    // A container can be created on the root (topmost / bootstrapped) component and in this case we\n    // can't use LTree to insert container's marker node (both parent of a comment node and the\n    // commend node itself is located outside of elements hold by LTree). In this specific case we\n    // use low-level DOM manipulation to insert container's marker (comment) node.\n    if (isRootView(hostView)) {\n      const renderer = hostView[RENDERER];\n      const hostNative = getNativeByTNode(hostTNode, hostView) !;\n      const parentOfHostNative = nativeParentNode(renderer, hostNative);\n      nativeInsertBefore(\n          renderer, parentOfHostNative !, commentNode, nativeNextSibling(renderer, hostNative));\n    } else {\n      appendChild(commentNode, hostTNode, hostView);\n    }\n\n    hostView[hostTNode.index] = lContainer =\n        createLContainer(slotValue, hostView, commentNode, true);\n\n    addToViewTree(hostView, hostTNode.index as number, lContainer);\n  }\n\n  return new R3ViewContainerRef(lContainer, hostTNode, hostView);\n}\n\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport function injectChangeDetectorRef(): ViewEngine_ChangeDetectorRef {\n  return createViewRef(getPreviousOrParentTNode(), getLView(), null);\n}\n\n/**\n * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).\n *\n * @param hostTNode The node that is requesting a ChangeDetectorRef\n * @param hostView The view to which the node belongs\n * @param context The context for this change detector ref\n * @returns The ChangeDetectorRef to use\n */\nexport function createViewRef(\n    hostTNode: TNode, hostView: LView, context: any): ViewEngine_ChangeDetectorRef {\n  if (isComponent(hostTNode)) {\n    const componentIndex = hostTNode.directiveStart;\n    const componentView = getComponentViewByIndex(hostTNode.index, hostView);\n    return new ViewRef(componentView, context, componentIndex);\n  } else if (hostTNode.type === TNodeType.Element) {\n    const hostComponentView = findComponentView(hostView);\n    return new ViewRef(hostComponentView, hostComponentView[CONTEXT], -1);\n  }\n  return null !;\n}\n\nfunction getOrCreateRenderer2(view: LView): Renderer2 {\n  const renderer = view[RENDERER];\n  if (isProceduralRenderer(renderer)) {\n    return renderer as Renderer2;\n  } else {\n    throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');\n  }\n}\n\n/** Returns a Renderer2 (or throws when application was bootstrapped with Renderer3) */\nexport function injectRenderer2(): Renderer2 {\n  return getOrCreateRenderer2(getLView());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(\n      `No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * @publicApi\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  private _factories = new Map<any, ComponentFactory<any>>();\n\n  constructor(\n      factories: ComponentFactory<any>[], private _parent: ComponentFactoryResolver,\n      private _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n  readonly selector: string;\n  readonly componentType: Type<any>;\n  readonly ngContentSelectors: string[];\n  readonly inputs: {propName: string, templateName: string}[];\n  readonly outputs: {propName: string, templateName: string}[];\n\n  constructor(private factory: ComponentFactory<C>, private ngModule: NgModuleRef<any>) {\n    super();\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../interface/type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n\n\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the NgModule.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * The ComponentFactoryResolver to get hold of the ComponentFactories\n   * declared in the `entryComponents` property of the module.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The NgModule instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Allows to register a callback that will be called when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n\n/**\n * @publicApi\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector|null): NgModuleRef<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef} from '../application_ref';\nimport {ChangeDetectorRef as viewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {ViewContainerRef as viewEngine_ViewContainerRef} from '../linker/view_container_ref';\nimport {EmbeddedViewRef as viewEngine_EmbeddedViewRef, InternalViewRef as viewEngine_InternalViewRef} from '../linker/view_ref';\n\nimport {checkNoChanges, checkNoChangesInRootView, detectChangesInRootView, detectChangesInternal, markViewDirty, storeCleanupFn, viewAttached} from './instructions';\nimport {TNode, TNodeType, TViewNode} from './interfaces/node';\nimport {FLAGS, HOST, HOST_NODE, LView, LViewFlags, PARENT} from './interfaces/view';\nimport {destroyLView} from './node_manipulation';\nimport {unwrapOnChangesDirectiveWrapper} from './onchanges_util';\nimport {getNativeByTNode} from './util';\n\n\n\n// Needed due to tsickle downleveling where multiple `implements` with classes creates\n// multiple @extends in Closure annotations, which is illegal. This workaround fixes\n// the multiple @extends by making the annotation @implements instead\nexport interface viewEngine_ChangeDetectorRef_interface extends viewEngine_ChangeDetectorRef {}\n\nexport class ViewRef<T> implements viewEngine_EmbeddedViewRef<T>, viewEngine_InternalViewRef,\n    viewEngine_ChangeDetectorRef_interface {\n  private _appRef: ApplicationRef|null = null;\n  private _viewContainerRef: viewEngine_ViewContainerRef|null = null;\n\n  /**\n   * @internal\n   */\n  public _tViewNode: TViewNode|null = null;\n\n  /**\n   * @internal\n   */\n  public _lView: LView;\n\n  get rootNodes(): any[] {\n    if (this._lView[HOST] == null) {\n      const tView = this._lView[HOST_NODE] as TViewNode;\n      return collectNativeNodes(this._lView, tView, []);\n    }\n    return [];\n  }\n\n  constructor(_lView: LView, private _context: T|null, private _componentIndex: number) {\n    this._lView = _lView;\n  }\n\n  get context(): T { return this._context ? this._context : this._lookUpContext(); }\n\n  get destroyed(): boolean {\n    return (this._lView[FLAGS] & LViewFlags.Destroyed) === LViewFlags.Destroyed;\n  }\n\n  destroy(): void {\n    if (this._appRef) {\n      this._appRef.detachView(this);\n    } else if (this._viewContainerRef) {\n      const index = this._viewContainerRef.indexOf(this);\n\n      if (index > -1) {\n        this._viewContainerRef.detach(index);\n      }\n\n      this._viewContainerRef = null;\n    }\n    destroyLView(this._lView);\n  }\n\n  onDestroy(callback: Function) { storeCleanupFn(this._lView, callback); }\n\n  /**\n   * Marks a view and all of its ancestors dirty.\n   *\n   * It also triggers change detection by calling `scheduleTick` internally, which coalesces\n   * multiple `markForCheck` calls to into one change detection run.\n   *\n   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n   * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n   * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'my-app',\n   *   template: `Number of ticks: {{numberOfTicks}}`\n   *   changeDetection: ChangeDetectionStrategy.OnPush,\n   * })\n   * class AppComponent {\n   *   numberOfTicks = 0;\n   *\n   *   constructor(private ref: ChangeDetectorRef) {\n   *     setInterval(() => {\n   *       this.numberOfTicks++;\n   *       // the following is required, otherwise the view will not be updated\n   *       this.ref.markForCheck();\n   *     }, 1000);\n   *   }\n   * }\n   * ```\n   */\n  markForCheck(): void { markViewDirty(this._lView); }\n\n  /**\n   * Detaches the view from the change detection tree.\n   *\n   * Detached views will not be checked during change detection runs until they are\n   * re-attached, even if they are dirty. `detach` can be used in combination with\n   * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n   * detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds. We can do that by detaching\n   * the component's change detector and doing a local check every five seconds.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   // in a real application the returned data will be different every time\n   *   get data() {\n   *     return [1,2,3,4,5];\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'giant-list',\n   *   template: `\n   *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n   *   `,\n   * })\n   * class GiantList {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n   *     ref.detach();\n   *     setInterval(() => {\n   *       this.ref.detectChanges();\n   *     }, 5000);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     <giant-list><giant-list>\n   *   `,\n   * })\n   * class App {\n   * }\n   * ```\n   */\n  detach(): void { this._lView[FLAGS] &= ~LViewFlags.Attached; }\n\n  /**\n   * Re-attaches a view to the change detection tree.\n   *\n   * This can be used to re-attach views that were previously detached from the tree\n   * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example creates a component displaying `live` data. The component will detach\n   * its change detector from the main change detector tree when the component's live property\n   * is set to false.\n   *\n   * ```typescript\n   * class DataProvider {\n   *   data = 1;\n   *\n   *   constructor() {\n   *     setInterval(() => {\n   *       this.data = this.data * 2;\n   *     }, 500);\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'live-data',\n   *   inputs: ['live'],\n   *   template: 'Data: {{dataProvider.data}}'\n   * })\n   * class LiveData {\n   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n   *\n   *   set live(value) {\n   *     if (value) {\n   *       this.ref.reattach();\n   *     } else {\n   *       this.ref.detach();\n   *     }\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'my-app',\n   *   providers: [DataProvider],\n   *   template: `\n   *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n   *     <live-data [live]=\"live\"><live-data>\n   *   `,\n   * })\n   * class AppComponent {\n   *   live = true;\n   * }\n   * ```\n   */\n  reattach(): void { this._lView[FLAGS] |= LViewFlags.Attached; }\n\n  /**\n   * Checks the view and its children.\n   *\n   * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n   * local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example defines a component with a large list of readonly data.\n   * Imagine, the data changes constantly, many times per second. For performance reasons,\n   * we want to check and update the list every five seconds.\n   *\n   * We can do that by detaching the component's change detector and doing a local change detection\n   * check every five seconds.\n   *\n   * See {@link ChangeDetectorRef#detach detach} for more information.\n   */\n  detectChanges(): void { detectChangesInternal(this._lView, this.context); }\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * This is used in development mode to verify that running change detection doesn't\n   * introduce other changes.\n   */\n  checkNoChanges(): void { checkNoChanges(this.context); }\n\n  attachToViewContainerRef(vcRef: viewEngine_ViewContainerRef) {\n    if (this._appRef) {\n      throw new Error('This view is already attached directly to the ApplicationRef!');\n    }\n    this._viewContainerRef = vcRef;\n  }\n\n  detachFromAppRef() { this._appRef = null; }\n\n  attachToAppRef(appRef: ApplicationRef) {\n    if (this._viewContainerRef) {\n      throw new Error('This view is already attached to a ViewContainer!');\n    }\n    this._appRef = appRef;\n  }\n\n  private _lookUpContext(): T {\n    return this._context =\n               unwrapOnChangesDirectiveWrapper(this._lView[PARENT] ![this._componentIndex] as T);\n  }\n}\n\n/** @internal */\nexport class RootViewRef<T> extends ViewRef<T> {\n  constructor(public _view: LView) { super(_view, null, -1); }\n\n  detectChanges(): void { detectChangesInRootView(this._view); }\n\n  checkNoChanges(): void { checkNoChangesInRootView(this._view); }\n\n  get context(): T { return null !; }\n}\n\nfunction collectNativeNodes(lView: LView, parentTNode: TNode, result: any[]): any[] {\n  let tNodeChild = parentTNode.child;\n\n  while (tNodeChild) {\n    result.push(getNativeByTNode(tNodeChild, lView));\n    if (tNodeChild.type === TNodeType.ElementContainer) {\n      collectNativeNodes(lView, tNodeChild, result);\n    }\n    tNodeChild = tNodeChild.next;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {injectElementRef as render3InjectElementRef} from '../render3/view_engine_compatibility';\nimport {noop} from '../util/noop';\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\n// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,\n// i.e. users have to ask for what they need. With that, we can build better analysis tools\n// and could do better codegen in the future.\nexport class ElementRef<T = any> {\n  /**\n   * The underlying native element or `null` if direct access to native elements is not supported\n   * (e.g. when the application runs in a web worker).\n   *\n   * <div class=\"callout is-critical\">\n   *   <header>Use with caution</header>\n   *   <p>\n   *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n   *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n   * Renderer2}\n   *    which provides API that can safely be used even when direct access to native elements is not\n   *    supported.\n   *   </p>\n   *   <p>\n   *    Relying on direct DOM access creates tight coupling between your application and rendering\n   *    layers which will make it impossible to separate the two and deploy your application into a\n   *    web worker.\n   *   </p>\n   * </div>\n   *\n   */\n  public nativeElement: T;\n\n  constructor(nativeElement: T) { this.nativeElement = nativeElement; }\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ElementRef = () => SWITCH_ELEMENT_REF_FACTORY(ElementRef);\n}\n\nexport const SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = render3InjectElementRef;\nconst SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_ELEMENT_REF_FACTORY: typeof render3InjectElementRef =\n    SWITCH_ELEMENT_REF_FACTORY__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {ViewEncapsulation} from '../metadata/view';\nimport {injectRenderer2 as render3InjectRenderer2} from '../render3/view_engine_compatibility';\nimport {noop} from '../util/noop';\n\n\n\n/**\n * @deprecated Use `RendererType2` (and `Renderer2`) instead.\n * @publicApi\n */\nexport class RenderComponentType {\n  constructor(\n      public id: string, public templateUrl: string, public slotCount: number,\n      public encapsulation: ViewEncapsulation, public styles: Array<string|any[]>,\n      public animations: any) {}\n}\n\n/**\n * @deprecated Debug info is handled internally in the view engine now.\n */\nexport abstract class RenderDebugInfo {\n  abstract get injector(): Injector;\n  abstract get component(): any;\n  abstract get providerTokens(): any[];\n  abstract get references(): {[key: string]: any};\n  abstract get context(): any;\n  abstract get source(): string;\n}\n\n/**\n * @deprecated Use the `Renderer2` instead.\n */\nexport interface DirectRenderer {\n  remove(node: any): void;\n  appendChild(node: any, parent: any): void;\n  insertBefore(node: any, refNode: any): void;\n  nextSibling(node: any): any;\n  parentElement(node: any): any;\n}\n\n/**\n * @deprecated Use the `Renderer2` instead.\n * @publicApi\n */\nexport abstract class Renderer {\n  abstract selectRootElement(selectorOrNode: string|any, debugInfo?: RenderDebugInfo): any;\n\n  abstract createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo): any;\n\n  abstract createViewRoot(hostElement: any): any;\n\n  abstract createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo): any;\n\n  abstract createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo): any;\n\n  abstract projectNodes(parentElement: any, nodes: any[]): void;\n\n  abstract attachViewAfter(node: any, viewRootNodes: any[]): void;\n\n  abstract detachView(viewRootNodes: any[]): void;\n\n  abstract destroyView(hostElement: any, viewAllNodes: any[]): void;\n\n  abstract listen(renderElement: any, name: string, callback: Function): Function;\n\n  abstract listenGlobal(target: string, name: string, callback: Function): Function;\n\n  abstract setElementProperty(renderElement: any, propertyName: string, propertyValue: any): void;\n\n  abstract setElementAttribute(renderElement: any, attributeName: string, attributeValue?: string):\n      void;\n\n  /**\n   * Used only in debug mode to serialize property changes to dom nodes as attributes.\n   */\n  abstract setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string):\n      void;\n\n  abstract setElementClass(renderElement: any, className: string, isAdd: boolean): void;\n\n  abstract setElementStyle(renderElement: any, styleName: string, styleValue?: string): void;\n\n  abstract invokeElementMethod(renderElement: any, methodName: string, args?: any[]): void;\n\n  abstract setText(renderNode: any, text: string): void;\n\n  abstract animate(\n      element: any, startingStyles: any, keyframes: any[], duration: number, delay: number,\n      easing: string, previousPlayers?: any[]): any;\n}\n\nexport const Renderer2Interceptor = new InjectionToken<Renderer2[]>('Renderer2Interceptor');\n\n/**\n * Injectable service that provides a low-level interface for modifying the UI.\n *\n * Use this service to bypass Angular's templating and make custom UI changes that can't be\n * expressed declaratively. For example if you need to set a property or an attribute whose name is\n * not statically known, use {@link Renderer#setElementProperty setElementProperty} or\n * {@link Renderer#setElementAttribute setElementAttribute} respectively.\n *\n * If you are implementing a custom renderer, you must implement this interface.\n *\n * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n *\n * @deprecated Use `RendererFactory2` instead.\n * @publicApi\n */\nexport abstract class RootRenderer {\n  abstract renderComponent(componentType: RenderComponentType): Renderer;\n}\n\n/**\n * Used by `RendererFactory2` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport interface RendererType2 {\n  /**\n   * A unique identifying string for the new renderer, used when creating\n   * unique styles for encapsulation.\n   */\n  id: string;\n  /**\n   * The view encapsulation type, which determines how styles are applied to\n   * DOM elements. One of\n   * - `Emulated` (default): Emulate native scoping of styles.\n   * - `Native`: Use the native encapsulation mechanism of the renderer.\n   * - `ShadowDom`: Use modern [Shadow\n   * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n   * create a ShadowRoot for component's host element.\n   * - `None`: Do not provide any template or style encapsulation.\n   */\n  encapsulation: ViewEncapsulation;\n  /**\n   * Defines CSS styles to be stored on a renderer instance.\n   */\n  styles: (string|any[])[];\n  /**\n   * Defines arbitrary developer-defined data to be stored on a renderer instance.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  data: {[kind: string]: any};\n}\n\n/**\n * Creates and initializes a custom renderer that implements the `Renderer2` base class.\n *\n * @publicApi\n */\nexport abstract class RendererFactory2 {\n  /**\n   * Creates and initializes a custom renderer for a host DOM element.\n   * @param hostElement The element to render.\n   * @param type The base class to implement.\n   * @returns The new custom renderer instance.\n   */\n  abstract createRenderer(hostElement: any, type: RendererType2|null): Renderer2;\n  /**\n   * A callback invoked when rendering has begun.\n   */\n  abstract begin?(): void;\n  /**\n   * A callback invoked when rendering has completed.\n   */\n  abstract end?(): void;\n  /**\n   * Use with animations test-only mode. Notifies the test when rendering has completed.\n   * @returns The asynchronous result of the developer-defined function.\n   */\n  abstract whenRenderingDone?(): Promise<any>;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport enum RendererStyleFlags2 {\n  /**\n   * Marks a style as important.\n   */\n  Important = 1 << 0,\n  /**\n   * Marks a style as using dash case naming (this-is-dash-case).\n   */\n  DashCase = 1 << 1\n}\n\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using `RendererFactory2`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the `setProperty()` or\n * `setAttribute()` method.\n *\n * @publicApi\n */\nexport abstract class Renderer2 {\n  /**\n   * Use to store arbitrary developer-defined data on a renderer instance,\n   * as an object containing key-value pairs.\n   * This is useful for renderers that delegate to other renderers.\n   */\n  abstract get data(): {[key: string]: any};\n\n  /**\n   * Implement this callback to destroy the renderer or the host element.\n   */\n  abstract destroy(): void;\n  /**\n   * Implement this callback to create an instance of the host element.\n   * @param name An identifying name for the new element, unique within the namespace.\n   * @param namespace The namespace for the new element.\n   * @returns The new element.\n   */\n  abstract createElement(name: string, namespace?: string|null): any;\n  /**\n   * Implement this callback to add a comment to the DOM of the host element.\n   * @param value The comment text.\n   * @returns The modified element.\n   */\n  abstract createComment(value: string): any;\n\n  /**\n   * Implement this callback to add text to the DOM of the host element.\n   * @param value The text string.\n   * @returns The modified element.\n   */\n  abstract createText(value: string): any;\n  /**\n   * If null or undefined, the view engine won't call it.\n   * This is used as a performance optimization for production mode.\n   */\n  // TODO(issue/24571): remove '!'.\n  destroyNode !: ((node: any) => void) | null;\n  /**\n   * Appends a child to a given parent node in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child node.\n   */\n  abstract appendChild(parent: any, newChild: any): void;\n  /**\n   * Implement this callback to insert a child node at a given position in a parent node\n   * in the host element DOM.\n   * @param parent The parent node.\n   * @param newChild The new child nodes.\n   * @param refChild The existing child node that should precede the new node.\n   */\n  abstract insertBefore(parent: any, newChild: any, refChild: any): void;\n  /**\n   * Implement this callback to remove a child node from the host element's DOM.\n   * @param parent The parent node.\n   * @param oldChild The child node to remove.\n   */\n  abstract removeChild(parent: any, oldChild: any): void;\n  /**\n   * Implement this callback to prepare an element to be bootstrapped\n   * as a root element, and return the element instance.\n   * @param selectorOrNode The DOM element.\n   * @param preserveContent Whether the contents of the root element\n   * should be preserved, or cleared upon bootstrap (default behavior).\n   * Use with `ViewEncapsulation.ShadowDom` to allow simple native\n   * content projection via `<slot>` elements.\n   * @returns The root element.\n   */\n  abstract selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any;\n  /**\n   * Implement this callback to get the parent of a given node\n   * in the host element's DOM.\n   * @param node The child node to query.\n   * @returns The parent node, or null if there is no parent.\n   * For WebWorkers, always returns true.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract parentNode(node: any): any;\n  /**\n   * Implement this callback to get the next sibling node of a given node\n   * in the host element's DOM.\n   * @returns The sibling node, or null if there is no sibling.\n   * For WebWorkers, always returns a value.\n   * This is because the check is synchronous,\n   * and the caller can't rely on checking for null.\n   */\n  abstract nextSibling(node: any): any;\n  /**\n   * Implement this callback to set an attribute value for an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param value The new value.\n   * @param namespace The namespace.\n   */\n  abstract setAttribute(el: any, name: string, value: string, namespace?: string|null): void;\n\n  /**\n   * Implement this callback to remove an attribute from an element in the DOM.\n   * @param el The element.\n   * @param name The attribute name.\n   * @param namespace The namespace.\n   */\n  abstract removeAttribute(el: any, name: string, namespace?: string|null): void;\n  /**\n   * Implement this callback to add a class to an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract addClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to remove a class from an element in the DOM.\n   * @param el The element.\n   * @param name The class name.\n   */\n  abstract removeClass(el: any, name: string): void;\n\n  /**\n   * Implement this callback to set a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param value The new value.\n   * @param flags Flags for style variations. No flags are set by default.\n   */\n  abstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to remove the value from a CSS style for an element in the DOM.\n   * @param el The element.\n   * @param style The name of the style.\n   * @param flags Flags for style variations to remove, if set. ???\n   */\n  abstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n\n  /**\n   * Implement this callback to set the value of a property of an element in the DOM.\n   * @param el The element.\n   * @param name The property name.\n   * @param value The new value.\n   */\n  abstract setProperty(el: any, name: string, value: any): void;\n\n  /**\n   * Implement this callback to set the value of a node in the host element.\n   * @param node The node.\n   * @param value The new value.\n   */\n  abstract setValue(node: any, value: string): void;\n\n  /**\n   * Implement this callback to start an event listener.\n   * @param target The context in which to listen for events. Can be\n   * the entire window or document, the body of the document, or a specific\n   * DOM element.\n   * @param eventName The event to listen for.\n   * @param callback A handler function to invoke when the event occurs.\n   * @returns An \"unlisten\" function for disposing of this handler.\n   */\n  abstract listen(\n      target: 'window'|'document'|'body'|any, eventName: string,\n      callback: (event: any) => boolean | void): () => void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => Renderer2 = () => SWITCH_RENDERER2_FACTORY();\n}\n\n\nexport const SWITCH_RENDERER2_FACTORY__POST_R3__ = render3InjectRenderer2;\nconst SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;\nconst SWITCH_RENDERER2_FACTORY: typeof render3InjectRenderer2 = SWITCH_RENDERER2_FACTORY__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport class Version {\n  public readonly major: string;\n  public readonly minor: string;\n  public readonly patch: string;\n\n  constructor(public full: string) {\n    this.major = full.split('.')[0];\n    this.minor = full.split('.')[1];\n    this.patch = full.split('.').slice(2).join('.');\n  }\n}\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('0.0.0-PLACEHOLDER');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef as ViewEngine_ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {InjectionToken} from '../di/injection_token';\nimport {Injector} from '../di/injector';\nimport {inject} from '../di/injector_compatibility';\nimport {Type} from '../interface/type';\nimport {ComponentFactory as viewEngine_ComponentFactory, ComponentRef as viewEngine_ComponentRef} from '../linker/component_factory';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {ElementRef as viewEngine_ElementRef} from '../linker/element_ref';\nimport {NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {RendererFactory2} from '../render/api';\nimport {Sanitizer} from '../sanitization/security';\nimport {assertDefined} from '../util/assert';\nimport {VERSION} from '../version';\n\nimport {assertComponentType} from './assert';\nimport {LifecycleHooksFeature, createRootComponent, createRootComponentView, createRootContext} from './component';\nimport {getComponentDef} from './definition';\nimport {NodeInjector} from './di';\nimport {addToViewTree, createLView, createNodeAtIndex, createTView, createViewNode, elementCreate, locateHostElement, refreshDescendantViews} from './instructions';\nimport {ComponentDef, RenderFlags} from './interfaces/definition';\nimport {TContainerNode, TElementContainerNode, TElementNode, TNode, TNodeType} from './interfaces/node';\nimport {RElement, RendererFactory3, domRendererFactory3, isProceduralRenderer} from './interfaces/renderer';\nimport {HEADER_OFFSET, LView, LViewFlags, RootContext, TVIEW} from './interfaces/view';\nimport {enterView, leaveView} from './state';\nimport {defaultScheduler, getTNode} from './util';\nimport {createElementRef} from './view_engine_compatibility';\nimport {RootViewRef, ViewRef} from './view_ref';\n\nexport class ComponentFactoryResolver extends viewEngine_ComponentFactoryResolver {\n  /**\n   * @param ngModule The NgModuleRef to which all resolved factories are bound.\n   */\n  constructor(private ngModule?: viewEngine_NgModuleRef<any>) { super(); }\n\n  resolveComponentFactory<T>(component: Type<T>): viewEngine_ComponentFactory<T> {\n    ngDevMode && assertComponentType(component);\n    const componentDef = getComponentDef(component) !;\n    return new ComponentFactory(componentDef, this.ngModule);\n  }\n}\n\nfunction toRefArray(map: {[key: string]: string}): {propName: string; templateName: string;}[] {\n  const array: {propName: string; templateName: string;}[] = [];\n  for (let nonMinified in map) {\n    if (map.hasOwnProperty(nonMinified)) {\n      const minified = map[nonMinified];\n      array.push({propName: minified, templateName: nonMinified});\n    }\n  }\n  return array;\n}\n\n/**\n * Default {@link RootContext} for all components rendered with {@link renderComponent}.\n */\nexport const ROOT_CONTEXT = new InjectionToken<RootContext>(\n    'ROOT_CONTEXT_TOKEN',\n    {providedIn: 'root', factory: () => createRootContext(inject(SCHEDULER))});\n\n/**\n * A change detection scheduler token for {@link RootContext}. This token is the default value used\n * for the default `RootContext` found in the {@link ROOT_CONTEXT} token.\n */\nexport const SCHEDULER = new InjectionToken<((fn: () => void) => void)>('SCHEDULER_TOKEN', {\n  providedIn: 'root',\n  factory: () => defaultScheduler,\n});\n\nconst NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};\n\nfunction createChainedInjector(rootViewInjector: Injector, moduleInjector: Injector): Injector {\n  return {\n    get: <T>(token: Type<T>| InjectionToken<T>, notFoundValue?: T): T => {\n      const value = rootViewInjector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);\n\n      if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||\n          notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n        // Return the value from the root element injector when\n        // - it provides it\n        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        // - the module injector should not be checked\n        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)\n        return value;\n      }\n\n      return moduleInjector.get(token, notFoundValue);\n    }\n  };\n}\n\n/**\n * Render3 implementation of {@link viewEngine_ComponentFactory}.\n */\nexport class ComponentFactory<T> extends viewEngine_ComponentFactory<T> {\n  selector: string;\n  componentType: Type<any>;\n  ngContentSelectors: string[];\n\n  get inputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.inputs);\n  }\n\n  get outputs(): {propName: string; templateName: string;}[] {\n    return toRefArray(this.componentDef.outputs);\n  }\n\n  /**\n   * @param componentDef The component definition.\n   * @param ngModule The NgModuleRef to which the factory is bound.\n   */\n  constructor(\n      private componentDef: ComponentDef<any>, private ngModule?: viewEngine_NgModuleRef<any>) {\n    super();\n    this.componentType = componentDef.type;\n    this.selector = componentDef.selectors[0][0] as string;\n    // The component definition does not include the wildcard ('*') selector in its list.\n    // It is implicitly expected as the first item in the projectable nodes array.\n    this.ngContentSelectors =\n        componentDef.ngContentSelectors ? ['*', ...componentDef.ngContentSelectors] : [];\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][]|undefined, rootSelectorOrNode?: any,\n      ngModule?: viewEngine_NgModuleRef<any>|undefined): viewEngine_ComponentRef<T> {\n    const isInternalRootView = rootSelectorOrNode === undefined;\n    ngModule = ngModule || this.ngModule;\n\n    const rootViewInjector =\n        ngModule ? createChainedInjector(injector, ngModule.injector) : injector;\n\n    const rendererFactory =\n        rootViewInjector.get(RendererFactory2, domRendererFactory3) as RendererFactory3;\n    const sanitizer = rootViewInjector.get(Sanitizer, null);\n\n    const hostRNode = isInternalRootView ?\n        elementCreate(this.selector, rendererFactory.createRenderer(null, this.componentDef)) :\n        locateHostElement(rendererFactory, rootSelectorOrNode);\n\n    const rootFlags = this.componentDef.onPush ? LViewFlags.Dirty | LViewFlags.IsRoot :\n                                                 LViewFlags.CheckAlways | LViewFlags.IsRoot;\n    const rootContext: RootContext =\n        !isInternalRootView ? rootViewInjector.get(ROOT_CONTEXT) : createRootContext();\n\n    const renderer = rendererFactory.createRenderer(hostRNode, this.componentDef);\n\n    if (rootSelectorOrNode && hostRNode) {\n      ngDevMode && ngDevMode.rendererSetAttribute++;\n      isProceduralRenderer(renderer) ?\n          renderer.setAttribute(hostRNode, 'ng-version', VERSION.full) :\n          hostRNode.setAttribute('ng-version', VERSION.full);\n    }\n\n    // Create the root view. Uses empty TView and ContentTemplate.\n    const rootLView = createLView(\n        null, createTView(-1, null, 1, 0, null, null, null), rootContext, rootFlags,\n        rendererFactory, renderer, sanitizer, rootViewInjector);\n\n    // rootView is the parent when bootstrapping\n    const oldLView = enterView(rootLView, null);\n\n    let component: T;\n    let tElementNode: TElementNode;\n    try {\n      if (rendererFactory.begin) rendererFactory.begin();\n\n      const componentView = createRootComponentView(\n          hostRNode, this.componentDef, rootLView, rendererFactory, renderer);\n\n      tElementNode = getTNode(0, rootLView) as TElementNode;\n\n      // Transform the arrays of native nodes into a structure that can be consumed by the\n      // projection instruction. This is needed to support the reprojection of these nodes.\n      if (projectableNodes) {\n        let index = 0;\n        const tView = rootLView[TVIEW];\n        const projection: TNode[] = tElementNode.projection = [];\n        for (let i = 0; i < projectableNodes.length; i++) {\n          const nodeList = projectableNodes[i];\n          let firstTNode: TNode|null = null;\n          let previousTNode: TNode|null = null;\n          for (let j = 0; j < nodeList.length; j++) {\n            if (tView.firstTemplatePass) {\n              // For dynamically created components such as ComponentRef, we create a new TView for\n              // each insert. This is not ideal since we should be sharing the TViews.\n              // Also the logic here should be shared with `component.ts`'s `renderComponent`\n              // method.\n              tView.expandoStartIndex++;\n              tView.blueprint.splice(++index + HEADER_OFFSET, 0, null);\n              tView.data.splice(index + HEADER_OFFSET, 0, null);\n              rootLView.splice(index + HEADER_OFFSET, 0, null);\n            }\n            const tNode =\n                createNodeAtIndex(index, TNodeType.Element, nodeList[j] as RElement, null, null);\n            previousTNode ? (previousTNode.next = tNode) : (firstTNode = tNode);\n            previousTNode = tNode;\n          }\n          projection.push(firstTNode !);\n        }\n      }\n\n      // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and\n      // executed here?\n      // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref\n      component = createRootComponent(\n          componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);\n\n      addToViewTree(rootLView, HEADER_OFFSET, componentView);\n      refreshDescendantViews(rootLView);\n    } finally {\n      leaveView(oldLView);\n      if (rendererFactory.end) rendererFactory.end();\n    }\n\n    const componentRef = new ComponentRef(\n        this.componentType, component,\n        createElementRef(viewEngine_ElementRef, tElementNode, rootLView), rootLView, tElementNode);\n\n    if (isInternalRootView) {\n      // The host element of the internal root view is attached to the component's host view node\n      componentRef.hostView._tViewNode !.child = tElementNode;\n    }\n    return componentRef;\n  }\n}\n\nconst componentFactoryResolver: ComponentFactoryResolver = new ComponentFactoryResolver();\n\n/**\n * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the\n * ComponentFactoryResolver\n * already exists, retrieves the existing ComponentFactoryResolver.\n *\n * @returns The ComponentFactoryResolver instance to use\n */\nexport function injectComponentFactoryResolver(): viewEngine_ComponentFactoryResolver {\n  return componentFactoryResolver;\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * `ComponentRef` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport class ComponentRef<T> extends viewEngine_ComponentRef<T> {\n  destroyCbs: (() => void)[]|null = [];\n  instance: T;\n  hostView: ViewRef<T>;\n  changeDetectorRef: ViewEngine_ChangeDetectorRef;\n  componentType: Type<T>;\n\n  constructor(\n      componentType: Type<T>, instance: T, public location: viewEngine_ElementRef,\n      private _rootLView: LView,\n      private _tNode: TElementNode|TContainerNode|TElementContainerNode) {\n    super();\n    this.instance = instance;\n    this.hostView = this.changeDetectorRef = new RootViewRef<T>(_rootLView);\n    this.hostView._tViewNode = createViewNode(-1, _rootLView);\n    this.componentType = componentType;\n  }\n\n  get injector(): Injector { return new NodeInjector(this._tNode, this._rootLView); }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n    this.hostView.destroy();\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {INJECTOR, Injector} from '../di/injector';\nimport {InjectFlags} from '../di/interface/injector';\nimport {StaticProvider} from '../di/interface/provider';\nimport {createInjector} from '../di/r3_injector';\nimport {Type} from '../interface/type';\nimport {ComponentFactoryResolver as viewEngine_ComponentFactoryResolver} from '../linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory as viewEngine_NgModuleFactory, NgModuleRef as viewEngine_NgModuleRef} from '../linker/ng_module_factory';\nimport {NgModuleDef} from '../metadata/ng_module';\nimport {assertDefined} from '../util/assert';\nimport {stringify} from '../util/stringify';\n\nimport {ComponentFactoryResolver} from './component_ref';\nimport {getNgModuleDef} from './definition';\n\nexport interface NgModuleType<T = any> extends Type<T> { ngModuleDef: NgModuleDef<T>; }\n\nconst COMPONENT_FACTORY_RESOLVER: StaticProvider = {\n  provide: viewEngine_ComponentFactoryResolver,\n  useClass: ComponentFactoryResolver,\n  deps: [viewEngine_NgModuleRef],\n};\n\nexport class NgModuleRef<T> extends viewEngine_NgModuleRef<T> implements InternalNgModuleRef<T> {\n  // tslint:disable-next-line:require-internal-with-underscore\n  _bootstrapComponents: Type<any>[] = [];\n  // tslint:disable-next-line:require-internal-with-underscore\n  _r3Injector: Injector;\n  injector: Injector = this;\n  instance: T;\n  destroyCbs: (() => void)[]|null = [];\n\n  constructor(ngModuleType: Type<T>, public _parent: Injector|null) {\n    super();\n    const ngModuleDef = getNgModuleDef(ngModuleType);\n    ngDevMode && assertDefined(\n                     ngModuleDef,\n                     `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);\n\n    this._bootstrapComponents = ngModuleDef !.bootstrap;\n    const additionalProviders: StaticProvider[] = [\n      {\n        provide: viewEngine_NgModuleRef,\n        useValue: this,\n      },\n      COMPONENT_FACTORY_RESOLVER\n    ];\n    this._r3Injector = createInjector(ngModuleType, _parent, additionalProviders);\n    this.instance = this.get(ngModuleType);\n  }\n\n  get(token: any, notFoundValue: any = Injector.THROW_IF_NOT_FOUND,\n      injectFlags: InjectFlags = InjectFlags.Default): any {\n    if (token === Injector || token === viewEngine_NgModuleRef || token === INJECTOR) {\n      return this;\n    }\n    return this._r3Injector.get(token, notFoundValue, injectFlags);\n  }\n\n  get componentFactoryResolver(): viewEngine_ComponentFactoryResolver {\n    return this.get(viewEngine_ComponentFactoryResolver);\n  }\n\n  destroy(): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.forEach(fn => fn());\n    this.destroyCbs = null;\n  }\n  onDestroy(callback: () => void): void {\n    ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');\n    this.destroyCbs !.push(callback);\n  }\n}\n\nexport class NgModuleFactory<T> extends viewEngine_NgModuleFactory<T> {\n  constructor(public moduleType: Type<T>) { super(); }\n\n  create(parentInjector: Injector|null): viewEngine_NgModuleRef<T> {\n    return new NgModuleRef(this.moduleType, parentInjector);\n  }\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\n/** Symbol.observable addition */\n/* Note: This will add Symbol.observable globally for all TypeScript users,\n  however, we are no longer polyfilling Symbol.observable */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nfunction EmptyErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'no elements in sequence';\n  this.name = 'EmptyError';\n  return this;\n}\n\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, ish, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination?: Subscriber<any>\n): Subscription;\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | void {\n  if (destination.closed) {\n    return;\n  }\n  return subscribeTo(result)(destination);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  /**\n   * Internal\n   */\n  __isAsync: boolean;  // tslint:disable-line\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param isAsync When true, deliver events asynchronously.\n   *\n   */\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T) { super.next(value); }\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param generatorOrNext When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification\n   * from this emitter.\n   * @param complete When supplied, a custom handler for a completion\n   * notification from this emitter.\n   */\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): Subscription {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n\n    if (generatorOrNext instanceof Subscription) {\n      generatorOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {injectTemplateRef as render3InjectTemplateRef} from '../render3/view_engine_compatibility';\nimport {noop} from '../util/noop';\n\nimport {ElementRef} from './element_ref';\nimport {EmbeddedViewRef} from './view_ref';\n\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the `ViewContainerRef`\n * method `createEmbeddedView()`.\n *\n * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`\n * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view\n * is injected into the constructor of the directive,\n * using the `TemplateRef` token.\n *\n * You can also use a `Query` to find a `TemplateRef` associated with\n * a component or a directive.\n *\n * @see `ViewContainerRef`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport abstract class TemplateRef<C> {\n  /**\n   * The anchor element in the parent view for this embedded view.\n   *\n   * The data-binding and injection contexts of embedded views created from this `TemplateRef`\n   * inherit from the contexts of this location.\n   *\n   * Typically new embedded views are attached to the view container of this location, but in\n   * advanced use-cases, the view can be attached to a different container while keeping the\n   * data-binding and injection context from the original location.\n   *\n   */\n  // TODO(i): rename to anchor or location\n  abstract get elementRef(): ElementRef;\n\n  /**\n   * Creates a view object and attaches it to the view container of the parent view.\n   * @param context The context for the new view, inherited from the anchor element.\n   * @returns The new view object.\n   */\n  abstract createEmbeddedView(context: C): EmbeddedViewRef<C>;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__:\n      () => TemplateRef<any>| null = () => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef)\n}\n\nexport const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = render3InjectTemplateRef;\nconst SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_TEMPLATE_REF_FACTORY: typeof render3InjectTemplateRef =\n    SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__;\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPromise} from '../src/util/lang';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\n\n\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  // TODO(issue/24571): remove '!'.\n  private resolve !: Function;\n  // TODO(issue/24571): remove '!'.\n  private reject !: Function;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private appInits: (() => any)[]) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as{done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable()\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_DEBUG_CONTEXT, ERROR_LOGGER, ERROR_ORIGINAL_ERROR, ERROR_TYPE} from './util/errors';\nimport {DebugContext} from './view';\n\nexport function getType(error: Error): Function {\n  return (error as any)[ERROR_TYPE];\n}\n\nexport function getDebugContext(error: Error): DebugContext {\n  return (error as any)[ERROR_DEBUG_CONTEXT];\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n\nexport function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void {\n  return (error as any)[ERROR_LOGGER] || defaultErrorLogger;\n}\n\n\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  (<any>console.error)(...values);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getDebugContext, getErrorLogger, getOriginalError} from './errors';\n\n\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    const context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n\n  /** @internal */\n  _findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n\n  /** @internal */\n  _findOriginalError(error: Error): any {\n    let e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from '../util/global';\n\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * @publicApi\n */\nexport interface WtfScopeFn { (arg0?: any, arg1?: any): any; }\n\ninterface WTF {\n  trace: Trace;\n}\n\ninterface Trace {\n  events: Events;\n  leaveScope(scope: Scope, returnValue: any): any /** TODO #9100 */;\n  beginTimeRange(rangeType: string, action: string): Range;\n  endTimeRange(range: Range): any /** TODO #9100 */;\n}\n\nexport interface Range {}\n\ninterface Events {\n  createScope(signature: string, flags: any): Scope;\n}\n\nexport interface Scope { (...args: any[] /** TODO #9100 */): any; }\n\nlet trace: Trace;\nlet events: Events;\n\nexport function detectWTF(): boolean {\n  const wtf: WTF = (global as any /** TODO #9100 */)['wtf'];\n  if (wtf) {\n    trace = wtf['trace'];\n    if (trace) {\n      events = trace['events'];\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function createScope(signature: string, flags: any = null): any {\n  return events.createScope(signature, flags);\n}\n\nexport function leave<T>(scope: Scope): void;\nexport function leave<T>(scope: Scope, returnValue?: T): T;\nexport function leave<T>(scope: Scope, returnValue?: any): any {\n  trace.leaveScope(scope, returnValue);\n  return returnValue;\n}\n\nexport function startTimeRange(rangeType: string, action: string): Range {\n  return trace.beginTimeRange(rangeType, action);\n}\n\nexport function endTimeRange(range: Range): void {\n  trace.endTimeRange(range);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/interface/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {Type} from '../interface/type';\nimport {ViewEncapsulation} from '../metadata';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\nconst Compiler_compileModuleSync__PRE_R3__: <T>(moduleType: Type<T>) => NgModuleFactory<T> =\n    _throwError as any;\nexport const Compiler_compileModuleSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    NgModuleFactory<T> = function<T>(moduleType: Type<T>): NgModuleFactory<T> {\n  return new NgModuleFactoryR3(moduleType);\n};\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n\nconst Compiler_compileModuleAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = _throwError as any;\nexport const Compiler_compileModuleAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = function<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = function<T>(moduleType: Type<T>):\n        ModuleWithComponentFactories<T> {\n  return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\nconst Compiler_compileModuleAndAllComponentsSync =\n    Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = function<T>(moduleType: Type<T>):\n        Promise<ModuleWithComponentFactories<T>> {\n  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAndAllComponentsAsync =\n    Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync: <T>(moduleType: Type<T>) => NgModuleFactory<T> = Compiler_compileModuleSync;\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync:\n      <T>(moduleType: Type<T>) => Promise<NgModuleFactory<T>> = Compiler_compileModuleAsync;\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync: <T>(moduleType: Type<T>) => ModuleWithComponentFactories<T> =\n      Compiler_compileModuleAndAllComponentsSync;\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync: <T>(moduleType: Type<T>) =>\n      Promise<ModuleWithComponentFactories<T>> = Compiler_compileModuleAndAllComponentsAsync;\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined { return undefined; }\n}\n\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {WtfScopeFn, createScope, detectWTF, endTimeRange, leave, startTimeRange} from './wtf_impl';\n\nexport {WtfScopeFn} from './wtf_impl';\n\n\n/**\n * True if WTF is enabled.\n */\nexport const wtfEnabled = detectWTF();\n\nfunction noopScope(arg0?: any, arg1?: any): any {\n  return null;\n}\n\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nexport const wtfCreateScope: (signature: string, flags?: any) => WtfScopeFn =\n    wtfEnabled ? createScope : (signature: string, flags?: any) => noopScope;\n\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nexport const wtfLeave: <T>(scope: any, returnValue?: T) => T =\n    wtfEnabled ? leave : (s: any, r?: any) => r;\n\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nexport const wtfStartTimeRange: (rangeType: string, action: string) => any =\n    wtfEnabled ? startTimeRange : (rangeType: string, action: string) => null;\n\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nexport const wtfEndTimeRange: (range: any) => void = wtfEnabled ? endTimeRange : (r: any) => null;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst promise: Promise<any> = Promise.resolve(0);\n\ndeclare const Zone: any;\n\nexport function scheduleMicroTask(fn: Function) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => { fn && fn.apply(null, null); });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '../event_emitter';\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n  constructor({enableLongStackTrace = false}) {\n    if (typeof Zone == 'undefined') {\n      throw new Error(`In this configuration Angular requires Zone.js`);\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    if ((Zone as any)['wtfZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['wtfZoneSpec']);\n    }\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any));\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  static isInAngularZone(): boolean { return Zone.current.get('isAngularZone') === true; }\n\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs) as T;\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs) as T;\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs) as T;\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn) as T;\n  }\n}\n\nfunction noop() {}\nconst EMPTY_PAYLOAD = {};\n\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n\n  hasPendingMicrotasks: boolean;\n  hasPendingMacrotasks: boolean;\n  isStable: boolean;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{'isAngularZone': true},\n    onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n                   applyArgs: any): any => {\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n\n    onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,\n               applyThis: any, applyArgs: any[], source: string): any => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone.hasPendingMicrotasks = hasTaskState.microTask;\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run(fn: () => any): any { return fn(); }\n\n  runGuarded(fn: () => any): any { return fn(); }\n\n  runOutsideAngular(fn: () => any): any { return fn(); }\n\n  runTask<T>(fn: () => any): any { return fn(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Observer, Subscription, merge} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, StaticProvider} from './di';\nimport {ErrorHandler} from './error_handler';\nimport {Type} from './interface/type';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {assertNgModuleType} from './render3/assert';\nimport {NgModuleFactory as R3NgModuleFactory} from './render3/ng_module_ref';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {isDevMode} from './util/is_dev_mode';\nimport {isPromise} from './util/lang';\nimport {scheduleMicroTask} from './util/microtask';\nimport {stringify} from './util/stringify';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _platform: PlatformRef;\n\nlet compileNgModuleFactory:\n    <M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>) =>\n        Promise<NgModuleFactory<M>> = compileNgModuleFactory__PRE_R3__;\n\nfunction compileNgModuleFactory__PRE_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  const compilerFactory: CompilerFactory = injector.get(CompilerFactory);\n  const compiler = compilerFactory.createCompiler([options]);\n  return compiler.compileModuleAsync(moduleType);\n}\n\nexport function compileNgModuleFactory__POST_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n  return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n    name: string, providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) =>\n    PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true});\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZone = getNgZone(ngZoneOption);\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n      ngZone !.runOutsideAngular(\n          () => ngZone !.onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone !, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>, compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType)\n        .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  onDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() { return this._destroyed; }\n}\n\nfunction getNgZone(ngZoneOption?: NgZone | 'zone.js' | 'noop'): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n        new NgZone({enableLongStackTrace: isDevMode()});\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T | T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _enforceNoNewChanges: boolean = false;\n  private _stable = true;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable !: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as{isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the componentType's\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * componentType's selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory) !;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const scope = ApplicationRef._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  private _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this.components, componentRef);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() { return this._views.length; }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util/microtask';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]}|null = null;\n\n  constructor(private _ngZone: NgZone) {\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n          typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop() !;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number { return this._pendingCount; }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable()\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() { _testabilityGetter.addToWindow(this); }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) { this._applications.delete(token); }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() { this._applications.clear(); }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null { return this._applications.get(elem) || null; }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability = new _NoopGetTestability();\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput } from '../types';\n\nexport function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap<T, T>(identity as (value: T, index: number) => ObservableInput<T>, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n * ### Converts an array to an Observable\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10 20 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n * ```javascript\n * import { take } from 'rxjs/operators';\n * import { from } from 'rxjs/observable/from';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3 6 12 24 48 96 192 384 768 1536\n * ```\n *\n * ---\n *\n * ### with async scheduler\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n * import { async } from 'rxjs/scheduler/async';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, async);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start end 10 20 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n * @see {@link fromPromise}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {injectViewContainerRef as render3InjectViewContainerRef} from '../render3/view_engine_compatibility';\nimport {noop} from '../util/noop';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {TemplateRef} from './template_ref';\nimport {EmbeddedViewRef, ViewRef} from './view_ref';\n\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the `createComponent()` method), and *embedded views*\n * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see `ComponentRef`\n * @see `EmbeddedViewRef`\n *\n * @publicApi\n */\nexport abstract class ViewContainerRef {\n  /**\n   * Anchor element that specifies the location of this container in the containing view.\n   * Each view container can have only one anchor element, and each anchor element\n   * can have only a single view container.\n   *\n   * Root elements of views attached to this container become siblings of the anchor element in\n   * the rendered view.\n   *\n   * Access the `ViewContainerRef` of an element by placing a `Directive` injected\n   * with `ViewContainerRef` on the element, or use a `ViewChild` query.\n   *\n   * <!-- TODO: rename to anchorElement -->\n   */\n  abstract get element(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this view container.\n   */\n  abstract get injector(): Injector;\n\n  /** @deprecated No replacement */\n  abstract get parentInjector(): Injector;\n\n  /**\n   * Destroys all views in this container.\n   */\n  abstract clear(): void;\n\n  /**\n   * Retrieves a view from this container.\n   * @param index The 0-based index of the view to retrieve.\n   * @returns The `ViewRef` instance, or null if the index is out of range.\n   */\n  abstract get(index: number): ViewRef|null;\n\n  /**\n   * Reports how many views are currently attached to this container.\n   * @returns The number of views.\n   */\n  abstract get length(): number;\n\n  /**\n   * Instantiates an embedded view and inserts it\n   * into this container.\n   * @param templateRef The HTML template that defines the view.\n   * @param index The 0-based index at which to insert the new view into this container.\n   * If not specified, appends the new view as the last entry.\n   *\n   * @returns The `ViewRef` instance for the newly created view.\n   */\n  abstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number):\n      EmbeddedViewRef<C>;\n\n  /**\n   * Instantiates a single component and inserts its host view into this container.\n   *\n   * @param componentFactory The factory to use.\n   * @param index The index at which to insert the new component's host view into this container.\n   * If not specified, appends the new view as the last entry.\n   * @param injector The injector to use as the parent for the new component.\n   * @param projectableNodes\n   * @param ngModule\n   *\n   * @returns The new component instance, containing the host view.\n   *\n   */\n  abstract createComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\n\n  /**\n   * Inserts a view into this container.\n   * @param viewRef The view to insert.\n   * @param index The 0-based index at which to insert the view.\n   * If not specified, appends the new view as the last entry.\n   * @returns The inserted `ViewRef` instance.\n   *\n   */\n  abstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\n  /**\n   * Moves a view to a new location in this container.\n   * @param viewRef The view to move.\n   * @param index The 0-based index of the new location.\n   * @returns The moved `ViewRef` instance.\n   */\n  abstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\n  /**\n   * Returns the index of a view within the current container.\n   * @param viewRef The view to query.\n   * @returns The 0-based index of the view's position in this container,\n   * or `-1` if this container doesn't contain the view.\n   */\n  abstract indexOf(viewRef: ViewRef): number;\n\n  /**\n   * Destroys a view attached to this container\n   * @param index The 0-based index of the view to destroy.\n   * If not specified, the last view in the container is removed.\n   */\n  abstract remove(index?: number): void;\n\n  /**\n   * Detaches a view from this container without destroying it.\n   * Use along with `insert()` to move a view within the current container.\n   * @param index The 0-based index of the view to detach.\n   * If not specified, the last view in the container is detached.\n   */\n  abstract detach(index?: number): ViewRef|null;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__:\n      () => ViewContainerRef = () => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef)\n}\n\nexport const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = render3InjectViewContainerRef;\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;\nconst SWITCH_VIEW_CONTAINER_REF_FACTORY: typeof render3InjectViewContainerRef =\n    SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {injectChangeDetectorRef as render3InjectChangeDetectorRef} from '../render3/view_engine_compatibility';\n\n/**\n * Base class for Angular Views, provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use `markForCheck()` with `CheckOnce` strategy\n *\n * The following example sets the `OnPush` change-detection strategy for a component\n * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check\n * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the `live` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport abstract class ChangeDetectorRef {\n  /**\n   * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n   * change detection strategy, explicitly marks the view as changed so that\n   * it can be checked again.\n   *\n   * Components are normally marked as dirty (in need of rerendering) when inputs\n   * have changed or events have fired in the view. Call this method to ensure that\n   * a component is checked even if these triggers have not occured.\n   *\n   * <!-- TODO: Add a link to a chapter on OnPush components -->\n   *\n   */\n  abstract markForCheck(): void;\n\n  /**\n   * Detaches this view from the change-detection tree.\n   * A detached view is  not checked until it is reattached.\n   * Use in combination with `detectChanges()` to implement local change detection checks.\n   *\n   * Detached views are not checked during change detection runs until they are\n   * re-attached, even if they are marked as dirty.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detach(): void;\n\n  /**\n   * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n   * detach}\n   * to implement local change detection checks.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n   *\n   */\n  abstract detectChanges(): void;\n\n  /**\n   * Checks the change detector and its children, and throws if any changes are detected.\n   *\n   * Use in development mode to verify that running change detection doesn't introduce\n   * other changes.\n   */\n  abstract checkNoChanges(): void;\n\n  /**\n   * Re-attaches the previously detached view to the change detection tree.\n   * Views are attached to the tree by default.\n   *\n   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n   *\n   */\n  abstract reattach(): void;\n\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static __NG_ELEMENT_ID__: () => ChangeDetectorRef = () => SWITCH_CHANGE_DETECTOR_REF_FACTORY();\n}\n\n\n\nexport const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = render3InjectChangeDetectorRef;\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (...args: any[]): any => {};\nconst SWITCH_CHANGE_DETECTOR_REF_FACTORY: typeof render3InjectChangeDetectorRef =\n    SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di';\nimport {getComponent, getContext, getInjectionTokens, getInjector, getListeners, getLocalRefs, isBrowserEvents, loadLContext, loadLContextFromNode} from '../render3/discovery_utils';\nimport {TNode} from '../render3/interfaces/node';\nimport {StylingIndex} from '../render3/interfaces/styling';\nimport {TVIEW} from '../render3/interfaces/view';\nimport {getProp, getValue, isClassBasedValue} from '../render3/styling/class_and_style_bindings';\nimport {getStylingContext} from '../render3/styling/util';\nimport {assertDomNode} from '../util/assert';\nimport {DebugContext} from '../view/index';\n\nexport class EventListener {\n  constructor(public name: string, public callback: Function) {}\n}\n\n/**\n * @publicApi\n */\nexport interface DebugNode {\n  readonly listeners: EventListener[];\n  readonly parent: DebugElement|null;\n  readonly nativeNode: any;\n  readonly injector: Injector;\n  readonly componentInstance: any;\n  readonly context: any;\n  readonly references: {[key: string]: any};\n  readonly providerTokens: any[];\n}\nexport class DebugNode__PRE_R3__ {\n  readonly listeners: EventListener[] = [];\n  readonly parent: DebugElement|null = null;\n  readonly nativeNode: any;\n  private readonly _debugContext: DebugContext;\n\n  constructor(nativeNode: any, parent: DebugNode|null, _debugContext: DebugContext) {\n    this._debugContext = _debugContext;\n    this.nativeNode = nativeNode;\n    if (parent && parent instanceof DebugElement__PRE_R3__) {\n      parent.addChild(this);\n    }\n  }\n\n  get injector(): Injector { return this._debugContext.injector; }\n\n  get componentInstance(): any { return this._debugContext.component; }\n\n  get context(): any { return this._debugContext.context; }\n\n  get references(): {[key: string]: any} { return this._debugContext.references; }\n\n  get providerTokens(): any[] { return this._debugContext.providerTokens; }\n}\n\n/**\n * @publicApi\n */\nexport interface DebugElement extends DebugNode {\n  readonly name: string;\n  readonly properties: {[key: string]: any};\n  readonly attributes: {[key: string]: string | null};\n  readonly classes: {[key: string]: boolean};\n  readonly styles: {[key: string]: string | null};\n  readonly childNodes: DebugNode[];\n  readonly nativeElement: any;\n  readonly children: DebugElement[];\n\n  query(predicate: Predicate<DebugElement>): DebugElement;\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[];\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n  triggerEventHandler(eventName: string, eventObj: any): void;\n}\nexport class DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ implements DebugElement {\n  readonly name !: string;\n  readonly properties: {[key: string]: any} = {};\n  readonly attributes: {[key: string]: string | null} = {};\n  readonly classes: {[key: string]: boolean} = {};\n  readonly styles: {[key: string]: string | null} = {};\n  readonly childNodes: DebugNode[] = [];\n  readonly nativeElement: any;\n\n  constructor(nativeNode: any, parent: any, _debugContext: DebugContext) {\n    super(nativeNode, parent, _debugContext);\n    this.nativeElement = nativeNode;\n  }\n\n  addChild(child: DebugNode) {\n    if (child) {\n      this.childNodes.push(child);\n      (child as{parent: DebugNode}).parent = this;\n    }\n  }\n\n  removeChild(child: DebugNode) {\n    const childIndex = this.childNodes.indexOf(child);\n    if (childIndex !== -1) {\n      (child as{parent: DebugNode | null}).parent = null;\n      this.childNodes.splice(childIndex, 1);\n    }\n  }\n\n  insertChildrenAfter(child: DebugNode, newChildren: DebugNode[]) {\n    const siblingIndex = this.childNodes.indexOf(child);\n    if (siblingIndex !== -1) {\n      this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);\n      newChildren.forEach(c => {\n        if (c.parent) {\n          (c.parent as DebugElement__PRE_R3__).removeChild(c);\n        }\n        (child as{parent: DebugNode}).parent = this;\n      });\n    }\n  }\n\n  insertBefore(refChild: DebugNode, newChild: DebugNode): void {\n    const refIndex = this.childNodes.indexOf(refChild);\n    if (refIndex === -1) {\n      this.addChild(newChild);\n    } else {\n      if (newChild.parent) {\n        (newChild.parent as DebugElement__PRE_R3__).removeChild(newChild);\n      }\n      (newChild as{parent: DebugNode}).parent = this;\n      this.childNodes.splice(refIndex, 0, newChild);\n    }\n  }\n\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryElementChildren(this, predicate, matches);\n    return matches;\n  }\n\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryNodeChildren(this, predicate, matches);\n    return matches;\n  }\n\n  get children(): DebugElement[] {\n    return this\n        .childNodes  //\n        .filter((node) => node instanceof DebugElement__PRE_R3__) as DebugElement[];\n  }\n\n  triggerEventHandler(eventName: string, eventObj: any) {\n    this.listeners.forEach((listener) => {\n      if (listener.name == eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\n/**\n * @publicApi\n */\nexport function asNativeElements(debugEls: DebugElement[]): any {\n  return debugEls.map((el) => el.nativeElement);\n}\n\nfunction _queryElementChildren(\n    element: DebugElement, predicate: Predicate<DebugElement>, matches: DebugElement[]) {\n  element.childNodes.forEach(node => {\n    if (node instanceof DebugElement__PRE_R3__) {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      _queryElementChildren(node, predicate, matches);\n    }\n  });\n}\n\nfunction _queryNodeChildren(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[]) {\n  if (parentNode instanceof DebugElement__PRE_R3__) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement__PRE_R3__) {\n        _queryNodeChildren(node, predicate, matches);\n      }\n    });\n  }\n}\n\nfunction notImplemented(): Error {\n  throw new Error('Missing proper ivy implementation.');\n}\n\nclass DebugNode__POST_R3__ implements DebugNode {\n  readonly nativeNode: Node;\n\n  constructor(nativeNode: Node) { this.nativeNode = nativeNode; }\n\n  get parent(): DebugElement|null {\n    const parent = this.nativeNode.parentNode as Element;\n    return parent ? new DebugElement__POST_R3__(parent) : null;\n  }\n\n  get injector(): Injector { return getInjector(this.nativeNode); }\n\n  get componentInstance(): any {\n    const nativeElement = this.nativeNode;\n    return nativeElement && getComponent(nativeElement as Element);\n  }\n  get context(): any { return getContext(this.nativeNode as Element); }\n\n  get listeners(): EventListener[] {\n    return getListeners(this.nativeNode as Element).filter(isBrowserEvents);\n  }\n\n  get references(): {[key: string]: any;} { return getLocalRefs(this.nativeNode); }\n\n  get providerTokens(): any[] { return getInjectionTokens(this.nativeNode as Element); }\n}\n\nclass DebugElement__POST_R3__ extends DebugNode__POST_R3__ implements DebugElement {\n  constructor(nativeNode: Element) {\n    ngDevMode && assertDomNode(nativeNode);\n    super(nativeNode);\n  }\n\n  get nativeElement(): Element|null {\n    return this.nativeNode.nodeType == Node.ELEMENT_NODE ? this.nativeNode as Element : null;\n  }\n\n  get name(): string { return this.nativeElement !.nodeName; }\n\n  get properties(): {[key: string]: any;} {\n    const context = loadLContext(this.nativeNode) !;\n    const lView = context.lView;\n    const tView = lView[TVIEW];\n    const tNode = tView.data[context.nodeIndex] as TNode;\n    const properties = {};\n    // TODO: https://angular-team.atlassian.net/browse/FW-681\n    // Missing implementation here...\n    return properties;\n  }\n\n  get attributes(): {[key: string]: string | null;} {\n    const attributes: {[key: string]: string | null;} = {};\n    const element = this.nativeElement;\n    if (element) {\n      const eAttrs = element.attributes;\n      for (let i = 0; i < eAttrs.length; i++) {\n        const attr = eAttrs[i];\n        attributes[attr.name] = attr.value;\n      }\n    }\n    return attributes;\n  }\n\n  get classes(): {[key: string]: boolean;} {\n    const classes: {[key: string]: boolean;} = {};\n    const element = this.nativeElement;\n    if (element) {\n      const lContext = loadLContextFromNode(element);\n      const lNode = lContext.lView[lContext.nodeIndex];\n      const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n      if (stylingContext) {\n        for (let i = StylingIndex.SingleStylesStartPosition; i < lNode.length;\n             i += StylingIndex.Size) {\n          if (isClassBasedValue(lNode, i)) {\n            const className = getProp(lNode, i);\n            const value = getValue(lNode, i);\n            if (typeof value == 'boolean') {\n              // we want to ignore `null` since those don't overwrite the values.\n              classes[className] = value;\n            }\n          }\n        }\n      } else {\n        // Fallback, just read DOM.\n        const eClasses = element.classList;\n        for (let i = 0; i < eClasses.length; i++) {\n          classes[eClasses[i]] = true;\n        }\n      }\n    }\n    return classes;\n  }\n\n  get styles(): {[key: string]: string | null;} {\n    const styles: {[key: string]: string | null;} = {};\n    const element = this.nativeElement;\n    if (element) {\n      const lContext = loadLContextFromNode(element);\n      const lNode = lContext.lView[lContext.nodeIndex];\n      const stylingContext = getStylingContext(lContext.nodeIndex, lContext.lView);\n      if (stylingContext) {\n        for (let i = StylingIndex.SingleStylesStartPosition; i < lNode.length;\n             i += StylingIndex.Size) {\n          if (!isClassBasedValue(lNode, i)) {\n            const styleName = getProp(lNode, i);\n            const value = getValue(lNode, i) as string | null;\n            if (value !== null) {\n              // we want to ignore `null` since those don't overwrite the values.\n              styles[styleName] = value;\n            }\n          }\n        }\n      } else {\n        // Fallback, just read DOM.\n        const eStyles = (element as HTMLElement).style;\n        for (let i = 0; i < eStyles.length; i++) {\n          const name = eStyles.item(i);\n          styles[name] = eStyles.getPropertyValue(name);\n        }\n      }\n    }\n    return styles;\n  }\n\n  get childNodes(): DebugNode[] {\n    const childNodes = this.nativeNode.childNodes;\n    const children: DebugNode[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n\n  get children(): DebugElement[] {\n    const nativeElement = this.nativeElement;\n    if (!nativeElement) return [];\n    const childNodes = nativeElement.children;\n    const children: DebugElement[] = [];\n    for (let i = 0; i < childNodes.length; i++) {\n      const element = childNodes[i];\n      children.push(getDebugNode__POST_R3__(element));\n    }\n    return children;\n  }\n\n  query(predicate: Predicate<DebugElement>): DebugElement {\n    const results = this.queryAll(predicate);\n    return results[0] || null;\n  }\n\n  queryAll(predicate: Predicate<DebugElement>): DebugElement[] {\n    const matches: DebugElement[] = [];\n    _queryNodeChildrenR3(this, predicate, matches, true);\n    return matches;\n  }\n\n  queryAllNodes(predicate: Predicate<DebugNode>): DebugNode[] {\n    const matches: DebugNode[] = [];\n    _queryNodeChildrenR3(this, predicate, matches, false);\n    return matches;\n  }\n\n  triggerEventHandler(eventName: string, eventObj: any): void {\n    this.listeners.forEach((listener) => {\n      if (listener.name === eventName) {\n        listener.callback(eventObj);\n      }\n    });\n  }\n}\n\nfunction _queryNodeChildrenR3(\n    parentNode: DebugNode, predicate: Predicate<DebugNode>, matches: DebugNode[],\n    elementsOnly: boolean) {\n  if (parentNode instanceof DebugElement__POST_R3__) {\n    parentNode.childNodes.forEach(node => {\n      if (predicate(node)) {\n        matches.push(node);\n      }\n      if (node instanceof DebugElement__POST_R3__) {\n        if (elementsOnly ? node.nativeElement : true) {\n          _queryNodeChildrenR3(node, predicate, matches, elementsOnly);\n        }\n      }\n    });\n  }\n}\n\n\n// Need to keep the nodes in a global Map so that multiple angular apps are supported.\nconst _nativeNodeToDebugNode = new Map<any, DebugNode>();\n\nfunction getDebugNode__PRE_R3__(nativeNode: any): DebugNode|null {\n  return _nativeNodeToDebugNode.get(nativeNode) || null;\n}\n\nexport function getDebugNode__POST_R3__(nativeNode: Element): DebugElement__POST_R3__;\nexport function getDebugNode__POST_R3__(nativeNode: Node): DebugNode__POST_R3__;\nexport function getDebugNode__POST_R3__(nativeNode: null): null;\nexport function getDebugNode__POST_R3__(nativeNode: any): DebugNode|null {\n  if (nativeNode instanceof Node) {\n    return nativeNode.nodeType == Node.ELEMENT_NODE ?\n        new DebugElement__POST_R3__(nativeNode as Element) :\n        new DebugNode__POST_R3__(nativeNode);\n  }\n  return null;\n}\n\n/**\n * @publicApi\n */\nexport const getDebugNode: (nativeNode: any) => DebugNode | null = getDebugNode__PRE_R3__;\n\nexport function getAllDebugNodes(): DebugNode[] {\n  return Array.from(_nativeNodeToDebugNode.values());\n}\n\nexport function indexDebugNode(node: DebugNode) {\n  _nativeNodeToDebugNode.set(node.nativeNode, node);\n}\n\nexport function removeDebugNodeFromIndex(node: DebugNode) {\n  _nativeNodeToDebugNode.delete(node.nativeNode);\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @publicApi\n */\nexport interface Predicate<T> { (value: T): boolean; }\n\n/**\n * @publicApi\n */\nexport const DebugNode: {new (...args: any[]): DebugNode} = DebugNode__PRE_R3__ as any;\n\n/**\n * @publicApi\n */\nexport const DebugElement: {new (...args: any[]): DebugElement} = DebugElement__PRE_R3__ as any;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical} from '../../util/comparison';\nimport {stringify} from '../../util/stringify';\nimport {isListLikeIterable, iterateListLike} from '../change_detection_util';\n\nimport {IterableChangeRecord, IterableChanges, IterableDiffer, IterableDifferFactory, NgIterable, TrackByFunction} from './iterable_differs';\n\n\nexport class DefaultIterableDifferFactory implements IterableDifferFactory {\n  constructor() {}\n  supports(obj: Object|null|undefined): boolean { return isListLikeIterable(obj); }\n\n  create<V>(trackByFn?: TrackByFunction<V>): DefaultIterableDiffer<V> {\n    return new DefaultIterableDiffer<V>(trackByFn);\n  }\n}\n\nconst trackByIdentity = (index: number, item: any) => item;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n  public readonly length: number = 0;\n  // TODO(issue/24571): remove '!'.\n  public readonly collection !: V[] | Iterable<V>| null;\n  // Keeps track of the used records at any point in time (during & across `_check()` calls)\n  private _linkedRecords: _DuplicateMap<V>|null = null;\n  // Keeps track of the removed records at any point in time during `_check()` calls.\n  private _unlinkedRecords: _DuplicateMap<V>|null = null;\n  private _previousItHead: IterableChangeRecord_<V>|null = null;\n  private _itHead: IterableChangeRecord_<V>|null = null;\n  private _itTail: IterableChangeRecord_<V>|null = null;\n  private _additionsHead: IterableChangeRecord_<V>|null = null;\n  private _additionsTail: IterableChangeRecord_<V>|null = null;\n  private _movesHead: IterableChangeRecord_<V>|null = null;\n  private _movesTail: IterableChangeRecord_<V>|null = null;\n  private _removalsHead: IterableChangeRecord_<V>|null = null;\n  private _removalsTail: IterableChangeRecord_<V>|null = null;\n  // Keeps track of records where custom track by is the same, but item identity has changed\n  private _identityChangesHead: IterableChangeRecord_<V>|null = null;\n  private _identityChangesTail: IterableChangeRecord_<V>|null = null;\n  private _trackByFn: TrackByFunction<V>;\n\n  constructor(trackByFn?: TrackByFunction<V>) { this._trackByFn = trackByFn || trackByIdentity; }\n\n  forEachItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._itHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachOperation(\n      fn: (item: IterableChangeRecord<V>, previousIndex: number|null, currentIndex: number|null) =>\n          void) {\n    let nextIt = this._itHead;\n    let nextRemove = this._removalsHead;\n    let addRemoveOffset = 0;\n    let moveOffsets: number[]|null = null;\n    while (nextIt || nextRemove) {\n      // Figure out which is the next record to process\n      // Order: remove, add, move\n      const record: IterableChangeRecord<V> = !nextRemove ||\n              nextIt &&\n                  nextIt.currentIndex ! <\n                      getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n          nextIt ! :\n          nextRemove;\n      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n      const currentIndex = record.currentIndex;\n\n      // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n      if (record === nextRemove) {\n        addRemoveOffset--;\n        nextRemove = nextRemove._nextRemoved;\n      } else {\n        nextIt = nextIt !._next;\n        if (record.previousIndex == null) {\n          addRemoveOffset++;\n        } else {\n          // INVARIANT:  currentIndex < previousIndex\n          if (!moveOffsets) moveOffsets = [];\n          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n          const localCurrentIndex = currentIndex ! - addRemoveOffset;\n          if (localMovePreviousIndex != localCurrentIndex) {\n            for (let i = 0; i < localMovePreviousIndex; i++) {\n              const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n              const index = offset + i;\n              if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                moveOffsets[i] = offset + 1;\n              }\n            }\n            const previousIndex = record.previousIndex;\n            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n          }\n        }\n      }\n\n      if (adjPreviousIndex !== currentIndex) {\n        fn(record, adjPreviousIndex, currentIndex);\n      }\n    }\n  }\n\n  forEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._movesHead; record !== null; record = record._nextMoved) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  forEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void) {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n      fn(record);\n    }\n  }\n\n  diff(collection: NgIterable<V>): DefaultIterableDiffer<V>|null {\n    if (collection == null) collection = [];\n    if (!isListLikeIterable(collection)) {\n      throw new Error(\n          `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);\n    }\n\n    if (this.check(collection)) {\n      return this;\n    } else {\n      return null;\n    }\n  }\n\n  onDestroy() {}\n\n  check(collection: NgIterable<V>): boolean {\n    this._reset();\n\n    let record: IterableChangeRecord_<V>|null = this._itHead;\n    let mayBeDirty: boolean = false;\n    let index: number;\n    let item: V;\n    let itemTrackBy: any;\n    if (Array.isArray(collection)) {\n      (this as{length: number}).length = collection.length;\n\n      for (let index = 0; index < this.length; index++) {\n        item = collection[index];\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n\n        record = record._next;\n      }\n    } else {\n      index = 0;\n      iterateListLike(collection, (item: V) => {\n        itemTrackBy = this._trackByFn(index, item);\n        if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n          record = this._mismatch(record, item, itemTrackBy, index);\n          mayBeDirty = true;\n        } else {\n          if (mayBeDirty) {\n            // TODO(misko): can we limit this to duplicates only?\n            record = this._verifyReinsertion(record, item, itemTrackBy, index);\n          }\n          if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n        }\n        record = record._next;\n        index++;\n      });\n      (this as{length: number}).length = index;\n    }\n\n    this._truncate(record);\n    (this as{collection: V[] | Iterable<V>}).collection = collection;\n    return this.isDirty;\n  }\n\n  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity\n   * changes.\n   */\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._movesHead !== null ||\n        this._removalsHead !== null || this._identityChangesHead !== null;\n  }\n\n  /**\n   * Reset the state of the change objects to show no changes. This means set previousKey to\n   * currentKey, and clear all of the queues (additions, moves, removals).\n   * Set the previousIndexes of moved and added items to their currentIndexes\n   * Reset the list of additions, moves and removals\n   *\n   * @internal\n   */\n  _reset() {\n    if (this.isDirty) {\n      let record: IterableChangeRecord_<V>|null;\n      let nextRecord: IterableChangeRecord_<V>|null;\n\n      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n        record.previousIndex = record.currentIndex;\n      }\n      this._additionsHead = this._additionsTail = null;\n\n      for (record = this._movesHead; record !== null; record = nextRecord) {\n        record.previousIndex = record.currentIndex;\n        nextRecord = record._nextMoved;\n      }\n      this._movesHead = this._movesTail = null;\n      this._removalsHead = this._removalsTail = null;\n      this._identityChangesHead = this._identityChangesTail = null;\n\n      // TODO(vicb): when assert gets supported\n      // assert(!this.isDirty);\n    }\n  }\n\n  /**\n   * This is the core function which handles differences between collections.\n   *\n   * - `record` is the record which we saw at this position last time. If null then it is a new\n   *   item.\n   * - `item` is the current item in the collection\n   * - `index` is the position of the item in the collection\n   *\n   * @internal\n   */\n  _mismatch(record: IterableChangeRecord_<V>|null, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    // The previous record after which we will append the current one.\n    let previousRecord: IterableChangeRecord_<V>|null;\n\n    if (record === null) {\n      previousRecord = this._itTail;\n    } else {\n      previousRecord = record._prev;\n      // Remove the record from the collection since we know it does not match the item.\n      this._remove(record);\n    }\n\n    // Attempt to see if we have seen the item before.\n    record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n    if (record !== null) {\n      // We have seen this before, we need to move it forward in the collection.\n      // But first we need to check if identity changed, so we can update in view if necessary\n      if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n      this._moveAfter(record, previousRecord, index);\n    } else {\n      // Never seen it, check evicted list.\n      record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n      if (record !== null) {\n        // It is an item which we have evicted earlier: reinsert it back into the list.\n        // But first we need to check if identity changed, so we can update in view if necessary\n        if (!looseIdentical(record.item, item)) this._addIdentityChange(record, item);\n\n        this._reinsertAfter(record, previousRecord, index);\n      } else {\n        // It is a new item: add it.\n        record =\n            this._addAfter(new IterableChangeRecord_<V>(item, itemTrackBy), previousRecord, index);\n      }\n    }\n    return record;\n  }\n\n  /**\n   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n   *\n   * Use case: `[a, a]` => `[b, a, a]`\n   *\n   * If we did not have this check then the insertion of `b` would:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) leave `a` at index `1` as is. <-- this is wrong!\n   *   3) reinsert `a` at index 2. <-- this is wrong!\n   *\n   * The correct behavior is:\n   *   1) evict first `a`\n   *   2) insert `b` at `0` index.\n   *   3) reinsert `a` at index 1.\n   *   3) move `a` at from `1` to `2`.\n   *\n   *\n   * Double check that we have not evicted a duplicate item. We need to check if the item type may\n   * have already been removed:\n   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n   * at the end.\n   *\n   * @internal\n   */\n  _verifyReinsertion(record: IterableChangeRecord_<V>, item: V, itemTrackBy: any, index: number):\n      IterableChangeRecord_<V> {\n    let reinsertRecord: IterableChangeRecord_<V>|null =\n        this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);\n    if (reinsertRecord !== null) {\n      record = this._reinsertAfter(reinsertRecord, record._prev !, index);\n    } else if (record.currentIndex != index) {\n      record.currentIndex = index;\n      this._addToMoves(record, index);\n    }\n    return record;\n  }\n\n  /**\n   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection\n   *\n   * - `record` The first excess {@link IterableChangeRecord_}.\n   *\n   * @internal\n   */\n  _truncate(record: IterableChangeRecord_<V>|null) {\n    // Anything after that needs to be removed;\n    while (record !== null) {\n      const nextRecord: IterableChangeRecord_<V>|null = record._next;\n      this._addToRemovals(this._unlink(record));\n      record = nextRecord;\n    }\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.clear();\n    }\n\n    if (this._additionsTail !== null) {\n      this._additionsTail._nextAdded = null;\n    }\n    if (this._movesTail !== null) {\n      this._movesTail._nextMoved = null;\n    }\n    if (this._itTail !== null) {\n      this._itTail._next = null;\n    }\n    if (this._removalsTail !== null) {\n      this._removalsTail._nextRemoved = null;\n    }\n    if (this._identityChangesTail !== null) {\n      this._identityChangesTail._nextIdentityChange = null;\n    }\n  }\n\n  /** @internal */\n  _reinsertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords !== null) {\n      this._unlinkedRecords.remove(record);\n    }\n    const prev = record._prevRemoved;\n    const next = record._nextRemoved;\n\n    if (prev === null) {\n      this._removalsHead = next;\n    } else {\n      prev._nextRemoved = next;\n    }\n    if (next === null) {\n      this._removalsTail = prev;\n    } else {\n      next._prevRemoved = prev;\n    }\n\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _moveAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._unlink(record);\n    this._insertAfter(record, prevRecord, index);\n    this._addToMoves(record, index);\n    return record;\n  }\n\n  /** @internal */\n  _addAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    this._insertAfter(record, prevRecord, index);\n\n    if (this._additionsTail === null) {\n      // TODO(vicb):\n      // assert(this._additionsHead === null);\n      this._additionsTail = this._additionsHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_additionsTail._nextAdded === null);\n      // assert(record._nextAdded === null);\n      this._additionsTail = this._additionsTail._nextAdded = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _insertAfter(\n      record: IterableChangeRecord_<V>, prevRecord: IterableChangeRecord_<V>|null,\n      index: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record != prevRecord);\n    // assert(record._next === null);\n    // assert(record._prev === null);\n\n    const next: IterableChangeRecord_<V>|null =\n        prevRecord === null ? this._itHead : prevRecord._next;\n    // TODO(vicb):\n    // assert(next != record);\n    // assert(prevRecord != record);\n    record._next = next;\n    record._prev = prevRecord;\n    if (next === null) {\n      this._itTail = record;\n    } else {\n      next._prev = record;\n    }\n    if (prevRecord === null) {\n      this._itHead = record;\n    } else {\n      prevRecord._next = record;\n    }\n\n    if (this._linkedRecords === null) {\n      this._linkedRecords = new _DuplicateMap<V>();\n    }\n    this._linkedRecords.put(record);\n\n    record.currentIndex = index;\n    return record;\n  }\n\n  /** @internal */\n  _remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    return this._addToRemovals(this._unlink(record));\n  }\n\n  /** @internal */\n  _unlink(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._linkedRecords !== null) {\n      this._linkedRecords.remove(record);\n    }\n\n    const prev = record._prev;\n    const next = record._next;\n\n    // TODO(vicb):\n    // assert((record._prev = null) === null);\n    // assert((record._next = null) === null);\n\n    if (prev === null) {\n      this._itHead = next;\n    } else {\n      prev._next = next;\n    }\n    if (next === null) {\n      this._itTail = prev;\n    } else {\n      next._prev = prev;\n    }\n\n    return record;\n  }\n\n  /** @internal */\n  _addToMoves(record: IterableChangeRecord_<V>, toIndex: number): IterableChangeRecord_<V> {\n    // TODO(vicb):\n    // assert(record._nextMoved === null);\n\n    if (record.previousIndex === toIndex) {\n      return record;\n    }\n\n    if (this._movesTail === null) {\n      // TODO(vicb):\n      // assert(_movesHead === null);\n      this._movesTail = this._movesHead = record;\n    } else {\n      // TODO(vicb):\n      // assert(_movesTail._nextMoved === null);\n      this._movesTail = this._movesTail._nextMoved = record;\n    }\n\n    return record;\n  }\n\n  private _addToRemovals(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    if (this._unlinkedRecords === null) {\n      this._unlinkedRecords = new _DuplicateMap<V>();\n    }\n    this._unlinkedRecords.put(record);\n    record.currentIndex = null;\n    record._nextRemoved = null;\n\n    if (this._removalsTail === null) {\n      // TODO(vicb):\n      // assert(_removalsHead === null);\n      this._removalsTail = this._removalsHead = record;\n      record._prevRemoved = null;\n    } else {\n      // TODO(vicb):\n      // assert(_removalsTail._nextRemoved === null);\n      // assert(record._nextRemoved === null);\n      record._prevRemoved = this._removalsTail;\n      this._removalsTail = this._removalsTail._nextRemoved = record;\n    }\n    return record;\n  }\n\n  /** @internal */\n  _addIdentityChange(record: IterableChangeRecord_<V>, item: V) {\n    record.item = item;\n    if (this._identityChangesTail === null) {\n      this._identityChangesTail = this._identityChangesHead = record;\n    } else {\n      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n    }\n    return record;\n  }\n}\n\nexport class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n  currentIndex: number|null = null;\n  previousIndex: number|null = null;\n\n  /** @internal */\n  _nextPrevious: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prev: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _next: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextDup: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _prevRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextRemoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextAdded: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextMoved: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _nextIdentityChange: IterableChangeRecord_<V>|null = null;\n\n\n  constructor(public item: V, public trackById: any) {}\n}\n\n// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item\nclass _DuplicateItemRecordList<V> {\n  /** @internal */\n  _head: IterableChangeRecord_<V>|null = null;\n  /** @internal */\n  _tail: IterableChangeRecord_<V>|null = null;\n\n  /**\n   * Append the record to the list of duplicates.\n   *\n   * Note: by design all records in the list of duplicates hold the same value in record.item.\n   */\n  add(record: IterableChangeRecord_<V>): void {\n    if (this._head === null) {\n      this._head = this._tail = record;\n      record._nextDup = null;\n      record._prevDup = null;\n    } else {\n      // TODO(vicb):\n      // assert(record.item ==  _head.item ||\n      //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n      this._tail !._nextDup = record;\n      record._prevDup = this._tail;\n      record._nextDup = null;\n      this._tail = record;\n    }\n  }\n\n  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and\n  // IterableChangeRecord_.currentIndex >= atOrAfterIndex\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    let record: IterableChangeRecord_<V>|null;\n    for (record = this._head; record !== null; record = record._nextDup) {\n      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex !) &&\n          looseIdentical(record.trackById, trackById)) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove one {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * Returns whether the list of duplicates is empty.\n   */\n  remove(record: IterableChangeRecord_<V>): boolean {\n    // TODO(vicb):\n    // assert(() {\n    //  // verify that the record being removed is in the list.\n    //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {\n    //    if (identical(cursor, record)) return true;\n    //  }\n    //  return false;\n    //});\n\n    const prev: IterableChangeRecord_<V>|null = record._prevDup;\n    const next: IterableChangeRecord_<V>|null = record._nextDup;\n    if (prev === null) {\n      this._head = next;\n    } else {\n      prev._nextDup = next;\n    }\n    if (next === null) {\n      this._tail = prev;\n    } else {\n      next._prevDup = prev;\n    }\n    return this._head === null;\n  }\n}\n\nclass _DuplicateMap<V> {\n  map = new Map<any, _DuplicateItemRecordList<V>>();\n\n  put(record: IterableChangeRecord_<V>) {\n    const key = record.trackById;\n\n    let duplicates = this.map.get(key);\n    if (!duplicates) {\n      duplicates = new _DuplicateItemRecordList<V>();\n      this.map.set(key, duplicates);\n    }\n    duplicates.add(record);\n  }\n\n  /**\n   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we\n   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.\n   *\n   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n   * have any more `a`s needs to return the second `a`.\n   */\n  get(trackById: any, atOrAfterIndex: number|null): IterableChangeRecord_<V>|null {\n    const key = trackById;\n    const recordList = this.map.get(key);\n    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;\n  }\n\n  /**\n   * Removes a {@link IterableChangeRecord_} from the list of duplicates.\n   *\n   * The list of duplicates also is removed from the map if it gets empty.\n   */\n  remove(record: IterableChangeRecord_<V>): IterableChangeRecord_<V> {\n    const key = record.trackById;\n    const recordList: _DuplicateItemRecordList<V> = this.map.get(key) !;\n    // Remove the list of duplicates when it gets empty\n    if (recordList.remove(record)) {\n      this.map.delete(key);\n    }\n    return record;\n  }\n\n  get isEmpty(): boolean { return this.map.size === 0; }\n\n  clear() { this.map.clear(); }\n}\n\nfunction getPreviousIndex(\n    item: any, addRemoveOffset: number, moveOffsets: number[] | null): number {\n  const previousIndex = item.previousIndex;\n  if (previousIndex === null) return previousIndex;\n  let moveOffset = 0;\n  if (moveOffsets && previousIndex < moveOffsets.length) {\n    moveOffset = moveOffsets[previousIndex];\n  }\n  return previousIndex + addRemoveOffset + moveOffset;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {looseIdentical} from '../../util/comparison';\nimport {stringify} from '../../util/stringify';\nimport {isJsObject} from '../change_detection_util';\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory} from './keyvalue_differs';\n\n\nexport class DefaultKeyValueDifferFactory<K, V> implements KeyValueDifferFactory {\n  constructor() {}\n  supports(obj: any): boolean { return obj instanceof Map || isJsObject(obj); }\n\n  create<K, V>(): KeyValueDiffer<K, V> { return new DefaultKeyValueDiffer<K, V>(); }\n}\n\nexport class DefaultKeyValueDiffer<K, V> implements KeyValueDiffer<K, V>, KeyValueChanges<K, V> {\n  private _records = new Map<K, KeyValueChangeRecord_<K, V>>();\n  private _mapHead: KeyValueChangeRecord_<K, V>|null = null;\n  // _appendAfter is used in the check loop\n  private _appendAfter: KeyValueChangeRecord_<K, V>|null = null;\n  private _previousMapHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _changesTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _additionsTail: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsHead: KeyValueChangeRecord_<K, V>|null = null;\n  private _removalsTail: KeyValueChangeRecord_<K, V>|null = null;\n\n  get isDirty(): boolean {\n    return this._additionsHead !== null || this._changesHead !== null ||\n        this._removalsHead !== null;\n  }\n\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._mapHead; record !== null; record = record._next) {\n      fn(record);\n    }\n  }\n\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n      fn(record);\n    }\n  }\n\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._changesHead; record !== null; record = record._nextChanged) {\n      fn(record);\n    }\n  }\n\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n      fn(record);\n    }\n  }\n\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void) {\n    let record: KeyValueChangeRecord_<K, V>|null;\n    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n      fn(record);\n    }\n  }\n\n  diff(map?: Map<any, any>|{[k: string]: any}|null): any {\n    if (!map) {\n      map = new Map();\n    } else if (!(map instanceof Map || isJsObject(map))) {\n      throw new Error(\n          `Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);\n    }\n\n    return this.check(map) ? this : null;\n  }\n\n  onDestroy() {}\n\n  /**\n   * Check the current state of the map vs the previous.\n   * The algorithm is optimised for when the keys do no change.\n   */\n  check(map: Map<any, any>|{[k: string]: any}): boolean {\n    this._reset();\n\n    let insertBefore = this._mapHead;\n    this._appendAfter = null;\n\n    this._forEach(map, (value: any, key: any) => {\n      if (insertBefore && insertBefore.key === key) {\n        this._maybeAddToChanges(insertBefore, value);\n        this._appendAfter = insertBefore;\n        insertBefore = insertBefore._next;\n      } else {\n        const record = this._getOrCreateRecordForKey(key, value);\n        insertBefore = this._insertBeforeOrAppend(insertBefore, record);\n      }\n    });\n\n    // Items remaining at the end of the list have been deleted\n    if (insertBefore) {\n      if (insertBefore._prev) {\n        insertBefore._prev._next = null;\n      }\n\n      this._removalsHead = insertBefore;\n\n      for (let record: KeyValueChangeRecord_<K, V>|null = insertBefore; record !== null;\n           record = record._nextRemoved) {\n        if (record === this._mapHead) {\n          this._mapHead = null;\n        }\n        this._records.delete(record.key);\n        record._nextRemoved = record._next;\n        record.previousValue = record.currentValue;\n        record.currentValue = null;\n        record._prev = null;\n        record._next = null;\n      }\n    }\n\n    // Make sure tails have no next records from previous runs\n    if (this._changesTail) this._changesTail._nextChanged = null;\n    if (this._additionsTail) this._additionsTail._nextAdded = null;\n\n    return this.isDirty;\n  }\n\n  /**\n   * Inserts a record before `before` or append at the end of the list when `before` is null.\n   *\n   * Notes:\n   * - This method appends at `this._appendAfter`,\n   * - This method updates `this._appendAfter`,\n   * - The return value is the new value for the insertion pointer.\n   */\n  private _insertBeforeOrAppend(\n      before: KeyValueChangeRecord_<K, V>|null,\n      record: KeyValueChangeRecord_<K, V>): KeyValueChangeRecord_<K, V>|null {\n    if (before) {\n      const prev = before._prev;\n      record._next = before;\n      record._prev = prev;\n      before._prev = record;\n      if (prev) {\n        prev._next = record;\n      }\n      if (before === this._mapHead) {\n        this._mapHead = record;\n      }\n\n      this._appendAfter = before;\n      return before;\n    }\n\n    if (this._appendAfter) {\n      this._appendAfter._next = record;\n      record._prev = this._appendAfter;\n    } else {\n      this._mapHead = record;\n    }\n\n    this._appendAfter = record;\n    return null;\n  }\n\n  private _getOrCreateRecordForKey(key: K, value: V): KeyValueChangeRecord_<K, V> {\n    if (this._records.has(key)) {\n      const record = this._records.get(key) !;\n      this._maybeAddToChanges(record, value);\n      const prev = record._prev;\n      const next = record._next;\n      if (prev) {\n        prev._next = next;\n      }\n      if (next) {\n        next._prev = prev;\n      }\n      record._next = null;\n      record._prev = null;\n\n      return record;\n    }\n\n    const record = new KeyValueChangeRecord_<K, V>(key);\n    this._records.set(key, record);\n    record.currentValue = value;\n    this._addToAdditions(record);\n    return record;\n  }\n\n  /** @internal */\n  _reset() {\n    if (this.isDirty) {\n      let record: KeyValueChangeRecord_<K, V>|null;\n      // let `_previousMapHead` contain the state of the map before the changes\n      this._previousMapHead = this._mapHead;\n      for (record = this._previousMapHead; record !== null; record = record._next) {\n        record._nextPrevious = record._next;\n      }\n\n      // Update `record.previousValue` with the value of the item before the changes\n      // We need to update all changed items (that's those which have been added and changed)\n      for (record = this._changesHead; record !== null; record = record._nextChanged) {\n        record.previousValue = record.currentValue;\n      }\n      for (record = this._additionsHead; record != null; record = record._nextAdded) {\n        record.previousValue = record.currentValue;\n      }\n\n      this._changesHead = this._changesTail = null;\n      this._additionsHead = this._additionsTail = null;\n      this._removalsHead = null;\n    }\n  }\n\n  // Add the record or a given key to the list of changes only when the value has actually changed\n  private _maybeAddToChanges(record: KeyValueChangeRecord_<K, V>, newValue: any): void {\n    if (!looseIdentical(newValue, record.currentValue)) {\n      record.previousValue = record.currentValue;\n      record.currentValue = newValue;\n      this._addToChanges(record);\n    }\n  }\n\n  private _addToAdditions(record: KeyValueChangeRecord_<K, V>) {\n    if (this._additionsHead === null) {\n      this._additionsHead = this._additionsTail = record;\n    } else {\n      this._additionsTail !._nextAdded = record;\n      this._additionsTail = record;\n    }\n  }\n\n  private _addToChanges(record: KeyValueChangeRecord_<K, V>) {\n    if (this._changesHead === null) {\n      this._changesHead = this._changesTail = record;\n    } else {\n      this._changesTail !._nextChanged = record;\n      this._changesTail = record;\n    }\n  }\n\n  /** @internal */\n  private _forEach<K, V>(obj: Map<K, V>|{[k: string]: V}, fn: (v: V, k: any) => void) {\n    if (obj instanceof Map) {\n      obj.forEach(fn);\n    } else {\n      Object.keys(obj).forEach(k => fn(obj[k], k));\n    }\n  }\n}\n\nclass KeyValueChangeRecord_<K, V> implements KeyValueChangeRecord<K, V> {\n  previousValue: V|null = null;\n  currentValue: V|null = null;\n\n  /** @internal */\n  _nextPrevious: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _next: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _prev: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextAdded: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextRemoved: KeyValueChangeRecord_<K, V>|null = null;\n  /** @internal */\n  _nextChanged: KeyValueChangeRecord_<K, V>|null = null;\n\n  constructor(public key: K) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {defineInjectable} from '../../di/interface/defs';\nimport {StaticProvider} from '../../di/interface/provider';\nimport {Optional, SkipSelf} from '../../di/metadata';\nimport {DefaultIterableDifferFactory} from '../differs/default_iterable_differ';\n\n\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport type NgIterable<T> = Array<T>| Iterable<T>;\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport interface IterableDiffer<V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: NgIterable<V>): IterableChanges<V>|null;\n}\n\n/**\n * An object describing the changes in the `Iterable` collection since last time\n * `IterableDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface IterableChanges<V> {\n  /**\n   * Iterate over all changes. `IterableChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /**\n   * Iterate over a set of operations which when applied to the original `Iterable` will produce the\n   * new `Iterable`.\n   *\n   * NOTE: These are not necessarily the actual operations which were applied to the original\n   * `Iterable`, rather these are a set of computed operations which may not be the same as the\n   * ones applied.\n   *\n   * @param record A change which needs to be applied\n   * @param previousIndex The `IterableChangeRecord#previousIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `previousIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   * @param currentIndex The `IterableChangeRecord#currentIndex` of the `record` refers to the\n   *        original `Iterable` location, where as `currentIndex` refers to the transient location\n   *        of the item, after applying the operations up to this point.\n   */\n  forEachOperation(\n      fn:\n          (record: IterableChangeRecord<V>, previousIndex: number|null,\n           currentIndex: number|null) => void): void;\n\n  /**\n   * Iterate over changes in the order of original `Iterable` showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all added items. */\n  forEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all moved items. */\n  forEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all removed items. */\n  forEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\n  /** Iterate over all items which had their identity (as computed by the `TrackByFunction`)\n   * changed. */\n  forEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface IterableChangeRecord<V> {\n  /** Current index of the item in `Iterable` or null if removed. */\n  readonly currentIndex: number|null;\n\n  /** Previous index of the item in `Iterable` or null if added. */\n  readonly previousIndex: number|null;\n\n  /** The item. */\n  readonly item: V;\n\n  /** Track by identity as computed by the `TrackByFunction`. */\n  readonly trackById: any;\n}\n\n/**\n * @deprecated v4.0.0 - Use IterableChangeRecord instead.\n * @publicApi\n */\nexport interface CollectionChangeRecord<V> extends IterableChangeRecord<V> {}\n\n/**\n * An optional function passed into {@link NgForOf} that defines how to track\n * items in an iterable (e.g. fby index or id)\n *\n * @publicApi\n */\nexport interface TrackByFunction<T> { (index: number, item: T): any; }\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport interface IterableDifferFactory {\n  supports(objects: any): boolean;\n  create<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport class IterableDiffers {\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new IterableDiffers([new DefaultIterableDifferFactory()])\n  });\n\n  /**\n   * @deprecated v4.0.0 - Should be private\n   */\n  factories: IterableDifferFactory[];\n  constructor(factories: IterableDifferFactory[]) { this.factories = factories; }\n\n  static create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers {\n    if (parent != null) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n\n    return new IterableDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n   * inherited {@link IterableDiffers} instance with the provided factories and return a new\n   * {@link IterableDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link IterableDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     IterableDiffers.extend([new ImmutableListDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend(factories: IterableDifferFactory[]): StaticProvider {\n    return {\n      provide: IterableDiffers,\n      useFactory: (parent: IterableDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n          // to\n          // bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend IterableDiffers without a parent injector');\n        }\n        return IterableDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(iterable: any): IterableDifferFactory {\n    const factory = this.factories.find(f => f.supports(iterable));\n    if (factory != null) {\n      return factory;\n    } else {\n      throw new Error(\n          `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);\n    }\n  }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, defineInjectable} from '../../di';\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>|null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>|null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()])\n  });\n\n  /**\n   * @deprecated v4.0.0 - Should be private.\n   */\n  factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) { this.factories = factories; }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nimport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nimport {IterableDifferFactory, IterableDiffers} from './differs/iterable_differs';\nimport {KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\n\nexport {WrappedValue, devModeEqual} from './change_detection_util';\nexport {ChangeDetectorRef} from './change_detector_ref';\nexport {ChangeDetectionStrategy, ChangeDetectorStatus, isDefaultChangeDetectionStrategy} from './constants';\nexport {DefaultIterableDifferFactory} from './differs/default_iterable_differ';\nexport {DefaultIterableDiffer} from './differs/default_iterable_differ';\nexport {DefaultKeyValueDifferFactory} from './differs/default_keyvalue_differ';\nexport {\n  CollectionChangeRecord,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDifferFactory,\n  IterableDiffers,\n  NgIterable,\n  TrackByFunction\n} from\n'./differs/iterable_differs';\nexport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDifferFactory, KeyValueDiffers} from './differs/keyvalue_differs';\nexport {PipeTransform} from './pipe_transform';\nexport {SimpleChange, SimpleChanges} from '../interface/simple_change';\n\n\n\n/**\n * Structural diffing for `Object`s and `Map`s.\n */\nconst keyValDiff: KeyValueDifferFactory[] = [new DefaultKeyValueDifferFactory()];\n\n/**\n * Structural diffing for `Iterable` types such as `Array`s.\n */\nconst iterableDiff: IterableDifferFactory[] = [new DefaultIterableDifferFactory()];\n\nexport const defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\nexport const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformRef, createPlatformFactory} from './application_ref';\nimport {PLATFORM_ID} from './application_tokens';\nimport {Console} from './console';\nimport {Injector, StaticProvider} from './di';\nimport {TestabilityRegistry} from './testability/testability';\n\nconst _CORE_PLATFORM_PROVIDERS: StaticProvider[] = [\n  // Set a default platform name for platforms that don't set it explicitly.\n  {provide: PLATFORM_ID, useValue: 'unknown'},\n  {provide: PlatformRef, deps: [Injector]},\n  {provide: TestabilityRegistry, deps: []},\n  {provide: Console, deps: []},\n];\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n#setting-up-locale) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const LOCALE_ID = new InjectionToken<string>('LocaleId');\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (`xtb`,\n * `xlf` or `xlf2`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS = new InjectionToken<string>('Translations');\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: `xtb`,\n * `xlf` or `xlf2`.\n *\n * See the [i18n guide](guide/i18n#merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * ```typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * ```\n *\n * @publicApi\n */\nexport const TRANSLATIONS_FORMAT = new InjectionToken<string>('TranslationsFormat');\n\n/**\n * Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n#missing-translation) for more information.\n *\n * @usageNotes\n * ### Example\n * ```typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * ```\n *\n * @publicApi\n */\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus} from './application_init';\nimport {ApplicationRef} from './application_ref';\nimport {APP_ID_RANDOM_PROVIDER} from './application_tokens';\nimport {IterableDiffers, KeyValueDiffers, defaultIterableDiffers, defaultKeyValueDiffers} from './change_detection/change_detection';\nimport {Console} from './console';\nimport {Injector, StaticProvider} from './di';\nimport {Inject, Optional, SkipSelf} from './di/metadata';\nimport {ErrorHandler} from './error_handler';\nimport {LOCALE_ID} from './i18n/tokens';\nimport {ComponentFactoryResolver} from './linker';\nimport {Compiler} from './linker/compiler';\nimport {NgModule} from './metadata';\nimport {SCHEDULER} from './render3/component_ref';\nimport {NgZone} from './zone';\n\nexport function _iterableDiffersFactory() {\n  return defaultIterableDiffers;\n}\n\nexport function _keyValueDiffersFactory() {\n  return defaultKeyValueDiffers;\n}\n\nexport function _localeFactory(locale?: string): string {\n  return locale || 'en-US';\n}\n\n/**\n * A built-in [dependency injection token](guide/glossary#di-token)\n * that is used to configure the root injector for bootstrapping.\n */\nexport const APPLICATION_MODULE_PROVIDERS: StaticProvider[] = [\n  {\n    provide: ApplicationRef,\n    useClass: ApplicationRef,\n    deps:\n        [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]\n  },\n  {provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory},\n  {\n    provide: ApplicationInitStatus,\n    useClass: ApplicationInitStatus,\n    deps: [[new Optional(), APP_INITIALIZER]]\n  },\n  {provide: Compiler, useClass: Compiler, deps: []},\n  APP_ID_RANDOM_PROVIDER,\n  {provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: []},\n  {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: []},\n  {\n    provide: LOCALE_ID,\n    useFactory: _localeFactory,\n    deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n  },\n];\n\n/**\n * Schedule work at next available slot.\n *\n * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped\n * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.\n * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.\n *\n * @param ngZone NgZone to use for scheduling.\n */\nexport function zoneSchedulerFactory(ngZone: NgZone): (fn: () => void) => void {\n  let queue: (() => void)[] = [];\n  ngZone.onStable.subscribe(() => {\n    while (queue.length) {\n      queue.pop() !();\n    }\n  });\n  return function(fn: () => void) { queue.push(fn); };\n}\n\n/**\n * Configures the root injector for an app with\n * providers of `@angular/core` dependencies that `ApplicationRef` needs\n * to bootstrap components.\n *\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * @publicApi\n */\n@NgModule({providers: APPLICATION_MODULE_PROVIDERS})\nexport class ApplicationModule {\n  // Inject ApplicationRef to make it eager...\n  constructor(appRef: ApplicationRef) {}\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * @publicApi\n */\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener { (event: LocationChangeEvent): any; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n\nconst u = undefined;\n\nfunction plural(n: number): number {\n  let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 && v === 0) return 1;\n  return 5;\n}\n\nexport default [\n  'en', [['a', 'p'], ['AM', 'PM'], u], [['AM', 'PM'], u, u],\n  [\n    ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n    ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n    ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n  ],\n  u,\n  [\n    ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n    ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n    [\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n      'October', 'November', 'December'\n    ]\n  ],\n  u, [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']], 0, [6, 0],\n  ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],\n  ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'], ['{1}, {0}', u, '{1} \\'at\\' {0}', u],\n  ['.', ',', ';', '%', '+', '-', 'E', 'Ã', 'â°', 'â', 'NaN', ':'],\n  ['#,##0.###', '#,##0%', 'Â¤#,##0.00', '#E0'], '$', 'US Dollar', {}, plural\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @publicApi\n */\nexport const LOCALE_DATA: {[localeId: string]: any} = {};\n\n/**\n * Register global data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale data.\n *\n * @publicApi\n */\n// The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1\nexport function registerLocaleData(data: any, localeId?: string | any, extraData?: any): void {\n  if (typeof localeId !== 'string') {\n    extraData = localeId;\n    localeId = data[LocaleDataIndex.LocaleId];\n  }\n\n  localeId = localeId.toLowerCase().replace(/_/g, '-');\n\n  LOCALE_DATA[localeId] = data;\n\n  if (extraData) {\n    LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;\n  }\n}\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport const enum LocaleDataIndex {\n  LocaleId = 0,\n  DayPeriodsFormat,\n  DayPeriodsStandalone,\n  DaysFormat,\n  DaysStandalone,\n  MonthsFormat,\n  MonthsStandalone,\n  Eras,\n  FirstDayOfWeek,\n  WeekendRange,\n  DateFormat,\n  TimeFormat,\n  DateTimeFormat,\n  NumberSymbols,\n  NumberFormats,\n  CurrencySymbol,\n  CurrencyName,\n  Currencies,\n  PluralCase,\n  ExtraData\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport const enum ExtraLocaleDataIndex {\n  ExtraDayPeriodFormats = 0,\n  ExtraDayPeriodStandalone,\n  ExtraDayPeriodsRules\n}\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport const enum CurrencyIndex {Symbol = 0, SymbolNarrow, NbOfDigits}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// THIS CODE IS GENERATED - DO NOT MODIFY\n// See angular/tools/gulp-tasks/cldr/extract.js\n\nexport type CurrenciesSymbols = [string] | [string | undefined, string];\n\n/** @internal */\nexport const CURRENCIES_EN:\n    {[code: string]: CurrenciesSymbols | [string | undefined, string | undefined, number]} = {\n      'ADP': [undefined, undefined, 0],\n      'AFN': [undefined, undefined, 0],\n      'ALL': [undefined, undefined, 0],\n      'AMD': [undefined, undefined, 0],\n      'AOA': [undefined, 'Kz'],\n      'ARS': [undefined, '$'],\n      'AUD': ['A$', '$'],\n      'BAM': [undefined, 'KM'],\n      'BBD': [undefined, '$'],\n      'BDT': [undefined, 'à§³'],\n      'BHD': [undefined, undefined, 3],\n      'BIF': [undefined, undefined, 0],\n      'BMD': [undefined, '$'],\n      'BND': [undefined, '$'],\n      'BOB': [undefined, 'Bs'],\n      'BRL': ['R$'],\n      'BSD': [undefined, '$'],\n      'BWP': [undefined, 'P'],\n      'BYN': [undefined, 'Ñ.', 2],\n      'BYR': [undefined, undefined, 0],\n      'BZD': [undefined, '$'],\n      'CAD': ['CA$', '$', 2],\n      'CHF': [undefined, undefined, 2],\n      'CLF': [undefined, undefined, 4],\n      'CLP': [undefined, '$', 0],\n      'CNY': ['CNÂ¥', 'Â¥'],\n      'COP': [undefined, '$', 0],\n      'CRC': [undefined, 'â¡', 2],\n      'CUC': [undefined, '$'],\n      'CUP': [undefined, '$'],\n      'CZK': [undefined, 'KÄ', 2],\n      'DJF': [undefined, undefined, 0],\n      'DKK': [undefined, 'kr', 2],\n      'DOP': [undefined, '$'],\n      'EGP': [undefined, 'EÂ£'],\n      'ESP': [undefined, 'â§', 0],\n      'EUR': ['â¬'],\n      'FJD': [undefined, '$'],\n      'FKP': [undefined, 'Â£'],\n      'GBP': ['Â£'],\n      'GEL': [undefined, 'â¾'],\n      'GIP': [undefined, 'Â£'],\n      'GNF': [undefined, 'FG', 0],\n      'GTQ': [undefined, 'Q'],\n      'GYD': [undefined, '$', 0],\n      'HKD': ['HK$', '$'],\n      'HNL': [undefined, 'L'],\n      'HRK': [undefined, 'kn'],\n      'HUF': [undefined, 'Ft', 2],\n      'IDR': [undefined, 'Rp', 0],\n      'ILS': ['âª'],\n      'INR': ['â¹'],\n      'IQD': [undefined, undefined, 0],\n      'IRR': [undefined, undefined, 0],\n      'ISK': [undefined, 'kr', 0],\n      'ITL': [undefined, undefined, 0],\n      'JMD': [undefined, '$'],\n      'JOD': [undefined, undefined, 3],\n      'JPY': ['Â¥', undefined, 0],\n      'KHR': [undefined, 'á'],\n      'KMF': [undefined, 'CF', 0],\n      'KPW': [undefined, 'â©', 0],\n      'KRW': ['â©', undefined, 0],\n      'KWD': [undefined, undefined, 3],\n      'KYD': [undefined, '$'],\n      'KZT': [undefined, 'â¸'],\n      'LAK': [undefined, 'â­', 0],\n      'LBP': [undefined, 'LÂ£', 0],\n      'LKR': [undefined, 'Rs'],\n      'LRD': [undefined, '$'],\n      'LTL': [undefined, 'Lt'],\n      'LUF': [undefined, undefined, 0],\n      'LVL': [undefined, 'Ls'],\n      'LYD': [undefined, undefined, 3],\n      'MGA': [undefined, 'Ar', 0],\n      'MGF': [undefined, undefined, 0],\n      'MMK': [undefined, 'K', 0],\n      'MNT': [undefined, 'â®', 0],\n      'MRO': [undefined, undefined, 0],\n      'MUR': [undefined, 'Rs', 0],\n      'MXN': ['MX$', '$'],\n      'MYR': [undefined, 'RM'],\n      'NAD': [undefined, '$'],\n      'NGN': [undefined, 'â¦'],\n      'NIO': [undefined, 'C$'],\n      'NOK': [undefined, 'kr', 2],\n      'NPR': [undefined, 'Rs'],\n      'NZD': ['NZ$', '$'],\n      'OMR': [undefined, undefined, 3],\n      'PHP': [undefined, 'â±'],\n      'PKR': [undefined, 'Rs', 0],\n      'PLN': [undefined, 'zÅ'],\n      'PYG': [undefined, 'â²', 0],\n      'RON': [undefined, 'lei'],\n      'RSD': [undefined, undefined, 0],\n      'RUB': [undefined, 'â½'],\n      'RUR': [undefined, 'Ñ.'],\n      'RWF': [undefined, 'RF', 0],\n      'SBD': [undefined, '$'],\n      'SEK': [undefined, 'kr', 2],\n      'SGD': [undefined, '$'],\n      'SHP': [undefined, 'Â£'],\n      'SLL': [undefined, undefined, 0],\n      'SOS': [undefined, undefined, 0],\n      'SRD': [undefined, '$'],\n      'SSP': [undefined, 'Â£'],\n      'STD': [undefined, undefined, 0],\n      'STN': [undefined, 'Db'],\n      'SYP': [undefined, 'Â£', 0],\n      'THB': [undefined, 'à¸¿'],\n      'TMM': [undefined, undefined, 0],\n      'TND': [undefined, undefined, 3],\n      'TOP': [undefined, 'T$'],\n      'TRL': [undefined, undefined, 0],\n      'TRY': [undefined, 'âº'],\n      'TTD': [undefined, '$'],\n      'TWD': ['NT$', '$', 2],\n      'TZS': [undefined, undefined, 0],\n      'UAH': [undefined, 'â´'],\n      'UGX': [undefined, undefined, 0],\n      'USD': ['$'],\n      'UYI': [undefined, undefined, 0],\n      'UYU': [undefined, '$'],\n      'UZS': [undefined, undefined, 0],\n      'VEF': [undefined, 'Bs'],\n      'VND': ['â«', undefined, 0],\n      'VUV': [undefined, undefined, 0],\n      'XAF': ['FCFA', undefined, 0],\n      'XCD': ['EC$', '$'],\n      'XOF': ['CFA', undefined, 0],\n      'XPF': ['CFPF', undefined, 0],\n      'YER': [undefined, undefined, 0],\n      'ZAR': [undefined, 'R'],\n      'ZMK': [undefined, undefined, 0],\n      'ZMW': [undefined, 'ZK'],\n      'ZWD': [undefined, undefined, 0]\n    };\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport localeEn from './locale_en';\nimport {LOCALE_DATA, LocaleDataIndex, ExtraLocaleDataIndex, CurrencyIndex} from './locale_data';\nimport {CURRENCIES_EN, CurrenciesSymbols} from './currencies';\n\n/**\n * The different format styles that can be used to represent numbers.\n * Used by the function {@link getLocaleNumberFormat}.\n *\n * @publicApi\n */\nexport enum NumberFormatStyle {\n  Decimal,\n  Percent,\n  Currency,\n  Scientific\n}\n\n/** @publicApi */\nexport enum Plural {\n  Zero = 0,\n  One = 1,\n  Two = 2,\n  Few = 3,\n  Many = 4,\n  Other = 5,\n}\n\n/**\n * Some languages use two different forms of strings (standalone and format) depending on the\n * context.\n * Typically the standalone version is the nominative form of the word, and the format version is in\n * the genitive.\n * See [the CLDR website](http://cldr.unicode.org/translation/date-time) for more information.\n *\n * @publicApi\n */\nexport enum FormStyle {\n  Format,\n  Standalone\n}\n\n/**\n * Multiple widths are available for translations: narrow (1 character), abbreviated (3 characters),\n * wide (full length), and short (2 characters, only for days).\n *\n * For example the day `Sunday` will be:\n * - Narrow: `S`\n * - Short: `Su`\n * - Abbreviated: `Sun`\n * - Wide: `Sunday`\n *\n * @publicApi\n */\nexport enum TranslationWidth {\n  Narrow,\n  Abbreviated,\n  Wide,\n  Short\n}\n\n/**\n * Multiple widths are available for formats: short (minimal amount of data), medium (small amount\n * of data), long (complete amount of data), full (complete amount of data and extra information).\n *\n * For example the date-time formats for the english locale will be:\n *  - `'short'`: `'M/d/yy, h:mm a'` (e.g. `6/15/15, 9:03 AM`)\n *  - `'medium'`: `'MMM d, y, h:mm:ss a'` (e.g. `Jun 15, 2015, 9:03:01 AM`)\n *  - `'long'`: `'MMMM d, y, h:mm:ss a z'` (e.g. `June 15, 2015 at 9:03:01 AM GMT+1`)\n *  - `'full'`: `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (e.g. `Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`)\n *\n * @publicApi\n */\nexport enum FormatWidth {\n  Short,\n  Medium,\n  Long,\n  Full\n}\n\n/**\n * Number symbol that can be used to replace placeholders in number patterns.\n * The placeholders are based on english values:\n *\n * | Name                   | Example for en-US | Meaning                                     |\n * |------------------------|-------------------|---------------------------------------------|\n * | decimal                | 2,345`.`67        | decimal separator                           |\n * | group                  | 2`,`345.67        | grouping separator, typically for thousands |\n * | plusSign               | `+`23             | the plus sign used with numbers             |\n * | minusSign              | `-`23             | the minus sign used with numbers            |\n * | percentSign            | 23.4`%`           | the percent sign (out of 100)               |\n * | perMille               | 234`â°`            | the permille sign (out of 1000)             |\n * | exponential            | 1.2`E`3           | used in computers for 1.2Ã10Â³.              |\n * | superscriptingExponent | 1.2`Ã`103         | human-readable format of exponential        |\n * | infinity               | `â`               | used in +â and -â.                          |\n * | nan                    | `NaN`             | \"not a number\".                             |\n * | timeSeparator          | 10`:`52           | symbol used between time units              |\n * | currencyDecimal        | $2,345`.`67       | decimal separator, fallback to \"decimal\"    |\n * | currencyGroup          | $2`,`345.67       | grouping separator, fallback to \"group\"     |\n *\n * @publicApi\n */\nexport enum NumberSymbol {\n  Decimal,\n  Group,\n  List,\n  PercentSign,\n  PlusSign,\n  MinusSign,\n  Exponential,\n  SuperscriptingExponent,\n  PerMille,\n  Infinity,\n  NaN,\n  TimeSeparator,\n  CurrencyDecimal,\n  CurrencyGroup\n}\n\n/**\n * The value for each day of the week, based on the en-US locale\n *\n * @publicApi\n */\nexport enum WeekDay {\n  Sunday = 0,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday\n}\n\n/**\n * The locale id for the chosen locale (e.g `en-GB`).\n *\n * @publicApi\n */\nexport function getLocaleId(locale: string): string {\n  return findLocaleData(locale)[LocaleDataIndex.LocaleId];\n}\n\n/**\n * Periods of the day (e.g. `[AM, PM]` for en-US).\n *\n * @publicApi\n */\nexport function getLocaleDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): [string, string] {\n  const data = findLocaleData(locale);\n  const amPmData = <[\n    string, string\n  ][][]>[data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]];\n  const amPm = getLastDefinedValue(amPmData, formStyle);\n  return getLastDefinedValue(amPm, width);\n}\n\n/**\n * Days of the week for the Gregorian calendar (e.g. `[Sunday, Monday, ... Saturday]` for en-US).\n *\n * @publicApi\n */\nexport function getLocaleDayNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  const daysData =\n      <string[][][]>[data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];\n  const days = getLastDefinedValue(daysData, formStyle);\n  return getLastDefinedValue(days, width);\n}\n\n/**\n * Months of the year for the Gregorian calendar (e.g. `[January, February, ...]` for en-US).\n *\n * @publicApi\n */\nexport function getLocaleMonthNames(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  const monthsData =\n      <string[][][]>[data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];\n  const months = getLastDefinedValue(monthsData, formStyle);\n  return getLastDefinedValue(months, width);\n}\n\n/**\n * Eras for the Gregorian calendar (e.g. AD/BC).\n *\n * @publicApi\n */\nexport function getLocaleEraNames(locale: string, width: TranslationWidth): [string, string] {\n  const data = findLocaleData(locale);\n  const erasData = <[string, string][]>data[LocaleDataIndex.Eras];\n  return getLastDefinedValue(erasData, width);\n}\n\n/**\n * First day of the week for this locale, based on english days (Sunday = 0, Monday = 1, ...).\n * For example in french the value would be 1 because the first day of the week is Monday.\n *\n * @publicApi\n */\nexport function getLocaleFirstDayOfWeek(locale: string): WeekDay {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.FirstDayOfWeek];\n}\n\n/**\n * Range of days in the week that represent the week-end for this locale, based on english days\n * (Sunday = 0, Monday = 1, ...).\n * For example in english the value would be [6,0] for Saturday to Sunday.\n *\n * @publicApi\n */\nexport function getLocaleWeekEndRange(locale: string): [WeekDay, WeekDay] {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.WeekendRange];\n}\n\n/**\n * Date format that depends on the locale.\n *\n * There are four basic date formats:\n * - `full` should contain long-weekday (EEEE), year (y), long-month (MMMM), day (d).\n *\n *  For example, English uses `EEEE, MMMM d, y`, corresponding to a date like\n *  \"Tuesday, September 14, 1999\".\n *\n * - `long` should contain year, long-month, day.\n *\n *  For example, `MMMM d, y`, corresponding to a date like \"September 14, 1999\".\n *\n * - `medium` should contain year, abbreviated-month (MMM), day.\n *\n *  For example, `MMM d, y`, corresponding to a date like \"Sep 14, 1999\".\n *  For languages that do not use abbreviated months, use the numeric month (MM/M). For example,\n *  `y/MM/dd`, corresponding to a date like \"1999/09/14\".\n *\n * - `short` should contain year, numeric-month (MM/M), and day.\n *\n *  For example, `M/d/yy`, corresponding to a date like \"9/14/99\".\n *\n * @publicApi\n */\nexport function getLocaleDateFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);\n}\n\n/**\n * Time format that depends on the locale.\n *\n * The standard formats include four basic time formats:\n * - `full` should contain hour (h/H), minute (mm), second (ss), and zone (zzzz).\n * - `long` should contain hour, minute, second, and zone (z)\n * - `medium` should contain hour, minute, second.\n * - `short` should contain hour, minute.\n *\n * Note: The patterns depend on whether the main country using your language uses 12-hour time or\n * not:\n * - For 12-hour time, use a pattern like `hh:mm a` using h to mean a 12-hour clock cycle running\n * 1 through 12 (midnight plus 1 minute is 12:01), or using K to mean a 12-hour clock cycle\n * running 0 through 11 (midnight plus 1 minute is 0:01).\n * - For 24-hour time, use a pattern like `HH:mm` using H to mean a 24-hour clock cycle running 0\n * through 23 (midnight plus 1 minute is 0:01), or using k to mean a 24-hour clock cycle running\n * 1 through 24 (midnight plus 1 minute is 24:01).\n *\n * @publicApi\n */\nexport function getLocaleTimeFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);\n}\n\n/**\n * Date-time format that depends on the locale.\n *\n * The date-time pattern shows how to combine separate patterns for date (represented by {1})\n * and time (represented by {0}) into a single pattern. It usually doesn't need to be changed.\n * What you want to pay attention to are:\n * - possibly removing a space for languages that don't use it, such as many East Asian languages\n * - possibly adding a comma, other punctuation, or a combining word\n *\n * For example:\n * - English uses `{1} 'at' {0}` or `{1}, {0}` (depending on date style), while Japanese uses\n *  `{1}{0}`.\n * - An English formatted date-time using the combining pattern `{1}, {0}` could be\n *  `Dec 10, 2010, 3:59:49 PM`. Notice the comma and space between the date portion and the time\n *  portion.\n *\n * There are four formats (`full`, `long`, `medium`, `short`); the determination of which to use\n * is normally based on the date style. For example, if the date has a full month and weekday\n * name, the full combining pattern will be used to combine that with a time. If the date has\n * numeric month, the short version of the combining pattern will be used to combine that with a\n * time. English uses `{1} 'at' {0}` for full and long styles, and `{1}, {0}` for medium and short\n * styles.\n *\n * @publicApi\n */\nexport function getLocaleDateTimeFormat(locale: string, width: FormatWidth): string {\n  const data = findLocaleData(locale);\n  const dateTimeFormatData = <string[]>data[LocaleDataIndex.DateTimeFormat];\n  return getLastDefinedValue(dateTimeFormatData, width);\n}\n\n/**\n * Number symbol that can be used to replace placeholders in number formats.\n * See {@link NumberSymbol} for more information.\n *\n * @publicApi\n */\nexport function getLocaleNumberSymbol(locale: string, symbol: NumberSymbol): string {\n  const data = findLocaleData(locale);\n  const res = data[LocaleDataIndex.NumberSymbols][symbol];\n  if (typeof res === 'undefined') {\n    if (symbol === NumberSymbol.CurrencyDecimal) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];\n    } else if (symbol === NumberSymbol.CurrencyGroup) {\n      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];\n    }\n  }\n  return res;\n}\n\n/**\n * Number format that depends on the locale.\n *\n * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`\n * when used to format the number 12345.678 could result in \"12'345,67\". That would happen if the\n * grouping separator for your language is an apostrophe, and the decimal separator is a comma.\n *\n * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders;\n * they stand for the decimal separator, and so on, and are NOT real characters.\n * You must NOT \"translate\" the placeholders; for example, don't change `.` to `,` even though in\n * your language the decimal point is written with a comma. The symbols should be replaced by the\n * local equivalents, using the Number Symbols for your language.\n *\n * Here are the special characters used in number patterns:\n *\n * | Symbol | Meaning |\n * |--------|---------|\n * | . | Replaced automatically by the character used for the decimal point. |\n * | , | Replaced by the \"grouping\" (thousands) separator. |\n * | 0 | Replaced by a digit (or zero if there aren't enough digits). |\n * | # | Replaced by a digit (or nothing if there aren't enough). |\n * | Â¤ | This will be replaced by a currency symbol, such as $ or USD. |\n * | % | This marks a percent format. The % symbol may change position, but must be retained. |\n * | E | This marks a scientific format. The E symbol may change position, but must be retained. |\n * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |\n *\n * You can find more information\n * [on the CLDR website](http://cldr.unicode.org/translation/number-patterns)\n *\n * @publicApi\n */\nexport function getLocaleNumberFormat(locale: string, type: NumberFormatStyle): string {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.NumberFormats][type];\n}\n\n/**\n * The symbol used to represent the currency for the main country using this locale (e.g. $ for\n * the locale en-US).\n * The symbol will be `null` if the main country cannot be determined.\n *\n * @publicApi\n */\nexport function getLocaleCurrencySymbol(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencySymbol] || null;\n}\n\n/**\n * The name of the currency for the main country using this locale (e.g. 'US Dollar' for the locale\n * en-US).\n * The name will be `null` if the main country cannot be determined.\n *\n * @publicApi\n */\nexport function getLocaleCurrencyName(locale: string): string|null {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.CurrencyName] || null;\n}\n\n/**\n * Returns the currency values for the locale\n */\nfunction getLocaleCurrencies(locale: string): {[code: string]: CurrenciesSymbols} {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.Currencies];\n}\n\n/**\n * The locale plural function used by ICU expressions to determine the plural case to use.\n * See {@link NgPlural} for more information.\n *\n * @publicApi\n */\nexport function getLocalePluralCase(locale: string): (value: number) => Plural {\n  const data = findLocaleData(locale);\n  return data[LocaleDataIndex.PluralCase];\n}\n\nfunction checkFullData(data: any) {\n  if (!data[LocaleDataIndex.ExtraData]) {\n    throw new Error(\n        `Missing extra locale data for the locale \"${data[LocaleDataIndex.LocaleId]}\". Use \"registerLocaleData\" to load new data. See the \"I18n guide\" on angular.io to know more.`);\n  }\n}\n\n/**\n * Rules used to determine which day period to use (See `dayPeriods` below).\n * The rules can either be an array or a single value. If it's an array, consider it as \"from\"\n * and \"to\". If it's a single value then it means that the period is only valid at this exact\n * value.\n * There is always the same number of rules as the number of day periods, which means that the\n * first rule is applied to the first day period and so on.\n * You should fallback to AM/PM when there are no rules available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriodRules(locale: string): (Time | [Time, Time])[] {\n  const data = findLocaleData(locale);\n  checkFullData(data);\n  const rules = data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodsRules] || [];\n  return rules.map((rule: string | [string, string]) => {\n    if (typeof rule === 'string') {\n      return extractTime(rule);\n    }\n    return [extractTime(rule[0]), extractTime(rule[1])];\n  });\n}\n\n/**\n * Day Periods indicate roughly how the day is broken up in different languages (e.g. morning,\n * noon, afternoon, midnight, ...).\n * You should use the function {@link getLocaleExtraDayPeriodRules} to determine which period to\n * use.\n * You should fallback to AM/PM when there are no day periods available.\n *\n * Note: this is only available if you load the full locale data.\n * See the [\"I18n guide\"](guide/i18n#i18n-pipes) to know how to import additional locale\n * data.\n *\n * @publicApi\n */\nexport function getLocaleExtraDayPeriods(\n    locale: string, formStyle: FormStyle, width: TranslationWidth): string[] {\n  const data = findLocaleData(locale);\n  checkFullData(data);\n  const dayPeriodsData = <string[][][]>[\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodFormats],\n    data[LocaleDataIndex.ExtraData][ExtraLocaleDataIndex.ExtraDayPeriodStandalone]\n  ];\n  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];\n  return getLastDefinedValue(dayPeriods, width) || [];\n}\n\n/**\n * Returns the first value that is defined in an array, going backwards.\n *\n * To avoid repeating the same data (e.g. when \"format\" and \"standalone\" are the same) we only\n * add the first one to the locale data arrays, the other ones are only defined when different.\n * We use this function to retrieve the first defined value.\n *\n * @publicApi\n */\nfunction getLastDefinedValue<T>(data: T[], index: number): T {\n  for (let i = index; i > -1; i--) {\n    if (typeof data[i] !== 'undefined') {\n      return data[i];\n    }\n  }\n  throw new Error('Locale data API: locale data undefined');\n}\n\n/**\n * A representation of the time with hours and minutes\n *\n * @publicApi\n */\nexport type Time = {\n  hours: number,\n  minutes: number\n};\n\n/**\n * Extract the hours and minutes from a string like \"15:45\"\n */\nfunction extractTime(time: string): Time {\n  const [h, m] = time.split(':');\n  return {hours: +h, minutes: +m};\n}\n\n/**\n * Finds the locale data for a locale id\n *\n * @publicApi\n */\nexport function findLocaleData(locale: string): any {\n  const normalizedLocale = locale.toLowerCase().replace(/_/g, '-');\n\n  let match = LOCALE_DATA[normalizedLocale];\n  if (match) {\n    return match;\n  }\n\n  // let's try to find a parent locale\n  const parentLocale = normalizedLocale.split('-')[0];\n  match = LOCALE_DATA[parentLocale];\n\n  if (match) {\n    return match;\n  }\n\n  if (parentLocale === 'en') {\n    return localeEn;\n  }\n\n  throw new Error(`Missing locale data for the locale \"${locale}\".`);\n}\n\n/**\n * Returns the currency symbol for a given currency code, or the code if no symbol available\n * (e.g.: format narrow = $, format wide = US$, code = USD)\n * If no locale is provided, it uses the locale \"en\" by default\n *\n * @publicApi\n */\nexport function getCurrencySymbol(code: string, format: 'wide' | 'narrow', locale = 'en'): string {\n  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];\n  const symbolNarrow = currency[CurrencyIndex.SymbolNarrow];\n\n  if (format === 'narrow' && typeof symbolNarrow === 'string') {\n    return symbolNarrow;\n  }\n\n  return currency[CurrencyIndex.Symbol] || code;\n}\n\n// Most currencies have cents, that's why the default is 2\nconst DEFAULT_NB_OF_CURRENCY_DIGITS = 2;\n\n/**\n * Returns the number of decimal digits for the given currency.\n * Its value depends upon the presence of cents in that particular currency.\n *\n * @publicApi\n */\nexport function getNumberOfCurrencyDigits(code: string): number {\n  let digits;\n  const currency = CURRENCIES_EN[code];\n  if (currency) {\n    digits = currency[CurrencyIndex.NbOfDigits];\n  }\n  return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormStyle, FormatWidth, NumberSymbol, Time, TranslationWidth, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleId, getLocaleMonthNames, getLocaleNumberSymbol, getLocaleTimeFormat} from './locale_data_api';\n\nexport const ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n//    1        2       3         4          5          6          7          8  9     10      11\nconst NAMED_FORMATS: {[localeId: string]: {[format: string]: string}} = {};\nconst DATE_FORMATS_SPLIT =\n    /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\\s\\S]*)/;\n\nenum ZoneWidth {\n  Short,\n  ShortGMT,\n  Long,\n  Extended\n}\n\nenum DateType {\n  FullYear,\n  Month,\n  Date,\n  Hours,\n  Minutes,\n  Seconds,\n  FractionalSeconds,\n  Day\n}\n\nenum TranslationType {\n  DayPeriods,\n  Days,\n  Months,\n  Eras\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date according to locale rules.\n *\n * Where:\n * - `value` is a Date, a number (milliseconds since UTC epoch) or an ISO string\n *   (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. See {@link DatePipe} for more\n *   details.\n * - `locale` is a `string` defining the locale to use.\n * - `timezone` to be used for formatting. It understands UTC/GMT and the continental US time zone\n *   abbreviations, but for general use, use a time zone offset (e.g. `'+0430'`).\n *   If not specified, host system settings are used.\n *\n * See {@link DatePipe} for more details.\n *\n * @publicApi\n */\nexport function formatDate(\n    value: string | number | Date, format: string, locale: string, timezone?: string): string {\n  let date = toDate(value);\n  const namedFormat = getNamedFormat(locale, format);\n  format = namedFormat || format;\n\n  let parts: string[] = [];\n  let match;\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n    if (match) {\n      parts = parts.concat(match.slice(1));\n      const part = parts.pop();\n      if (!part) {\n        break;\n      }\n      format = part;\n    } else {\n      parts.push(format);\n      break;\n    }\n  }\n\n  let dateTimezoneOffset = date.getTimezoneOffset();\n  if (timezone) {\n    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    date = convertTimezoneToLocal(date, timezone, true);\n  }\n\n  let text = '';\n  parts.forEach(value => {\n    const dateFormatter = getDateFormatter(value);\n    text += dateFormatter ?\n        dateFormatter(date, locale, dateTimezoneOffset) :\n        value === '\\'\\'' ? '\\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n  });\n\n  return text;\n}\n\nfunction getNamedFormat(locale: string, format: string): string {\n  const localeId = getLocaleId(locale);\n  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};\n\n  if (NAMED_FORMATS[localeId][format]) {\n    return NAMED_FORMATS[localeId][format];\n  }\n\n  let formatValue = '';\n  switch (format) {\n    case 'shortDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullDate':\n      formatValue = getLocaleDateFormat(locale, FormatWidth.Full);\n      break;\n    case 'shortTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);\n      break;\n    case 'mediumTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);\n      break;\n    case 'longTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);\n      break;\n    case 'fullTime':\n      formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);\n      break;\n    case 'short':\n      const shortTime = getNamedFormat(locale, 'shortTime');\n      const shortDate = getNamedFormat(locale, 'shortDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);\n      break;\n    case 'medium':\n      const mediumTime = getNamedFormat(locale, 'mediumTime');\n      const mediumDate = getNamedFormat(locale, 'mediumDate');\n      formatValue = formatDateTime(\n          getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);\n      break;\n    case 'long':\n      const longTime = getNamedFormat(locale, 'longTime');\n      const longDate = getNamedFormat(locale, 'longDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);\n      break;\n    case 'full':\n      const fullTime = getNamedFormat(locale, 'fullTime');\n      const fullDate = getNamedFormat(locale, 'fullDate');\n      formatValue =\n          formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);\n      break;\n  }\n  if (formatValue) {\n    NAMED_FORMATS[localeId][format] = formatValue;\n  }\n  return formatValue;\n}\n\nfunction formatDateTime(str: string, opt_values: string[]) {\n  if (opt_values) {\n    str = str.replace(/\\{([^}]+)}/g, function(match, key) {\n      return (opt_values != null && key in opt_values) ? opt_values[key] : match;\n    });\n  }\n  return str;\n}\n\nfunction padNumber(\n    num: number, digits: number, minusSign = '-', trim?: boolean, negWrap?: boolean): string {\n  let neg = '';\n  if (num < 0 || (negWrap && num <= 0)) {\n    if (negWrap) {\n      num = -num + 1;\n    } else {\n      num = -num;\n      neg = minusSign;\n    }\n  }\n  let strNum = String(num);\n  while (strNum.length < digits) {\n    strNum = '0' + strNum;\n  }\n  if (trim) {\n    strNum = strNum.substr(strNum.length - digits);\n  }\n  return neg + strNum;\n}\n\nfunction formatFractionalSeconds(milliseconds: number, digits: number): string {\n  const strMs = padNumber(milliseconds, 3);\n  return strMs.substr(0, digits);\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale digit representation\n */\nfunction dateGetter(\n    name: DateType, size: number, offset: number = 0, trim = false,\n    negWrap = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    let part = getDatePart(name, date);\n    if (offset > 0 || part > -offset) {\n      part += offset;\n    }\n\n    if (name === DateType.Hours) {\n      if (part === 0 && offset === -12) {\n        part = 12;\n      }\n    } else if (name === DateType.FractionalSeconds) {\n      return formatFractionalSeconds(part, size);\n    }\n\n    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    return padNumber(part, size, localeMinus, trim, negWrap);\n  };\n}\n\nfunction getDatePart(part: DateType, date: Date): number {\n  switch (part) {\n    case DateType.FullYear:\n      return date.getFullYear();\n    case DateType.Month:\n      return date.getMonth();\n    case DateType.Date:\n      return date.getDate();\n    case DateType.Hours:\n      return date.getHours();\n    case DateType.Minutes:\n      return date.getMinutes();\n    case DateType.Seconds:\n      return date.getSeconds();\n    case DateType.FractionalSeconds:\n      return date.getMilliseconds();\n    case DateType.Day:\n      return date.getDay();\n    default:\n      throw new Error(`Unknown DateType value \"${part}\".`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date into its locale string representation\n */\nfunction dateStrGetter(\n    name: TranslationType, width: TranslationWidth, form: FormStyle = FormStyle.Format,\n    extended = false): DateFormatter {\n  return function(date: Date, locale: string): string {\n    return getDateTranslation(date, locale, name, width, form, extended);\n  };\n}\n\n/**\n * Returns the locale translation of a date for a given form, type and width\n */\nfunction getDateTranslation(\n    date: Date, locale: string, name: TranslationType, width: TranslationWidth, form: FormStyle,\n    extended: boolean) {\n  switch (name) {\n    case TranslationType.Months:\n      return getLocaleMonthNames(locale, form, width)[date.getMonth()];\n    case TranslationType.Days:\n      return getLocaleDayNames(locale, form, width)[date.getDay()];\n    case TranslationType.DayPeriods:\n      const currentHours = date.getHours();\n      const currentMinutes = date.getMinutes();\n      if (extended) {\n        const rules = getLocaleExtraDayPeriodRules(locale);\n        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);\n        let result;\n        rules.forEach((rule: Time | [Time, Time], index: number) => {\n          if (Array.isArray(rule)) {\n            // morning, afternoon, evening, night\n            const {hours: hoursFrom, minutes: minutesFrom} = rule[0];\n            const {hours: hoursTo, minutes: minutesTo} = rule[1];\n            if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&\n                (currentHours < hoursTo ||\n                 (currentHours === hoursTo && currentMinutes < minutesTo))) {\n              result = dayPeriods[index];\n            }\n          } else {  // noon or midnight\n            const {hours, minutes} = rule;\n            if (hours === currentHours && minutes === currentMinutes) {\n              result = dayPeriods[index];\n            }\n          }\n        });\n        if (result) {\n          return result;\n        }\n      }\n      // if no rules for the day periods, we use am/pm by default\n      return getLocaleDayPeriods(locale, form, <TranslationWidth>width)[currentHours < 12 ? 0 : 1];\n    case TranslationType.Eras:\n      return getLocaleEraNames(locale, <TranslationWidth>width)[date.getFullYear() <= 0 ? 0 : 1];\n    default:\n      // This default case is not needed by TypeScript compiler, as the switch is exhaustive.\n      // However Closure Compiler does not understand that and reports an error in typed mode.\n      // The `throw new Error` below works around the problem, and the unexpected: never variable\n      // makes sure tsc still checks this code is unreachable.\n      const unexpected: never = name;\n      throw new Error(`unexpected translation type ${unexpected}`);\n  }\n}\n\n/**\n * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or\n * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,\n * extended = +04:30)\n */\nfunction timeZoneGetter(width: ZoneWidth): DateFormatter {\n  return function(date: Date, locale: string, offset: number) {\n    const zone = -1 * offset;\n    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);\n    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);\n    switch (width) {\n      case ZoneWidth.Short:\n        return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.ShortGMT:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);\n      case ZoneWidth.Long:\n        return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n            padNumber(Math.abs(zone % 60), 2, minusSign);\n      case ZoneWidth.Extended:\n        if (offset === 0) {\n          return 'Z';\n        } else {\n          return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +\n              padNumber(Math.abs(zone % 60), 2, minusSign);\n        }\n      default:\n        throw new Error(`Unknown zone width \"${width}\"`);\n    }\n  };\n}\n\nconst JANUARY = 0;\nconst THURSDAY = 4;\nfunction getFirstThursdayOfYear(year: number) {\n  const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();\n  return new Date(\n      year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);\n}\n\nfunction getThursdayThisWeek(datetime: Date) {\n  return new Date(\n      datetime.getFullYear(), datetime.getMonth(),\n      datetime.getDate() + (THURSDAY - datetime.getDay()));\n}\n\nfunction weekGetter(size: number, monthBased = false): DateFormatter {\n  return function(date: Date, locale: string) {\n    let result;\n    if (monthBased) {\n      const nbDaysBefore1stDayOfMonth =\n          new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;\n      const today = date.getDate();\n      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);\n    } else {\n      const firstThurs = getFirstThursdayOfYear(date.getFullYear());\n      const thisThurs = getThursdayThisWeek(date);\n      const diff = thisThurs.getTime() - firstThurs.getTime();\n      result = 1 + Math.round(diff / 6.048e8);  // 6.048e8 ms per week\n    }\n\n    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  };\n}\n\ntype DateFormatter = (date: Date, locale: string, offset?: number) => string;\n\nconst DATE_FORMATS: {[format: string]: DateFormatter} = {};\n\n// Based on CLDR formats:\n// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n// See also explanations: http://cldr.unicode.org/translation/date-time\n// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x\nfunction getDateFormatter(format: string): DateFormatter|null {\n  if (DATE_FORMATS[format]) {\n    return DATE_FORMATS[format];\n  }\n  let formatter;\n  switch (format) {\n    // Era name (AD/BC)\n    case 'G':\n    case 'GG':\n    case 'GGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);\n      break;\n    case 'GGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);\n      break;\n    case 'GGGGG':\n      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);\n      break;\n\n    // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)\n    case 'y':\n      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);\n      break;\n    // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yy':\n      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);\n      break;\n    // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)\n    case 'yyy':\n      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);\n      break;\n    // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)\n    case 'yyyy':\n      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);\n      break;\n\n    // Month of the year (1-12), numeric\n    case 'M':\n    case 'L':\n      formatter = dateGetter(DateType.Month, 1, 1);\n      break;\n    case 'MM':\n    case 'LL':\n      formatter = dateGetter(DateType.Month, 2, 1);\n      break;\n\n    // Month of the year (January, ...), string, format\n    case 'MMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);\n      break;\n    case 'MMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);\n      break;\n    case 'MMMMM':\n      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);\n      break;\n\n    // Month of the year (January, ...), string, standalone\n    case 'LLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);\n      break;\n    case 'LLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);\n      break;\n    case 'LLLLL':\n      formatter =\n          dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);\n      break;\n\n    // Week of the year (1, ... 52)\n    case 'w':\n      formatter = weekGetter(1);\n      break;\n    case 'ww':\n      formatter = weekGetter(2);\n      break;\n\n    // Week of the month (1, ...)\n    case 'W':\n      formatter = weekGetter(1, true);\n      break;\n\n    // Day of the month (1-31)\n    case 'd':\n      formatter = dateGetter(DateType.Date, 1);\n      break;\n    case 'dd':\n      formatter = dateGetter(DateType.Date, 2);\n      break;\n\n    // Day of the Week\n    case 'E':\n    case 'EE':\n    case 'EEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);\n      break;\n    case 'EEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);\n      break;\n    case 'EEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);\n      break;\n    case 'EEEEEE':\n      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);\n      break;\n\n    // Generic period of the day (am-pm)\n    case 'a':\n    case 'aa':\n    case 'aaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);\n      break;\n    case 'aaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);\n      break;\n    case 'aaaaa':\n      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);\n      break;\n\n    // Extended period of the day (midnight, at night, ...), standalone\n    case 'b':\n    case 'bb':\n    case 'bbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);\n      break;\n    case 'bbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);\n      break;\n    case 'bbbbb':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);\n      break;\n\n    // Extended period of the day (midnight, night, ...), standalone\n    case 'B':\n    case 'BB':\n    case 'BBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);\n      break;\n    case 'BBBB':\n      formatter =\n          dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);\n      break;\n    case 'BBBBB':\n      formatter = dateStrGetter(\n          TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);\n      break;\n\n    // Hour in AM/PM, (1-12)\n    case 'h':\n      formatter = dateGetter(DateType.Hours, 1, -12);\n      break;\n    case 'hh':\n      formatter = dateGetter(DateType.Hours, 2, -12);\n      break;\n\n    // Hour of the day (0-23)\n    case 'H':\n      formatter = dateGetter(DateType.Hours, 1);\n      break;\n    // Hour in day, padded (00-23)\n    case 'HH':\n      formatter = dateGetter(DateType.Hours, 2);\n      break;\n\n    // Minute of the hour (0-59)\n    case 'm':\n      formatter = dateGetter(DateType.Minutes, 1);\n      break;\n    case 'mm':\n      formatter = dateGetter(DateType.Minutes, 2);\n      break;\n\n    // Second of the minute (0-59)\n    case 's':\n      formatter = dateGetter(DateType.Seconds, 1);\n      break;\n    case 'ss':\n      formatter = dateGetter(DateType.Seconds, 2);\n      break;\n\n    // Fractional second\n    case 'S':\n      formatter = dateGetter(DateType.FractionalSeconds, 1);\n      break;\n    case 'SS':\n      formatter = dateGetter(DateType.FractionalSeconds, 2);\n      break;\n    case 'SSS':\n      formatter = dateGetter(DateType.FractionalSeconds, 3);\n      break;\n\n\n    // Timezone ISO8601 short format (-0430)\n    case 'Z':\n    case 'ZZ':\n    case 'ZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Short);\n      break;\n    // Timezone ISO8601 extended format (-04:30)\n    case 'ZZZZZ':\n      formatter = timeZoneGetter(ZoneWidth.Extended);\n      break;\n\n    // Timezone GMT short format (GMT+4)\n    case 'O':\n    case 'OO':\n    case 'OOO':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'z':\n    case 'zz':\n    case 'zzz':\n      formatter = timeZoneGetter(ZoneWidth.ShortGMT);\n      break;\n    // Timezone GMT long format (GMT+0430)\n    case 'OOOO':\n    case 'ZZZZ':\n    // Should be location, but fallback to format O instead because we don't have the data yet\n    case 'zzzz':\n      formatter = timeZoneGetter(ZoneWidth.Long);\n      break;\n    default:\n      return null;\n  }\n  DATE_FORMATS[format] = formatter;\n  return formatter;\n}\n\nfunction timezoneToOffset(timezone: string, fallback: number): number {\n  // Support: IE 9-11 only, Edge 13-15+\n  // IE/Edge do not \"understand\" colon (`:`) in timezone\n  timezone = timezone.replace(/:/g, '');\n  const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;\n  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;\n}\n\nfunction addDateMinutes(date: Date, minutes: number) {\n  date = new Date(date.getTime());\n  date.setMinutes(date.getMinutes() + minutes);\n  return date;\n}\n\nfunction convertTimezoneToLocal(date: Date, timezone: string, reverse: boolean): Date {\n  const reverseValue = reverse ? -1 : 1;\n  const dateTimezoneOffset = date.getTimezoneOffset();\n  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));\n}\n\n/**\n * Converts a value to date.\n *\n * Supported input formats:\n * - `Date`\n * - number: timestamp\n * - string: numeric (e.g. \"1234\"), ISO and date strings in a format supported by\n *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\n *   Note: ISO strings without time return a date without timeoffset.\n *\n * Throws if unable to convert to a date.\n */\nexport function toDate(value: string | number | Date): Date {\n  if (isDate(value)) {\n    return value;\n  }\n\n  if (typeof value === 'number' && !isNaN(value)) {\n    return new Date(value);\n  }\n\n  if (typeof value === 'string') {\n    value = value.trim();\n\n    const parsedNb = parseFloat(value);\n\n    // any string that only contains numbers, like \"1234\" but not like \"1234hello\"\n    if (!isNaN(value as any - parsedNb)) {\n      return new Date(parsedNb);\n    }\n\n    if (/^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n      /* For ISO Strings without time the day, month and year must be extracted from the ISO String\n      before Date creation to avoid time offset and errors in the new Date.\n      If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      date, some browsers (e.g. IE 9) will throw an invalid Date error.\n      If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      is applied.\n      Note: ISO months are 0 for January, 1 for February, ... */\n      const [y, m, d] = value.split('-').map((val: string) => +val);\n      return new Date(y, m - 1, d);\n    }\n\n    let match: RegExpMatchArray|null;\n    if (match = value.match(ISO8601_DATE_REGEX)) {\n      return isoStringToDate(match);\n    }\n  }\n\n  const date = new Date(value as any);\n  if (!isDate(date)) {\n    throw new Error(`Unable to convert \"${value}\" into a date`);\n  }\n  return date;\n}\n\n/**\n * Converts a date in ISO8601 to a Date.\n * Used instead of `Date.parse` because of browser discrepancies.\n */\nexport function isoStringToDate(match: RegExpMatchArray): Date {\n  const date = new Date(0);\n  let tzHour = 0;\n  let tzMin = 0;\n\n  // match[8] means that the string contains \"Z\" (UTC) or a timezone like \"+01:00\" or \"+0100\"\n  const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  // if there is a timezone defined like \"+01:00\" or \"+0100\"\n  if (match[9]) {\n    tzHour = Number(match[9] + match[10]);\n    tzMin = Number(match[9] + match[11]);\n  }\n  dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));\n  const h = Number(match[4] || 0) - tzHour;\n  const m = Number(match[5] || 0) - tzMin;\n  const s = Number(match[6] || 0);\n  const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n\nexport function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NumberFormatStyle, NumberSymbol, getLocaleNumberFormat, getLocaleNumberSymbol, getNumberOfCurrencyDigits} from './locale_data_api';\n\nexport const NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\nconst MAX_DIGITS = 22;\nconst DECIMAL_SEP = '.';\nconst ZERO_CHAR = '0';\nconst PATTERN_SEP = ';';\nconst GROUP_SEP = ',';\nconst DIGIT_CHAR = '#';\nconst CURRENCY_CHAR = 'Â¤';\nconst PERCENT_CHAR = '%';\n\n/**\n * Transforms a number to a locale string based on a style and a format\n */\nfunction formatNumberToLocaleString(\n    value: number, pattern: ParsedNumberFormat, locale: string, groupSymbol: NumberSymbol,\n    decimalSymbol: NumberSymbol, digitsInfo?: string, isPercent = false): string {\n  let formattedText = '';\n  let isZero = false;\n\n  if (!isFinite(value)) {\n    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);\n  } else {\n    let parsedNumber = parseNumber(value);\n\n    if (isPercent) {\n      parsedNumber = toPercent(parsedNumber);\n    }\n\n    let minInt = pattern.minInt;\n    let minFraction = pattern.minFrac;\n    let maxFraction = pattern.maxFrac;\n\n    if (digitsInfo) {\n      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);\n      if (parts === null) {\n        throw new Error(`${digitsInfo} is not a valid digit info`);\n      }\n      const minIntPart = parts[1];\n      const minFractionPart = parts[3];\n      const maxFractionPart = parts[5];\n      if (minIntPart != null) {\n        minInt = parseIntAutoRadix(minIntPart);\n      }\n      if (minFractionPart != null) {\n        minFraction = parseIntAutoRadix(minFractionPart);\n      }\n      if (maxFractionPart != null) {\n        maxFraction = parseIntAutoRadix(maxFractionPart);\n      } else if (minFractionPart != null && minFraction > maxFraction) {\n        maxFraction = minFraction;\n      }\n    }\n\n    roundNumber(parsedNumber, minFraction, maxFraction);\n\n    let digits = parsedNumber.digits;\n    let integerLen = parsedNumber.integerLen;\n    const exponent = parsedNumber.exponent;\n    let decimals = [];\n    isZero = digits.every(d => !d);\n\n    // pad zeros for small numbers\n    for (; integerLen < minInt; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // pad zeros for small numbers\n    for (; integerLen < 0; integerLen++) {\n      digits.unshift(0);\n    }\n\n    // extract decimals digits\n    if (integerLen > 0) {\n      decimals = digits.splice(integerLen, digits.length);\n    } else {\n      decimals = digits;\n      digits = [0];\n    }\n\n    // format the integer digits with grouping separators\n    const groups = [];\n    if (digits.length >= pattern.lgSize) {\n      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));\n    }\n\n    while (digits.length > pattern.gSize) {\n      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));\n    }\n\n    if (digits.length) {\n      groups.unshift(digits.join(''));\n    }\n\n    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));\n\n    // append the decimal digits\n    if (decimals.length) {\n      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');\n    }\n\n    if (exponent) {\n      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;\n    }\n  }\n\n  if (value < 0 && !isZero) {\n    formattedText = pattern.negPre + formattedText + pattern.negSuf;\n  } else {\n    formattedText = pattern.posPre + formattedText + pattern.posSuf;\n  }\n\n  return formattedText;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `currency` is the string that represents the currency, it can be its symbol or its name.\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n * @publicApi\n */\nexport function formatCurrency(\n    value: number, locale: string, currency: string, currencyCode?: string,\n    digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n\n  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode !);\n  pattern.maxFrac = pattern.minFrac;\n\n  const res = formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);\n  return res\n      .replace(CURRENCY_CHAR, currency)\n      // if we have 2 time the currency character, the second one is ignored\n      .replace(CURRENCY_CHAR, '');\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as a percentage according to locale rules.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n * @publicApi\n */\nexport function formatPercent(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  const res = formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);\n  return res.replace(\n      new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the locale.\n *\n * Where:\n * - `value` is a number.\n * - `locale` is a `string` defining the locale to use.\n * - `digitInfo` See {@link DecimalPipe} for more details.\n *\n * @publicApi\n */\nexport function formatNumber(value: number, locale: string, digitsInfo?: string): string {\n  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);\n  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));\n  return formatNumberToLocaleString(\n      value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);\n}\n\ninterface ParsedNumberFormat {\n  minInt: number;\n  // the minimum number of digits required in the fraction part of the number\n  minFrac: number;\n  // the maximum number of digits required in the fraction part of the number\n  maxFrac: number;\n  // the prefix for a positive number\n  posPre: string;\n  // the suffix for a positive number\n  posSuf: string;\n  // the prefix for a negative number (e.g. `-` or `(`))\n  negPre: string;\n  // the suffix for a negative number (e.g. `)`)\n  negSuf: string;\n  // number of digits in each group of separated digits\n  gSize: number;\n  // number of digits in the last group of digits before the decimal separator\n  lgSize: number;\n}\n\nfunction parseNumberFormat(format: string, minusSign = '-'): ParsedNumberFormat {\n  const p = {\n    minInt: 1,\n    minFrac: 0,\n    maxFrac: 0,\n    posPre: '',\n    posSuf: '',\n    negPre: '',\n    negSuf: '',\n    gSize: 0,\n    lgSize: 0\n  };\n\n  const patternParts = format.split(PATTERN_SEP);\n  const positive = patternParts[0];\n  const negative = patternParts[1];\n\n  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?\n      positive.split(DECIMAL_SEP) :\n      [\n        positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),\n        positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)\n      ],\n        integer = positiveParts[0], fraction = positiveParts[1] || '';\n\n  p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));\n\n  for (let i = 0; i < fraction.length; i++) {\n    const ch = fraction.charAt(i);\n    if (ch === ZERO_CHAR) {\n      p.minFrac = p.maxFrac = i + 1;\n    } else if (ch === DIGIT_CHAR) {\n      p.maxFrac = i + 1;\n    } else {\n      p.posSuf += ch;\n    }\n  }\n\n  const groups = integer.split(GROUP_SEP);\n  p.gSize = groups[1] ? groups[1].length : 0;\n  p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;\n\n  if (negative) {\n    const trunkLen = positive.length - p.posPre.length - p.posSuf.length,\n          pos = negative.indexOf(DIGIT_CHAR);\n\n    p.negPre = negative.substr(0, pos).replace(/'/g, '');\n    p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');\n  } else {\n    p.negPre = minusSign + p.posPre;\n    p.negSuf = p.posSuf;\n  }\n\n  return p;\n}\n\ninterface ParsedNumber {\n  // an array of digits containing leading zeros as necessary\n  digits: number[];\n  // the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`\n  exponent: number;\n  // the number of the digits in `d` that are to the left of the decimal point\n  integerLen: number;\n}\n\n// Transforms a parsed number into a percentage by multiplying it by 100\nfunction toPercent(parsedNumber: ParsedNumber): ParsedNumber {\n  // if the number is 0, don't do anything\n  if (parsedNumber.digits[0] === 0) {\n    return parsedNumber;\n  }\n\n  // Getting the current number of decimals\n  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;\n  if (parsedNumber.exponent) {\n    parsedNumber.exponent += 2;\n  } else {\n    if (fractionLen === 0) {\n      parsedNumber.digits.push(0, 0);\n    } else if (fractionLen === 1) {\n      parsedNumber.digits.push(0);\n    }\n    parsedNumber.integerLen += 2;\n  }\n\n  return parsedNumber;\n}\n\n/**\n * Parses a number.\n * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/\n */\nfunction parseNumber(num: number): ParsedNumber {\n  let numStr = Math.abs(num) + '';\n  let exponent = 0, digits, integerLen;\n  let i, j, zeros;\n\n  // Decimal point?\n  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {\n    numStr = numStr.replace(DECIMAL_SEP, '');\n  }\n\n  // Exponential form?\n  if ((i = numStr.search(/e/i)) > 0) {\n    // Work out the exponent.\n    if (integerLen < 0) integerLen = i;\n    integerLen += +numStr.slice(i + 1);\n    numStr = numStr.substring(0, i);\n  } else if (integerLen < 0) {\n    // There was no decimal point or exponent so it is an integer.\n    integerLen = numStr.length;\n  }\n\n  // Count the number of leading zeros.\n  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */\n  }\n\n  if (i === (zeros = numStr.length)) {\n    // The digits are all zero.\n    digits = [0];\n    integerLen = 1;\n  } else {\n    // Count the number of trailing zeros\n    zeros--;\n    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;\n\n    // Trailing zeros are insignificant so ignore them\n    integerLen -= i;\n    digits = [];\n    // Convert string to array of digits without leading/trailing zeros.\n    for (j = 0; i <= zeros; i++, j++) {\n      digits[j] = Number(numStr.charAt(i));\n    }\n  }\n\n  // If the number overflows the maximum allowed digits then use an exponent.\n  if (integerLen > MAX_DIGITS) {\n    digits = digits.splice(0, MAX_DIGITS - 1);\n    exponent = integerLen - 1;\n    integerLen = 1;\n  }\n\n  return {digits, exponent, integerLen};\n}\n\n/**\n * Round the parsed number to the specified number of decimal places\n * This function changes the parsedNumber in-place\n */\nfunction roundNumber(parsedNumber: ParsedNumber, minFrac: number, maxFrac: number) {\n  if (minFrac > maxFrac) {\n    throw new Error(\n        `The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);\n  }\n\n  let digits = parsedNumber.digits;\n  let fractionLen = digits.length - parsedNumber.integerLen;\n  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);\n\n  // The index of the digit to where rounding is to occur\n  let roundAt = fractionSize + parsedNumber.integerLen;\n  let digit = digits[roundAt];\n\n  if (roundAt > 0) {\n    // Drop fractional digits beyond `roundAt`\n    digits.splice(Math.max(parsedNumber.integerLen, roundAt));\n\n    // Set non-fractional digits beyond `roundAt` to 0\n    for (let j = roundAt; j < digits.length; j++) {\n      digits[j] = 0;\n    }\n  } else {\n    // We rounded to zero so reset the parsedNumber\n    fractionLen = Math.max(0, fractionLen);\n    parsedNumber.integerLen = 1;\n    digits.length = Math.max(1, roundAt = fractionSize + 1);\n    digits[0] = 0;\n    for (let i = 1; i < roundAt; i++) digits[i] = 0;\n  }\n\n  if (digit >= 5) {\n    if (roundAt - 1 < 0) {\n      for (let k = 0; k > roundAt; k--) {\n        digits.unshift(0);\n        parsedNumber.integerLen++;\n      }\n      digits.unshift(1);\n      parsedNumber.integerLen++;\n    } else {\n      digits[roundAt - 1]++;\n    }\n  }\n\n  // Pad out with zeros to get the required fraction length\n  for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);\n\n  let dropTrailingZeros = fractionSize !== 0;\n  // Minimal length = nb of decimals required + current nb of integers\n  // Any number besides that is optional and can be removed if it's a trailing 0\n  const minLen = minFrac + parsedNumber.integerLen;\n  // Do any carrying, e.g. a digit was rounded up to 10\n  const carry = digits.reduceRight(function(carry, d, i, digits) {\n    d = d + carry;\n    digits[i] = d < 10 ? d : d - 10;  // d % 10\n    if (dropTrailingZeros) {\n      // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)\n      if (digits[i] === 0 && i >= minLen) {\n        digits.pop();\n      } else {\n        dropTrailingZeros = false;\n      }\n    }\n    return d >= 10 ? 1 : 0;  // Math.floor(d / 10);\n  }, 0);\n  if (carry) {\n    digits.unshift(carry);\n    parsedNumber.integerLen++;\n  }\n}\n\nexport function parseIntAutoRadix(text: string): number {\n  const result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, LOCALE_ID, Optional} from '@angular/core';\nimport {Plural, getLocalePluralCase} from './locale_data_api';\n\n\n/**\n * @deprecated from v5\n */\nexport const DEPRECATED_PLURAL_FN = new InjectionToken<boolean>('UseV4Plurals');\n\n/**\n * @publicApi\n */\nexport abstract class NgLocalization {\n  abstract getPluralCategory(value: any, locale?: string): string;\n}\n\n\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization, locale?: string): string {\n  let key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value, locale);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @publicApi\n */\n@Injectable()\nexport class NgLocaleLocalization extends NgLocalization {\n  constructor(\n      @Inject(LOCALE_ID) protected locale: string,\n      /** @deprecated from v5 */\n      @Optional() @Inject(DEPRECATED_PLURAL_FN) protected deprecatedPluralFn?:\n          ((locale: string, value: number|string) => Plural)|null) {\n    super();\n  }\n\n  getPluralCategory(value: any, locale?: string): string {\n    const plural = this.deprecatedPluralFn ? this.deprecatedPluralFn(locale || this.locale, value) :\n                                             getLocalePluralCase(locale || this.locale)(value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\n}\n\n/**\n * Returns the plural case based on the locale\n *\n * @deprecated from v5 the plural case function is in locale data files common/locales/*.ts\n * @publicApi\n */\nexport function getPluralCase(locale: string, nLike: number | string): Plural {\n  // TODO(vicb): lazy compute\n  if (typeof nLike === 'string') {\n    nLike = parseInt(<string>nLike, 10);\n  }\n  const n: number = nLike as number;\n  const nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  const i = Math.floor(Math.abs(n));\n  const v = nDecimal.length;\n  const f = parseInt(nDecimal, 10);\n  const t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n\n  const lang = locale.split('-')[0].toLowerCase();\n\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n          !(n % 100 >= 12 && n % 100 <= 14))\n        return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n          n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n          !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n            n % 100 >= 90 && n % 100 <= 99))\n        return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n        return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n              !(i % 100 >= 12 && i % 100 <= 14) ||\n          f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n              !(f % 100 >= 12 && f % 100 <= 14))\n        return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n          f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n          v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n          !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n        return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 &&\n          (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n        return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n          !(n % 100 >= 11 && n % 100 <= 19))\n        return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n          v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n        return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n          !(v === 2) && f % 10 === 1)\n        return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n        return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 ||\n          !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && i % 10 === 0 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n        return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n        return Plural.One;\n      return Plural.Other;\n    // When there is no specification, the default is always \"other\"\n    // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules\n    // > other (requiredâgeneral plural form â also used if the language only has a single form)\n    default:\n      return Plural.Other;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2, ÉµisListLikeIterable as isListLikeIterable, Éµstringify as stringify} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n *\n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n *\n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n *\n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n *\n * @description\n *\n * Adds and removes CSS classes on an HTML element.\n *\n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n *\n * @publicApi\n */\n@Directive({selector: '[ngClass]'})\nexport class NgClass implements DoCheck {\n  // TODO(issue/24571): remove '!'.\n  private _iterableDiffer !: IterableDiffer<string>| null;\n  // TODO(issue/24571): remove '!'.\n  private _keyValueDiffer !: KeyValueDiffer<string, any>| null;\n  private _initialClasses: string[] = [];\n  // TODO(issue/24571): remove '!'.\n  private _rawClass !: string[] | Set<string>| {[klass: string]: any};\n\n  constructor(\n      private _iterableDiffers: IterableDiffers, private _keyValueDiffers: KeyValueDiffers,\n      private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input('class')\n  set klass(value: string) {\n    this._removeClasses(this._initialClasses);\n    this._initialClasses = typeof value === 'string' ? value.split(/\\s+/) : [];\n    this._applyClasses(this._initialClasses);\n    this._applyClasses(this._rawClass);\n  }\n\n  @Input()\n  set ngClass(value: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._removeClasses(this._rawClass);\n    this._applyClasses(this._initialClasses);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof value === 'string' ? value.split(/\\s+/) : value;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const iterableChanges = this._iterableDiffer.diff(this._rawClass as string[]);\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const keyValueChanges = this._keyValueDiffer.diff(this._rawClass as{[k: string]: any});\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n\n  private _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n\n  private _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n\n  /**\n   * Applies a collection of CSS classes to the DOM element.\n   *\n   * For argument of type Set and Array CSS class names contained in those collections are always\n   * added.\n   * For argument of type Map CSS class name in the map's key is toggled based on the value (added\n   * for truthy and removed for falsy).\n   */\n  private _applyClasses(rawClassVal: string[]|Set<string>|{[klass: string]: any}) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, true));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, !!rawClassVal[klass]));\n      }\n    }\n  }\n\n  /**\n   * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup\n   * purposes.\n   */\n  private _removeClasses(rawClassVal: string[]|Set<string>|{[klass: string]: any}) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        (<any>rawClassVal).forEach((klass: string) => this._toggleClass(klass, false));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => this._toggleClass(klass, false));\n      }\n    }\n  }\n\n  private _toggleClass(klass: string, enabled: boolean): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(klass => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, klass);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, klass);\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, SimpleChanges, StaticProvider, Type, ViewContainerRef} from '@angular/core';\n\n\n/**\n * Instantiates a single {@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n *\n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n *\n * @usageNotes\n *\n * ### Fine tune control\n *\n * You can control the component creation process by using the following optional attributes:\n *\n * * `ngComponentOutletInjector`: Optional custom {@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n *\n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n *\n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n *\n * ### Syntax\n *\n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n *\n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n *\n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n *\n * ### A simple example\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n *\n * A more complete example with additional options:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n\n * A more complete example with ngModuleFactory:\n *\n * {@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n *\n * @publicApi\n * @ngModule CommonModule\n */\n@Directive({selector: '[ngComponentOutlet]'})\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutlet !: Type<any>;\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletInjector !: Injector;\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletContent !: any[][];\n  // TODO(issue/24571): remove '!'.\n  @Input() ngComponentOutletNgModuleFactory !: NgModuleFactory<any>;\n\n  private _componentRef: ComponentRef<any>|null = null;\n  private _moduleRef: NgModuleRef<any>|null = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport class NgForOfContext<T> {\n  constructor(\n      public $implicit: T, public ngForOf: NgIterable<T>, public index: number,\n      public count: number) {}\n\n  get first(): boolean { return this.index === 0; }\n\n  get last(): boolean { return this.index === this.count - 1; }\n\n  get even(): boolean { return this.index % 2 === 0; }\n\n  get odd(): boolean { return !this.even; }\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n *\n * @usageNotes\n *\n * ### Local Variables\n *\n * `NgForOf` provides several exported values that can be aliased to local variables:\n *\n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n *\n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n *\n * ### Change Propagation\n *\n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n *\n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n *\n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n *\n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n *\n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n *\n * ### Syntax\n *\n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n *\n * With `<ng-template>` element:\n *\n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n *\n * ### Example\n *\n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({selector: '[ngFor][ngForOf]'})\nexport class NgForOf<T> implements DoCheck {\n  @Input()\n  set ngForOf(ngForOf: NgIterable<T>) {\n    this._ngForOf = ngForOf;\n    this._ngForOfDirty = true;\n  }\n  @Input()\n  set ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n\n  get ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n  // TODO(issue/24571): remove '!'.\n  private _ngForOf !: NgIterable<T>;\n  private _ngForOfDirty: boolean = true;\n  private _differ: IterableDiffer<T>|null = null;\n  // TODO(issue/24571): remove '!'.\n  private _trackByFn !: TrackByFunction<T>;\n\n  constructor(\n      private _viewContainer: ViewContainerRef, private _template: TemplateRef<NgForOfContext<T>>,\n      private _differs: IterableDiffers) {}\n\n  @Input()\n  set ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n\n  ngDoCheck(): void {\n    if (this._ngForOfDirty) {\n      this._ngForOfDirty = false;\n      // React on ngForOf changes only once all inputs have been initialized\n      const value = this._ngForOf;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n\n  private _applyChanges(changes: IterableChanges<T>) {\n    const insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>(null !, this._ngForOf, -1, -1), currentIndex);\n            const tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const view = this._viewContainer.get(adjustedPreviousIndex) !;\n            this._viewContainer.move(view, currentIndex);\n            const tuple = new RecordViewTuple(item, <EmbeddedViewRef<NgForOfContext<T>>>view);\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {\n      const viewRef = <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i);\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n      viewRef.context.ngForOf = this._ngForOf;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const viewRef =\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex);\n      viewRef.context.$implicit = record.item;\n    });\n  }\n\n  private _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\n\n  /**\n   * Assert the correct type of the context for the template that `NgForOf` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type check compiler that the\n   * `NgForOf` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard<T>(dir: NgForOf<T>, ctx: any): ctx is NgForOfContext<T> {\n    return true;\n  }\n}\n\nclass RecordViewTuple<T> {\n  constructor(public record: any, public view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction getTypeName(type: any): string {\n  return type['name'] || typeof type;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef, Éµstringify as stringify} from '@angular/core';\n\n\n/**\n * Conditionally includes a template based on the value of an `expression`.\n *\n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n *\n *\n * @usageNotes\n *\n * ### Most common usage\n *\n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {@example common/ngIf/ts/module.ts region='NgIfSimple'}\n *\n * ### Showing an alternative template using `else`\n *\n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfElse'}\n *\n * ### Using non-inlined `then` template\n *\n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n *\n * {@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n *\n * ### Storing conditional result in a variable\n *\n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in following example:\n *\n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n *\n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n *\n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n *\n * {@example common/ngIf/ts/module.ts region='NgIfAs'}\n *\n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n *\n * ### Syntax\n *\n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n *\n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Directive({selector: '[ngIf]'})\nexport class NgIf {\n  private _context: NgIfContext = new NgIfContext();\n  private _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\n  private _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\n  private _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n  private _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n\n  constructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  @Input()\n  set ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n\n  @Input()\n  set ngIfThen(templateRef: TemplateRef<NgIfContext>|null) {\n    assertTemplate('ngIfThen', templateRef);\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  @Input()\n  set ngIfElse(templateRef: TemplateRef<NgIfContext>|null) {\n    assertTemplate('ngIfElse', templateRef);\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\n\n  /** @internal */\n  public static ngIfUseIfTypeGuard: void;\n\n  /**\n   * Assert the correct type of the expression bound to the `ngIf` input within the template.\n   *\n   * The presence of this method is a signal to the Ivy template type check compiler that when the\n   * `NgIf` structural directive renders its template, the type of the expression bound to `ngIf`\n   * should be narrowed in some way. For `NgIf`, it is narrowed to be non-null, which allows the\n   * strictNullChecks feature of TypeScript to work with `NgIf`.\n   */\n  static ngTemplateGuard_ngIf<E>(dir: NgIf, expr: E): expr is NonNullable<E> { return true; }\n}\n\n/**\n * @publicApi\n */\nexport class NgIfContext {\n  public $implicit: any = null;\n  public ngIf: any = null;\n}\n\nfunction assertTemplate(property: string, templateRef: TemplateRef<any>| null): void {\n  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);\n  if (!isTemplateRefOrNull) {\n    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nexport class SwitchView {\n  private _created = false;\n\n  constructor(\n      private _viewContainerRef: ViewContainerRef, private _templateRef: TemplateRef<Object>) {}\n\n  create(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n\n  destroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n\n  enforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description A structural directive that adds or removes templates (displaying or hiding views)\n * when the next match expression matches the switch expression.\n *\n * The `[ngSwitch]` directive on a container specifies an expression to match against.\n * The expressions to match are provided by `ngSwitchCase` directives on views within the container.\n * - Every view that matches is rendered.\n * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.\n * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`\n * or `ngSwitchDefault` directive are preserved at the location.\n *\n * @usageNotes\n * Define a container element for the directive, and specify the switch expression\n * to match against as an attribute:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n * ```\n *\n * Within the container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *    <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * ...\n *    <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * ### Usage Examples\n *\n * The following example shows how to use more than one case to display the same view:\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <!-- the same view can be shown in more than one case -->\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *   <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *   <!--default case when there are no matches -->\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * The following example shows how cases can be nested:\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n *\n * @publicApi\n * @see `NgSwitchCase`\n * @see `NgSwitchDefault`\n * @see [Stuctural Directives](guide/structural-directives)\n *\n */\n@Directive({selector: '[ngSwitch]'})\nexport class NgSwitch {\n  // TODO(issue/24571): remove '!'.\n  private _defaultViews !: SwitchView[];\n  private _defaultUsed = false;\n  private _caseCount = 0;\n  private _lastCaseCheckIndex = 0;\n  private _lastCasesMatched = false;\n  private _ngSwitch: any;\n\n  @Input()\n  set ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n\n  /** @internal */\n  _addCase(): number { return this._caseCount++; }\n\n  /** @internal */\n  _addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n\n  /** @internal */\n  _matchCase(value: any): boolean {\n    const matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n\n  private _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let i = 0; i < this._defaultViews.length; i++) {\n        const defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n * Provides a switch case expression to match against an enclosing `ngSwitch` expression.\n * When the expressions match, the given `NgSwitchCase` template is rendered.\n * If multiple match expressions match the switch expression value, all of them are displayed.\n *\n * @usageNotes\n *\n * Within a switch container, `*ngSwitchCase` statements specify the match expressions\n * as attributes. Include `*ngSwitchDefault` as the final case.\n *\n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   ...\n *   <some-element *ngSwitchDefault>...</some-element>\n * </container-element>\n * ```\n *\n * Each switch-case statement contains an in-line HTML template or template reference\n * that defines the subtree to be selected if the value of the match expression\n * matches the value of the switch expression.\n *\n * Unlike JavaScript, which uses strict equality, Angular uses loose equality.\n * This means that the empty string, `\"\"` matches 0.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchDefault`\n *\n */\n@Directive({selector: '[ngSwitchCase]'})\nexport class NgSwitchCase implements DoCheck {\n  private _view: SwitchView;\n  /**\n   * Stores the HTML template to be selected on match.\n   */\n  @Input()\n  ngSwitchCase: any;\n\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Host() private ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n\n  /**\n   * Performs case matching. For internal use only.\n   */\n  ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that is rendered when no `NgSwitchCase` expressions\n * match the `NgSwitch` expression.\n * This statement should be the final case in an `NgSwitch`.\n *\n * @publicApi\n * @see `NgSwitch`\n * @see `NgSwitchCase`\n *\n */\n@Directive({selector: '[ngSwitchDefault]'})\nexport class NgSwitchDefault {\n  constructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n      @Host() ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\n\nimport {SwitchView} from './ng_switch';\n\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n *\n * @description\n *\n * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n *\n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n *\n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n *\n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n *\n * @publicApi\n */\n@Directive({selector: '[ngPlural]'})\nexport class NgPlural {\n  // TODO(issue/24571): remove '!'.\n  private _switchValue !: number;\n  // TODO(issue/24571): remove '!'.\n  private _activeView !: SwitchView;\n  private _caseViews: {[k: string]: SwitchView} = {};\n\n  constructor(private _localization: NgLocalization) {}\n\n  @Input()\n  set ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n\n  addCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n\n  private _updateView(): void {\n    this._clearViews();\n\n    const cases = Object.keys(this._caseViews);\n    const key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n\n  private _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n\n  private _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Creates a view that will be added/removed from the parent {@link NgPlural} when the\n * given expression matches the plural expression according to CLDR rules.\n *\n * @usageNotes\n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n *```\n *\n * See {@link NgPlural} for more details and example.\n *\n * @publicApi\n */\n@Directive({selector: '[ngPluralCase]'})\nexport class NgPluralCase {\n  constructor(\n      @Attribute('ngPluralCase') public value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef, @Host() ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer2} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @usageNotes\n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n *\n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n *\n * @description\n *\n * Update an HTML element styles.\n *\n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n *\n * @publicApi\n */\n@Directive({selector: '[ngStyle]'})\nexport class NgStyle implements DoCheck {\n  // TODO(issue/24571): remove '!'.\n  private _ngStyle !: {[key: string]: string};\n  // TODO(issue/24571): remove '!'.\n  private _differ !: KeyValueDiffer<string, string|number>;\n\n  constructor(\n      private _differs: KeyValueDiffers, private _ngEl: ElementRef, private _renderer: Renderer2) {}\n\n  @Input()\n  set ngStyle(values: {[key: string]: string}) {\n    this._ngStyle = values;\n    if (!this._differ && values) {\n      this._differ = this._differs.find(values).create();\n    }\n  }\n\n  ngDoCheck() {\n    if (this._differ) {\n      const changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n\n  private _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n\n  private _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    if (value != null) {\n      this._renderer.setStyle(this._ngEl.nativeElement, name, value as string);\n    } else {\n      this._renderer.removeStyle(this._ngEl.nativeElement, name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Inserts an embedded view from a prepared `TemplateRef`.\n *\n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n *\n * @usageNotes\n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n *\n * Using the key `$implicit` in the context object will set its value as default.\n *\n * ### Example\n *\n * {@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n *\n * @publicApi\n */\n@Directive({selector: '[ngTemplateOutlet]'})\nexport class NgTemplateOutlet implements OnChanges {\n  private _viewRef: EmbeddedViewRef<any>|null = null;\n\n  /**\n   * A context object to attach to the {@link EmbeddedViewRef}. This should be an\n   * object, the object's keys will be available for binding by the local template `let`\n   * declarations.\n   * Using the key `$implicit` in the context object will set its value as default.\n   */\n  @Input() public ngTemplateOutletContext: Object|null = null;\n\n  /**\n   * A string defining the template reference and optionally the context object for the template.\n   */\n  @Input() public ngTemplateOutlet: TemplateRef<any>|null = null;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const recreateView = this._shouldRecreateView(changes);\n\n    if (recreateView) {\n      if (this._viewRef) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n      }\n\n      if (this.ngTemplateOutlet) {\n        this._viewRef = this._viewContainerRef.createEmbeddedView(\n            this.ngTemplateOutlet, this.ngTemplateOutletContext);\n      }\n    } else {\n      if (this._viewRef && this.ngTemplateOutletContext) {\n        this._updateExistingContext(this.ngTemplateOutletContext);\n      }\n    }\n  }\n\n  /**\n   * We need to re-create existing embedded view if:\n   * - templateRef has changed\n   * - context has changes\n   *\n   * We mark context object as changed when the corresponding object\n   * shape changes (new properties are added or existing properties are removed).\n   * In other words we consider context with the same properties as \"the same\" even\n   * if object reference changes (see https://github.com/angular/angular/issues/13407).\n   */\n  private _shouldRecreateView(changes: SimpleChanges): boolean {\n    const ctxChange = changes['ngTemplateOutletContext'];\n    return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n  }\n\n  private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n    const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n    const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n    if (prevCtxKeys.length === currCtxKeys.length) {\n      for (let propName of currCtxKeys) {\n        if (prevCtxKeys.indexOf(propName) === -1) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private _updateExistingContext(ctx: Object): void {\n    for (let propName of Object.keys(ctx)) {\n      (<any>this._viewRef !.context)[propName] = (<any>this.ngTemplateOutletContext)[propName];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n\n\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, Éµstringify as stringify} from '@angular/core';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NUMBER_FORMAT_REGEXP, parseIntAutoRadix} from '../../i18n/format_number';\nimport {NumberFormatStyle} from '../../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from '../invalid_pipe_argument_error';\nimport {NumberFormatter} from './intl';\n\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && !isNaN(+value - parseFloat(value)) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let minInt: number|undefined;\n  let minFraction: number|undefined;\n  let maxFraction: number|undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const parts = digits.match(NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format(value as number, locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n\n/**\n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n *\n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n *\n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/number_pipe.ts region='DeprecatedNumberPipe'}\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({name: 'number'})\nexport class DeprecatedDecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedDecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\n}\n\n/**\n * @ngModule CommonModule\n *\n * @description\n *\n * Formats a number as percentage according to locale rules.\n *\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/percent_pipe.ts region='DeprecatedPercentPipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'percent'})\nexport class DeprecatedPercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(value: any, digits?: string): string|null {\n    return formatNumber(\n        DeprecatedPercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a number as currency using locale rules.\n *\n * Use `currency` to format a number as currency.\n *\n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {@link DecimalPipe} for detailed description.\n *\n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See [Browser Support](guide/browser-support) for details.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/currency_pipe.ts region='DeprecatedCurrencyPipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'currency'})\nexport class DeprecatedCurrencyPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  transform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        DeprecatedCurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits,\n        currencyCode, symbolDisplay);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ÉµisObservable, ÉµisPromise} from '@angular/core';\nimport {Observable, SubscriptionLike} from 'rxjs';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): SubscriptionLike\n      |Promise<any>;\n  dispose(subscription: SubscriptionLike|Promise<any>): void;\n  onDestroy(subscription: SubscriptionLike|Promise<any>): void;\n}\n\nclass ObservableStrategy implements SubscriptionStrategy {\n  createSubscription(async: Observable<any>, updateLatestValue: any): SubscriptionLike {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n\n  dispose(subscription: SubscriptionLike): void { subscription.unsubscribe(); }\n\n  onDestroy(subscription: SubscriptionLike): void { subscription.unsubscribe(); }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n\n  onDestroy(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _observableStrategy = new ObservableStrategy();\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n *\n * @usageNotes\n *\n * ### Examples\n *\n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n *\n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n *\n * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n *\n * @publicApi\n */\n@Pipe({name: 'async', pure: false})\nexport class AsyncPipe implements OnDestroy, PipeTransform {\n  private _latestValue: any = null;\n  private _latestReturnedValue: any = null;\n\n  private _subscription: SubscriptionLike|Promise<any>|null = null;\n  private _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\n  private _strategy: SubscriptionStrategy = null !;\n\n  constructor(private _ref: ChangeDetectorRef) {}\n\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>|null|undefined): T|null;\n  transform<T>(obj: Promise<T>|null|undefined): T|null;\n  transform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj as any);\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n\n  private _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n\n  private _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ÉµisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ÉµisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n\n  private _dispose(): void {\n    this._strategy.dispose(this._subscription !);\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * Transforms text to all lower case.\n *\n * @see `UpperCasePipe`\n * @see `TitleCasePipe`\n * @usageNotes\n *\n * The following example defines a view that allows the user to enter\n * text, and then uses the pipe to convert the input text to all lower case.\n *\n * <code-example path=\"common/pipes/ts/lowerupper_pipe.ts\" region='LowerUpperPipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({name: 'lowercase'})\nexport class LowerCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to lower case.\n   */\n  transform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\n}\n\n//\n// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result\n// can be achieved by using /\\p{L}\\S*/gu and also known as Unicode Property Escapes\n// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no\n// transpilation of this functionality down to ES5 without external tool, the only solution is\n// to use already transpiled form. Example can be found here -\n// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1\n//\n\nconst unicodeWordMatch =\n    /(?:[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D])\\S*/g;\n\n/**\n * Transforms text to title case.\n * Capitalizes the first letter of each word, and transforms the\n * rest of the word to lower case.\n * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.\n *\n * @see `LowerCasePipe`\n * @see `UpperCasePipe`\n *\n * @usageNotes\n * The following example shows the result of transforming various strings into title case.\n *\n * <code-example path=\"common/pipes/ts/titlecase_pipe.ts\" region='TitleCasePipe'></code-example>\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({name: 'titlecase'})\nexport class TitleCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to title case.\n   */\n  transform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.replace(\n        unicodeWordMatch, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase()));\n  }\n}\n\n/**\n * Transforms text to all upper case.\n * @see `LowerCasePipe`\n * @see `TitleCasePipe`\n *\n * @ngModule CommonModule\n * @publicApi\n */\n@Pipe({name: 'uppercase'})\nexport class UpperCasePipe implements PipeTransform {\n  /**\n   * @param value The string to transform to upper case.\n   */\n  transform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatDate} from '../i18n/format_date';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n// clang-format off\n/**\n * @ngModule CommonModule\n * @description\n *\n * Formats a date value according to locale rules.\n *\n * Only the `en-US` locale data comes with Angular. To localize dates\n * in another language, you must import the corresponding locale data.\n * See the [I18n guide](guide/i18n#i18n-pipes) for more information.\n *\n * @see `formatDate()`\n *\n *\n * @usageNotes\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to\n * reformat the date on every change-detection cycle, treat the date as an immutable object\n * and change the reference when the pipe needs to run again.\n *\n * ### Pre-defined format options\n *\n * Examples are given in `en-US` locale.\n *\n * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).\n * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).\n * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM\n * GMT+1`).\n * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at\n * 9:03:01 AM GMT+01:00`).\n * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).\n * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).\n * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).\n * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).\n * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).\n * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).\n * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).\n * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).\n *\n * ### Custom format options\n *\n * You can construct a format string using symbols to specify the components\n * of a date-time value, as described in the following table.\n * Format details depend on the locale.\n * Fields marked with (*) are only available in the extra data set for the given locale.\n *\n *  | Field type         | Format      | Description                                                   | Example Value                                              |\n *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|\n *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |\n *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |\n *  |                    | GGGGG       | Narrow                                                        | A                                                          |\n *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |\n *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |\n *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |\n *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |\n *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |\n *  |                    | MMMM        | Wide                                                          | September                                                  |\n *  |                    | MMMMM       | Narrow                                                        | S                                                          |\n *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |\n *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |\n *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |\n *  |                    | LLLL        | Wide                                                          | September                                                  |\n *  |                    | LLLLL       | Narrow                                                        | S                                                          |\n *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |\n *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |\n *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |\n *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |\n *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |\n *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |\n *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |\n *  |                    | EEEEE       | Narrow                                                        | T                                                          |\n *  |                    | EEEEEE      | Short                                                         | Tu                                                         |\n *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                    | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n * Note that timezone correction is not applied to an ISO string that has no time component, such as \"2016-09-19\"\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();\n * }\n * ```\n *\n * @publicApi\n */\n// clang-format on\n@Pipe({name: 'date', pure: true})\nexport class DatePipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  /**\n   * @param value The date expression: a `Date` object,  a number\n   * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).\n   * @param format The date/time components to include, using predefined options or a\n   * custom format string.\n   * @param timezone A timezone offset (such as `'+0430'`), or a standard\n   * UTC/GMT or continental US timezone abbreviation. Default is\n   * the local system timezone of the end-user's machine.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   * @returns A date string in the desired format.\n   */\n  transform(value: any, format = 'mediumDate', timezone?: string, locale?: string): string|null {\n    if (value == null || value === '' || value !== value) return null;\n\n    try {\n      return formatDate(value, format, locale || this.locale, timezone);\n    } catch (error) {\n      throw invalidPipeArgumentError(DatePipe, error.message);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../i18n/localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst _INTERPOLATION_REGEXP: RegExp = /#/g;\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Maps a value to a string that pluralizes the value according to locale rules.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({name: 'i18nPlural', pure: true})\nexport class I18nPluralPipe implements PipeTransform {\n  constructor(private _localization: NgLocalization) {}\n\n  /**\n   * @param value the number to be formatted\n   * @param pluralMap an object that mimics the ICU format, see\n   * http://userguide.icu-project.org/formatparse/messages.\n   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by\n   * default).\n   */\n  transform(value: number, pluralMap: {[count: string]: string}, locale?: string): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Generic selector that displays the string that matches the current value.\n *\n * If none of the keys of the `mapping` match the `value`, then the content\n * of the `other` key is returned when present, otherwise an empty string is returned.\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n *\n * @publicApi\n */\n@Pipe({name: 'i18nSelect', pure: true})\nexport class I18nSelectPipe implements PipeTransform {\n  /**\n   * @param value a string to be internationalized.\n   * @param mapping an object that indicates the text that should be displayed\n   * for different values of the provided `value`.\n   */\n  transform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Converts a value into its JSON-format representation.  Useful for debugging.\n *\n * @usageNotes\n *\n * The following component uses a JSON pipe to convert an object\n * to JSON format, and displays the string in both formats for comparison.\n *\n * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'json', pure: false})\nexport class JsonPipe implements PipeTransform {\n  /**\n   * @param value A value of any type to convert into a JSON-format string.\n   */\n  transform(value: any): string { return JSON.stringify(value, null, 2); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {KeyValueChangeRecord, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Pipe, PipeTransform} from '@angular/core';\n\nfunction makeKeyValuePair<K, V>(key: K, value: V): KeyValue<K, V> {\n  return {key: key, value: value};\n}\n\n/**\n * A key value pair.\n * Usually used to represent the key value pairs from a Map or Object.\n *\n * @publicApi\n */\nexport interface KeyValue<K, V> {\n  key: K;\n  value: V;\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms Object or Map into an array of key value pairs.\n *\n * The output array will be ordered by keys.\n * By default the comparator will be by Unicode point value.\n * You can optionally pass a compareFn if your keys are complex types.\n *\n * @usageNotes\n * ### Examples\n *\n * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue\n * pipe.\n *\n * {@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}\n *\n * @publicApi\n */\n@Pipe({name: 'keyvalue', pure: false})\nexport class KeyValuePipe implements PipeTransform {\n  constructor(private readonly differs: KeyValueDiffers) {}\n\n  private differ !: KeyValueDiffer<any, any>;\n  private keyValues: Array<KeyValue<any, any>> = [];\n\n  transform<K, V>(input: null, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number): null;\n  transform<V>(\n      input: {[key: string]: V}|Map<string, V>,\n      compareFn?: (a: KeyValue<string, V>, b: KeyValue<string, V>) => number):\n      Array<KeyValue<string, V>>;\n  transform<V>(\n      input: {[key: number]: V}|Map<number, V>,\n      compareFn?: (a: KeyValue<number, V>, b: KeyValue<number, V>) => number):\n      Array<KeyValue<number, V>>;\n  transform<K, V>(input: Map<K, V>, compareFn?: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number):\n      Array<KeyValue<K, V>>;\n  transform<K, V>(\n      input: null|{[key: string]: V, [key: number]: V}|Map<K, V>,\n      compareFn: (a: KeyValue<K, V>, b: KeyValue<K, V>) => number = defaultComparator):\n      Array<KeyValue<K, V>>|null {\n    if (!input || (!(input instanceof Map) && typeof input !== 'object')) {\n      return null;\n    }\n\n    if (!this.differ) {\n      // make a differ for whatever type we've been passed in\n      this.differ = this.differs.find(input).create();\n    }\n\n    const differChanges: KeyValueChanges<K, V>|null = this.differ.diff(input as any);\n\n    if (differChanges) {\n      this.keyValues = [];\n      differChanges.forEachItem((r: KeyValueChangeRecord<K, V>) => {\n        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue !));\n      });\n      this.keyValues.sort(compareFn);\n    }\n    return this.keyValues;\n  }\n}\n\nexport function defaultComparator<K, V>(\n    keyValueA: KeyValue<K, V>, keyValueB: KeyValue<K, V>): number {\n  const a = keyValueA.key;\n  const b = keyValueB.key;\n  // if same exit with 0;\n  if (a === b) return 0;\n  // make sure that undefined are at the end of the sort.\n  if (a === undefined) return 1;\n  if (b === undefined) return -1;\n  // make sure that nulls are at the end of the sort.\n  if (a === null) return 1;\n  if (b === null) return -1;\n  if (typeof a == 'string' && typeof b == 'string') {\n    return a < b ? -1 : 1;\n  }\n  if (typeof a == 'number' && typeof b == 'number') {\n    return a - b;\n  }\n  if (typeof a == 'boolean' && typeof b == 'boolean') {\n    return a < b ? -1 : 1;\n  }\n  // `a` and `b` are of different types. Compare their string values.\n  const aString = String(a);\n  const bString = String(b);\n  return aString == bString ? 0 : aString < bString ? -1 : 1;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {formatCurrency, formatNumber, formatPercent} from '../i18n/format_number';\nimport {getCurrencySymbol} from '../i18n/locale_data_api';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number into a string,\n * formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * If no parameters are specified, the function rounds off to the nearest value using this\n * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).\n * The behavior differs from that of the JavaScript ```Math.round()``` function.\n * In the following case for example, the pipe rounds down where\n * ```Math.round()``` rounds up:\n *\n * ```html\n * -2.5 | number:'1.0-0'\n * > -3\n * Math.round(-2.5)\n * > -2\n * ```\n *\n * @see `formatNumber()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * ### Example\n *\n * <code-example path=\"common/pipes/ts/number_pipe.ts\" region='NumberPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({name: 'number'})\nexport class DecimalPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   * @param value The number to be formatted.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `3`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatNumber(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(DecimalPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a percentage\n * string, formatted according to locale rules that determine group sizing and\n * separator, decimal-point character, and other locale-specific\n * configurations.\n *\n * @see `formatPercent()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/percent_pipe.ts\" region='PercentPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({name: 'percent'})\nexport class PercentPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value The number to be formatted as a percentage.\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `0`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `0`.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(value: any, digitsInfo?: string, locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    try {\n      const num = strToNumber(value);\n      return formatPercent(num, locale, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(PercentPipe, error.message);\n    }\n  }\n}\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Transforms a number to a currency string, formatted according to locale rules\n * that determine group sizing and separator, decimal-point character,\n * and other locale-specific configurations.\n *\n * @see `getCurrencySymbol()`\n * @see `formatCurrency()`\n *\n * @usageNotes\n * The following code shows how the pipe transforms numbers\n * into text strings, according to various format specifications,\n * where the caller's default locale is `en-US`.\n *\n * <code-example path=\"common/pipes/ts/currency_pipe.ts\" region='CurrencyPipe'></code-example>\n *\n * @publicApi\n */\n@Pipe({name: 'currency'})\nexport class CurrencyPipe implements PipeTransform {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {}\n\n  /**\n   *\n   * @param value The number to be formatted as currency.\n   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,\n   * such as `USD` for the US dollar and `EUR` for the euro.\n   * @param display The format for the currency indicator. One of the following:\n   *   - `code`: Show the code (such as `USD`).\n   *   - `symbol`(default): Show the symbol (such as `$`).\n   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their\n   * currency.\n   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the\n   * locale has no narrow symbol, uses the standard symbol for the locale.\n   *   - String: Use the given string value instead of a code or a symbol.\n   * For example, an empty string will suppress the currency & symbol.\n   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.\n   *\n   * @param digitsInfo Decimal representation options, specified by a string\n   * in the following format:<br>\n   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.\n   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.\n   * Default is `1`.\n   *   - `minFractionDigits`: The minimum number of digits after the decimal point.\n   * Default is `2`.\n   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.\n   * Default is `2`.\n   * If not provided, the number will be formatted with the proper amount of digits,\n   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.\n   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.\n   * @param locale A locale code for the locale format rules to use.\n   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.\n   * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).\n   */\n  transform(\n      value: any, currencyCode?: string,\n      display: 'code'|'symbol'|'symbol-narrow'|string|boolean = 'symbol', digitsInfo?: string,\n      locale?: string): string|null {\n    if (isEmpty(value)) return null;\n\n    locale = locale || this._locale;\n\n    if (typeof display === 'boolean') {\n      if (<any>console && <any>console.warn) {\n        console.warn(\n            `Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are \"code\", \"symbol\" or \"symbol-narrow\".`);\n      }\n      display = display ? 'symbol' : 'code';\n    }\n\n    let currency: string = currencyCode || 'USD';\n    if (display !== 'code') {\n      if (display === 'symbol' || display === 'symbol-narrow') {\n        currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);\n      } else {\n        currency = display;\n      }\n    }\n\n    try {\n      const num = strToNumber(value);\n      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);\n    } catch (error) {\n      throw invalidPipeArgumentError(CurrencyPipe, error.message);\n    }\n  }\n}\n\nfunction isEmpty(value: any): boolean {\n  return value == null || value === '' || value !== value;\n}\n\n/**\n * Transforms a string into a number (if needed).\n */\nfunction strToNumber(value: number | string): number {\n  // Convert strings to numbers\n  if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {\n    return Number(value);\n  }\n  if (typeof value !== 'number') {\n    throw new Error(`${value} is not a number`);\n  }\n  return value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\n/**\n * @ngModule CommonModule\n * @description\n *\n * Creates a new `Array` or `String` containing a subset (slice) of the elements.\n *\n * @usageNotes\n *\n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n *\n * When operating on an `Array`, the returned `Array` is always a copy even when all\n * the elements are being returned.\n *\n * When operating on a blank value, the pipe returns the blank value.\n *\n * ### List Example\n *\n * This `ngFor` example:\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n *\n * produces the following:\n *\n * ```html\n * <li>b</li>\n * <li>c</li>\n * ```\n *\n * ### String Examples\n *\n * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n *\n * @publicApi\n */\n@Pipe({name: 'slice', pure: false})\nexport class SlicePipe implements PipeTransform {\n  /**\n   * @param value a list or a string to be sliced.\n   * @param start the starting index of the subset to return:\n   *   - **a positive integer**: return the item at `start` index and all items after\n   *     in the list or string expression.\n   *   - **a negative integer**: return the item at `start` index from the end and all items after\n   *     in the list or string expression.\n   *   - **if positive and greater than the size of the expression**: return an empty list or\n   * string.\n   *   - **if negative and greater than the size of the expression**: return entire list or string.\n   * @param end the ending index of the subset to return:\n   *   - **omitted**: return all items until the end.\n   *   - **if positive**: return all items before `end` index of the list or string.\n   *   - **if negative**: return all items before `end` index from the end of the list or string.\n   */\n  transform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n\n  private supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {KeyValue, KeyValuePipe} from './keyvalue_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  KeyValue,\n  KeyValuePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe,\n};\n\n\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  KeyValuePipe,\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {COMMON_DIRECTIVES} from './directives/index';\nimport {DEPRECATED_PLURAL_FN, NgLocaleLocalization, NgLocalization, getPluralCase} from './i18n/localization';\nimport {COMMON_DEPRECATED_I18N_PIPES} from './pipes/deprecated/index';\nimport {COMMON_PIPES} from './pipes/index';\n\n\n// Note: This does not contain the location providers,\n// as they need some platform specific implementations to work.\n/**\n * Exports all the basic Angular directives and pipes,\n * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.\n * Re-exported by `BrowserModule`, which is included automatically in the root\n * `AppModule` when you create a new app with the CLI `new` command.\n *\n * * The `providers` options configure the NgModule's injector to provide\n * localization dependencies to members.\n * * The `exports` options make the declared directives and pipes available for import\n * by other NgModules.\n *\n * @publicApi\n */\n@NgModule({\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n})\nexport class CommonModule {\n}\n\n/**\n * A module that contains the deprecated i18n pipes.\n *\n * @deprecated from v5\n * @publicApi\n */\n@NgModule({\n  declarations: [COMMON_DEPRECATED_I18N_PIPES],\n  exports: [COMMON_DEPRECATED_I18N_PIPES],\n  providers: [{provide: DEPRECATED_PLURAL_FN, useValue: getPluralCase}],\n})\nexport class DeprecatedI18NPipesModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\nexport const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_APP_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_UI_ID;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nlet _DOM: DomAdapter = null !;\n\nexport function getDOM() {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  public resourceLoaderType: Type<any> = null !;\n  abstract hasProperty(element: any, name: string): boolean;\n  abstract setProperty(el: Element, name: string, value: any): any;\n  abstract getProperty(el: Element, name: string): any;\n  abstract invoke(el: Element, methodName: string, args: any[]): any;\n\n  abstract logError(error: any): any;\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n\n  /**\n   * Maps attribute names to their corresponding property names for cases\n   * where attribute name doesn't match property name.\n   */\n  get attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; }\n  set attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; }\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _attrToPropMap !: {[key: string]: string};\n\n  abstract contains(nodeA: any, nodeB: any): boolean;\n  abstract parse(templateHtml: string): any;\n  abstract querySelector(el: any, selector: string): any;\n  abstract querySelectorAll(el: any, selector: string): any[];\n  abstract on(el: any, evt: any, listener: any): any;\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract createMouseEvent(eventType: any): any;\n  abstract createEvent(eventType: string): any;\n  abstract preventDefault(evt: any): any;\n  abstract isPrevented(evt: any): boolean;\n  abstract getInnerHTML(el: any): string;\n  /** Returns content if el is a <template> element, null otherwise. */\n  abstract getTemplateContent(el: any): any;\n  abstract getOuterHTML(el: any): string;\n  abstract nodeName(node: any): string;\n  abstract nodeValue(node: any): string|null;\n  abstract type(node: any): string;\n  abstract content(node: any): any;\n  abstract firstChild(el: any): Node|null;\n  abstract nextSibling(el: any): Node|null;\n  abstract parentElement(el: any): Node|null;\n  abstract childNodes(el: any): Node[];\n  abstract childNodesAsList(el: any): Node[];\n  abstract clearNodes(el: any): any;\n  abstract appendChild(el: any, node: any): any;\n  abstract removeChild(el: any, node: any): any;\n  abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n  abstract remove(el: any): Node;\n  abstract insertBefore(parent: any, ref: any, node: any): any;\n  abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n  abstract insertAfter(parent: any, el: any, node: any): any;\n  abstract setInnerHTML(el: any, value: any): any;\n  abstract getText(el: any): string|null;\n  abstract setText(el: any, value: string): any;\n  abstract getValue(el: any): string;\n  abstract setValue(el: any, value: string): any;\n  abstract getChecked(el: any): boolean;\n  abstract setChecked(el: any, value: boolean): any;\n  abstract createComment(text: string): any;\n  abstract createTemplate(html: any): HTMLElement;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n  abstract createTextNode(text: string, doc?: any): Text;\n  abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n  abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n  abstract createShadowRoot(el: any): any;\n  abstract getShadowRoot(el: any): any;\n  abstract getHost(el: any): any;\n  abstract getDistributedNodes(el: any): Node[];\n  abstract clone /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n  abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n  abstract classList(element: any): any[];\n  abstract addClass(element: any, className: string): any;\n  abstract removeClass(element: any, className: string): any;\n  abstract hasClass(element: any, className: string): boolean;\n  abstract setStyle(element: any, styleName: string, styleValue: string): any;\n  abstract removeStyle(element: any, styleName: string): any;\n  abstract getStyle(element: any, styleName: string): string;\n  abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n  abstract tagName(element: any): string;\n  abstract attributeMap(element: any): Map<string, string>;\n  abstract hasAttribute(element: any, attribute: string): boolean;\n  abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n  abstract getAttribute(element: any, attribute: string): string|null;\n  abstract getAttributeNS(element: any, ns: string, attribute: string): string|null;\n  abstract setAttribute(element: any, name: string, value: string): any;\n  abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n  abstract removeAttribute(element: any, attribute: string): any;\n  abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n  abstract templateAwareRoot(el: any): any;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n  abstract getBoundingClientRect(el: any): any;\n  abstract getTitle(doc: Document): string;\n  abstract setTitle(doc: Document, newTitle: string): any;\n  abstract elementMatches(n: any, selector: string): boolean;\n  abstract isTemplateElement(el: any): boolean;\n  abstract isTextNode(node: any): boolean;\n  abstract isCommentNode(node: any): boolean;\n  abstract isElementNode(node: any): boolean;\n  abstract hasShadowRoot(node: any): boolean;\n  abstract isShadowRoot(node: any): boolean;\n  abstract importIntoDoc /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract adoptNode /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getHref(element: any): string;\n  abstract getEventKey(event: any): string;\n  abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n  abstract supportsDOMEvents(): boolean;\n  abstract supportsNativeShadowDOM(): boolean;\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n  abstract getHistory(): History;\n  abstract getLocation(): Location;\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n  abstract getUserAgent(): string;\n  abstract setData(element: any, name: string, value: string): any;\n  abstract getComputedStyle(element: any): any;\n  abstract getData(element: any, name: string): string|null;\n  abstract supportsWebAnimation(): boolean;\n  abstract performanceNow(): number;\n  abstract getAnimationPrefix(): string;\n  abstract getTransitionEnd(): string;\n  abstract supportsAnimation(): boolean;\n\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string|null;\n  abstract setCookie(name: string, value: string): any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Éµglobal as global} from '@angular/core';\n\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  parse(templateHtml: string) { throw new Error('parse not implemented'); }\n  static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n  hasProperty(element: Node, name: string): boolean { return name in element; }\n  setProperty(el: Node, name: string, value: any) { (<any>el)[name] = value; }\n  getProperty(el: Node, name: string): any { return (<any>el)[name]; }\n  invoke(el: Node, methodName: string, args: any[]): any { (<any>el)[methodName](...args); }\n\n  // TODO(tbosch): move this into a separate environment class once we have it\n  logError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  get attrToPropMap(): any { return _attrToPropMap; }\n\n  contains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n  querySelector(el: HTMLElement, selector: string): any { return el.querySelector(selector); }\n  querySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n  on(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n  dispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n  createMouseEvent(eventType: string): MouseEvent {\n    const evt: MouseEvent = this.getDefaultDocument().createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  createEvent(eventType: any): Event {\n    const evt: Event = this.getDefaultDocument().createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  preventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n  isPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n  getInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n  getTemplateContent(el: Node): Node|null {\n    return 'content' in el && this.isTemplateElement(el) ? (<any>el).content : null;\n  }\n  getOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n  nodeName(node: Node): string { return node.nodeName; }\n  nodeValue(node: Node): string|null { return node.nodeValue; }\n  type(node: HTMLInputElement): string { return node.type; }\n  content(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return (<any>node).content;\n    } else {\n      return node;\n    }\n  }\n  firstChild(el: Node): Node|null { return el.firstChild; }\n  nextSibling(el: Node): Node|null { return el.nextSibling; }\n  parentElement(el: Node): Node|null { return el.parentNode; }\n  childNodes(el: any): Node[] { return el.childNodes; }\n  childNodesAsList(el: Node): any[] {\n    const childNodes = el.childNodes;\n    const res = new Array(childNodes.length);\n    for (let i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n  clearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n  appendChild(el: Node, node: Node) { el.appendChild(node); }\n  removeChild(el: Node, node: Node) { el.removeChild(node); }\n  replaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  insertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n  insertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n  insertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n  setInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n  getText(el: Node): string|null { return el.textContent; }\n  setText(el: Node, value: string) { el.textContent = value; }\n  getValue(el: any): string { return el.value; }\n  setValue(el: any, value: string) { el.value = value; }\n  getChecked(el: any): boolean { return el.checked; }\n  setChecked(el: any, value: boolean) { el.checked = value; }\n  createComment(text: string): Comment { return this.getDefaultDocument().createComment(text); }\n  createTemplate(html: any): HTMLElement {\n    const t = this.getDefaultDocument().createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createElementNS(ns: string, tagName: string, doc?: Document): Element {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElementNS(ns, tagName);\n  }\n  createTextNode(text: string, doc?: Document): Text {\n    doc = doc || this.getDefaultDocument();\n    return doc.createTextNode(text);\n  }\n  createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement {\n    doc = doc || this.getDefaultDocument();\n    const el = <HTMLScriptElement>doc.createElement('SCRIPT');\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n  createStyleElement(css: string, doc?: Document): HTMLStyleElement {\n    doc = doc || this.getDefaultDocument();\n    const style = <HTMLStyleElement>doc.createElement('style');\n    this.appendChild(style, this.createTextNode(css, doc));\n    return style;\n  }\n  createShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).createShadowRoot(); }\n  getShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).shadowRoot; }\n  getHost(el: HTMLElement): HTMLElement { return (<any>el).host; }\n  clone(node: Node): Node { return node.cloneNode(true); }\n  getElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n  getElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n  classList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n  addClass(element: any, className: string) { element.classList.add(className); }\n  removeClass(element: any, className: string) { element.classList.remove(className); }\n  hasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n  setStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n  removeStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n  getStyle(element: any, stylename: string): string { return element.style[stylename]; }\n  hasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n  tagName(element: any): string { return element.tagName; }\n  attributeMap(element: any): Map<string, string> {\n    const res = new Map<string, string>();\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const attrib = elAttrs.item(i);\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n  hasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n  hasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n  getAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n  getAttributeNS(element: Element, ns: string, name: string): string|null {\n    return element.getAttributeNS(ns, name);\n  }\n  setAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n  setAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n  removeAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n  removeAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n  templateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document { return document; }\n  getBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n  getTitle(doc: Document): string { return doc.title; }\n  setTitle(doc: Document, newTitle: string) { doc.title = newTitle || ''; }\n  elementMatches(n: any, selector: string): boolean {\n    if (this.isElementNode(n)) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n  isTemplateElement(el: Node): boolean {\n    return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n  }\n  isTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n  isCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n  isElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n  hasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n  isShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n  importIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n  adoptNode(node: Node): any { return document.adoptNode(node); }\n  getHref(el: Element): string { return el.getAttribute('href') !; }\n\n  getEventKey(event: any): string {\n    let key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = (_chromeNumKeyPadMap as any)[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History { return window.history; }\n  getLocation(): Location { return window.location; }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void { baseElement = null; }\n  getUserAgent(): string { return window.navigator.userAgent; }\n  setData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n  getData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n  getComputedStyle(element: any): any { return getComputedStyle(element); }\n  // TODO(tbosch): move this into a separate environment class once we have it\n  supportsWebAnimation(): boolean {\n    return typeof(<any>Element).prototype['animate'] === 'function';\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean { return true; }\n\n  getCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n\n  setCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base') !;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomAdapter} from '../dom/dom_adapter';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  private _animationPrefix: string|null = null;\n  private _transitionEnd: string|null = null;\n  constructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n\n  getDistributedNodes(el: HTMLElement): Node[] { return (<any>el).getDistributedNodes(); }\n  resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n  supportsDOMEvents(): boolean { return true; }\n  supportsNativeShadowDOM(): boolean {\n    return typeof(<any>document.body).createShadowRoot === 'function';\n  }\n  getAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n  getTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n  supportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT as commonDOCUMENT} from '@angular/common';\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n * @publicApi\n */\nexport const DOCUMENT = commonDOCUMENT;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: any[] =\n          Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n      styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, Éµglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() { setTestabilityGetter(new BrowserGetTestability()); }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as{[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as core from '@angular/core';\nimport {exportNgVar} from '../util';\n\nconst CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst INSPECT_GLOBAL_NAME = 'probe';\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n\nexport function _createNgProbe(coreTokens: core.NgProbeToken[]): any {\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(coreTokens || [])});\n  return () => inspectNativeElement;\n}\n\nfunction _ngProbeTokensToMap(tokens: core.NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone { return this._zone; }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager !: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] { return Array.from(this._stylesSet); }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  private _hostNodes = new Set<Node>();\n  private _styleNodes = new Set<Node>();\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n\n  removeHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n\n  onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n\n  ngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n      case ViewEncapsulation.ShadowDom:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode: null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any { return document.createComment(value); }\n\n  createText(value: string): any { return document.createTextNode(value); }\n\n  appendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any { return node.parentNode; }\n\n  nextSibling(node: any): any { return node.nextSibling; }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void { el.classList.add(name); }\n\n  removeClass(el: any, name: string): void { el.classList.remove(name); }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void { node.nodeValue = value; }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as() => void;\n  }\n}\n\nconst AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n\n  applyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n\n  createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, private component: RendererType2) {\n    super(eventManager);\n    if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n      this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    } else {\n      this.shadowRoot = (hostEl as any).createShadowRoot();\n    }\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n\n  destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n\n  appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional, PLATFORM_ID} from '@angular/core';\n\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nconst __symbol__ =\n    (typeof Zone !== 'undefined') && (Zone as any)['__symbol__'] || function(v: string): string {\n      return '__zone_symbol__' + v;\n    };\nconst ADD_EVENT_LISTENER: 'addEventListener' = __symbol__('addEventListener');\nconst REMOVE_EVENT_LISTENER: 'removeEventListener' = __symbol__('removeEventListener');\n\nconst symbolNames: {[key: string]: string} = {};\n\nconst FALSE = 'FALSE';\nconst ANGULAR = 'ANGULAR';\nconst NATIVE_ADD_LISTENER = 'addEventListener';\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n\n// use the same symbol string which is used in zone.js\nconst stopSymbol = '__zone_symbol__propagationStopped';\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\n\nconst blackListedEvents: string[] =\n    (typeof Zone !== 'undefined') && (Zone as any)[__symbol__('BLACK_LISTED_EVENTS')];\nlet blackListedMap: {[eventName: string]: string};\nif (blackListedEvents) {\n  blackListedMap = {};\n  blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\n}\n\nconst isBlackListedEvent = function(eventName: string) {\n  if (!blackListedMap) {\n    return false;\n  }\n  return blackListedMap.hasOwnProperty(eventName);\n};\n\ninterface TaskData {\n  zone: any;\n  handler: Function;\n}\n\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nconst globalListener = function(event: Event) {\n  const symbolName = symbolNames[event.type];\n  if (!symbolName) {\n    return;\n  }\n  const taskDatas: TaskData[] = this[symbolName];\n  if (!taskDatas) {\n    return;\n  }\n  const args: any = [event];\n  if (taskDatas.length === 1) {\n    // if taskDatas only have one element, just invoke it\n    const taskData = taskDatas[0];\n    if (taskData.zone !== Zone.current) {\n      // only use Zone.run when Zone.current not equals to stored zone\n      return taskData.zone.run(taskData.handler, this, args);\n    } else {\n      return taskData.handler.apply(this, args);\n    }\n  } else {\n    // copy tasks as a snapshot to avoid event handlers remove\n    // itself or others\n    const copiedTasks = taskDatas.slice();\n    for (let i = 0; i < copiedTasks.length; i++) {\n      // if other listener call event.stopImmediatePropagation\n      // just break\n      if ((event as any)[stopSymbol] === true) {\n        break;\n      }\n      const taskData = copiedTasks[i];\n      if (taskData.zone !== Zone.current) {\n        // only use Zone.run when Zone.current not equals to stored zone\n        taskData.zone.run(taskData.handler, this, args);\n      } else {\n        taskData.handler.apply(this, args);\n      }\n    }\n  }\n};\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any, private ngZone: NgZone,\n      @Optional() @Inject(PLATFORM_ID) platformId: {}|null) {\n    super(doc);\n\n    if (!platformId || !isPlatformServer(platformId)) {\n      this.patchEvent();\n    }\n  }\n\n  private patchEvent() {\n    if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n      return;\n    }\n    if ((Event.prototype as any)[stopMethodSymbol]) {\n      // already patched by zone.js\n      return;\n    }\n    const delegate = (Event.prototype as any)[stopMethodSymbol] =\n        Event.prototype.stopImmediatePropagation;\n    Event.prototype.stopImmediatePropagation = function() {\n      if (this) {\n        this[stopSymbol] = true;\n      }\n\n      // should call native delegate in case\n      // in some environment part of the application\n      // will not use the patched Event\n      delegate && delegate.apply(this, arguments);\n    };\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    /**\n     * This code is about to add a listener to the DOM. If Zone.js is present, than\n     * `addEventListener` has been patched. The patched code adds overhead in both\n     * memory and speed (3x slower) than native. For this reason if we detect that\n     * Zone.js is present we use a simple version of zone aware addEventListener instead.\n     * The result is faster registration and the zone will be restored.\n     * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n     * will not be invoked\n     * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n     *\n     * NOTE: it is possible that the element is from different iframe, and so we\n     * have to check before we execute the method.\n     */\n    const self = this;\n    const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n    let callback: EventListener = handler as EventListener;\n    // if zonejs is loaded and current zone is not ngZone\n    // we keep Zone.current on target for later restoration.\n    if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n      let symbolName = symbolNames[eventName];\n      if (!symbolName) {\n        symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n      }\n      let taskDatas: TaskData[] = (element as any)[symbolName];\n      const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n      if (!taskDatas) {\n        taskDatas = (element as any)[symbolName] = [];\n      }\n\n      const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n      if (taskDatas.length === 0) {\n        taskDatas.push({zone: zone, handler: callback});\n      } else {\n        let callbackRegistered = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n          if (taskDatas[i].handler === callback) {\n            callbackRegistered = true;\n            break;\n          }\n        }\n        if (!callbackRegistered) {\n          taskDatas.push({zone: zone, handler: callback});\n        }\n      }\n\n      if (!globalListenerRegistered) {\n        element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n      }\n    } else {\n      element[NATIVE_ADD_LISTENER](eventName, callback, false);\n    }\n    return () => this.removeEventListener(element, eventName, callback);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n    // zone.js not loaded, use native removeEventListener\n    if (!underlyingRemove) {\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    let symbolName = symbolNames[eventName];\n    let taskDatas: TaskData[] = symbolName && target[symbolName];\n    if (!taskDatas) {\n      // addEventListener not using patched version\n      // just call native removeEventListener\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    // fix issue 20532, should be able to remove\n    // listener which was added inside of ngZone\n    let found = false;\n    for (let i = 0; i < taskDatas.length; i++) {\n      // remove listener from taskDatas if the callback equals\n      if (taskDatas[i].handler === callback) {\n        found = true;\n        taskDatas.splice(i, 1);\n        break;\n      }\n    }\n    if (found) {\n      if (taskDatas.length === 0) {\n        // all listeners are removed, we can remove the globalListener from target\n        underlyingRemove.apply(target, [eventName, globalListener, false]);\n      }\n    } else {\n      // not found in taskDatas, the callback may be added inside of ngZone\n      // use native remove listener to remove the callback\n      target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext, Éµ_sanitizeHtml as _sanitizeHtml, Éµ_sanitizeStyle as _sanitizeStyle, Éµ_sanitizeUrl as _sanitizeUrl} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n@Injectable()\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) { super(); }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return _sanitizeStyle(value as string);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional, ÉµConsole as Console} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n  * Maps gesture event names to a set of configuration options\n  * that specify overrides to the default values for specific properties.\n  *\n  * The key is a supported event name to be configured,\n  * and the options object contains a set of properties, with override values\n  * to be applied to the named recognizer event.\n  * For example, to disable recognition of the rotate event, specify\n  *  `{\"rotate\": {\"enable\": false}}`.\n  *\n  * Properties that are not present take the HammerJS default values.\n  * For information about which properties are supported for which events,\n  * and their allowed and default values, see\n  * [HammerJS documentation](http://hammerjs.github.io/).\n  *\n  */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any; domEvents?: boolean; enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer !(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      this.console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n          `loaded and no custom loader has been specified.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => { cancelRegistration = true; };\n\n      this.loader()\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              this.console.warn(\n                  `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            this.console.warn(\n                `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`);\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => { deregister(); };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) { super(doc); }\n\n  /**\n    * Reports whether a named key event is supported.\n    * @param eventName The event name to query.\n    * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n  */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName) !;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop() !);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, PlatformLocation, ÉµPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, createPlatformFactory, platformCore, ÉµAPP_ROOT as APP_ROOT, ÉµConsole as Console} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT]},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\n/**\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  return document;\n}\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: APP_ROOT, useValue: true},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Component, NgModule, enableProdMode} from '@angular/core';\nimport {BrowserModule, platformBrowser} from '@angular/platform-browser';\n\n@Component({selector: 'hello-world', template: 'Hello World!'})\nexport class HelloWorldComponent {\n}\n\n@NgModule({\n  declarations: [HelloWorldComponent],\n  imports: [BrowserModule],\n  bootstrap: [HelloWorldComponent]\n})\nexport class HelloWorldModule {\n}\n\nenableProdMode();\n\nplatformBrowser().bootstrapModule(HelloWorldModule);\n"]}