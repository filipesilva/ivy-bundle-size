{"version":3,"sources":["../../../../../../external/npm/node_modules/tslib/tslib.es6.js","../../../../../../../external/angular/packages/core/src/util/property.ts","../../../../../../../external/angular/packages/core/src/render3/fields.ts","../../../../../../../external/angular/packages/core/src/di/defs.ts","../../../../../../../external/angular/packages/core/src/di/injection_token.ts","../../../../../../../external/angular/packages/core/src/util/decorators.ts","../../../../../../../external/angular/packages/core/src/metadata/di.ts","../../../../../../../external/angular/packages/core/src/util.ts","../../../../../../../external/angular/packages/core/src/di/forward_ref.ts","../../../../../../../external/angular/packages/core/src/render3/jit/compiler_facade_interface.ts","../../../../../../../external/angular/packages/core/src/di/injector_compatibility.ts","../../../../../../../external/angular/packages/core/src/di/metadata.ts","../../../../../../../external/angular/packages/core/src/di/injector.ts","../../../../../../../external/angular/packages/core/src/util/noop.ts","../../../../../../../external/angular/packages/core/src/linker/component_factory.ts","../../../../../../../external/angular/packages/core/src/linker/component_factory_resolver.ts","../../../../../../../external/angular/packages/core/src/linker/ng_module_factory.ts","../../../../../../../external/angular/packages/core/src/is_dev_mode.ts","../../../../../external/rxjs/internal/util/isFunction.ts","../../../../../external/rxjs/internal/config.ts","../../../../../external/rxjs/internal/util/hostReportError.ts","../../../../../external/rxjs/internal/Observer.ts","../../../../../external/rxjs/internal/util/isArray.ts","../../../../../external/rxjs/internal/util/isObject.ts","../../../../../external/rxjs/internal/util/errorObject.ts","../../../../../external/rxjs/internal/util/tryCatch.ts","../../../../../external/rxjs/internal/util/UnsubscriptionError.ts","../../../../../external/rxjs/internal/Subscription.ts","../../../../../external/rxjs/internal/symbol/rxSubscriber.ts","../../../../../external/rxjs/internal/Subscriber.ts","../../../../../external/rxjs/internal/symbol/observable.ts","../../../../../external/rxjs/internal/util/noop.ts","../../../../../external/rxjs/internal/Observable.ts","../../../../../external/rxjs/internal/util/toSubscriber.ts","../../../../../external/rxjs/internal/util/canReportError.ts","../../../../../external/rxjs/internal/util/pipe.ts","../../../../../external/rxjs/internal/util/ObjectUnsubscribedError.ts","../../../../../external/rxjs/internal/SubjectSubscription.ts","../../../../../external/rxjs/internal/Subject.ts","../../../../../external/rxjs/internal/operators/refCount.ts","../../../../../external/rxjs/internal/observable/ConnectableObservable.ts","../../../../../external/rxjs/internal/util/subscribeToArray.ts","../../../../../external/rxjs/internal/observable/fromArray.ts","../../../../../external/rxjs/internal/util/identity.ts","../../../../../external/rxjs/internal/util/EmptyError.ts","../../../../../external/rxjs/internal/operators/map.ts","../../../../../external/rxjs/internal/OuterSubscriber.ts","../../../../../external/rxjs/internal/InnerSubscriber.ts","../../../../../external/rxjs/internal/util/subscribeToPromise.ts","../../../../../external/rxjs/internal/symbol/iterator.ts","../../../../../external/rxjs/internal/util/subscribeToIterable.ts","../../../../../external/rxjs/internal/util/subscribeToObservable.ts","../../../../../external/rxjs/internal/util/isArrayLike.ts","../../../../../external/rxjs/internal/util/isPromise.ts","../../../../../external/rxjs/internal/util/subscribeTo.ts","../../../../../external/rxjs/internal/operators/mergeMap.ts","../../../../../external/rxjs/internal/util/subscribeToResult.ts","../../../../../../../external/angular/packages/core/src/event_emitter.ts","../../../../../../../external/angular/packages/core/src/type.ts","../../../../../../../external/angular/packages/core/src/reflection/reflection_capabilities.ts","../../../../../../../external/angular/packages/core/src/metadata/directives.ts","../../../../../../../external/angular/packages/core/src/di/util.ts","../../../../../../../external/angular/packages/core/src/render3/jit/injectable.ts","../../../../../../../external/angular/packages/core/src/metadata/ng_module.ts","../../../../../../../external/angular/packages/core/src/di/injectable.ts","../../../../../../../external/angular/packages/core/src/errors.ts","../../../../../../../external/angular/packages/core/src/error_handler.ts","../../../../../external/rxjs/internal/operators/multicast.ts","../../../../../external/rxjs/internal/operators/share.ts","../../../../../../../external/angular/packages/core/src/util/lang.ts","../../../../../../../external/angular/packages/core/src/application_init.ts","../../../../../../../external/angular/packages/core/src/profile/wtf_impl.ts","../../../../../../../external/angular/packages/core/src/application_tokens.ts","../../../../../../../external/angular/packages/core/src/console.ts","../../../../../../../external/angular/packages/core/src/linker/compiler.ts","../../../../../../../external/angular/packages/core/src/profile/profile.ts","../../../../../../../external/angular/packages/core/src/zone/ng_zone.ts","../../../../../../../external/angular/packages/core/src/application_ref.ts","../../../../../../../external/angular/packages/core/src/testability/testability.ts","../../../../../external/rxjs/internal/observable/merge.ts","../../../../../external/rxjs/internal/util/isScheduler.ts","../../../../../external/rxjs/internal/operators/mergeAll.ts","../../../../../external/rxjs/internal/observable/from.ts","../../../../../external/rxjs/internal/util/isInteropObservable.ts","../../../../../external/rxjs/internal/observable/fromObservable.ts","../../../../../external/rxjs/internal/observable/fromPromise.ts","../../../../../external/rxjs/internal/util/isIterable.ts","../../../../../external/rxjs/internal/observable/fromIterable.ts","../../../../../../../external/angular/packages/core/src/change_detection/differs/keyvalue_differs.ts","../../../../../../../external/angular/packages/core/src/platform_core_providers.ts","../../../../../../../external/angular/packages/common/src/location/platform_location.ts","../../../../../../../external/angular/packages/common/src/dom_tokens.ts","../../../../../../../external/angular/packages/platform-browser/src/dom/dom_adapter.ts","../../../../../../../external/angular/packages/platform-browser/src/browser/browser_adapter.ts","../../../../../../../external/angular/packages/common/src/cookie.ts","../../../../../../../external/angular/packages/platform-browser/src/browser/generic_browser_adapter.ts","../../../../../../../external/angular/packages/platform-browser/src/dom/dom_tokens.ts","../../../../../../../external/angular/packages/platform-browser/src/browser/location/history.ts","../../../../../../../external/angular/packages/platform-browser/src/browser/location/browser_platform_location.ts","../../../../../../../external/angular/packages/platform-browser/src/browser/testability.ts","../../../../../../../external/angular/packages/platform-browser/src/browser.ts","../../../../../../../external/angular/packages/platform-browser/src/dom/events/dom_events.ts","../../../../../../../external/angular/packages/common/src/platform_id.ts","../../../../src/app.module.ts","../../../../src/main.ivy-compat.ts"],"names":["extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","getClosureSafeProperty","objWithPropertyToExtract","Error","NG_INJECTABLE_DEF","ngInjectableDef","defineInjectable","opts","providedIn","factory","undefined","getInjectableDef","type","InjectionToken","_desc","options","ngMetadataName","toString","ANNOTATIONS","PARAMETERS","makeMetadataCtor","props","ctor","args","_i","values","apply","propName","makeParamDecorator","name","parentClass","metaCtor","ParamDecoratorFactory","annotationInstance","_a","bind","ParamDecorator","annotation","cls","unusedKey","index","parameters","annotationCls","__window","window","__self","self","WorkerGlobalScope","_global","global","promise","Promise","resolve","scheduleMicroTask","fn","Zone","then","current","stringify","token","map","join","overriddenName","res","newLineIndex","indexOf","substring","__forward_ref__","forwardRef","forwardRefFn","resolveForwardRef","_injectImplementation","Inject","Optional","Self","SkipSelf","InjectFlags","_currentInjector","inject","flags","Default","injectInjectorOnly","injectRootLimpMode","notFoundValue","injectableDef","get","injectArgs","types","arg","isArray","j","meta","_THROW_IF_NOT_FOUND","INJECTOR","NullInjector","Injector","parent","StaticInjector","providers","THROW_IF_NOT_FOUND","NULL","__NG_ELEMENT_ID__","SWITCH_INJECTOR_FACTORY","noop","IDENT","EMPTY","CIRCULAR","MULTI_PROVIDER_FN","slice","USE_VALUE","provide","String","useValue","NULL_INJECTOR","NEW_LINE","NO_NEW_LINE","source","NULL_INJECTOR$1","records","_records","Map","set","deps","useNew","recursivelyProcessProviders","provider","staticError","resolvedProvider","resolveProvider","computeDeps","providerDeps","annotations","useExisting","useFactory","useClass","multi","multiProvider","multiProviderMixError","record","tryResolveToken","resolveToken","depRecords","depRecord","childRecord","unshift","tokenPath","message","formatError","tokens","forEach","v","text","obj","charAt","substr","context","parts","JSON","replace","ComponentFactory","ComponentFactoryBoundToModule","_super","ngModule","_this","selector","componentType","ngContentSelectors","inputs","outputs","tslib_1.__extends","injector","projectableNodes","rootSelectorOrNode","NgModuleRef","_devMode","_runModeLocked","isDevMode","isFunction","x","_enable_super_gross_mode_that_will_cause_bad_things","config","useDeprecatedSynchronousErrorHandling","hostReportError","err","setTimeout","empty","closed","complete","isObject","tryCatchTarget","errorObject","tryCatcher","tryCatch","UnsubscriptionErrorImpl","errors","UnsubscriptionError","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","len","remove","flattenUnsubscriptionErrors","sub","add","teardown","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","reduce","errs","rxSubscriber","Math","random","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","_parentSubscription","destination","emptyObserver","SafeSubscriber","rxSubscriberSymbol","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","observable","noop$1","Observable","subscribe","_isScalar","_subscribe","lift","operator","sink","toSubscriber","nextOrObserver","_trySubscribe","canReportError","observer","console","warn","promiseCtor","getPromiseCtor","reject","Symbol_observable","pipe","operations","pipeFromArray","fns","piped","input","prev","toPromise","ObjectUnsubscribedErrorImpl","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","thrownError","AnonymousSubject","copy","asObservable","refCount","refCountOperatorFunction","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","connectableProto","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","connectableObservableDescriptor","writable","subscribeToArray","array","fromArray","scheduler","schedule","identity","MapOperator","project","thisArg","MapSubscriber","count","result","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","subscribeToPromise","getSymbolIterator$1","getSymbolIterator","subscribeToIterable","iterable","Symbol_iterator","item","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise","subscribeTo","MergeMapOperator","concurrent","Number","POSITIVE_INFINITY","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","innerSubscriber","subscribeToResult","outerSubscriber","shift","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","Type","Function","isType","DELEGATE_CTOR","INHERITED_CLASS","INHERITED_CLASS_WITH_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","paramAnnotations","_ownParameters","parentCtor","typeStr","exec","tsickleCtorParams","ctorParameters","paramTypes_1","ctorParam","paramAnnotations_1","convertTsickleDecoratorIntoMetadata","getOwnMetadata","fill","getParentCtor","_ownAnnotations","typeOrFunc","ownAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","keys","prop","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","guards","getter","setter","method","importUri","resourceUri","resolveIdentifier","moduleUrl","members","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","parentProto","getPrototypeOf","EMPTY_ARRAY","Injectable","makeDecorator","additionalProcessing","typeFn","DecoratorFactory","TypeDecorator","SWITCH_COMPILE_INJECTABLE","render2CompileInjectable","injectableType","convertInjectableProviderToFactory","deps_1","reflectionCapabilities","valueProvider_1","existingProvider_1","factoryProvider_1","classProvider_1","deps_2","deps_3","ERROR_DEBUG_CONTEXT","ERROR_ORIGINAL_ERROR","getDebugContext","getOriginalError","defaultErrorLogger","ErrorHandler","_console","handleError","originalError","_findOriginalError","_findContext","errorLogger","getErrorLogger","MulticastOperator","shareSubjectFactory","isPromise$1","trace","events","APP_INITIALIZER","ApplicationInitStatus","appInits","initialized","donePromise","rej","runInitializers","asyncInitPromises","initResult","all","catch","tslib_1.__param","PLATFORM_INITIALIZER","PLATFORM_ID","APP_BOOTSTRAP_LISTENER","Console","log","CompilerFactory","wtfEnabled","detectWTF","wtf","noopScope","arg0","arg1","wtfCreateScope","createScope","signature","wtfLeave","leave","scope","returnValue","leaveScope","NgZone","_b","enableLongStackTrace","hasPendingMicrotasks","hasPendingMacrotasks","isStable","onUnstable","onMicrotaskEmpty","onStable","onError","assertZonePatched","_nesting","_outer","_inner","fork","forkInnerZoneWithAngularBehavior","zone","properties","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","callback","invoke","onHasTask","hasTaskState","hasTask","change","microTask","checkStable","macroTask","onHandleError","runOutsideAngular","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runTask","scheduleEventTask","EMPTY_PAYLOAD","cancelTask","runGuarded","noop$2","_platform","NoopNgZone","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","taskTrackingZone","_watchAngularEvents","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","cb","pop","clearTimeout","timeoutId","doneCb","pending_1","getPendingTasks","filter","updateCb","macroTasks","creationLocation","data","addCallback","timeout","whenStable","getPendingRequestCount","findProviders","using","exactMatch","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","unregisterApplication","delete","unregisterAllApplications","clear","getTestability","elem","getAllTestabilities","from","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","registry","ALLOW_MULTIPLE_PLATFORMS","createPlatformFactory","parentPlatformFactory","marker","extraProviders","platform","getPlatform","injectedProviders","createPlatform","destroyed","PlatformRef","inits","init","assertPlatform","requiredToken","_injector","_modules","_destroyListeners","_destroyed","bootstrapModuleFactory","moduleFactory","ngZone","getNgZone","ngZoneOption","ngZoneInjector","moduleType","moduleRef","exceptionHandler","onDestroy","_callAndReportToErrorHandler","errorHandler","initStatus","_moduleDoBootstrap","bootstrapModule","compilerOptions","optionsReducer","compileNgModuleFactory__PRE_R3__","createCompiler","compileModuleAsync","compileNgModuleFactory","appRef","ApplicationRef","_bootstrapComponents","f","bootstrap","instance","ngDoBootstrap","destroy","module","listener","dst","objs","_zone","_exceptionHandler","_componentFactoryResolver","_initStatus","_bootstrapListeners","_views","_runningTick","_enforceNoNewChanges","_stable","componentTypes","components","tick","isCurrentlyStable","stableSub","unstableSub","merge$1","observables","last","isScheduler","mergeAll","mergeMap","resultSelector","a","isInteropObservable","fromObservable","fromPromise","isIterable","fromIterable","mapOperation","ii","merge","share","multicast","subjectOrSubjectFactory","multicastOperatorFunction","componentOrFactory","componentFactory","resolveComponentFactory","compRef","_unloadComponent","location","nativeElement","_loadComponent","ApplicationRef_1","_tickScope","view","detectChanges","checkNoChanges","attachView","viewRef","attachToAppRef","detachView","detachFromAppRef","componentRef","hostView","ngOnDestroy","list","el","platformCore","PlatformLocation","DOCUMENT","_DOM","getDOM","nodeContains","_attrToPropMap","class","innerHtml","readonly","tabindex","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Down","Menu","Scroll","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","O","`","","contains","node","compareDocumentPosition","urlParsingNode","BrowserDomAdapter","parse","templateHtml","makeCurrent","setRootDomAdapter","adapter","hasProperty","element","setProperty","getProperty","methodName","logError","logGroup","group","logGroupEnd","groupEnd","nodeA","nodeB","querySelector","querySelectorAll","on","evt","addEventListener","onAndCancel","removeEventListener","dispatchEvent","createMouseEvent","eventType","getDefaultDocument","createEvent","initEvent","preventDefault","isPrevented","defaultPrevented","getInnerHTML","innerHTML","getTemplateContent","isTemplateElement","content","getOuterHTML","outerHTML","nodeName","nodeValue","firstChild","nextSibling","parentElement","parentNode","childNodes","childNodesAsList","clearNodes","removeChild","appendChild","replaceChild","newChild","oldChild","insertBefore","ref","insertAllBefore","nodes","insertAfter","setInnerHTML","getText","textContent","setText","getValue","setValue","getChecked","checked","setChecked","createComment","createTemplate","html","createElement","tagName","doc","createElementNS","ns","createTextNode","createScriptTag","attrName","attrValue","setAttribute","createStyleElement","css","style","createShadowRoot","getShadowRoot","shadowRoot","getHost","host","clone","cloneNode","getElementsByClassName","getElementsByTagName","classList","addClass","className","removeClass","hasClass","setStyle","styleName","styleValue","removeStyle","stylename","getStyle","hasStyle","attributeMap","elAttrs","attributes","attrib","hasAttribute","attribute","hasAttributeNS","getAttribute","getAttributeNS","setAttributeNS","removeAttribute","removeAttributeNS","templateAwareRoot","createHtmlDocument","document","implementation","createHTMLDocument","getBoundingClientRect","top","bottom","left","right","width","height","getTitle","title","setTitle","newTitle","elementMatches","isElementNode","matches","msMatchesSelector","webkitMatchesSelector","isTextNode","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","ELEMENT_NODE","hasShadowRoot","HTMLElement","isShadowRoot","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","getEventKey","event","keyIdentifier","startsWith","fromCharCode","parseInt","getGlobalEventTarget","body","getHistory","history","getLocation","getBaseHref","href","getBaseElementHref","baseElement","relativePath","url","pathname","resetBaseElement","getUserAgent","navigator","userAgent","setData","getData","getComputedStyle","supportsWebAnimation","Element","performanceNow","performance","now","Date","getTime","supportsCookies","getCookie","cookieStr","encodeURIComponent","__values","tslib_1.__values","split","_c","cookie","eqIndex","_d","cookieValue","trim","decodeURIComponent","parseCookieValue","setCookie","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","domPrefixes","toLowerCase","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","getDistributedNodes","resolveAndSetHref","baseUrl","supportsDOMEvents","supportsNativeShadowDOM","getAnimationPrefix","getTransitionEnd","supportsAnimation","DomAdapter","resourceLoaderType","commonDOCUMENT","supportsState","pushState","BrowserPlatformLocation","_doc","_init","_history","getBaseHrefFromDOM","onPopState","onHashChange","newPath","search","hash","state","replaceState","forward","back","BrowserGetTestability","setTestabilityGetter","testabilities","didWork","decrement","didWork_","platformBrowser","initDomAdapter","_document","AppModule","enableProdMode"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (let key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n/**\n * Sets properties on a target object from a source object, but only if\n * the property doesn't already exist on the target object.\n * @param target The target to set properties on\n * @param source The source of the property keys and values to set\n */\nexport function fillProperties(target: {[key: string]: string}, source: {[key: string]: string}) {\n  for (const key in source) {\n    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getClosureSafeProperty} from '../util/property';\n\nexport const NG_COMPONENT_DEF = getClosureSafeProperty({ngComponentDef: getClosureSafeProperty});\nexport const NG_DIRECTIVE_DEF = getClosureSafeProperty({ngDirectiveDef: getClosureSafeProperty});\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\nexport const NG_INJECTOR_DEF = getClosureSafeProperty({ngInjectorDef: getClosureSafeProperty});\nexport const NG_PIPE_DEF = getClosureSafeProperty({ngPipeDef: getClosureSafeProperty});\nexport const NG_MODULE_DEF = getClosureSafeProperty({ngModuleDef: getClosureSafeProperty});\nexport const NG_BASE_DEF = getClosureSafeProperty({ngBaseDef: getClosureSafeProperty});\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nexport const NG_ELEMENT_ID = getClosureSafeProperty({__NG_ELEMENT_ID__: getClosureSafeProperty});\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NG_INJECTABLE_DEF, NG_INJECTOR_DEF} from '../render3/fields';\nimport {Type} from '../type';\n\nimport {ClassProvider, ClassSansProvider, ConstructorProvider, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, StaticClassProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './provider';\n\n/**\n * Information about how a type or `InjectionToken` interfaces with the DI system.\n *\n * At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a `providedIn` parameter specifies that the given type belongs to a particular\n * `InjectorDef`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates\n * that the injectable does not belong to any scope.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectableDef<T> {\n  /**\n   * Specifies that the given type belongs to a particular injector:\n   * - `InjectorType` such as `NgModule`,\n   * - `'root'` the root injector\n   * - `'any'` all injectors.\n   * - `null`, does not belong to any injector. Must be explicitly listed in the injector\n   *   `providers`.\n   */\n  providedIn: InjectorType<any>|'root'|'any'|null;\n\n  /**\n   * Factory method to execute to create an instance of the injectable.\n   */\n  factory: () => T;\n\n  /**\n   * In a case of no explicit injector, a location where the instance of the injectable is stored.\n   */\n  value: T|undefined;\n}\n\n/**\n * Information about the providers to be included in an `Injector` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested\n * structure of providers with a defined priority (identically to how `NgModule`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorDef<T> {\n  factory: () => T;\n\n  // TODO(alxhub): Narrow down the type here once decorators properly change the return type of the\n  // class they are decorating (to add the ngInjectableDef property for example).\n  providers: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n              StaticClassProvider|ClassProvider|any[])[];\n\n  imports: (InjectorType<any>|InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * A `Type` which has an `InjectableDef` static field.\n *\n * `InjectableDefType`s contain their own Dependency Injection metadata and are usable in an\n * `InjectorDef`-based `StaticInjector.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ngInjectableDef: never;\n}\n\n/**\n * A type which has an `InjectorDef` static field.\n *\n * `InjectorDefTypes` can be used to configure a `StaticInjector`.\n *\n * @publicApi\n */\nexport interface InjectorType<T> extends Type<T> {\n  /**\n   * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n   */\n  ngInjectorDef: never;\n}\n\n/**\n * Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorDefType` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an `InjectorDef`.\n *\n * NOTE: This is a private type and should not be exported\n */\nexport interface InjectorTypeWithProviders<T> {\n  ngModule: InjectorType<T>;\n  providers?: (Type<any>|ValueProvider|ExistingProvider|FactoryProvider|ConstructorProvider|\n               StaticClassProvider|ClassProvider|any[])[];\n}\n\n\n/**\n * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and\n * in which injectors (if any) it will be available.\n *\n * This should be assigned to a static `ngInjectableDef` field on a type, which will then be an\n * `InjectableType`.\n *\n * Options:\n * * `providedIn` determines which injectors will include the injectable, by either associating it\n *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be\n *   provided in the `'root'` injector, which will be the application-level injector in most apps.\n * * `factory` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call `inject` to access the `Injector` and request injection of dependencies.\n *\n * @publicApi\n */\nexport function defineInjectable<T>(opts: {\n  providedIn?: Type<any>| 'root' | 'any' | null,\n  factory: () => T,\n}): never {\n  return ({\n    providedIn: opts.providedIn as any || null, factory: opts.factory, value: undefined,\n  } as InjectableDef<T>) as never;\n}\n\n/**\n * Construct an `InjectorDef` which configures an injector.\n *\n * This should be assigned to a static `ngInjectorDef` field on a type, which will then be an\n * `InjectorType`.\n *\n * Options:\n *\n * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to\n *   create the type must be provided. If that factory function needs to inject arguments, it can\n *   use the `inject` function.\n * * `providers`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has an `ngInjectableDef` static property (the\n *   type must be an `InjectableType`).\n * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @publicApi\n */\nexport function defineInjector(options: {factory: () => any, providers?: any[], imports?: any[]}):\n    never {\n  return ({\n    factory: options.factory, providers: options.providers || [], imports: options.imports || [],\n  } as InjectorDef<any>) as never;\n}\n\n/**\n * Read the `ngInjectableDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectableDef`\n */\nexport function getInjectableDef<T>(type: any): InjectableDef<T>|null {\n  return type && type.hasOwnProperty(NG_INJECTABLE_DEF) ? (type as any)[NG_INJECTABLE_DEF] : null;\n}\n\n/**\n * Read the `ngInjectorDef` type in a way which is immune to accidentally reading inherited value.\n *\n * @param type type which may have `ngInjectorDef`\n */\nexport function getInjectorDef<T>(type: any): InjectorDef<T>|null {\n  return type && type.hasOwnProperty(NG_INJECTOR_DEF) ? (type as any)[NG_INJECTOR_DEF] : null;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\n\nimport {defineInjectable} from './defs';\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parametrized type.\n *\n * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by\n * the `Injector`. This provides additional level of type safety.\n *\n * ```\n * interface MyInterface {...}\n * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * ```\n *\n * When creating an `InjectionToken`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type `T`. This sets up the\n * `InjectionToken` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the `inject` function. See below for an example.\n *\n * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which\n * overrides the above behavior and marks the token as belonging to a particular `@NgModule`. As\n * mentioned above, `'root'` is the default value for `providedIn`.\n *\n * @usageNotes\n * ### Basic Example\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport class InjectionToken<T> {\n  /** @internal */\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ngInjectableDef: never|undefined;\n\n  constructor(protected _desc: string, options?: {\n    providedIn?: Type<any>| 'root' | null,\n    factory: () => T\n  }) {\n    if (options !== undefined) {\n      this.ngInjectableDef = defineInjectable({\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    } else {\n      this.ngInjectableDef = undefined;\n    }\n  }\n\n  toString(): string { return `InjectionToken ${this._desc}`; }\n}\n\nexport interface InjectableDefToken<T> extends InjectionToken<T> { ngInjectableDef: never; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n * @publicApi\n */\nexport interface TypeDecorator {\n  /**\n   * Invoke as ES7 decorator.\n   */\n  <T extends Type<any>>(type: T): T;\n\n  // Make TypeDecorator assignable to built-in ParameterDecorator type.\n  // ParameterDecorator is declared in lib.d.ts as a `declare type`\n  // so we cannot declare this interface as a subtype.\n  // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n  (target: Object, propertyKey?: string|symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator<T>(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (type: Type<T>) => void,\n    typeFn?: (type: Type<T>, ...args: any[]) => void):\n    {new (...args: any[]): any; (...args: any[]): any; (...args: any[]): (cls: any) => any;} {\n  const metaCtor = makeMetadataCtor(props);\n\n  function DecoratorFactory(...args: any[]): (cls: Type<T>) => any {\n    if (this instanceof DecoratorFactory) {\n      metaCtor.call(this, ...args);\n      return this;\n    }\n\n    const annotationInstance = new (DecoratorFactory as any)(...args);\n    return function TypeDecorator(cls: Type<T>) {\n      if (typeFn) typeFn(cls, ...args);\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n          (cls as any)[ANNOTATIONS] :\n          Object.defineProperty(cls, ANNOTATIONS, {value: []})[ANNOTATIONS];\n      annotations.push(annotationInstance);\n\n\n      if (additionalProcessing) additionalProcessing(cls);\n\n      return cls;\n    };\n  }\n\n  if (parentClass) {\n    DecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  DecoratorFactory.prototype.ngMetadataName = name;\n  (DecoratorFactory as any).annotationCls = DecoratorFactory;\n  return DecoratorFactory as any;\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n  return function ctor(...args: any[]) {\n    if (props) {\n      const values = props(...args);\n      for (const propName in values) {\n        this[propName] = values[propName];\n      }\n    }\n  };\n}\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n  const metaCtor = makeMetadataCtor(props);\n  function ParamDecoratorFactory(...args: any[]): any {\n    if (this instanceof ParamDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n    const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n    (<any>ParamDecorator).annotation = annotationInstance;\n    return ParamDecorator;\n\n    function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const parameters = cls.hasOwnProperty(PARAMETERS) ?\n          (cls as any)[PARAMETERS] :\n          Object.defineProperty(cls, PARAMETERS, {value: []})[PARAMETERS];\n\n      // there might be gaps if some in between parameters do not have annotations.\n      // we pad with nulls.\n      while (parameters.length <= index) {\n        parameters.push(null);\n      }\n\n      (parameters[index] = parameters[index] || []).push(annotationInstance);\n      return cls;\n    }\n  }\n  if (parentClass) {\n    ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n  ParamDecoratorFactory.prototype.ngMetadataName = name;\n  (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n  return ParamDecoratorFactory;\n}\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    additionalProcessing?: (target: any, name: string, ...args: any[]) => void): any {\n  const metaCtor = makeMetadataCtor(props);\n\n  function PropDecoratorFactory(...args: any[]): any {\n    if (this instanceof PropDecoratorFactory) {\n      metaCtor.apply(this, args);\n      return this;\n    }\n\n    const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n    function PropDecorator(target: any, name: string) {\n      const constructor = target.constructor;\n      // Use of Object.defineProperty is important since it creates non-enumerable property which\n      // prevents the property is copied during subclassing.\n      const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n          (constructor as any)[PROP_METADATA] :\n          Object.defineProperty(constructor, PROP_METADATA, {value: {}})[PROP_METADATA];\n      meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n      meta[name].unshift(decoratorInstance);\n\n      if (additionalProcessing) additionalProcessing(target, name, ...args);\n    }\n\n    return PropDecorator;\n  }\n\n  if (parentClass) {\n    PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n  }\n\n  PropDecoratorFactory.prototype.ngMetadataName = name;\n  (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n  return PropDecoratorFactory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '../di/injection_token';\nimport {Type} from '../type';\nimport {makeParamDecorator, makePropDecorator} from '../util/decorators';\n\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n *\n * @usageNotes\n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @publicApi\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken<any>('AnalyzeForEntryComponents');\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @publicApi\n */\nexport interface AttributeDecorator {\n  /**\n   * Specifies that a constant attribute value should be injected.\n   *\n   * The directive can inject constant string literals of host element attributes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * Suppose we have an `<input>` element and want to know its `type`.\n   *\n   * ```html\n   * <input type=\"text\">\n   * ```\n   *\n   * A decorator can inject string literal `text` like so:\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n   *\n   * ### Example as TypeScript Decorator\n   *\n   * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n   *\n   * ### Example as ES5 annotation\n   *\n   * ```\n   * var MyComponent = function(title) {\n   *   ...\n   * };\n   *\n   * MyComponent.annotations = [\n   *   new ng.Component({...})\n   * ]\n   * MyComponent.parameters = [\n   *   [new ng.Attribute('title')]\n   * ]\n   * ```\n   *\n   * @publicApi\n   */\n  (name: string): any;\n  new (name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport interface Attribute { attributeName?: string; }\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Attribute: AttributeDecorator =\n    makeParamDecorator('Attribute', (attributeName?: string) => ({attributeName}));\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n\n/**\n * Base class for query metadata.\n *\n * @see `ContentChildren`.\n * @see `ContentChild`.\n * @see `ViewChildren`.\n * @see `ViewChild`.\n *\n * @publicApi\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see `ContentChildren`.\n * @publicApi\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * Configures a content query.\n   *\n   * You can use ContentChildren to get the `QueryList` of elements or directives from the\n   * content DOM. Any time a child element is added, removed, or moved, the query list will be\n   * updated, and the changes observable of the query list will emit a new value.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **descendants** - include only direct children or all descendants.\n   * * **read** - read a different token from the queried elements.\n   *\n   * @usageNotes\n   * ### Basic Example\n   *\n   * Here is a simple demonstration of how the `ContentChildren` decorator can be used.\n   *\n   * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n   *\n   * ### Tab-pane Example\n   *\n   * Here is a slightly more realistic example that shows how `ContentChildren` decorators\n   * can be used to implement a tab pane component.\n   *\n   * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {descendants?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren',\n    (selector?: any, data: any = {}) =>\n        ({selector, first: false, isViewQuery: false, descendants: false, ...data}),\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport interface ContentChildDecorator {\n  /**\n   * Configures a content query.\n   *\n   * You can use ContentChild to get the first element or the directive matching the selector from\n   * the content DOM. If the content DOM changes, and a new child matches the selector,\n   * the property will be updated.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried element.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @see `ContentChild`.\n *\n * @publicApi\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild', (selector?: any, data: any = {}) =>\n                        ({selector, first: true, isViewQuery: false, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see `ViewChildren`.\n *\n * @publicApi\n */\nexport interface ViewChildrenDecorator {\n  /**\n   * Configures a view query.\n   *\n   * You can use ViewChildren to get the `QueryList` of elements or directives from the\n   * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,\n   * and the changes observable of the query list will emit a new value.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren', (selector?: any, data: any = {}) =>\n                        ({selector, first: false, isViewQuery: true, descendants: true, ...data}),\n    Query);\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see `ViewChild`.\n * @publicApi\n */\nexport interface ViewChildDecorator {\n  /**\n   * @description\n   * Property decorator that configures a view query.\n   * The change detector looks for the first element or the directive matching the selector\n   * in the view DOM. If the view DOM changes, and a new child matches the selector,\n   * the property is updated.\n   *\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * **Metadata Properties**:\n   *\n   * * **selector** - the directive type or the name used for querying.\n   * * **read** - read a different token from the queried elements.\n   *\n   * Supported selectors include:\n   *   * any class with the `@Component` or `@Directive` decorator\n   *   * a template reference variable as a string (e.g. query `<my-component #cmp></my-component>\n   * with `@ViewChild('cmp')`)\n   *   * any provider defined in the child component tree of the current component (e.g.\n   * `@ViewChild(SomeService) someService: SomeService`)\n   *   * any provider defined through a string token (e.g. `@ViewChild('someToken') someTokenVal:\n   * any`)\n   *   * a `TemplateRef` (e.g. query `<ng-template></ng-template>` with `@ViewChild(TemplateRef)\n   * template;`)\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n   *\n   * ### Example\n   *\n   * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n   *\n   * @Annotation\n   */\n  (selector: Type<any>|Function|string, opts?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, opts?: {read?: any}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild', (selector: any, data: any) =>\n                     ({selector, first: true, isViewQuery: true, descendants: true, ...data}),\n    Query);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// TODO(jteplitz602): Load WorkerGlobalScope from lib.webworker.d.ts file #3492\ndeclare var WorkerGlobalScope: any /** TODO #9100 */;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\ndeclare var global: any /** TODO #9100 */;\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\n\n// Check __global first, because in Node tests both __global and __window may be defined and _global\n// should be __global in that case.\nconst _global: {[name: string]: any} = __global || __window || __self;\n\nconst promise: Promise<any> = Promise.resolve(0);\n/**\n * Attention: whenever providing a new value, be sure to add an\n * entry into the corresponding `....externs.js` file,\n * so that closure won't use that global for its purposes.\n */\nexport {_global as global};\n\n// When Symbol.iterator doesn't exist, retrieves the key used in es6-shim\ndeclare const Symbol: any;\nlet _symbolIterator: any = null;\nexport function getSymbolIterator(): string|symbol {\n  if (!_symbolIterator) {\n    const Symbol = _global['Symbol'];\n    if (Symbol && Symbol.iterator) {\n      _symbolIterator = Symbol.iterator;\n    } else {\n      // es6-shim specific logic\n      const keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (key !== 'entries' && key !== 'size' &&\n            (Map as any).prototype[key] === Map.prototype['entries']) {\n          _symbolIterator = key;\n        }\n      }\n    }\n  }\n  return _symbolIterator;\n}\n\nexport function scheduleMicroTask(fn: Function) {\n  if (typeof Zone === 'undefined') {\n    // use promise to schedule microTask instead of use Zone\n    promise.then(() => { fn && fn.apply(null, null); });\n  } else {\n    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n  }\n}\n\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean {\n  return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (token instanceof Array) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the `noSideEffects` function be assigned\n * to something which is retained otherwise the call to `noSideEffects` will be removed by closure\n * compiler.\n */\nexport function noSideEffects(fn: () => void): string {\n  return '' + {toString: fn};\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\nimport {getClosureSafeProperty} from '../util/property';\n\n\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport interface ForwardRefFn { (): any; }\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the `token` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (<any>forwardRefFn).__forward_ref__ = forwardRef;\n  (<any>forwardRefFn).toString = function() { return stringify(this()); };\n  return (<Type<any>><any>forwardRefFn);\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see `forwardRef`\n * @publicApi\n */\nexport function resolveForwardRef<T>(type: T): T {\n  const fn: any = type;\n  if (typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef) {\n    return fn();\n  } else {\n    return type;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * A set of interfaces which are shared between `@angular/core` and `@angular/compiler` to allow\n * for late binding of `@angular/compiler` for JIT purposes.\n *\n * This file has two copies. Please ensure that they are in sync:\n *  - packages/compiler/src/compiler_facade_interface.ts             (master)\n *  - packages/core/src/render3/jit/compiler_facade_interface.ts     (copy)\n *\n * Please ensure that the two files are in sync using this command:\n * ```\n * cp packages/compiler/src/compiler_facade_interface.ts \\\n *    packages/core/src/render3/jit/compiler_facade_interface.ts\n * ```\n */\n\nexport interface ExportedCompilerFacade { ÉµcompilerFacade: CompilerFacade; }\n\nexport interface CompilerFacade {\n  compilePipe(angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3PipeMetadataFacade):\n      any;\n  compileInjectable(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectableMetadataFacade): any;\n  compileInjector(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3InjectorMetadataFacade): any;\n  compileNgModule(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3NgModuleMetadataFacade): any;\n  compileDirective(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3DirectiveMetadataFacade): any;\n  compileComponent(\n      angularCoreEnv: CoreEnvironment, sourceMapUrl: string, meta: R3ComponentMetadataFacade): any;\n\n  R3ResolvedDependencyType: typeof R3ResolvedDependencyType;\n}\n\nexport interface CoreEnvironment { [name: string]: Function; }\n\nexport type StringMap = {\n  [key: string]: string;\n};\n\nexport type StringMapWithRename = {\n  [key: string]: string | [string, string];\n};\n\nexport type Provider = any;\n\nexport enum R3ResolvedDependencyType {\n  Token = 0,\n  Attribute = 1,\n}\n\nexport interface R3DependencyMetadataFacade {\n  token: any;\n  resolved: R3ResolvedDependencyType;\n  host: boolean;\n  optional: boolean;\n  self: boolean;\n  skipSelf: boolean;\n}\n\nexport interface R3PipeMetadataFacade {\n  name: string;\n  type: any;\n  pipeName: string;\n  deps: R3DependencyMetadataFacade[]|null;\n  pure: boolean;\n}\n\nexport interface R3InjectableMetadataFacade {\n  name: string;\n  type: any;\n  typeArgumentCount: number;\n  ctorDeps: R3DependencyMetadataFacade[]|null;\n  providedIn: any;\n  useClass?: any;\n  useFactory?: any;\n  useExisting?: any;\n  useValue?: any;\n  userDeps?: R3DependencyMetadataFacade[];\n}\n\nexport interface R3NgModuleMetadataFacade {\n  type: any;\n  bootstrap: Function[];\n  declarations: Function[];\n  imports: Function[];\n  exports: Function[];\n  emitInline: boolean;\n}\n\nexport interface R3InjectorMetadataFacade {\n  name: string;\n  type: any;\n  deps: R3DependencyMetadataFacade[]|null;\n  providers: any[];\n  imports: any[];\n}\n\nexport interface R3DirectiveMetadataFacade {\n  name: string;\n  type: any;\n  typeArgumentCount: number;\n  typeSourceSpan: null;\n  deps: R3DependencyMetadataFacade[]|null;\n  selector: string|null;\n  queries: R3QueryMetadataFacade[];\n  host: {[key: string]: string};\n  propMetadata: {[key: string]: any[]};\n  lifecycle: {usesOnChanges: boolean;};\n  inputs: string[];\n  outputs: string[];\n  usesInheritance: boolean;\n  exportAs: string|null;\n  providers: Provider[]|null;\n}\n\nexport interface R3ComponentMetadataFacade extends R3DirectiveMetadataFacade {\n  template: string;\n  preserveWhitespaces: boolean;\n  animations: any[]|undefined;\n  viewQueries: R3QueryMetadataFacade[];\n  pipes: Map<string, any>;\n  directives: {selector: string, expression: any}[];\n  styles: string[];\n  encapsulation: ViewEncapsulation;\n  viewProviders: Provider[]|null;\n  interpolation?: [string, string];\n  changeDetection?: ChangeDetectionStrategy;\n}\n\nexport type ViewEncapsulation = number;\n\nexport type ChangeDetectionStrategy = number;\n\nexport interface R3QueryMetadataFacade {\n  propertyName: string;\n  first: boolean;\n  predicate: any|string[];\n  descendants: boolean;\n  read: any|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {InjectableDef, getInjectableDef} from './defs';\nimport {InjectionToken} from './injection_token';\nimport {Injector} from './injector';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n */\nexport enum InjectFlags {\n  // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.\n\n  Default = 0b0000,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 0b0001,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self = 0b0010,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 0b0100,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 0b1000,\n}\n\n\n\n/**\n * Current injector value used by `inject`.\n * - `undefined`: it is an error to call `inject`\n * - `null`: `inject` can be called but there is no injector (limp-mode).\n * - Injector instance: Use the injector for resolution.\n */\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector | null | undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\n/**\n * Current implementation of inject.\n *\n * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed\n * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this\n * way for two reasons:\n *  1. `Injector` should not depend on ivy logic.\n *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.\n */\nlet _injectImplementation: (<T>(token: Type<T>| InjectionToken<T>, flags: InjectFlags) => T | null)|\n    undefined;\n\n/**\n * Sets the current inject implementation.\n */\nexport function setInjectImplementation(\n    impl: (<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags) => T | null) | undefined):\n    (<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags) => T | null)|undefined {\n  const previous = _injectImplementation;\n  _injectImplementation = impl;\n  return previous;\n}\n\nexport function injectInjectorOnly<T>(token: Type<T>| InjectionToken<T>): T;\nexport function injectInjectorOnly<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags): T|\n    null;\nexport function injectInjectorOnly<T>(\n    token: Type<T>| InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  if (_currentInjector === undefined) {\n    throw new Error(`inject() must be called from an injection context`);\n  } else if (_currentInjector === null) {\n    return injectRootLimpMode(token, undefined, flags);\n  } else {\n    return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);\n  }\n}\n\n/**\n * Injects a token from the currently active injector.\n *\n * This function must be used in the context of a factory function such as one defined for an\n * `InjectionToken`, and will throw an error if not called from such a context.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='ShakeableInjectionToken'}\n *\n * Within such a factory function `inject` is utilized to request injection of a dependency, instead\n * of providing an additional array of dependencies as was common to do with `useFactory` providers.\n * `inject` is faster and more type-safe.\n *\n * @publicApi\n */\nexport function inject<T>(token: Type<T>| InjectionToken<T>): T;\nexport function inject<T>(token: Type<T>| InjectionToken<T>, flags?: InjectFlags): T|null;\nexport function inject<T>(token: Type<T>| InjectionToken<T>, flags = InjectFlags.Default): T|null {\n  return (_injectImplementation || injectInjectorOnly)(token, flags);\n}\n\n/**\n * Injects `root` tokens in limp mode.\n *\n * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to\n * `\"root\"`. This is known as the limp mode injection. In such case the value is stored in the\n * `InjectableDef`.\n */\nexport function injectRootLimpMode<T>(\n    token: Type<T>| InjectionToken<T>, notFoundValue: T | undefined, flags: InjectFlags): T|null {\n  const injectableDef: InjectableDef<T>|null = getInjectableDef(token);\n  if (injectableDef && injectableDef.providedIn == 'root') {\n    return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :\n                                               injectableDef.value;\n  }\n  if (flags & InjectFlags.Optional) return null;\n  if (notFoundValue !== undefined) return notFoundValue;\n  throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);\n}\n\nexport function injectArgs(types: (Type<any>| InjectionToken<any>| any[])[]): any[] {\n  const args: any[] = [];\n  for (let i = 0; i < types.length; i++) {\n    const arg = types[i];\n    if (Array.isArray(arg)) {\n      if (arg.length === 0) {\n        throw new Error('Arguments array must have arguments.');\n      }\n      let type: Type<any>|undefined = undefined;\n      let flags: InjectFlags = InjectFlags.Default;\n\n      for (let j = 0; j < arg.length; j++) {\n        const meta = arg[j];\n        if (meta instanceof Optional || meta.ngMetadataName === 'Optional') {\n          flags |= InjectFlags.Optional;\n        } else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf') {\n          flags |= InjectFlags.SkipSelf;\n        } else if (meta instanceof Self || meta.ngMetadataName === 'Self') {\n          flags |= InjectFlags.Self;\n        } else if (meta instanceof Inject) {\n          type = meta.token;\n        } else {\n          type = meta;\n        }\n      }\n\n      args.push(inject(type !, flags));\n    } else {\n      args.push(inject(arg));\n    }\n  }\n  return args;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ClassSansProvider, ConstructorProvider, ConstructorSansProvider, ExistingProvider, ExistingSansProvider, FactoryProvider, FactorySansProvider, StaticClassProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from '../di/provider';\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {makeDecorator, makeParamDecorator} from '../util/decorators';\nimport {EMPTY_ARRAY} from '../view/util';\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectDecorator {\n  /**\n   * A constructor parameter decorator that specifies a\n   * custom provider of a dependency.\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   * The following example shows a class constructor that specifies a\n   * custom provider of a dependency using the parameter decorator.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Inject'}\n   *\n   * When `@Inject()` is not present, the `Injector` uses the type annotation of the\n   * parameter as the provider.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectWithoutDecorator'}\n   */\n  (token: any): any;\n  new (token: any): Inject;\n}\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport interface Inject {\n  /**\n   * Injector token that maps to the dependency to be injected.\n   */\n  token: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Inject: InjectDecorator = makeParamDecorator('Inject', (token: any) => ({token}));\n\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OptionalDecorator {\n  /**\n   * A constructor parameter decorator that marks a dependency as optional.\n   *\n   * The DI framework provides null if the dependency is not found.\n   * For example, the following code allows the possibility of a null result:\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Optional'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   */\n  (): any;\n  new (): Optional;\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport interface Optional {}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Optional: OptionalDecorator = makeParamDecorator('Optional');\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SelfDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * to retrieve a dependency only from the local injector.\n   *\n   * In the following example, the dependency can be resolved\n   * by the local injector when instantiating the class itself, but not\n   * when instantiating a child.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Self'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   *\n   */\n  (): any;\n  new (): Self;\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport interface Self {}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Self: SelfDecorator = makeParamDecorator('Self');\n\n\n/**\n * Type of the SkipSelf decorator / constructor function.\n *\n * @publicApi\n */\nexport interface SkipSelfDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * that dependency resolution should start from the parent injector.\n   *\n   * In the following example, the dependency can be resolved when\n   * instantiating a child, but not when instantiating the class itself.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='SkipSelf'}\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   *\n   */\n  (): any;\n  new (): SkipSelf;\n}\n\n/**\n * Type of the SkipSelf metadata.\n *\n * @publicApi\n */\nexport interface SkipSelf {}\n\n/**\n * SkipSelf decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const SkipSelf: SkipSelfDecorator = makeParamDecorator('SkipSelf');\n\n/**\n * Type of the Host decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostDecorator {\n  /**\n   * A constructor parameter decorator that tells the DI framework\n   * to retrieve a dependency from any injector until\n   * reaching the host element of the current component.\n   *\n   * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Host'}\n   */\n  (): any;\n  new (): Host;\n}\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport interface Host {}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Host: HostDecorator = makeParamDecorator('Host');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {injectInjector} from '../render3/di';\nimport {Type} from '../type';\nimport {stringify} from '../util';\nimport {noop} from '../util/noop';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {defineInjectable} from './defs';\nimport {resolveForwardRef} from './forward_ref';\nimport {InjectionToken} from './injection_token';\nimport {InjectFlags, inject} from './injector_compatibility';\nimport {Inject, Optional, Self, SkipSelf} from './metadata';\nimport {ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider, StaticProvider, ValueProvider} from './provider';\n\nexport const SOURCE = '__source';\nconst _THROW_IF_NOT_FOUND = new Object();\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\n/**\n * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.\n *\n * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport const INJECTOR = new InjectionToken<Injector>('INJECTOR');\n\nexport class NullInjector implements Injector {\n  get(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      // Intentionally left behind: With dev tools open the debugger will stop here. There is no\n      // reason why correctly written application should cause this exception.\n      // TODO(misko): uncomment the next line once `ngDevMode` works with closure.\n      // if(ngDevMode) debugger;\n      throw new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n\n/**\n * Concrete injectors implement this interface.\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * `Injector` returns itself when given `Injector` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new NullInjector();\n\n  /**\n   * Retrieves an instance from the injector based on the provided token.\n   * @returns The instance from the injector if defined, otherwise the `notFoundValue`.\n   * @throws When the `notFoundValue` is `undefined` or `Injector.THROW_IF_NOT_FOUND`.\n   */\n  abstract get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  /**\n   * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>\n   * @suppress {duplicate}\n   */\n  abstract get(token: any, notFoundValue?: any): any;\n\n  /**\n   * @deprecated from v5 use the new signature Injector.create(options)\n   */\n  static create(providers: StaticProvider[], parent?: Injector): Injector;\n\n  static create(options: {providers: StaticProvider[], parent?: Injector, name?: string}): Injector;\n\n  /**\n   * Create a new Injector which is configure using `StaticProvider`s.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n   */\n  static create(\n      options: StaticProvider[]|{providers: StaticProvider[], parent?: Injector, name?: string},\n      parent?: Injector): Injector {\n    if (Array.isArray(options)) {\n      return new StaticInjector(options, parent);\n    } else {\n      return new StaticInjector(options.providers, options.parent, options.name || null);\n    }\n  }\n\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable({\n    providedIn: 'any' as any,\n    factory: () => inject(INJECTOR),\n  });\n\n  /** @internal */\n  static __NG_ELEMENT_ID__: () => Injector = () => SWITCH_INJECTOR_FACTORY();\n}\n\nexport const SWITCH_INJECTOR_FACTORY__POST_R3__ = function() {\n  return injectInjector();\n};\nconst SWITCH_INJECTOR_FACTORY__PRE_R3__ = noop;\nconst SWITCH_INJECTOR_FACTORY: typeof injectInjector = SWITCH_INJECTOR_FACTORY__PRE_R3__;\n\n\nconst IDENT = function<T>(value: T): T {\n  return value;\n};\nconst EMPTY = <any[]>[];\nconst CIRCULAR = IDENT;\nconst MULTI_PROVIDER_FN = function(): any[] {\n  return Array.prototype.slice.call(arguments);\n};\nexport const USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\nconst NG_TOKEN_PATH = 'ngTokenPath';\nconst NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\nconst enum OptionFlags {\n  Optional = 1 << 0,\n  CheckSelf = 1 << 1,\n  CheckParent = 1 << 2,\n  Default = CheckSelf | CheckParent\n}\nconst NULL_INJECTOR = Injector.NULL;\nconst NEW_LINE = /\\n/gm;\nconst NO_NEW_LINE = 'Éµ';\n\nexport class StaticInjector implements Injector {\n  readonly parent: Injector;\n  readonly source: string|null;\n\n  private _records: Map<any, Record>;\n\n  constructor(\n      providers: StaticProvider[], parent: Injector = NULL_INJECTOR, source: string|null = null) {\n    this.parent = parent;\n    this.source = source;\n    const records = this._records = new Map<any, Record>();\n    records.set(\n        Injector, <Record>{token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    records.set(\n        INJECTOR, <Record>{token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false});\n    recursivelyProcessProviders(records, providers);\n  }\n\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n    const record = this._records.get(token);\n    try {\n      return tryResolveToken(token, record, this._records, this.parent, notFoundValue, flags);\n    } catch (e) {\n      const tokenPath: any[] = e[NG_TEMP_TOKEN_PATH];\n      if (token[SOURCE]) {\n        tokenPath.unshift(token[SOURCE]);\n      }\n      e.message = formatError('\\n' + e.message, tokenPath, this.source);\n      e[NG_TOKEN_PATH] = tokenPath;\n      e[NG_TEMP_TOKEN_PATH] = null;\n      throw e;\n    }\n  }\n\n  toString() {\n    const tokens = <string[]>[], records = this._records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `StaticInjector[${tokens.join(', ')}]`;\n  }\n}\n\ntype SupportedProvider =\n    ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider;\n\ninterface Record {\n  fn: Function;\n  useNew: boolean;\n  deps: DependencyRecord[];\n  value: any;\n}\n\ninterface DependencyRecord {\n  token: any;\n  options: number;\n}\n\ntype TokenPath = Array<any>;\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n  const deps = computeDeps(provider);\n  let fn: Function = IDENT;\n  let value: any = EMPTY;\n  let useNew: boolean = false;\n  let provide = resolveForwardRef(provider.provide);\n  if (USE_VALUE in provider) {\n    // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.\n    value = (provider as ValueProvider).useValue;\n  } else if ((provider as FactoryProvider).useFactory) {\n    fn = (provider as FactoryProvider).useFactory;\n  } else if ((provider as ExistingProvider).useExisting) {\n    // Just use IDENT\n  } else if ((provider as StaticClassProvider).useClass) {\n    useNew = true;\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n  } else if (typeof provide == 'function') {\n    useNew = true;\n    fn = provide;\n  } else {\n    throw staticError(\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\n        provider);\n  }\n  return {deps, fn, useNew, value};\n}\n\nfunction multiProviderMixError(token: any) {\n  return staticError('Cannot mix multi providers and regular providers', token);\n}\n\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider) {\n  if (provider) {\n    provider = resolveForwardRef(provider);\n    if (provider instanceof Array) {\n      // if we have an array recurse into the array\n      for (let i = 0; i < provider.length; i++) {\n        recursivelyProcessProviders(records, provider[i]);\n      }\n    } else if (typeof provider === 'function') {\n      // Functions were supported in ReflectiveInjector, but are not here. For safety give useful\n      // error messages\n      throw staticError('Function/Class not supported', provider);\n    } else if (provider && typeof provider === 'object' && provider.provide) {\n      // At this point we have what looks like a provider: {provide: ?, ....}\n      let token = resolveForwardRef(provider.provide);\n      const resolvedProvider = resolveProvider(provider);\n      if (provider.multi === true) {\n        // This is a multi provider.\n        let multiProvider: Record|undefined = records.get(token);\n        if (multiProvider) {\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n            throw multiProviderMixError(token);\n          }\n        } else {\n          // Create a placeholder factory which will look up the constituents of the multi provider.\n          records.set(token, multiProvider = <Record>{\n            token: provider.provide,\n            deps: [],\n            useNew: false,\n            fn: MULTI_PROVIDER_FN,\n            value: EMPTY\n          });\n        }\n        // Treat the provider as the token.\n        token = provider;\n        multiProvider.deps.push({token, options: OptionFlags.Default});\n      }\n      const record = records.get(token);\n      if (record && record.fn == MULTI_PROVIDER_FN) {\n        throw multiProviderMixError(token);\n      }\n      records.set(token, resolvedProvider);\n    } else {\n      throw staticError('Unexpected provider', provider);\n    }\n  }\n}\n\nfunction tryResolveToken(\n    token: any, record: Record | undefined, records: Map<any, Record>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  try {\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\n  } catch (e) {\n    // ensure that 'e' is of type Error.\n    if (!(e instanceof Error)) {\n      e = new Error(e);\n    }\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n    path.unshift(token);\n    if (record && record.value == CIRCULAR) {\n      // Reset the Circular flag.\n      record.value = EMPTY;\n    }\n    throw e;\n  }\n}\n\nfunction resolveToken(\n    token: any, record: Record | undefined, records: Map<any, Record>, parent: Injector,\n    notFoundValue: any, flags: InjectFlags): any {\n  let value;\n  if (record && !(flags & InjectFlags.SkipSelf)) {\n    // If we don't have a record, this implies that we don't own the provider hence don't know how\n    // to resolve it.\n    value = record.value;\n    if (value == CIRCULAR) {\n      throw Error(NO_NEW_LINE + 'Circular dependency');\n    } else if (value === EMPTY) {\n      record.value = CIRCULAR;\n      let obj = undefined;\n      let useNew = record.useNew;\n      let fn = record.fn;\n      let depRecords = record.deps;\n      let deps = EMPTY;\n      if (depRecords.length) {\n        deps = [];\n        for (let i = 0; i < depRecords.length; i++) {\n          const depRecord: DependencyRecord = depRecords[i];\n          const options = depRecord.options;\n          const childRecord =\n              options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n          deps.push(tryResolveToken(\n              // Current Token to resolve\n              depRecord.token,\n              // A record which describes how to resolve the token.\n              // If undefined, this means we don't have such a record\n              childRecord,\n              // Other records we know about.\n              records,\n              // If we don't know how to resolve dependency and we should not check parent for it,\n              // than pass in Null injector.\n              !childRecord && !(options & OptionFlags.CheckParent) ? NULL_INJECTOR : parent,\n              options & OptionFlags.Optional ? null : Injector.THROW_IF_NOT_FOUND,\n              InjectFlags.Default));\n        }\n      }\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(obj, deps);\n    }\n  } else if (!(flags & InjectFlags.Self)) {\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\n  }\n  return value;\n}\n\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n  let deps: DependencyRecord[] = EMPTY;\n  const providerDeps: any[] =\n      (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n  if (providerDeps && providerDeps.length) {\n    deps = [];\n    for (let i = 0; i < providerDeps.length; i++) {\n      let options = OptionFlags.Default;\n      let token = resolveForwardRef(providerDeps[i]);\n      if (token instanceof Array) {\n        for (let j = 0, annotations = token; j < annotations.length; j++) {\n          const annotation = annotations[j];\n          if (annotation instanceof Optional || annotation == Optional) {\n            options = options | OptionFlags.Optional;\n          } else if (annotation instanceof SkipSelf || annotation == SkipSelf) {\n            options = options & ~OptionFlags.CheckSelf;\n          } else if (annotation instanceof Self || annotation == Self) {\n            options = options & ~OptionFlags.CheckParent;\n          } else if (annotation instanceof Inject) {\n            token = (annotation as Inject).token;\n          } else {\n            token = resolveForwardRef(annotation);\n          }\n        }\n      }\n      deps.push({token, options});\n    }\n  } else if ((provider as ExistingProvider).useExisting) {\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n    deps = [{token, options: OptionFlags.Default}];\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\n    throw staticError('\\'deps\\' required', provider);\n  }\n  return deps;\n}\n\nfunction formatError(text: string, obj: any, source: string | null = null): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  let context = stringify(obj);\n  if (obj instanceof Array) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    let parts = <string[]>[];\n    for (let key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        let value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `StaticInjectorError${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\\n  ')}`;\n}\n\nfunction staticError(text: string, obj: any): Error {\n  return new Error(formatError(text, obj));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function noop(...args: any[]): any {\n  // Do nothing.\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef} from '../change_detection/change_detection';\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ElementRef} from './element_ref';\nimport {NgModuleRef} from './ng_module_factory';\nimport {ViewRef} from './view_ref';\n\n/**\n * Represents a component created by a `ComponentFactory`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport abstract class ComponentRef<C> {\n  /**\n   * The host or anchor [element](guide/glossary#element) for this component instance.\n   */\n  abstract get location(): ElementRef;\n\n  /**\n   * The [dependency injector](guide/glossary#injector) for this component instance.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * This component instance.\n   */\n  abstract get instance(): C;\n\n  /**\n   * The [host view](guide/glossary#view-tree) defined by the template\n   * for this component instance.\n   */\n  abstract get hostView(): ViewRef;\n\n  /**\n   * The change detector for this component instance.\n   */\n  abstract get changeDetectorRef(): ChangeDetectorRef;\n\n  /**\n   * The component type.\n   */\n  abstract get componentType(): Type<any>;\n\n  /**\n   * Destroys the component instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * A lifecycle hook that provides additional developer-defined cleanup\n   * functionality for the component.\n   * @param callback A handler function that cleans up developer-defined data\n   * associated with this component. Called when the `destroy()` method is invoked.\n   */\n  abstract onDestroy(callback: Function): void;\n}\n\n/**\n * @publicApi\n */\nexport abstract class ComponentFactory<C> {\n  /**\n   * The component's HTML selector.\n   */\n  abstract get selector(): string;\n  /**\n   * The component's type\n   */\n  abstract get componentType(): Type<any>;\n  /**\n   * Selector for all <ng-content> elements in the component.\n   */\n  abstract get ngContentSelectors(): string[];\n  /**\n   * The inputs of the component.\n   */\n  abstract get inputs(): {propName: string, templateName: string}[];\n  /**\n   * The outputs of the component.\n   */\n  abstract get outputs(): {propName: string, templateName: string}[];\n  /**\n   * Creates a new component.\n   */\n  abstract create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\nimport {stringify} from '../util';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {NgModuleRef} from './ng_module_factory';\n\nexport function noComponentFactoryError(component: Function) {\n  const error = Error(\n      `No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);\n  (error as any)[ERROR_COMPONENT] = component;\n  return error;\n}\n\nconst ERROR_COMPONENT = 'ngComponent';\n\nexport function getComponent(error: Error): Type<any> {\n  return (error as any)[ERROR_COMPONENT];\n}\n\n\nclass _NullComponentFactoryResolver implements ComponentFactoryResolver {\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    throw noComponentFactoryError(component);\n  }\n}\n\n/**\n * @publicApi\n */\nexport abstract class ComponentFactoryResolver {\n  static NULL: ComponentFactoryResolver = new _NullComponentFactoryResolver();\n  abstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\nexport class CodegenComponentFactoryResolver implements ComponentFactoryResolver {\n  private _factories = new Map<any, ComponentFactory<any>>();\n\n  constructor(\n      factories: ComponentFactory<any>[], private _parent: ComponentFactoryResolver,\n      private _ngModule: NgModuleRef<any>) {\n    for (let i = 0; i < factories.length; i++) {\n      const factory = factories[i];\n      this._factories.set(factory.componentType, factory);\n    }\n  }\n\n  resolveComponentFactory<T>(component: {new (...args: any[]): T}): ComponentFactory<T> {\n    let factory = this._factories.get(component);\n    if (!factory && this._parent) {\n      factory = this._parent.resolveComponentFactory(component);\n    }\n    if (!factory) {\n      throw noComponentFactoryError(component);\n    }\n    return new ComponentFactoryBoundToModule(factory, this._ngModule);\n  }\n}\n\nexport class ComponentFactoryBoundToModule<C> extends ComponentFactory<C> {\n  readonly selector: string;\n  readonly componentType: Type<any>;\n  readonly ngContentSelectors: string[];\n  readonly inputs: {propName: string, templateName: string}[];\n  readonly outputs: {propName: string, templateName: string}[];\n\n  constructor(private factory: ComponentFactory<C>, private ngModule: NgModuleRef<any>) {\n    super();\n    this.selector = factory.selector;\n    this.componentType = factory.componentType;\n    this.ngContentSelectors = factory.ngContentSelectors;\n    this.inputs = factory.inputs;\n    this.outputs = factory.outputs;\n  }\n\n  create(\n      injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any,\n      ngModule?: NgModuleRef<any>): ComponentRef<C> {\n    return this.factory.create(\n        injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {Type} from '../type';\n\nimport {ComponentFactoryResolver} from './component_factory_resolver';\n\n\n/**\n * Represents an instance of an NgModule created via a {@link NgModuleFactory}.\n *\n * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n * NgModule Instance.\n *\n * @publicApi\n */\nexport abstract class NgModuleRef<T> {\n  /**\n   * The injector that contains all of the providers of the NgModule.\n   */\n  abstract get injector(): Injector;\n\n  /**\n   * The ComponentFactoryResolver to get hold of the ComponentFactories\n   * declared in the `entryComponents` property of the module.\n   */\n  abstract get componentFactoryResolver(): ComponentFactoryResolver;\n\n  /**\n   * The NgModule instance.\n   */\n  abstract get instance(): T;\n\n  /**\n   * Destroys the module instance and all of the data structures associated with it.\n   */\n  abstract destroy(): void;\n\n  /**\n   * Allows to register a callback that will be called when the module is destroyed.\n   */\n  abstract onDestroy(callback: () => void): void;\n}\n\nexport interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n  // Note: we are using the prefix _ as NgModuleData is an NgModuleRef and therefore directly\n  // exposed to the user.\n  _bootstrapComponents: Type<any>[];\n}\n\n/**\n * @publicApi\n */\nexport abstract class NgModuleFactory<T> {\n  abstract get moduleType(): Type<T>;\n  abstract create(parentInjector: Injector|null): NgModuleRef<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.\n *\n * For more information on how to run and debug tests with either Ivy or View Engine (legacy),\n * please see [BAZEL.md](./docs/BAZEL.md).\n */\n\nlet _devMode: boolean = true;\nlet _runModeLocked: boolean = false;\n\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n *\n * @publicApi\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\n/** Symbol.observable addition */\n/* Note: This will add Symbol.observable globally for all TypeScript users,\n  however, we are no longer polyfilling Symbol.observable */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nfunction EmptyErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'no elements in sequence';\n  this.name = 'EmptyError';\n  return this;\n}\n\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, ish, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination?: Subscriber<any>\n): Subscription;\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | void {\n  if (destination.closed) {\n    return;\n  }\n  return subscribeTo(result)(destination);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Subject, Subscription} from 'rxjs';\n\n/**\n * Use in directives and components to emit custom events synchronously\n * or asynchronously, and register handlers for those events by subscribing\n * to an instance.\n *\n * @usageNotes\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * ```\n * @Component({\n *   selector: 'zippy',\n *   template: `\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * ```\n *\n * Access the event object with the `$event` argument passed to the output event\n * handler:\n *\n * ```\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * ```\n *\n * ### Notes\n *\n * Uses Rx.Observable but provides an adapter to make it work as specified here:\n * https://github.com/jhusain/observable-spec\n *\n * Once a reference implementation of the spec is available, switch to it.\n *\n * @publicApi\n */\nexport class EventEmitter<T> extends Subject<T> {\n  // TODO: mark this as internal once all the facades are gone\n  // we can't mark it as internal now because EventEmitter exported via @angular/core would not\n  // contain this property making it incompatible with all the code that uses EventEmitter via\n  // facades, which are local to the code and do not have this property stripped.\n  /**\n   * Internal\n   */\n  __isAsync: boolean;  // tslint:disable-line\n\n  /**\n   * Creates an instance of this class that can\n   * deliver events synchronously or asynchronously.\n   *\n   * @param isAsync When true, deliver events asynchronously.\n   *\n   */\n  constructor(isAsync: boolean = false) {\n    super();\n    this.__isAsync = isAsync;\n  }\n\n  /**\n   * Emits an event containing a given value.\n   * @param value The value to emit.\n   */\n  emit(value?: T) { super.next(value); }\n\n  /**\n   * Registers handlers for events emitted by this instance.\n   * @param generatorOrNext When supplied, a custom handler for emitted events.\n   * @param error When supplied, a custom handler for an error notification\n   * from this emitter.\n   * @param complete When supplied, a custom handler for a completion\n   * notification from this emitter.\n   */\n  subscribe(generatorOrNext?: any, error?: any, complete?: any): any {\n    let schedulerFn: (t: any) => any;\n    let errorFn = (err: any): any => null;\n    let completeFn = (): any => null;\n\n    if (generatorOrNext && typeof generatorOrNext === 'object') {\n      schedulerFn = this.__isAsync ? (value: any) => {\n        setTimeout(() => generatorOrNext.next(value));\n      } : (value: any) => { generatorOrNext.next(value); };\n\n      if (generatorOrNext.error) {\n        errorFn = this.__isAsync ? (err) => { setTimeout(() => generatorOrNext.error(err)); } :\n                                   (err) => { generatorOrNext.error(err); };\n      }\n\n      if (generatorOrNext.complete) {\n        completeFn = this.__isAsync ? () => { setTimeout(() => generatorOrNext.complete()); } :\n                                      () => { generatorOrNext.complete(); };\n      }\n    } else {\n      schedulerFn = this.__isAsync ? (value: any) => { setTimeout(() => generatorOrNext(value)); } :\n                                     (value: any) => { generatorOrNext(value); };\n\n      if (error) {\n        errorFn =\n            this.__isAsync ? (err) => { setTimeout(() => error(err)); } : (err) => { error(err); };\n      }\n\n      if (complete) {\n        completeFn =\n            this.__isAsync ? () => { setTimeout(() => complete()); } : () => { complete(); };\n      }\n    }\n\n    const sink = super.subscribe(schedulerFn, errorFn, completeFn);\n\n    if (generatorOrNext instanceof Subscription) {\n      generatorOrNext.add(sink);\n    }\n\n    return sink;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n * the `MyCustomComponent` constructor function.\n *\n * @publicApi\n */\nexport const Type = Function;\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\nexport interface Type<T> extends Function { new (...args: any[]): T; }\n\nexport type Mutable<T extends{[x: string]: any}, K extends string> = {\n  [P in K]: T[P];\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type, isType} from '../type';\nimport {global, stringify} from '../util';\nimport {ANNOTATIONS, PARAMETERS, PROP_METADATA} from '../util/decorators';\n\nimport {PlatformReflectionCapabilities} from './platform_reflection_capabilities';\nimport {GetterFn, MethodFn, SetterFn} from './types';\n\n\n/**\n * Attention: These regex has to hold even if the code is minified!\n */\nexport const DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{[\\s\\S]+\\.apply\\(this,\\s*arguments\\)/;\nexport const INHERITED_CLASS = /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{/;\nexport const INHERITED_CLASS_WITH_CTOR =\n    /^class\\s+[A-Za-z\\d$_]*\\s*extends\\s+[^{]+{[\\s\\S]*constructor\\s*\\(/;\n\nexport class ReflectionCapabilities implements PlatformReflectionCapabilities {\n  private _reflect: any;\n\n  constructor(reflect?: any) { this._reflect = reflect || global['Reflect']; }\n\n  isReflectionEnabled(): boolean { return true; }\n\n  factory<T>(t: Type<T>): (args: any[]) => T { return (...args: any[]) => new t(...args); }\n\n  /** @internal */\n  _zipTypesAndAnnotations(paramTypes: any[], paramAnnotations: any[]): any[][] {\n    let result: any[][];\n\n    if (typeof paramTypes === 'undefined') {\n      result = new Array(paramAnnotations.length);\n    } else {\n      result = new Array(paramTypes.length);\n    }\n\n    for (let i = 0; i < result.length; i++) {\n      // TS outputs Object for parameters without types, while Traceur omits\n      // the annotations. For now we preserve the Traceur behavior to aid\n      // migration, but this can be revisited.\n      if (typeof paramTypes === 'undefined') {\n        result[i] = [];\n      } else if (paramTypes[i] != Object) {\n        result[i] = [paramTypes[i]];\n      } else {\n        result[i] = [];\n      }\n      if (paramAnnotations && paramAnnotations[i] != null) {\n        result[i] = result[i].concat(paramAnnotations[i]);\n      }\n    }\n    return result;\n  }\n\n  private _ownParameters(type: Type<any>, parentCtor: any): any[][]|null {\n    const typeStr = type.toString();\n    // If we have no decorators, we only have function.length as metadata.\n    // In that case, to detect whether a child class declared an own constructor or not,\n    // we need to look inside of that constructor to check whether it is\n    // just calling the parent.\n    // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n    // that sets 'design:paramtypes' to []\n    // if a class inherits from another class but has no ctor declared itself.\n    if (DELEGATE_CTOR.exec(typeStr) ||\n        (INHERITED_CLASS.exec(typeStr) && !INHERITED_CLASS_WITH_CTOR.exec(typeStr))) {\n      return null;\n    }\n\n    // Prefer the direct API.\n    if ((<any>type).parameters && (<any>type).parameters !== parentCtor.parameters) {\n      return (<any>type).parameters;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    const tsickleCtorParams = (<any>type).ctorParameters;\n    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n      // Newer tsickle uses a function closure\n      // Retain the non-function case for compatibility with older tsickle\n      const ctorParameters =\n          typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n      const paramTypes = ctorParameters.map((ctorParam: any) => ctorParam && ctorParam.type);\n      const paramAnnotations = ctorParameters.map(\n          (ctorParam: any) =>\n              ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // API for metadata created by invoking the decorators.\n    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && (type as any)[PARAMETERS];\n    const paramTypes = this._reflect && this._reflect.getOwnMetadata &&\n        this._reflect.getOwnMetadata('design:paramtypes', type);\n    if (paramTypes || paramAnnotations) {\n      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n    }\n\n    // If a class has no decorators, at least create metadata\n    // based on function.length.\n    // Note: We know that this is a real constructor as we checked\n    // the content of the constructor above.\n    return new Array((<any>type.length)).fill(undefined);\n  }\n\n  parameters(type: Type<any>): any[][] {\n    // Note: only report metadata if we have at least one class decorator\n    // to stay in sync with the static reflector.\n    if (!isType(type)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(type);\n    let parameters = this._ownParameters(type, parentCtor);\n    if (!parameters && parentCtor !== Object) {\n      parameters = this.parameters(parentCtor);\n    }\n    return parameters || [];\n  }\n\n  private _ownAnnotations(typeOrFunc: Type<any>, parentCtor: any): any[]|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).annotations && (<any>typeOrFunc).annotations !== parentCtor.annotations) {\n      let annotations = (<any>typeOrFunc).annotations;\n      if (typeof annotations === 'function' && annotations.annotations) {\n        annotations = annotations.annotations;\n      }\n      return annotations;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).decorators && (<any>typeOrFunc).decorators !== parentCtor.decorators) {\n      return convertTsickleDecoratorIntoMetadata((<any>typeOrFunc).decorators);\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {\n      return (typeOrFunc as any)[ANNOTATIONS];\n    }\n    return null;\n  }\n\n  annotations(typeOrFunc: Type<any>): any[] {\n    if (!isType(typeOrFunc)) {\n      return [];\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n    return parentAnnotations.concat(ownAnnotations);\n  }\n\n  private _ownPropMetadata(typeOrFunc: any, parentCtor: any): {[key: string]: any[]}|null {\n    // Prefer the direct API.\n    if ((<any>typeOrFunc).propMetadata &&\n        (<any>typeOrFunc).propMetadata !== parentCtor.propMetadata) {\n      let propMetadata = (<any>typeOrFunc).propMetadata;\n      if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n        propMetadata = propMetadata.propMetadata;\n      }\n      return propMetadata;\n    }\n\n    // API of tsickle for lowering decorators to properties on the class.\n    if ((<any>typeOrFunc).propDecorators &&\n        (<any>typeOrFunc).propDecorators !== parentCtor.propDecorators) {\n      const propDecorators = (<any>typeOrFunc).propDecorators;\n      const propMetadata = <{[key: string]: any[]}>{};\n      Object.keys(propDecorators).forEach(prop => {\n        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);\n      });\n      return propMetadata;\n    }\n\n    // API for metadata created by invoking the decorators.\n    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {\n      return (typeOrFunc as any)[PROP_METADATA];\n    }\n    return null;\n  }\n\n  propMetadata(typeOrFunc: any): {[key: string]: any[]} {\n    if (!isType(typeOrFunc)) {\n      return {};\n    }\n    const parentCtor = getParentCtor(typeOrFunc);\n    const propMetadata: {[key: string]: any[]} = {};\n    if (parentCtor !== Object) {\n      const parentPropMetadata = this.propMetadata(parentCtor);\n      Object.keys(parentPropMetadata).forEach((propName) => {\n        propMetadata[propName] = parentPropMetadata[propName];\n      });\n    }\n    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n    if (ownPropMetadata) {\n      Object.keys(ownPropMetadata).forEach((propName) => {\n        const decorators: any[] = [];\n        if (propMetadata.hasOwnProperty(propName)) {\n          decorators.push(...propMetadata[propName]);\n        }\n        decorators.push(...ownPropMetadata[propName]);\n        propMetadata[propName] = decorators;\n      });\n    }\n    return propMetadata;\n  }\n\n  hasLifecycleHook(type: any, lcProperty: string): boolean {\n    return type instanceof Type && lcProperty in type.prototype;\n  }\n\n  guards(type: any): {[key: string]: any} { return {}; }\n\n  getter(name: string): GetterFn { return <GetterFn>new Function('o', 'return o.' + name + ';'); }\n\n  setter(name: string): SetterFn {\n    return <SetterFn>new Function('o', 'v', 'return o.' + name + ' = v;');\n  }\n\n  method(name: string): MethodFn {\n    const functionBody = `if (!o.${name}) throw new Error('\"${name}\" is undefined');\n        return o.${name}.apply(o, args);`;\n    return <MethodFn>new Function('o', 'args', functionBody);\n  }\n\n  // There is not a concept of import uri in Js, but this is useful in developing Dart applications.\n  importUri(type: any): string {\n    // StaticSymbol\n    if (typeof type === 'object' && type['filePath']) {\n      return type['filePath'];\n    }\n    // Runtime type\n    return `./${stringify(type)}`;\n  }\n\n  resourceUri(type: any): string { return `./${stringify(type)}`; }\n\n  resolveIdentifier(name: string, moduleUrl: string, members: string[], runtime: any): any {\n    return runtime;\n  }\n  resolveEnum(enumIdentifier: any, name: string): any { return enumIdentifier[name]; }\n}\n\nfunction convertTsickleDecoratorIntoMetadata(decoratorInvocations: any[]): any[] {\n  if (!decoratorInvocations) {\n    return [];\n  }\n  return decoratorInvocations.map(decoratorInvocation => {\n    const decoratorType = decoratorInvocation.type;\n    const annotationCls = decoratorType.annotationCls;\n    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n    return new annotationCls(...annotationArgs);\n  });\n}\n\nfunction getParentCtor(ctor: Function): Type<any> {\n  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;\n  const parentCtor = parentProto ? parentProto.constructor : null;\n  // Note: We always use `Object` as the null value\n  // to simplify checking later on.\n  return parentCtor || Object;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy} from '../change_detection/constants';\nimport {Provider} from '../di';\nimport {NG_BASE_DEF} from '../render3/fields';\nimport {compileComponent as render3CompileComponent, compileDirective as render3CompileDirective} from '../render3/jit/directive';\nimport {compilePipe as render3CompilePipe} from '../render3/jit/pipe';\nimport {Type} from '../type';\nimport {TypeDecorator, makeDecorator, makePropDecorator} from '../util/decorators';\nimport {noop} from '../util/noop';\nimport {fillProperties} from '../util/property';\n\nimport {ViewEncapsulation} from './view';\n\n\n\n/**\n * Type of the Directive decorator / constructor function.\n * @publicApi\n */\nexport interface DirectiveDecorator {\n  /**\n   * Marks a class as an Angular directive. You can define your own\n   * directives to attach custom behavior to elements in the DOM.\n   * The options provide configuration metadata that determines\n   * how the directive should be processed, instantiated and used at\n   * runtime.\n   *\n   * Directive classes, like component classes, can implement\n   * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n   *\n   *\n   * @usageNotes\n   * To define a directive, mark the class with the decorator and provide metadata.\n   *\n   * ```\n   * import {Directive} from '@angular/core';\n   *\n   * @Directive({\n   *   selector: 'my-directive',\n   * })\n   * export class MyDirective {\n   * ...\n   * }\n   * ```\n   *\n   * ### Declaring directives\n   *\n   * Directives are [declarables](guide/glossary#declarable).\n   * They must be declared by an NgModule\n   * in order to be usable in an app.\n   *\n   * A directive must belong to exactly one NgModule. Do not re-declare\n   * a directive imported from another module.\n   * List the directive class in the `declarations` field of an NgModule.\n   *\n   * ```\n   * declarations: [\n   *  AppComponent,\n   *  MyDirective\n   * ],\n   * ```\n   *\n   * @Annotation\n   */\n  (obj: Directive): TypeDecorator;\n\n  /**\n   * See the `Directive` decorator.\n   */\n  new (obj: Directive): Directive;\n}\n\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport interface Directive {\n  /**\n   * The CSS selector that identifies this directive in a template\n   * and triggers instantiation of the directive.\n   *\n   * Declare as one of the following:\n   *\n   * - `element-name`: Select by element name.\n   * - `.class`: Select by class name.\n   * - `[attribute]`: Select by attribute name.\n   * - `[attribute=value]`: Select by attribute name and value.\n   * - `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.\n   * - `selector1, selector2`: Select if either `selector1` or `selector2` matches.\n   *\n   * Angular only allows directives to apply on CSS selectors that do not cross\n   * element boundaries.\n   *\n   * For the following template HTML, a directive with an `input[type=text]` selector,\n   * would be instantiated only on the `<input type=\"text\">` element.\n   *\n   * ```html\n   * <form>\n   *   <input type=\"text\">\n   *   <input type=\"radio\">\n   * <form>\n   * ```\n   *\n   */\n  selector?: string;\n\n  /**\n   * Enumerates the set of data-bound input properties for a directive\n   *\n   * Angular automatically updates input properties during change detection.\n   * The `inputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property where the value is written.\n   * - `bindingProperty` specifies the DOM property where the value is read from.\n   *\n   * When `bindingProperty` is not provided, it is assumed to be equal to `directiveProperty`.\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * The following example creates a component with two data-bound properties.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   inputs: ['bankName', 'id: account-id'],\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   bankName: string;\n   *   id: string;\n   *\n   * ```\n   *\n   */\n  inputs?: string[];\n\n  /**\n   * Enumerates the set of event-bound output properties.\n   *\n   * When an output property emits an event, an event handler attached to that event\n   * in the template is invoked.\n   *\n   * The `outputs` property defines a set of `directiveProperty` to `bindingProperty`\n   * configuration:\n   *\n   * - `directiveProperty` specifies the component property that emits events.\n   * - `bindingProperty` specifies the DOM property the event handler is attached to.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * ```typescript\n   * @Directive({\n   *   selector: 'child-dir',\n   *   exportAs: 'child'\n   * })\n   * class ChildDir {\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `<child-dir #c=\"child\"></child-dir>`\n   * })\n   * class MainComponent {\n   * }\n   * ```\n   *\n   */\n  outputs?: string[];\n\n  /**\n   * Configures the [injector](guide/glossary#injector) of this\n   * directive or component with a [token](guide/glossary#di-token)\n   * that maps to a [provider](guide/glossary#provider) of a dependency.\n   */\n  providers?: Provider[];\n\n  /**\n   * Defines the name that can be used in the template to assign this directive to a variable.\n   *\n   * @usageNotes\n   *\n   * ### Simple Example\n   *\n   * ```\n   * @Directive({\n   *   selector: 'child-dir',\n   *   exportAs: 'child'\n   * })\n   * class ChildDir {\n   * }\n   *\n   * @Component({\n   *   selector: 'main',\n   *   template: `<child-dir #c=\"child\"></child-dir>`\n   * })\n   * class MainComponent {\n   * }\n   * ```\n   *\n   */\n  exportAs?: string;\n\n  /**\n   * Configures the queries that will be injected into the directive.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   * View queries are set before the `ngAfterViewInit` callback is called.\n   *\n   * @usageNotes\n   *\n   * ### Example\n   *\n   * The following example shows how queries are defined\n   * and when their results are available in lifecycle hooks:\n   *\n   * ```\n   * @Component({\n   *   selector: 'someDir',\n   *   queries: {\n   *     contentChildren: new ContentChildren(ChildDirective),\n   *     viewChildren: new ViewChildren(ChildDirective)\n   *   },\n   *   template: '<child-directive></child-directive>'\n   * })\n   * class SomeDir {\n   *   contentChildren: QueryList<ChildDirective>,\n   *   viewChildren: QueryList<ChildDirective>\n   *\n   *   ngAfterContentInit() {\n   *     // contentChildren is set\n   *   }\n   *\n   *   ngAfterViewInit() {\n   *     // viewChildren is set\n   *   }\n   * }\n   * ```\n   *\n   * @Annotation\n   */\n  queries?: {[key: string]: any};\n\n  /**\n   * Maps class properties to host element bindings for properties,\n   * attributes, and events, using a set of key-value pairs.\n   *\n   * Angular automatically checks host property bindings during change detection.\n   * If a binding changes, Angular updates the directive's host element.\n   *\n   * When the key is a property of the host element, the property value is\n   * the propagated to the specified DOM property.\n   *\n   * When the key is a static attribute in the DOM, the attribute value\n   * is propagated to the specified property in the host element.\n   *\n   * For event handling:\n   * - The key is the DOM event that the directive listens to.\n   * To listen to global events, add the target to the event name.\n   * The target can be `window`, `document` or `body`.\n   * - The value is the statement to execute when the event occurs. If the\n   * statement evalueates to `false`, then `preventDefault` is applied on the DOM\n   * event. A handler method can refer to the `$event` local variable.\n   *\n   */\n  host?: {[key: string]: string};\n\n  /**\n   * If true, this directive/component will be skipped by the AOT compiler and so will always be\n   * compiled using JIT.\n   *\n   * This exists to support future Ivy work and has no effect currently.\n   */\n  jit?: true;\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nexport const Directive: DirectiveDecorator = makeDecorator(\n    'Directive', (dir: Directive = {}) => dir, undefined, undefined,\n    (type: Type<any>, meta: Directive) => SWITCH_COMPILE_DIRECTIVE(type, meta));\n\n/**\n * Component decorator interface\n *\n * @publicApi\n */\nexport interface ComponentDecorator {\n  /**\n   * Decorator that marks a class as an Angular component and provides configuration\n   * metadata that determines how the component should be processed,\n   * instantiated, and used at runtime.\n   *\n   * Components are the most basic UI building block of an Angular app.\n   * An Angular app contains a tree of Angular components.\n   *\n   * Angular components are a subset of directives, always associated with a template.\n   * Unlike other directives, only one component can be instantiated per an element in a template.\n   *\n   * A component must belong to an NgModule in order for it to be available\n   * to another component or application. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `@NgModule` metadata.\n   *\n   * Note that, in addition to these options for configuring a directive,\n   * you can control a component's runtime behavior by implementing\n   * life-cycle hooks. For more information, see the\n   * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n   *\n   * @usageNotes\n   *\n   * ### Setting component inputs\n   *\n   * The following example creates a component with two data-bound properties,\n   * specified by the `inputs` value.\n   *\n   * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\">\n   * </code-example>\n   *\n   *\n   * ### Setting component outputs\n   *\n   * The following example shows two event emitters that emit on an interval. One\n   * emits an output every second, while the other emits every five seconds.\n   *\n   * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n   *\n   * ### Injecting a class with a view provider\n   *\n   * The following simple example injects a class into a component\n   * using the view provider specified in component metadata:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @Directive({\n   *   selector: 'needs-greeter'\n   * })\n   * class NeedsGreeter {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   viewProviders: [\n   *     Greeter\n   *   ],\n   *   template: `<needs-greeter></needs-greeter>`\n   * })\n   * class HelloWorld {\n   * }\n   *\n   * ```\n   *\n   * ### Preserving whitespace\n   *\n   * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n   * As of Angular 6, the default for `preserveWhitespaces` is false (whitespace is removed).\n   * To change the default setting for all components in your application, set\n   * the `preserveWhitespaces` option of the AOT compiler.\n   *\n   * By default, the AOT compiler removes whitespace characters as follows:\n   * * Trims all whitespaces at the beginning and the end of a template.\n   * * Removes whitespace-only text nodes. For example,\n   *\n   * ```\n   * <button>Action 1</button>  <button>Action 2</button>\n   * ```\n   *\n   * becomes:\n   *\n   * ```\n   * <button>Action 1</button><button>Action 2</button>\n   * ```\n   *\n   * * Replaces a series of whitespace characters in text nodes with a single space.\n   * For example, `<span>\\n some text\\n</span>` becomes `<span> some text </span>`.\n   * * Does NOT alter text nodes inside HTML tags such as `<pre>` or `<textarea>`,\n   * where whitespace characters are significant.\n   *\n   * Note that these transformations can influence DOM nodes layout, although impact\n   * should be minimal.\n   *\n   * You can override the default behavior to preserve whitespace characters\n   * in certain fragments of a template. For example, you can exclude an entire\n   * DOM sub-tree by using the `ngPreserveWhitespaces` attribute:\n   *\n   * ```html\n   * <div ngPreserveWhitespaces>\n   *     whitespaces are preserved here\n   *     <span>    and here </span>\n   * </div>\n   * ```\n   *\n   * You can force a single space to be preserved in a text node by using `&ngsp;`,\n   * which is replaced with a space character by Angular's template\n   * compiler:\n   *\n   * ```html\n   * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n   * <!-->compiled to be equivalent to:</>\n   *  <a>Spaces</a> <a>between</a> <a>links.</a>\n   * ```\n   *\n   * Note that sequences of `&ngsp;` are still collapsed to just one space character when\n   * the `preserveWhitespaces` option is set to `false`.\n   *\n   * ```html\n   * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n   * <!-->compiled to be equivalent to:</>\n   *  <a>Spaces</a> <a>between</a> <a>links.</a>\n   * ```\n   *\n   * To preserve sequences of whitespace characters, use the\n   * `ngPreserveWhitespaces` attribute.\n   *\n   * @Annotation\n   */\n  (obj: Component): TypeDecorator;\n  /**\n   * See the `@Component` decorator.\n   */\n  new (obj: Component): Component;\n}\n\n/**\n * Supplies configuration metadata for an Angular component.\n *\n * @publicApi\n */\nexport interface Component extends Directive {\n  /**\n   * The change-detection strategy to use for this component.\n   *\n   * When a component is instantiated, Angular creates a change detector,\n   * which is responsible for propagating the component's bindings.\n   * The strategy is one of:\n   * - `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).\n   * - `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n   */\n  changeDetection?: ChangeDetectionStrategy;\n\n  /**\n   * Defines the set of injectable objects that are visible to its view DOM children.\n   * See [example](#injecting-a-class-with-a-view-provider).\n   *\n   */\n  viewProviders?: Provider[];\n\n  /**\n   * The module ID of the module that contains the component.\n   * The component must be able to resolve relative URLs for templates and styles.\n   * SystemJS exposes the `__moduleName` variable within each module.\n   * In CommonJS, this can  be set to `module.id`.\n   *\n   */\n  moduleId?: string;\n\n  /**\n   * The URL of a template file for an Angular component. If provided,\n   * do not supply an inline template using `template`.\n   *\n   */\n  templateUrl?: string;\n\n  /**\n   * An inline template for an Angular component. If provided,\n   * do not supply a template file using `templateUrl`.\n   *\n   */\n  template?: string;\n\n  /**\n   * One or more URLs for files containing CSS stylesheets to use\n   * in this component.\n   */\n  styleUrls?: string[];\n\n  /**\n   * One or more inline CSS stylesheets to use\n   * in this component.\n   */\n  styles?: string[];\n\n  /**\n   * One or more animation `trigger()` calls, containing\n   * `state()` and `transition()` definitions.\n   * See the [Animations guide](/guide/animations) and animations API documentation.\n   *\n   */\n  animations?: any[];\n\n  /**\n   * An encapsulation policy for the template and CSS styles. One of:\n   * - `ViewEncapsulation.Native`: Use shadow roots. This works\n   * only if natively available on the platform.\n   * - `ViewEncapsulation.Emulated`: Use shimmed CSS that\n   * emulates the native behavior.\n   * - `ViewEncapsulation.None`: Use global CSS without any\n   * encapsulation.\n   *\n   * If not supplied, the value is taken from `CompilerOptions`. The default compiler option is\n   * `ViewEncapsulation.Emulated`.\n   *\n   * If the policy is set to `ViewEncapsulation.Emulated` and the component has no `styles`\n   * or `styleUrls` specified, the policy is automatically switched to `ViewEncapsulation.None`.\n   */\n  encapsulation?: ViewEncapsulation;\n\n  /**\n   * Overrides the default encapsulation start and end delimiters (`{{` and `}}`)\n   */\n  interpolation?: [string, string];\n\n  /**\n   * A set of components that should be compiled along with\n   * this component. For each component listed here,\n   * Angular creates a {@link ComponentFactory} and stores it in the\n   * {@link ComponentFactoryResolver}.\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * True to preserve or false to remove potentially superfluous whitespace characters\n   * from the compiled template. Whitespace characters are those matching the `\\s`\n   * character class in JavaScript regular expressions. Default is false, unless\n   * overridden in compiler options.\n   */\n  preserveWhitespaces?: boolean;\n}\n\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Component: ComponentDecorator = makeDecorator(\n    'Component', (c: Component = {}) => ({changeDetection: ChangeDetectionStrategy.Default, ...c}),\n    Directive, undefined,\n    (type: Type<any>, meta: Component) => SWITCH_COMPILE_COMPONENT(type, meta));\n\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * @publicApi\n */\nexport interface PipeDecorator {\n  /**\n   * Declares a reusable pipe function, and supplies configuration metadata.\n   *\n   */\n  (obj: Pipe): TypeDecorator;\n\n  /**\n   * See the `Pipe` decorator.\n   */\n  new (obj: Pipe): Pipe;\n}\n\n/**\n * Type of the Pipe metadata.\n *\n * @publicApi\n */\nexport interface Pipe {\n  /**\n   * The pipe name to use in template bindings.\n   *\n   */\n  name: string;\n\n  /**\n   * When true, the pipe is pure, meaning that the\n   * `transform()` method is invoked only when its input arguments\n   * change. Pipes are pure by default.\n   *\n   * If the pipe has internal state (that is, the result\n   * depends on state other than its arguments), set `pure` to false.\n   * In this case, the pipe is invoked on each change-detection cycle,\n   * even if the arguments have not changed.\n   */\n  pure?: boolean;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Pipe: PipeDecorator = makeDecorator(\n    'Pipe', (p: Pipe) => ({pure: true, ...p}), undefined, undefined,\n    (type: Type<any>, meta: Pipe) => SWITCH_COMPILE_PIPE(type, meta));\n\n\n/**\n * @publicApi\n */\nexport interface InputDecorator {\n  /**\n   * Decorator that marks a class as pipe and supplies configuration metadata.\n   *\n   * A pipe class must implement the `PipeTransform` interface.\n   * For example, if the name is \"myPipe\", use a template binding expression\n   * such as the following:\n   *\n   * ```\n   * {{ exp | myPipe }}\n   * ```\n   *\n   * The result of the expression is passed to the pipe's `transform()` method.\n   *\n   * A pipe must belong to an NgModule in order for it to be available\n   * to a template. To make it a member of an NgModule,\n   * list it in the `declarations` field of the `@NgModule` metadata.\n   *\n   */\n  (bindingPropertyName?: string): any;\n  new (bindingPropertyName?: string): any;\n}\n\n/**\n * Type of metadata for an `Input` property.\n *\n * @publicApi\n */\nexport interface Input {\n  /**\n   * Decorator that marks a class field as an input property and supplies configuration metadata.\n   * Declares a data-bound input property, which Angular automatically updates\n   * during change detection.\n   *\n   * @usageNotes\n   *\n   * You can supply an optional name to use in templates when the\n   * component is instantiated, that maps to the\n   * name of the bound property. By default, the original\n   * name of the bound property is used for input binding.\n   *\n   * The following example creates a component with two input properties,\n   * one of which is given a special binding name.\n   *\n   * ```typescript\n   * @Component({\n   *   selector: 'bank-account',\n   *   template: `\n   *     Bank Name: {{bankName}}\n   *     Account Id: {{id}}\n   *   `\n   * })\n   * class BankAccount {\n   *   // This property is bound using its original name.\n   *   @Input() bankName: string;\n   *   // this property value is bound to a different property name\n   *   // when this component is instantiated in a template.\n   *   @Input('account-id') id: string;\n   *\n   *   // this property is not bound, and is not automatically updated by Angular\n   *   normalizedBankName: string;\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `\n   *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n   *   `\n   * })\n   *\n   * class App {}\n   * ```\n   *\n   */\n  bindingPropertyName?: string;\n}\n\nconst initializeBaseDef = (target: any): void => {\n  const constructor = target.constructor;\n  const inheritedBaseDef = constructor.ngBaseDef;\n\n  const baseDef = constructor.ngBaseDef = {\n    inputs: {},\n    outputs: {},\n    declaredInputs: {},\n  };\n\n  if (inheritedBaseDef) {\n    fillProperties(baseDef.inputs, inheritedBaseDef.inputs);\n    fillProperties(baseDef.outputs, inheritedBaseDef.outputs);\n    fillProperties(baseDef.declaredInputs, inheritedBaseDef.declaredInputs);\n  }\n};\n\n/**\n * Does the work of creating the `ngBaseDef` property for the @Input and @Output decorators.\n * @param key \"inputs\" or \"outputs\"\n */\nconst updateBaseDefFromIOProp = (getProp: (baseDef: {inputs?: any, outputs?: any}) => any) =>\n    (target: any, name: string, ...args: any[]) => {\n      const constructor = target.constructor;\n\n      if (!constructor.hasOwnProperty(NG_BASE_DEF)) {\n        initializeBaseDef(target);\n      }\n\n      const baseDef = constructor.ngBaseDef;\n      const defProp = getProp(baseDef);\n      defProp[name] = args[0];\n    };\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Input: InputDecorator = makePropDecorator(\n    'Input', (bindingPropertyName?: string) => ({bindingPropertyName}), undefined,\n    updateBaseDefFromIOProp(baseDef => baseDef.inputs || {}));\n\n/**\n * Type of the Output decorator / constructor function.\n *\n * @publicApi\n */\nexport interface OutputDecorator {\n  /**\n  * Decorator that marks a class field as an output property and supplies configuration metadata.\n  * Declares a data-bound output property, which Angular automatically updates\n  * during change detection.\n  *\n  * @usageNotes\n  *\n  * You can supply an optional name to use in templates when the\n  * component is instantiated, that maps to the\n  * name of the bound property. By default, the original\n  * name of the bound property is used for output binding.\n  *\n  * See `@Input` decorator for an example of providing a binding name.\n  *\n  */\n  (bindingPropertyName?: string): any;\n  new (bindingPropertyName?: string): any;\n}\n\n/**\n * Type of the Output metadata.\n *\n * @publicApi\n */\nexport interface Output { bindingPropertyName?: string; }\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const Output: OutputDecorator = makePropDecorator(\n    'Output', (bindingPropertyName?: string) => ({bindingPropertyName}), undefined,\n    updateBaseDefFromIOProp(baseDef => baseDef.outputs || {}));\n\n\n\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostBindingDecorator {\n  /**\n   * Decorator that marks a DOM property as a host-binding property and supplies configuration\n   * metadata.\n   * Angular automatically checks host property bindings during change detection, and\n   * if a binding changes it updates the host element of the directive.\n   *\n   * @usageNotes\n   *\n   * The following example creates a directive that sets the `valid` and `invalid`\n   * properties on the DOM element that has an `ngModel` directive on it.\n   *\n   * ```typescript\n   * @Directive({selector: '[ngModel]'})\n   * class NgModelStatus {\n   *   constructor(public control: NgModel) {}\n   *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n   *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n   * }\n   *\n   * @Component({\n   *   selector: 'app',\n   *   template: `<input [(ngModel)]=\"prop\">`,\n   * })\n   * class App {\n   *   prop;\n   * }\n   * ```\n   *\n   */\n  (hostPropertyName?: string): any;\n  new (hostPropertyName?: string): any;\n}\n\n/**\n * Type of the HostBinding metadata.\n *\n * @publicApi\n */\nexport interface HostBinding { hostPropertyName?: string; }\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const HostBinding: HostBindingDecorator =\n    makePropDecorator('HostBinding', (hostPropertyName?: string) => ({hostPropertyName}));\n\n\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * @publicApi\n */\nexport interface HostListenerDecorator {\n  (eventName: string, args?: string[]): any;\n  new (eventName: string, args?: string[]): any;\n}\n\n/**\n * Type of the HostListener metadata.\n *\n * @publicApi\n */\nexport interface HostListener {\n  /**\n   * The CSS event to listen for.\n   */\n  eventName?: string;\n  /**\n   * A set of arguments to pass to the handler method when the event occurs.\n   */\n  args?: string[];\n}\n\n/**\n * Binds a CSS event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n * If the handler method returns false, applies `preventDefault` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * ```\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *  }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n * ```\n *\n * @Annotation\n * @publicApi\n */\nexport const HostListener: HostListenerDecorator =\n    makePropDecorator('HostListener', (eventName?: string, args?: string[]) => ({eventName, args}));\n\n\n\nexport const SWITCH_COMPILE_COMPONENT__POST_R3__ = render3CompileComponent;\nexport const SWITCH_COMPILE_DIRECTIVE__POST_R3__ = render3CompileDirective;\nexport const SWITCH_COMPILE_PIPE__POST_R3__ = render3CompilePipe;\n\nconst SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;\nconst SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;\nconst SWITCH_COMPILE_PIPE__PRE_R3__ = noop;\n\nconst SWITCH_COMPILE_COMPONENT: typeof render3CompileComponent = SWITCH_COMPILE_COMPONENT__PRE_R3__;\nconst SWITCH_COMPILE_DIRECTIVE: typeof render3CompileDirective = SWITCH_COMPILE_DIRECTIVE__PRE_R3__;\nconst SWITCH_COMPILE_PIPE: typeof render3CompilePipe = SWITCH_COMPILE_PIPE__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ReflectionCapabilities} from '../reflection/reflection_capabilities';\nimport {Type} from '../type';\nimport {getClosureSafeProperty} from '../util/property';\n\nimport {inject, injectArgs} from './injector_compatibility';\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueProvider, ValueSansProvider} from './provider';\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\nconst EMPTY_ARRAY: any[] = [];\n\nexport function convertInjectableProviderToFactory(\n    type: Type<any>, provider?: ValueSansProvider | ExistingSansProvider | StaticClassSansProvider |\n        ConstructorSansProvider | FactorySansProvider | ClassSansProvider): () => any {\n  if (!provider) {\n    const reflectionCapabilities = new ReflectionCapabilities();\n    const deps = reflectionCapabilities.parameters(type);\n    // TODO - convert to flags.\n    return () => new type(...injectArgs(deps as any[]));\n  }\n\n  if (USE_VALUE in provider) {\n    const valueProvider = (provider as ValueSansProvider);\n    return () => valueProvider.useValue;\n  } else if ((provider as ExistingSansProvider).useExisting) {\n    const existingProvider = (provider as ExistingSansProvider);\n    return () => inject(existingProvider.useExisting);\n  } else if ((provider as FactorySansProvider).useFactory) {\n    const factoryProvider = (provider as FactorySansProvider);\n    return () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY));\n  } else if ((provider as StaticClassSansProvider | ClassSansProvider).useClass) {\n    const classProvider = (provider as StaticClassSansProvider | ClassSansProvider);\n    let deps = (provider as StaticClassSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new classProvider.useClass(...injectArgs(deps));\n  } else {\n    let deps = (provider as ConstructorSansProvider).deps;\n    if (!deps) {\n      const reflectionCapabilities = new ReflectionCapabilities();\n      deps = reflectionCapabilities.parameters(type);\n    }\n    return () => new type(...injectArgs(deps !));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../../di/injectable';\nimport {ClassSansProvider, ExistingSansProvider, FactorySansProvider, ValueProvider, ValueSansProvider} from '../../di/provider';\nimport {Type} from '../../type';\nimport {getClosureSafeProperty} from '../../util/property';\nimport {NG_INJECTABLE_DEF} from '../fields';\n\nimport {R3InjectableMetadataFacade, getCompilerFacade} from './compiler_facade';\nimport {angularCoreEnv} from './environment';\nimport {convertDependencies, reflectDependencies} from './util';\n\n\n\n/**\n * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting\n * `ngInjectableDef` onto the injectable type.\n */\nexport function compileInjectable(type: Type<any>, srcMeta?: Injectable): void {\n  let def: any = null;\n\n  // if NG_INJECTABLE_DEF is already defined on this class then don't overwrite it\n  if (type.hasOwnProperty(NG_INJECTABLE_DEF)) return;\n\n  Object.defineProperty(type, NG_INJECTABLE_DEF, {\n    get: () => {\n      if (def === null) {\n        // Allow the compilation of a class with a `@Injectable()` decorator without parameters\n        const meta: Injectable = srcMeta || {providedIn: null};\n        const hasAProvider = isUseClassProvider(meta) || isUseFactoryProvider(meta) ||\n            isUseValueProvider(meta) || isUseExistingProvider(meta);\n\n\n        const compilerMeta: R3InjectableMetadataFacade = {\n          name: type.name,\n          type: type,\n          typeArgumentCount: 0,\n          providedIn: meta.providedIn,\n          ctorDeps: reflectDependencies(type),\n          userDeps: undefined\n        };\n        if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {\n          compilerMeta.userDeps = convertDependencies(meta.deps);\n        }\n        if (!hasAProvider) {\n          // In the case the user specifies a type provider, treat it as {provide: X, useClass: X}.\n          // The deps will have been reflected above, causing the factory to create the class by\n          // calling\n          // its constructor with injected deps.\n          compilerMeta.useClass = type;\n        } else if (isUseClassProvider(meta)) {\n          // The user explicitly specified useClass, and may or may not have provided deps.\n          compilerMeta.useClass = meta.useClass;\n        } else if (isUseValueProvider(meta)) {\n          // The user explicitly specified useValue.\n          compilerMeta.useValue = meta.useValue;\n        } else if (isUseFactoryProvider(meta)) {\n          // The user explicitly specified useFactory.\n          compilerMeta.useFactory = meta.useFactory;\n        } else if (isUseExistingProvider(meta)) {\n          // The user explicitly specified useExisting.\n          compilerMeta.useExisting = meta.useExisting;\n        } else {\n          // Can't happen - either hasAProvider will be false, or one of the providers will be set.\n          throw new Error(`Unreachable state.`);\n        }\n        def = getCompilerFacade().compileInjectable(\n            angularCoreEnv, `ng://${type.name}/ngInjectableDef.js`, compilerMeta);\n      }\n      return def;\n    },\n  });\n}\n\ntype UseClassProvider = Injectable & ClassSansProvider & {deps?: any[]};\n\nconst USE_VALUE =\n    getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nfunction isUseClassProvider(meta: Injectable): meta is UseClassProvider {\n  return (meta as UseClassProvider).useClass !== undefined;\n}\n\nfunction isUseValueProvider(meta: Injectable): meta is Injectable&ValueSansProvider {\n  return USE_VALUE in meta;\n}\n\nfunction isUseFactoryProvider(meta: Injectable): meta is Injectable&FactorySansProvider {\n  return (meta as FactorySansProvider).useFactory !== undefined;\n}\n\nfunction isUseExistingProvider(meta: Injectable): meta is Injectable&ExistingSansProvider {\n  return (meta as ExistingSansProvider).useExisting !== undefined;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef} from '../application_ref';\nimport {InjectorType, defineInjector} from '../di/defs';\nimport {Provider} from '../di/provider';\nimport {convertInjectableProviderToFactory} from '../di/util';\nimport {NgModuleType} from '../render3';\nimport {compileNgModule as render3CompileNgModule} from '../render3/jit/module';\nimport {Type} from '../type';\nimport {TypeDecorator, makeDecorator} from '../util/decorators';\n\n/**\n * Represents the expansion of an `NgModule` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The `exported` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n */\nexport interface NgModuleTransitiveScopes {\n  compilation: {directives: Set<any>; pipes: Set<any>;};\n  exported: {directives: Set<any>; pipes: Set<any>;};\n}\n\nexport type NgModuleDefWithMeta<T, Declarations, Imports, Exports> = NgModuleDef<T>;\n\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use `defineNgModule` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n */\nexport interface NgModuleDef<T> {\n  /** Token representing the module. Used by DI. */\n  type: T;\n\n  /** List of components to bootstrap. */\n  bootstrap: Type<any>[];\n\n  /** List of components, directives, and pipes declared by this module. */\n  declarations: Type<any>[];\n\n  /** List of modules or `ModuleWithProviders` imported by this module. */\n  imports: Type<any>[];\n\n  /**\n   * List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this\n   * module.\n   */\n  exports: Type<any>[];\n\n  /**\n   * Cached value of computed `transitiveCompileScopes` for this module.\n   *\n   * This should never be read directly, but accessed via `transitiveScopesFor`.\n   */\n  transitiveCompileScopes: NgModuleTransitiveScopes|null;\n}\n\n/**\n * A wrapper around an NgModule that associates it with the providers.\n *\n * @param T the module type. In Ivy applications, this must be explicitly\n * provided.\n *\n * @publicApi\n */\nexport interface ModuleWithProviders<\n    T = any /** TODO(alxhub): remove default when callers pass explicit type param */> {\n  ngModule: Type<T>;\n  providers?: Provider[];\n}\n\n/**\n * A schema definition associated with an NgModule.\n *\n * @see `@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`\n *\n * @param name The name of a defined schema.\n *\n * @publicApi\n */\nexport interface SchemaMetadata { name: string; }\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (`-`).\n * - Element properties named with dash case (`-`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\n/**\n * Defines a schema that allows any property on any element.\n *\n * @publicApi\n */\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\n\n/**\n * Type of the NgModule decorator / constructor function.\n */\nexport interface NgModuleDecorator {\n  /**\n   * Marks a class as an NgModule and supplies configuration metadata.\n   */\n  (obj?: NgModule): TypeDecorator;\n  new (obj?: NgModule): NgModule;\n}\n\n/**\n * Type of the NgModule metadata.\n *\n * @publicApi\n */\nexport interface NgModule {\n  /**\n   * The set of injectable objects that are available in the injector\n   * of this module.\n   *\n   * @see [Dependency Injection guide](guide/dependency-injection)\n   * @see [NgModule guide](guide/providers)\n   *\n   * @usageNotes\n   *\n   * Dependencies whose providers are listed here become available for injection\n   * into any component, directive, pipe or service that is a child of this injector.\n   * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n   * to any part of the app.\n   *\n   * A lazy-loaded module has its own injector, typically a child of the app root injector.\n   * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n   * If a lazy-loaded module also provides the `UserService`, any component created\n   * within that module's context (such as by router navigation) gets the local instance\n   * of the service, not the instance in the root injector.\n   * Components in external modules continue to receive the instance provided by their injectors.\n   *\n   * ### Example\n   *\n   * The following example defines a class that is injected in\n   * the HelloWorld NgModule:\n   *\n   * ```\n   * class Greeter {\n   *    greet(name:string) {\n   *      return 'Hello ' + name + '!';\n   *    }\n   * }\n   *\n   * @NgModule({\n   *   providers: [\n   *     Greeter\n   *   ]\n   * })\n   * class HelloWorld {\n   *   greeter:Greeter;\n   *\n   *   constructor(greeter:Greeter) {\n   *     this.greeter = greeter;\n   *   }\n   * }\n   * ```\n   */\n  providers?: Provider[];\n\n  /**\n   * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n   * that belong to this module.\n   *\n   * @usageNotes\n   *\n   * The set of selectors that are available to a template include those declared here, and\n   * those that are exported from imported NgModules.\n   *\n   * Declarables must belong to exactly one module.\n   * The compiler emits an error if you try to declare the same class in more than one module.\n   * Be careful not to declare a class that is imported from another module.\n   *\n   * ### Example\n   *\n   * The following example allows the CommonModule to use the `NgFor`\n   * directive.\n   *\n   * ```javascript\n   * @NgModule({\n   *   declarations: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  declarations?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n   * are available to templates in this module.\n   *\n   * @usageNotes\n   *\n   * A template can use exported declarables from any\n   * imported module, including those from modules that are imported indirectly\n   * and re-exported.\n   * For example, `ModuleA` imports `ModuleB`, and also exports\n   * it, which makes the declarables from `ModuleB` available\n   * wherever `ModuleA` is imported.\n   *\n   * ### Example\n   *\n   * The following example allows MainModule to use anthing exported by\n   * `CommonModule`:\n   *\n   * ```javascript\n   * @NgModule({\n   *   imports: [CommonModule]\n   * })\n   * class MainModule {\n   * }\n   * ```\n   *\n   */\n  imports?: Array<Type<any>|ModuleWithProviders<{}>|any[]>;\n\n  /**\n   * The set of components, directives, and pipes declared in this\n   * NgModule that can be used in the template of any component that is part of an\n   * NgModule that imports this NgModule. Exported declarations are the module's public API.\n   *\n   * A declarable belongs to one and only one NgModule.\n   * A module can list another module among its exports, in which case all of that module's\n   * public declaration are exported.\n   *\n   * @usageNotes\n   *\n   * Declarations are private by default.\n   * If this ModuleA does not export UserComponent, then only the components within this\n   * ModuleA can use UserComponent.\n   *\n   * ModuleA can import ModuleB and also export it, making exports from ModuleB\n   * available to an NgModule that imports ModuleA.\n   *\n   * ### Example\n   *\n   * The following example exports the `NgFor` directive from CommonModule.\n   *\n   * ```javascript\n   * @NgModule({\n   *   exports: [NgFor]\n   * })\n   * class CommonModule {\n   * }\n   * ```\n   */\n  exports?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components to compile when this NgModule is defined,\n   * so that they can be dynamically loaded into the view.\n   *\n   * For each component listed here, Angular creates a `ComponentFactory`\n   * and stores it in the `ComponentFactoryResolver`.\n   *\n   * Angular automatically adds components in the module's bootstrap\n   * and route definitions into the `entryComponents` list. Use this\n   * option to add components that are bootstrapped\n   * using one of the imperative techniques, such as `ViewContainerRef.createComponent()`.\n   *\n   * @see [Entry Components](guide/entry-components)\n   */\n  entryComponents?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of components that are bootstrapped when\n   * this module is bootstrapped. The components listed here\n   * are automatically added to `entryComponents`.\n   */\n  bootstrap?: Array<Type<any>|any[]>;\n\n  /**\n   * The set of schemas that declare elements to be allowed in the NgModule.\n   * Elements and properties that are neither Angular components nor directives\n   * must be declared in a schema.\n   *\n   * Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.\n   *\n   * @security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`\n   * you must ensure that allowed elements and properties securely escape inputs.\n   */\n  schemas?: Array<SchemaMetadata|any[]>;\n\n  /**\n   * A name or path that uniquely identifies this NgModule in `getModuleFactory`.\n   * If left `undefined`, the NgModule is not registered with\n   * `getModuleFactory`.\n   */\n  id?: string;\n\n  /**\n   * If true, this module will be skipped by the AOT compiler and so will always be compiled\n   * using JIT.\n   *\n   * This exists to support future Ivy work and has no effect currently.\n   */\n  jit?: true;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport const NgModule: NgModuleDecorator = makeDecorator(\n    'NgModule', (ngModule: NgModule) => ngModule, undefined, undefined,\n    /**\n     * Decorator that marks the following class as an NgModule, and supplies\n     * configuration metadata for it.\n     *\n     * * The `declarations` and `entryComponents` options configure the compiler\n     * with information about what belongs to the NgModule.\n     * * The `providers` options configures the NgModule's injector to provide\n     * dependencies the NgModule members.\n     * * The `imports` and `exports` options bring in members from other modules, and make\n     * this module's members available to others.\n     */\n    (type: NgModuleType, meta: NgModule) => SWITCH_COMPILE_NGMODULE(type, meta));\n\n/**\n * @description\n * Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule\n * annotation.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * @usageNotes\n * ```typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport interface DoBootstrap { ngDoBootstrap(appRef: ApplicationRef): void; }\n\nfunction preR3NgModuleCompile(moduleType: InjectorType<any>, metadata: NgModule): void {\n  let imports = (metadata && metadata.imports) || [];\n  if (metadata && metadata.exports) {\n    imports = [...imports, metadata.exports];\n  }\n\n  moduleType.ngInjectorDef = defineInjector({\n    factory: convertInjectableProviderToFactory(moduleType, {useClass: moduleType}),\n    providers: metadata && metadata.providers,\n    imports: imports,\n  });\n}\n\n\nexport const SWITCH_COMPILE_NGMODULE__POST_R3__ = render3CompileNgModule;\nconst SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;\nconst SWITCH_COMPILE_NGMODULE: typeof render3CompileNgModule = SWITCH_COMPILE_NGMODULE__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {compileInjectable as render3CompileInjectable} from '../render3/jit/injectable';\nimport {Type} from '../type';\nimport {TypeDecorator, makeDecorator} from '../util/decorators';\n\nimport {InjectableDef, InjectableType, defineInjectable, getInjectableDef} from './defs';\nimport {ClassSansProvider, ConstructorSansProvider, ExistingSansProvider, FactorySansProvider, StaticClassSansProvider, ValueSansProvider} from './provider';\nimport {convertInjectableProviderToFactory} from './util';\n\n\n/**\n * Injectable providers used in `@Injectable` decorator.\n *\n * @publicApi\n */\nexport type InjectableProvider = ValueSansProvider | ExistingSansProvider |\n    StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport interface InjectableDecorator {\n  /**\n   * A marker metadata that marks a class as available to `Injector` for creation.\n   *\n   * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example core/di/ts/metadata_spec.ts region='Injectable'}\n   *\n   * `Injector` will throw an error when trying to instantiate a class that\n   * does not have `@Injectable` marker, as shown in the example below.\n   *\n   * {@example core/di/ts/metadata_spec.ts region='InjectableThrows'}\n   *\n   */\n  (): TypeDecorator;\n  (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): TypeDecorator;\n  new (): Injectable;\n  new (options?: {providedIn: Type<any>| 'root' | null}&InjectableProvider): Injectable;\n}\n\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport interface Injectable { providedIn?: Type<any>|'root'|null; }\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport const Injectable: InjectableDecorator = makeDecorator(\n    'Injectable', undefined, undefined, undefined,\n    (type: Type<any>, meta: Injectable) => SWITCH_COMPILE_INJECTABLE(type as any, meta));\n\n/**\n * Type representing injectable service.\n *\n * @publicApi\n */\nexport interface InjectableType<T> extends Type<T> { ngInjectableDef: InjectableDef<T>; }\n\n/**\n * Supports @Injectable() in JIT mode for Render2.\n */\nfunction render2CompileInjectable(\n    injectableType: InjectableType<any>,\n    options: {providedIn?: Type<any>| 'root' | null} & InjectableProvider): void {\n  if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {\n    injectableType.ngInjectableDef = defineInjectable({\n      providedIn: options.providedIn,\n      factory: convertInjectableProviderToFactory(injectableType, options),\n    });\n  }\n}\n\nexport const SWITCH_COMPILE_INJECTABLE__POST_R3__ = render3CompileInjectable;\nconst SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;\nconst SWITCH_COMPILE_INJECTABLE: typeof render3CompileInjectable =\n    SWITCH_COMPILE_INJECTABLE__PRE_R3__;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DebugContext} from './view';\n\nexport const ERROR_TYPE = 'ngType';\nexport const ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const ERROR_LOGGER = 'ngErrorLogger';\n\n\nexport function getType(error: Error): Function {\n  return (error as any)[ERROR_TYPE];\n}\n\nexport function getDebugContext(error: Error): DebugContext {\n  return (error as any)[ERROR_DEBUG_CONTEXT];\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n\nexport function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void {\n  return (error as any)[ERROR_LOGGER] || defaultErrorLogger;\n}\n\n\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  (<any>console.error)(...values);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ERROR_ORIGINAL_ERROR, getDebugContext, getErrorLogger, getOriginalError} from './errors';\n\n\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * ```\n *\n * @publicApi\n */\nexport class ErrorHandler {\n  /**\n   * @internal\n   */\n  _console: Console = console;\n\n  handleError(error: any): void {\n    const originalError = this._findOriginalError(error);\n    const context = this._findContext(error);\n    // Note: Browser consoles show the place from where console.error was called.\n    // We can use this to give users additional information about the error.\n    const errorLogger = getErrorLogger(error);\n\n    errorLogger(this._console, `ERROR`, error);\n    if (originalError) {\n      errorLogger(this._console, `ORIGINAL ERROR`, originalError);\n    }\n    if (context) {\n      errorLogger(this._console, 'ERROR CONTEXT', context);\n    }\n  }\n\n  /** @internal */\n  _findContext(error: any): any {\n    if (error) {\n      return getDebugContext(error) ? getDebugContext(error) :\n                                      this._findContext(getOriginalError(error));\n    }\n\n    return null;\n  }\n\n  /** @internal */\n  _findOriginalError(error: Error): any {\n    let e = getOriginalError(error);\n    while (e && getOriginalError(e)) {\n      e = getOriginalError(e);\n    }\n\n    return e;\n  }\n}\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg =\n      `${message} caused by: ${originalError instanceof Error ? originalError.message: originalError }`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<R>>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * ![](multicast.png)\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../types';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * ![](share.png)\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport function isPromise(obj: any): obj is Promise<any> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n\n/**\n * Determine if the argument is an Observable\n */\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n  // TODO: use isObservable once we update pass rxjs 6.1\n  // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03\n  return !!obj && typeof obj.subscribe === 'function';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPromise} from '../src/util/lang';\n\nimport {Inject, Injectable, InjectionToken, Optional} from './di';\n\n\n/**\n * A function that will be executed when an application is initialized.\n *\n * @publicApi\n */\nexport const APP_INITIALIZER = new InjectionToken<Array<() => void>>('Application Initializer');\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER}s.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationInitStatus {\n  // TODO(issue/24571): remove '!'.\n  private resolve !: Function;\n  // TODO(issue/24571): remove '!'.\n  private reject !: Function;\n  private initialized = false;\n  public readonly donePromise: Promise<any>;\n  public readonly done = false;\n\n  constructor(@Inject(APP_INITIALIZER) @Optional() private appInits: (() => any)[]) {\n    this.donePromise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n\n  /** @internal */\n  runInitializers() {\n    if (this.initialized) {\n      return;\n    }\n\n    const asyncInitPromises: Promise<any>[] = [];\n\n    const complete = () => {\n      (this as{done: boolean}).done = true;\n      this.resolve();\n    };\n\n    if (this.appInits) {\n      for (let i = 0; i < this.appInits.length; i++) {\n        const initResult = this.appInits[i]();\n        if (isPromise(initResult)) {\n          asyncInitPromises.push(initResult);\n        }\n      }\n    }\n\n    Promise.all(asyncInitPromises).then(() => { complete(); }).catch(e => { this.reject(e); });\n\n    if (asyncInitPromises.length === 0) {\n      complete();\n    }\n    this.initialized = true;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {global} from '../util';\n\n/**\n * A scope function for the Web Tracing Framework (WTF).\n *\n * @publicApi\n */\nexport interface WtfScopeFn { (arg0?: any, arg1?: any): any; }\n\ninterface WTF {\n  trace: Trace;\n}\n\ninterface Trace {\n  events: Events;\n  leaveScope(scope: Scope, returnValue: any): any /** TODO #9100 */;\n  beginTimeRange(rangeType: string, action: string): Range;\n  endTimeRange(range: Range): any /** TODO #9100 */;\n}\n\nexport interface Range {}\n\ninterface Events {\n  createScope(signature: string, flags: any): Scope;\n}\n\nexport interface Scope { (...args: any[] /** TODO #9100 */): any; }\n\nlet trace: Trace;\nlet events: Events;\n\nexport function detectWTF(): boolean {\n  const wtf: WTF = (global as any /** TODO #9100 */)['wtf'];\n  if (wtf) {\n    trace = wtf['trace'];\n    if (trace) {\n      events = trace['events'];\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function createScope(signature: string, flags: any = null): any {\n  return events.createScope(signature, flags);\n}\n\nexport function leave<T>(scope: Scope): void;\nexport function leave<T>(scope: Scope, returnValue?: T): T;\nexport function leave<T>(scope: Scope, returnValue?: any): any {\n  trace.leaveScope(scope, returnValue);\n  return returnValue;\n}\n\nexport function startTimeRange(rangeType: string, action: string): Range {\n  return trace.beginTimeRange(rangeType, action);\n}\n\nexport function endTimeRange(range: Range): void {\n  trace.endTimeRange(range);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from './di';\nimport {ComponentRef} from './linker/component_factory';\n\n\n/**\n * A DI Token representing a unique string id assigned to the application by Angular and used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * If you need to avoid randomly generated value to be used as an application id, you can provide\n * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n * using this token.\n * @publicApi\n */\nexport const APP_ID = new InjectionToken<string>('AppId');\n\nexport function _appIdRandomProviderFactory() {\n  return `${_randomChar()}${_randomChar()}${_randomChar()}`;\n}\n\n/**\n * Providers that will generate a random APP_ID_TOKEN.\n * @publicApi\n */\nexport const APP_ID_RANDOM_PROVIDER = {\n  provide: APP_ID,\n  useFactory: _appIdRandomProviderFactory,\n  deps: <any[]>[],\n};\n\nfunction _randomChar(): string {\n  return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n}\n\n/**\n * A function that will be executed when a platform is initialized.\n * @publicApi\n */\nexport const PLATFORM_INITIALIZER = new InjectionToken<Array<() => void>>('Platform Initializer');\n\n/**\n * A token that indicates an opaque platform id.\n * @publicApi\n */\nexport const PLATFORM_ID = new InjectionToken<Object>('Platform ID');\n\n/**\n * All callbacks provided via this token will be called for every component that is bootstrapped.\n * Signature of the callback:\n *\n * `(componentRef: ComponentRef) => void`.\n *\n * @publicApi\n */\nexport const APP_BOOTSTRAP_LISTENER =\n    new InjectionToken<Array<(compRef: ComponentRef<any>) => void>>('appBootstrapListener');\n\n/**\n * A token which indicates the root directory of the application\n * @publicApi\n */\nexport const PACKAGE_ROOT_URL = new InjectionToken<string>('Application Packages Root URL');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from './di';\n\n@Injectable()\nexport class Console {\n  log(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.log(message);\n  }\n  // Note: for reporting errors use `DOM.logError()` as it is platform specific\n  warn(message: string): void {\n    // tslint:disable-next-line:no-console\n    console.warn(message);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di/injectable';\nimport {InjectionToken} from '../di/injection_token';\nimport {StaticProvider} from '../di/provider';\nimport {MissingTranslationStrategy} from '../i18n/tokens';\nimport {ViewEncapsulation} from '../metadata';\nimport {NgModuleFactory as NgModuleFactoryR3} from '../render3/ng_module_ref';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n\n\n\n/**\n * Combination of NgModuleFactory and ComponentFactorys.\n *\n * @publicApi\n */\nexport class ModuleWithComponentFactories<T> {\n  constructor(\n      public ngModuleFactory: NgModuleFactory<T>,\n      public componentFactories: ComponentFactory<any>[]) {}\n}\n\n\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n\nconst Compiler_compileModuleSync__PRE_R3__: <T>(moduleType: Type<T>) => NgModuleFactory<T> =\n    _throwError as any;\nexport const Compiler_compileModuleSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    NgModuleFactory<T> = function<T>(moduleType: Type<T>): NgModuleFactory<T> {\n  return new NgModuleFactoryR3(moduleType);\n};\nconst Compiler_compileModuleSync = Compiler_compileModuleSync__PRE_R3__;\n\nconst Compiler_compileModuleAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = _throwError as any;\nexport const Compiler_compileModuleAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<NgModuleFactory<T>> = function<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> {\n  return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAsync = Compiler_compileModuleAsync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsSync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsSync__POST_R3__: <T>(moduleType: Type<T>) =>\n    ModuleWithComponentFactories<T> = function<T>(moduleType: Type<T>):\n        ModuleWithComponentFactories<T> {\n  return new ModuleWithComponentFactories(Compiler_compileModuleSync__POST_R3__(moduleType), []);\n};\nconst Compiler_compileModuleAndAllComponentsSync =\n    Compiler_compileModuleAndAllComponentsSync__PRE_R3__;\n\nconst Compiler_compileModuleAndAllComponentsAsync__PRE_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = _throwError as any;\nexport const Compiler_compileModuleAndAllComponentsAsync__POST_R3__: <T>(moduleType: Type<T>) =>\n    Promise<ModuleWithComponentFactories<T>> = function<T>(moduleType: Type<T>):\n        Promise<ModuleWithComponentFactories<T>> {\n  return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));\n};\nconst Compiler_compileModuleAndAllComponentsAsync =\n    Compiler_compileModuleAndAllComponentsAsync__PRE_R3__;\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each `@NgModule` provides an own `Compiler` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n */\n@Injectable()\nexport class Compiler {\n  /**\n   * Compiles the given NgModule and all of its components. All templates of the components listed\n   * in `entryComponents` have to be inlined.\n   */\n  compileModuleSync: <T>(moduleType: Type<T>) => NgModuleFactory<T> = Compiler_compileModuleSync;\n\n  /**\n   * Compiles the given NgModule and all of its components\n   */\n  compileModuleAsync:\n      <T>(moduleType: Type<T>) => Promise<NgModuleFactory<T>> = Compiler_compileModuleAsync;\n\n  /**\n   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsSync: <T>(moduleType: Type<T>) => ModuleWithComponentFactories<T> =\n      Compiler_compileModuleAndAllComponentsSync;\n\n  /**\n   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n   */\n  compileModuleAndAllComponentsAsync: <T>(moduleType: Type<T>) =>\n      Promise<ModuleWithComponentFactories<T>> = Compiler_compileModuleAndAllComponentsAsync;\n\n  /**\n   * Clears all caches.\n   */\n  clearCache(): void {}\n\n  /**\n   * Clears the cache for the given component/ngModule.\n   */\n  clearCacheFor(type: Type<any>) {}\n\n  /**\n   * Returns the id for a given NgModule, if one is defined and known to the compiler.\n   */\n  getModuleId(moduleType: Type<any>): string|undefined { return undefined; }\n}\n\n/**\n * Options for creating a compiler\n *\n * @publicApi\n */\nexport type CompilerOptions = {\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: StaticProvider[],\n  missingTranslation?: MissingTranslationStrategy,\n  preserveWhitespaces?: boolean,\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport const COMPILER_OPTIONS = new InjectionToken<CompilerOptions[]>('compilerOptions');\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n */\nexport abstract class CompilerFactory {\n  abstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {WtfScopeFn, createScope, detectWTF, endTimeRange, leave, startTimeRange} from './wtf_impl';\n\nexport {WtfScopeFn} from './wtf_impl';\n\n\n/**\n * True if WTF is enabled.\n */\nexport const wtfEnabled = detectWTF();\n\nfunction noopScope(arg0?: any, arg1?: any): any {\n  return null;\n}\n\n/**\n * Create trace scope.\n *\n * Scopes must be strictly nested and are analogous to stack frames, but\n * do not have to follow the stack frames. Instead it is recommended that they follow logical\n * nesting. You may want to use\n * [Event\n * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n * as they are defined in WTF.\n *\n * Used to mark scope entry. The return value is used to leave the scope.\n *\n *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n *\n *     someMethod() {\n *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n *        // DO SOME WORK HERE\n *        return wtfLeave(s, 123); // Return value 123\n *     }\n *\n * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n * negatively impact the performance of your application. For this reason we recommend that\n * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n * exception, will produce incorrect trace, but presence of exception signifies logic error which\n * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n * an exception is expected during normal execution while profiling.\n *\n * @publicApi\n */\nexport const wtfCreateScope: (signature: string, flags?: any) => WtfScopeFn =\n    wtfEnabled ? createScope : (signature: string, flags?: any) => noopScope;\n\n/**\n * Used to mark end of Scope.\n *\n * - `scope` to end.\n * - `returnValue` (optional) to be passed to the WTF.\n *\n * Returns the `returnValue for easy chaining.\n * @publicApi\n */\nexport const wtfLeave: <T>(scope: any, returnValue?: T) => T =\n    wtfEnabled ? leave : (s: any, r?: any) => r;\n\n/**\n * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n * enabled.\n *\n *     someMethod() {\n *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n *        var future = new Future.delay(5).then((_) {\n *          wtfEndTimeRange(s);\n *        });\n *     }\n * @publicApi\n */\nexport const wtfStartTimeRange: (rangeType: string, action: string) => any =\n    wtfEnabled ? startTimeRange : (rangeType: string, action: string) => null;\n\n/**\n * Ends a async time range operation.\n * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n * enabled.\n * @publicApi\n */\nexport const wtfEndTimeRange: (range: any) => void = wtfEnabled ? endTimeRange : (r: any) => null;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter} from '../event_emitter';\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: `\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   `,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(`Current progress: ${this.progress}%`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * ```\n *\n * @publicApi\n */\nexport class NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n\n  /**\n   * Whether there are no outstanding microtasks or macrotasks.\n   */\n  readonly isStable: boolean = true;\n\n  /**\n   * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n   */\n  readonly onUnstable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when there is no more microtasks enqueued in the current VM Turn.\n   * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n   * For this reason this event can fire multiple times per VM Turn.\n   */\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n   * implies we are about to relinquish VM turn.\n   * This event gets called just once.\n   */\n  readonly onStable: EventEmitter<any> = new EventEmitter(false);\n\n  /**\n   * Notifies that an error has been delivered.\n   */\n  readonly onError: EventEmitter<any> = new EventEmitter(false);\n\n  constructor({enableLongStackTrace = false}) {\n    if (typeof Zone == 'undefined') {\n      throw new Error(`In this configuration Angular requires Zone.js`);\n    }\n\n    Zone.assertZonePatched();\n    const self = this as any as NgZonePrivate;\n    self._nesting = 0;\n\n    self._outer = self._inner = Zone.current;\n\n    if ((Zone as any)['wtfZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['wtfZoneSpec']);\n    }\n\n    if ((Zone as any)['TaskTrackingZoneSpec']) {\n      self._inner = self._inner.fork(new ((Zone as any)['TaskTrackingZoneSpec'] as any));\n    }\n\n    if (enableLongStackTrace && (Zone as any)['longStackTraceZoneSpec']) {\n      self._inner = self._inner.fork((Zone as any)['longStackTraceZoneSpec']);\n    }\n\n    forkInnerZoneWithAngularBehavior(self);\n  }\n\n  static isInAngularZone(): boolean { return Zone.current.get('isAngularZone') === true; }\n\n  static assertInAngularZone(): void {\n    if (!NgZone.isInAngularZone()) {\n      throw new Error('Expected to be in Angular Zone, but it is not!');\n    }\n  }\n\n  static assertNotInAngularZone(): void {\n    if (NgZone.isInAngularZone()) {\n      throw new Error('Expected to not be in Angular Zone, but it is!');\n    }\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n   * the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  run<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.run(fn, applyThis, applyArgs) as T;\n  }\n\n  /**\n   * Executes the `fn` function synchronously within the Angular zone as a task and returns value\n   * returned by the function.\n   *\n   * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * within the Angular zone.\n   *\n   * If a synchronous error happens it will be rethrown and not reported via `onError`.\n   */\n  runTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T {\n    const zone = (this as any as NgZonePrivate)._inner;\n    const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop, noop);\n    try {\n      return zone.runTask(task, applyThis, applyArgs) as T;\n    } finally {\n      zone.cancelTask(task);\n    }\n  }\n\n  /**\n   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n   * rethrown.\n   */\n  runGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T {\n    return (this as any as NgZonePrivate)._inner.runGuarded(fn, applyThis, applyArgs) as T;\n  }\n\n  /**\n   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n   * the function.\n   *\n   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n   * work that\n   * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n   *\n   * Any future tasks or microtasks scheduled from within this function will continue executing from\n   * outside of the Angular zone.\n   *\n   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n   */\n  runOutsideAngular<T>(fn: (...args: any[]) => T): T {\n    return (this as any as NgZonePrivate)._outer.run(fn) as T;\n  }\n}\n\nfunction noop() {}\nconst EMPTY_PAYLOAD = {};\n\n\ninterface NgZonePrivate extends NgZone {\n  _outer: Zone;\n  _inner: Zone;\n  _nesting: number;\n\n  hasPendingMicrotasks: boolean;\n  hasPendingMacrotasks: boolean;\n  isStable: boolean;\n}\n\nfunction checkStable(zone: NgZonePrivate) {\n  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {\n    try {\n      zone._nesting++;\n      zone.onMicrotaskEmpty.emit(null);\n    } finally {\n      zone._nesting--;\n      if (!zone.hasPendingMicrotasks) {\n        try {\n          zone.runOutsideAngular(() => zone.onStable.emit(null));\n        } finally {\n          zone.isStable = true;\n        }\n      }\n    }\n  }\n}\n\nfunction forkInnerZoneWithAngularBehavior(zone: NgZonePrivate) {\n  zone._inner = zone._inner.fork({\n    name: 'angular',\n    properties: <any>{'isAngularZone': true},\n    onInvokeTask: (delegate: ZoneDelegate, current: Zone, target: Zone, task: Task, applyThis: any,\n                   applyArgs: any): any => {\n      try {\n        onEnter(zone);\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n\n    onInvoke: (delegate: ZoneDelegate, current: Zone, target: Zone, callback: Function,\n               applyThis: any, applyArgs: any[], source: string): any => {\n      try {\n        onEnter(zone);\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      } finally {\n        onLeave(zone);\n      }\n    },\n\n    onHasTask:\n        (delegate: ZoneDelegate, current: Zone, target: Zone, hasTaskState: HasTaskState) => {\n          delegate.hasTask(target, hasTaskState);\n          if (current === target) {\n            // We are only interested in hasTask events which originate from our zone\n            // (A child hasTask event is not interesting to us)\n            if (hasTaskState.change == 'microTask') {\n              zone.hasPendingMicrotasks = hasTaskState.microTask;\n              checkStable(zone);\n            } else if (hasTaskState.change == 'macroTask') {\n              zone.hasPendingMacrotasks = hasTaskState.macroTask;\n            }\n          }\n        },\n\n    onHandleError: (delegate: ZoneDelegate, current: Zone, target: Zone, error: any): boolean => {\n      delegate.handleError(target, error);\n      zone.runOutsideAngular(() => zone.onError.emit(error));\n      return false;\n    }\n  });\n}\n\nfunction onEnter(zone: NgZonePrivate) {\n  zone._nesting++;\n  if (zone.isStable) {\n    zone.isStable = false;\n    zone.onUnstable.emit(null);\n  }\n}\n\nfunction onLeave(zone: NgZonePrivate) {\n  zone._nesting--;\n  checkStable(zone);\n}\n\n/**\n * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport class NoopNgZone implements NgZone {\n  readonly hasPendingMicrotasks: boolean = false;\n  readonly hasPendingMacrotasks: boolean = false;\n  readonly isStable: boolean = true;\n  readonly onUnstable: EventEmitter<any> = new EventEmitter();\n  readonly onMicrotaskEmpty: EventEmitter<any> = new EventEmitter();\n  readonly onStable: EventEmitter<any> = new EventEmitter();\n  readonly onError: EventEmitter<any> = new EventEmitter();\n\n  run(fn: () => any): any { return fn(); }\n\n  runGuarded(fn: () => any): any { return fn(); }\n\n  runOutsideAngular(fn: () => any): any { return fn(); }\n\n  runTask<T>(fn: () => any): any { return fn(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Observer, Subscription, merge} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {Console} from './console';\nimport {Injectable, InjectionToken, Injector, StaticProvider} from './di';\nimport {ErrorHandler} from './error_handler';\nimport {isDevMode} from './is_dev_mode';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryBoundToModule, ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {InternalNgModuleRef, NgModuleFactory, NgModuleRef} from './linker/ng_module_factory';\nimport {InternalViewRef, ViewRef} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {assertNgModuleType} from './render3/assert';\nimport {NgModuleFactory as R3NgModuleFactory} from './render3/ng_module_ref';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {scheduleMicroTask, stringify} from './util';\nimport {isPromise} from './util/lang';\nimport {NgZone, NoopNgZone} from './zone/ng_zone';\n\nlet _platform: PlatformRef;\n\nlet compileNgModuleFactory:\n    <M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>) =>\n        Promise<NgModuleFactory<M>> = compileNgModuleFactory__PRE_R3__;\n\nfunction compileNgModuleFactory__PRE_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  const compilerFactory: CompilerFactory = injector.get(CompilerFactory);\n  const compiler = compilerFactory.createCompiler([options]);\n  return compiler.compileModuleAsync(moduleType);\n}\n\nexport function compileNgModuleFactory__POST_R3__<M>(\n    injector: Injector, options: CompilerOptions,\n    moduleType: Type<M>): Promise<NgModuleFactory<M>> {\n  ngDevMode && assertNgModuleType(moduleType);\n  return Promise.resolve(new R3NgModuleFactory(moduleType));\n}\n\nexport const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken<boolean>('AllowMultipleToken');\n\n\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport class NgProbeToken {\n  constructor(public name: string, public token: any) {}\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n *\n * @publicApi\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed &&\n      !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const inits = injector.get(PLATFORM_INITIALIZER, null);\n  if (inits) inits.forEach((init: any) => init());\n  return _platform;\n}\n\n/**\n * Creates a factory for a platform\n *\n * @publicApi\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null,\n    name: string, providers: StaticProvider[] = []): (extraProviders?: StaticProvider[]) =>\n    PlatformRef {\n  const desc = `Platform: ${name}`;\n  const marker = new InjectionToken(desc);\n  return (extraProviders: StaticProvider[] = []) => {\n    let platform = getPlatform();\n    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        const injectedProviders: StaticProvider[] =\n            providers.concat(extraProviders).concat({provide: marker, useValue: true});\n        createPlatform(Injector.create({providers: injectedProviders, name: desc}));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n\n/**\n * Checks that there currently is a platform which contains the given token as a provider.\n *\n * @publicApi\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n\n/**\n * Destroy the existing platform.\n *\n * @publicApi\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport function getPlatform(): PlatformRef|null {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n\n/**\n * Provides additional options to the bootstraping process.\n *\n *\n */\nexport interface BootstrapOptions {\n  /**\n   * Optionally specify which `NgZone` should be used.\n   *\n   * - Provide your own `NgZone` instance.\n   * - `zone.js` - Use default `NgZone` which requires `Zone.js`.\n   * - `noop` - Use `NoopNgZone` which does nothing.\n   */\n  ngZone?: NgZone|'zone.js'|'noop';\n}\n\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n *\n * A page's platform is initialized implicitly when a platform is created via a platform factory\n * (e.g. {@link platformBrowser}), or explicitly by calling the {@link createPlatform} function.\n *\n * @publicApi\n */\n@Injectable()\nexport class PlatformRef {\n  private _modules: NgModuleRef<any>[] = [];\n  private _destroyListeners: Function[] = [];\n  private _destroyed: boolean = false;\n\n  /** @internal */\n  constructor(private _injector: Injector) {}\n\n  /**\n   * Creates an instance of an `@NgModule` for the given platform\n   * for offline compilation.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * my_module.ts:\n   *\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * main.ts:\n   * import {MyModuleNgFactory} from './my_module.ngfactory';\n   * import {platformBrowser} from '@angular/platform-browser';\n   *\n   * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n   * ```\n   */\n  bootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    const ngZoneOption = options ? options.ngZone : undefined;\n    const ngZone = getNgZone(ngZoneOption);\n    const providers: StaticProvider[] = [{provide: NgZone, useValue: ngZone}];\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const ngZoneInjector = Injector.create(\n          {providers: providers, parent: this.injector, name: moduleFactory.moduleType.name});\n      const moduleRef = <InternalNgModuleRef<M>>moduleFactory.create(ngZoneInjector);\n      const exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => remove(this._modules, moduleRef));\n      ngZone !.runOutsideAngular(\n          () => ngZone !.onError.subscribe(\n              {next: (error: any) => { exceptionHandler.handleError(error); }}));\n      return _callAndReportToErrorHandler(exceptionHandler, ngZone !, () => {\n        const initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        initStatus.runInitializers();\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n\n  /**\n   * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.\n   *\n   * @usageNotes\n   * ### Simple Example\n   *\n   * ```typescript\n   * @NgModule({\n   *   imports: [BrowserModule]\n   * })\n   * class MyModule {}\n   *\n   * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n   * ```\n   *\n   */\n  bootstrapModule<M>(\n      moduleType: Type<M>, compilerOptions: (CompilerOptions&BootstrapOptions)|\n      Array<CompilerOptions&BootstrapOptions> = []): Promise<NgModuleRef<M>> {\n    const options = optionsReducer({}, compilerOptions);\n    return compileNgModuleFactory(this.injector, options, moduleType)\n        .then(moduleFactory => this.bootstrapModuleFactory(moduleFactory, options));\n  }\n\n  private _moduleDoBootstrap(moduleRef: InternalNgModuleRef<any>): void {\n    const appRef = moduleRef.injector.get(ApplicationRef) as ApplicationRef;\n    if (moduleRef._bootstrapComponents.length > 0) {\n      moduleRef._bootstrapComponents.forEach(f => appRef.bootstrap(f));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n    this._modules.push(moduleRef);\n  }\n\n  /**\n   * Register a listener to be called when the platform is disposed.\n   */\n  onDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n\n  /**\n   * Retrieve the platform {@link Injector}, which is the parent injector for\n   * every Angular application on the page and provides singleton providers.\n   */\n  get injector(): Injector { return this._injector; }\n\n  /**\n   * Destroy the Angular platform and all Angular applications on the page.\n   */\n  destroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n\n  get destroyed() { return this._destroyed; }\n}\n\nfunction getNgZone(ngZoneOption?: NgZone | 'zone.js' | 'noop'): NgZone {\n  let ngZone: NgZone;\n\n  if (ngZoneOption === 'noop') {\n    ngZone = new NoopNgZone();\n  } else {\n    ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) ||\n        new NgZone({enableLongStackTrace: isDevMode()});\n  }\n  return ngZone;\n}\n\nfunction _callAndReportToErrorHandler(\n    errorHandler: ErrorHandler, ngZone: NgZone, callback: () => any): any {\n  try {\n    const result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch (e) {\n    ngZone.runOutsideAngular(() => errorHandler.handleError(e));\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\n\nfunction optionsReducer<T extends Object>(dst: any, objs: T | T[]): T {\n  if (Array.isArray(objs)) {\n    dst = objs.reduce(optionsReducer, dst);\n  } else {\n    dst = {...dst, ...(objs as any)};\n  }\n  return dst;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @publicApi\n */\n@Injectable()\nexport class ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\n  private _bootstrapListeners: ((compRef: ComponentRef<any>) => void)[] = [];\n  private _views: InternalViewRef[] = [];\n  private _runningTick: boolean = false;\n  private _enforceNoNewChanges: boolean = false;\n  private _stable = true;\n\n  /**\n   * Get a list of component types registered to this application.\n   * This list is populated even before the component is created.\n   */\n  public readonly componentTypes: Type<any>[] = [];\n\n  /**\n   * Get a list of components registered to this application.\n   */\n  public readonly components: ComponentRef<any>[] = [];\n\n  /**\n   * Returns an Observable that indicates when the application is stable or unstable.\n   */\n  // TODO(issue/24571): remove '!'.\n  public readonly isStable !: Observable<boolean>;\n\n  /** @internal */\n  constructor(\n      private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n\n    const isCurrentlyStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&\n          !this._zone.hasPendingMicrotasks;\n      this._zone.runOutsideAngular(() => {\n        observer.next(this._stable);\n        observer.complete();\n      });\n    });\n\n    const isStable = new Observable<boolean>((observer: Observer<boolean>) => {\n      // Create the subscription to onStable outside the Angular Zone so that\n      // the callback is run outside the Angular Zone.\n      let stableSub: Subscription;\n      this._zone.runOutsideAngular(() => {\n        stableSub = this._zone.onStable.subscribe(() => {\n          NgZone.assertNotInAngularZone();\n\n          // Check whether there are no pending macro/micro tasks in the next tick\n          // to allow for NgZone to update the state.\n          scheduleMicroTask(() => {\n            if (!this._stable && !this._zone.hasPendingMacrotasks &&\n                !this._zone.hasPendingMicrotasks) {\n              this._stable = true;\n              observer.next(true);\n            }\n          });\n        });\n      });\n\n      const unstableSub: Subscription = this._zone.onUnstable.subscribe(() => {\n        NgZone.assertInAngularZone();\n        if (this._stable) {\n          this._stable = false;\n          this._zone.runOutsideAngular(() => { observer.next(false); });\n        }\n      });\n\n      return () => {\n        stableSub.unsubscribe();\n        unstableSub.unsubscribe();\n      };\n    });\n\n    (this as{isStable: Observable<boolean>}).isStable =\n        merge(isCurrentlyStable, isStable.pipe(share()));\n  }\n\n  /**\n   * Bootstrap a new component at the root level of the application.\n   *\n   * @usageNotes\n   * ### Bootstrap process\n   *\n   * When bootstrapping a new root component into an application, Angular mounts the\n   * specified application component onto DOM elements identified by the componentType's\n   * selector and kicks off automatic change detection to finish initializing the component.\n   *\n   * Optionally, a component can be mounted onto a DOM element that does not match the\n   * componentType's selector.\n   *\n   * ### Example\n   * {@example core/ts/platform/platform.ts region='longform'}\n   */\n  bootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>, rootSelectorOrNode?: string|any):\n      ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory =\n          this._componentFactoryResolver.resolveComponentFactory(componentOrFactory) !;\n    }\n    this.componentTypes.push(componentFactory.componentType);\n\n    // Create a factory associated with the current module if it's not bound to some other\n    const ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?\n        null :\n        this._injector.get(NgModuleRef);\n    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;\n    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);\n\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n\n  /**\n   * Invoke this method to explicitly process change detection and its side-effects.\n   *\n   * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n   * further changes are detected. If additional changes are picked up during this second cycle,\n   * bindings in the app have side-effects that cannot be resolved in a single change detection\n   * pass.\n   * In this case, Angular throws an error, since an Angular application can only have one change\n   * detection pass during which all change detection must complete.\n   */\n  tick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const scope = ApplicationRef._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.checkNoChanges());\n      }\n    } catch (e) {\n      // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n      this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n\n  /**\n   * Attaches a view so that it will be dirty checked.\n   * The view will be automatically detached when it is destroyed.\n   * This will throw if the view is already attached to a ViewContainer.\n   */\n  attachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n\n  /**\n   * Detaches a view from dirty checking again.\n   */\n  detachView(viewRef: ViewRef): void {\n    const view = (viewRef as InternalViewRef);\n    remove(this._views, view);\n    view.detachFromAppRef();\n  }\n\n  private _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this.components.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const listeners =\n        this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);\n    listeners.forEach((listener) => listener(componentRef));\n  }\n\n  private _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    remove(this.components, componentRef);\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n\n  /**\n   * Returns the number of attached views.\n   */\n  get viewCount() { return this._views.length; }\n}\n\nfunction remove<T>(list: T[], el: T): void {\n  const index = list.indexOf(el);\n  if (index > -1) {\n    list.splice(index, 1);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '../di';\nimport {scheduleMicroTask} from '../util';\nimport {NgZone} from '../zone/ng_zone';\n\n/**\n * Testability API.\n * `declare` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\nexport declare interface PublicTestability {\n  isStable(): boolean;\n  whenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n  findProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\n// Angular internal, not intended for public API.\nexport interface PendingMacrotask {\n  source: string;\n  creationLocation: Error;\n  runCount?: number;\n  data: TaskData;\n}\n\nexport interface TaskData {\n  target?: XMLHttpRequest;\n  delay?: number;\n  isPeriodic?: boolean;\n}\n\n// Angular internal, not intended for public API.\nexport type DoneCallback = (didWork: boolean, tasks?: PendingMacrotask[]) => void;\nexport type UpdateCallback = (tasks: PendingMacrotask[]) => boolean;\n\ninterface WaitCallback {\n  // Needs to be 'any' - setTimeout returns a number according to ES6, but\n  // on NodeJS it returns a Timer.\n  timeoutId: any;\n  doneCb: DoneCallback;\n  updateCb?: UpdateCallback;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser and by services such as Protractor. Each bootstrapped Angular\n * application on the page will have an instance of Testability.\n * @publicApi\n */\n@Injectable()\nexport class Testability implements PublicTestability {\n  private _pendingCount: number = 0;\n  private _isZoneStable: boolean = true;\n  /**\n   * Whether any work was done since the last 'whenStable' callback. This is\n   * useful to detect if this could have potentially destabilized another\n   * component while it is stabilizing.\n   * @internal\n   */\n  private _didWork: boolean = false;\n  private _callbacks: WaitCallback[] = [];\n\n  private taskTrackingZone: {macroTasks: Task[]}|null = null;\n\n  constructor(private _ngZone: NgZone) {\n    this._watchAngularEvents();\n    _ngZone.run(() => {\n      this.taskTrackingZone =\n          typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');\n    });\n  }\n\n  private _watchAngularEvents(): void {\n    this._ngZone.onUnstable.subscribe({\n      next: () => {\n        this._didWork = true;\n        this._isZoneStable = false;\n      }\n    });\n\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.subscribe({\n        next: () => {\n          NgZone.assertNotInAngularZone();\n          scheduleMicroTask(() => {\n            this._isZoneStable = true;\n            this._runCallbacksIfReady();\n          });\n        }\n      });\n    });\n  }\n\n  /**\n   * Increases the number of pending request\n   * @deprecated pending requests are now tracked with zones.\n   */\n  increasePendingRequestCount(): number {\n    this._pendingCount += 1;\n    this._didWork = true;\n    return this._pendingCount;\n  }\n\n  /**\n   * Decreases the number of pending request\n   * @deprecated pending requests are now tracked with zones\n   */\n  decreasePendingRequestCount(): number {\n    this._pendingCount -= 1;\n    if (this._pendingCount < 0) {\n      throw new Error('pending async requests below zero');\n    }\n    this._runCallbacksIfReady();\n    return this._pendingCount;\n  }\n\n  /**\n   * Whether an associated application is stable\n   */\n  isStable(): boolean {\n    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;\n  }\n\n  private _runCallbacksIfReady(): void {\n    if (this.isStable()) {\n      // Schedules the call backs in a new frame so that it is always async.\n      scheduleMicroTask(() => {\n        while (this._callbacks.length !== 0) {\n          let cb = this._callbacks.pop() !;\n          clearTimeout(cb.timeoutId);\n          cb.doneCb(this._didWork);\n        }\n        this._didWork = false;\n      });\n    } else {\n      // Still not stable, send updates.\n      let pending = this.getPendingTasks();\n      this._callbacks = this._callbacks.filter((cb) => {\n        if (cb.updateCb && cb.updateCb(pending)) {\n          clearTimeout(cb.timeoutId);\n          return false;\n        }\n\n        return true;\n      });\n\n      this._didWork = true;\n    }\n  }\n\n  private getPendingTasks(): PendingMacrotask[] {\n    if (!this.taskTrackingZone) {\n      return [];\n    }\n\n    // Copy the tasks data so that we don't leak tasks.\n    return this.taskTrackingZone.macroTasks.map((t: Task) => {\n      return {\n        source: t.source,\n        // From TaskTrackingZone:\n        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40\n        creationLocation: (t as any).creationLocation as Error,\n        data: t.data\n      };\n    });\n  }\n\n  private addCallback(cb: DoneCallback, timeout?: number, updateCb?: UpdateCallback) {\n    let timeoutId: any = -1;\n    if (timeout && timeout > 0) {\n      timeoutId = setTimeout(() => {\n        this._callbacks = this._callbacks.filter((cb) => cb.timeoutId !== timeoutId);\n        cb(this._didWork, this.getPendingTasks());\n      }, timeout);\n    }\n    this._callbacks.push(<WaitCallback>{doneCb: cb, timeoutId: timeoutId, updateCb: updateCb});\n  }\n\n  /**\n   * Wait for the application to be stable with a timeout. If the timeout is reached before that\n   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n   *\n   * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n   *    whichever comes first.\n   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n   *    specified, whenStable() will wait forever.\n   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n   *    and no further updates will be issued.\n   */\n  whenStable(doneCb: Function, timeout?: number, updateCb?: Function): void {\n    if (updateCb && !this.taskTrackingZone) {\n      throw new Error(\n          'Task tracking zone is required when passing an update callback to ' +\n          'whenStable(). Is \"zone.js/dist/task-tracking.js\" loaded?');\n    }\n    // These arguments are 'Function' above to keep the public API simple.\n    this.addCallback(doneCb as DoneCallback, timeout, updateCb as UpdateCallback);\n    this._runCallbacksIfReady();\n  }\n\n  /**\n   * Get the number of pending requests\n   * @deprecated pending requests are now tracked with zones\n   */\n  getPendingRequestCount(): number { return this._pendingCount; }\n\n  /**\n   * Find providers by name\n   * @param using The root element to search from\n   * @param provider The name of binding variable\n   * @param exactMatch Whether using exactMatch\n   */\n  findProviders(using: any, provider: string, exactMatch: boolean): any[] {\n    // TODO(juliemr): implement.\n    return [];\n  }\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\n@Injectable()\nexport class TestabilityRegistry {\n  /** @internal */\n  _applications = new Map<any, Testability>();\n\n  constructor() { _testabilityGetter.addToWindow(this); }\n\n  /**\n   * Registers an application with a testability hook so that it can be tracked\n   * @param token token of application, root element\n   * @param testability Testability hook\n   */\n  registerApplication(token: any, testability: Testability) {\n    this._applications.set(token, testability);\n  }\n\n  /**\n   * Unregisters an application.\n   * @param token token of application, root element\n   */\n  unregisterApplication(token: any) { this._applications.delete(token); }\n\n  /**\n   * Unregisters all applications\n   */\n  unregisterAllApplications() { this._applications.clear(); }\n\n  /**\n   * Get a testability hook associated with the application\n   * @param elem root element\n   */\n  getTestability(elem: any): Testability|null { return this._applications.get(elem) || null; }\n\n  /**\n   * Get all registered testabilities\n   */\n  getAllTestabilities(): Testability[] { return Array.from(this._applications.values()); }\n\n  /**\n   * Get all registered applications(root elements)\n   */\n  getAllRootElements(): any[] { return Array.from(this._applications.keys()); }\n\n  /**\n   * Find testability of a node in the Tree\n   * @param elem node\n   * @param findInAncestors whether finding testability in ancestors if testability was not found in\n   * current node\n   */\n  findTestabilityInTree(elem: Node, findInAncestors: boolean = true): Testability|null {\n    return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n  }\n}\n\n/**\n * Adapter interface for retrieving the `Testability` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport interface GetTestability {\n  addToWindow(registry: TestabilityRegistry): void;\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null;\n}\n\nclass _NoopGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {}\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    return null;\n  }\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport function setTestabilityGetter(getter: GetTestability): void {\n  _testabilityGetter = getter;\n}\n\nlet _testabilityGetter: GetTestability = new _NoopGetTestability();\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput } from '../types';\n\nexport function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap<T, T>(identity as (value: T, index: number) => ObservableInput<T>, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n * ### Converts an array to an Observable\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10 20 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n * ```javascript\n * import { take } from 'rxjs/operators';\n * import { from } from 'rxjs/observable/from';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3 6 12 24 48 96 192 384 768 1536\n * ```\n *\n * ---\n *\n * ### with async scheduler\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n * import { async } from 'rxjs/scheduler/async';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, async);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start end 10 20 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n * @see {@link fromPromise}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Optional, SkipSelf, StaticProvider, defineInjectable} from '../../di';\nimport {DefaultKeyValueDifferFactory} from './default_keyvalue_differ';\n\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport interface KeyValueDiffer<K, V> {\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: Map<K, V>): KeyValueChanges<K, V>|null;\n\n  /**\n   * Compute a difference between the previous state and the new `object` state.\n   *\n   * @param object containing the new value.\n   * @returns an object describing the difference. The return value is only valid until the next\n   * `diff()` invocation.\n   */\n  diff(object: {[key: string]: V}): KeyValueChanges<string, V>|null;\n  // TODO(TS2.1): diff<KP extends string>(this: KeyValueDiffer<KP, V>, object: Record<KP, V>):\n  // KeyValueDiffer<KP, V>;\n}\n\n/**\n * An object describing the changes in the `Map` or `{[k:string]: string}` since last time\n * `KeyValueDiffer#diff()` was invoked.\n *\n * @publicApi\n */\nexport interface KeyValueChanges<K, V> {\n  /**\n   * Iterate over all changes. `KeyValueChangeRecord` will contain information about changes\n   * to each item.\n   */\n  forEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over changes in the order of original Map showing where the original items\n   * have moved.\n   */\n  forEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all keys for which values have changed.\n   */\n  forEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all added items.\n   */\n  forEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\n  /**\n   * Iterate over all removed items.\n   */\n  forEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport interface KeyValueChangeRecord<K, V> {\n  /**\n   * Current key in the Map.\n   */\n  readonly key: K;\n\n  /**\n   * Current value for the key or `null` if removed.\n   */\n  readonly currentValue: V|null;\n\n  /**\n   * Previous value for the key or `null` if added.\n   */\n  readonly previousValue: V|null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport interface KeyValueDifferFactory {\n  /**\n   * Test to see if the differ knows how to diff this kind of object.\n   */\n  supports(objects: any): boolean;\n\n  /**\n   * Create a `KeyValueDiffer`.\n   */\n  create<K, V>(): KeyValueDiffer<K, V>;\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport class KeyValueDiffers {\n  /** @nocollapse */\n  static ngInjectableDef = defineInjectable({\n    providedIn: 'root',\n    factory: () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()])\n  });\n\n  /**\n   * @deprecated v4.0.0 - Should be private.\n   */\n  factories: KeyValueDifferFactory[];\n\n  constructor(factories: KeyValueDifferFactory[]) { this.factories = factories; }\n\n  static create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers {\n    if (parent) {\n      const copied = parent.factories.slice();\n      factories = factories.concat(copied);\n    }\n    return new KeyValueDiffers(factories);\n  }\n\n  /**\n   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n   * {@link KeyValueDiffers} instance.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * The following example shows how to extend an existing list of factories,\n   * which will only be applied to the injector for this component and its children.\n   * This step is all that's required to make a new {@link KeyValueDiffer} available.\n   *\n   * ```\n   * @Component({\n   *   viewProviders: [\n   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n   *   ]\n   * })\n   * ```\n   */\n  static extend<S>(factories: KeyValueDifferFactory[]): StaticProvider {\n    return {\n      provide: KeyValueDiffers,\n      useFactory: (parent: KeyValueDiffers) => {\n        if (!parent) {\n          // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n          // to bootstrap(), which would override default pipes instead of extending them.\n          throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n        }\n        return KeyValueDiffers.create(factories, parent);\n      },\n      // Dependency technically isn't optional, but we can provide a better error message this way.\n      deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n    };\n  }\n\n  find(kv: any): KeyValueDifferFactory {\n    const factory = this.factories.find(f => f.supports(kv));\n    if (factory) {\n      return factory;\n    }\n    throw new Error(`Cannot find a differ supporting object '${kv}'`);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformRef, createPlatformFactory} from './application_ref';\nimport {PLATFORM_ID} from './application_tokens';\nimport {Console} from './console';\nimport {Injector, StaticProvider} from './di';\nimport {TestabilityRegistry} from './testability/testability';\n\nconst _CORE_PLATFORM_PROVIDERS: StaticProvider[] = [\n  // Set a default platform name for platforms that don't set it explicitly.\n  {provide: PLATFORM_ID, useValue: 'unknown'},\n  {provide: PlatformRef, deps: [Injector]},\n  {provide: TestabilityRegistry, deps: []},\n  {provide: Console, deps: []},\n];\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n *\n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `@angular/platform-webworker` provides\n * one suitable for use with web workers.\n *\n * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n *\n * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly\n * by the {@link Router} in order to navigate between routes. Since all interactions between {@link\n * Router} /\n * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n *\n * @publicApi\n */\nexport abstract class PlatformLocation {\n  abstract getBaseHrefFromDOM(): string;\n  abstract onPopState(fn: LocationChangeListener): void;\n  abstract onHashChange(fn: LocationChangeListener): void;\n\n  abstract get pathname(): string;\n  abstract get search(): string;\n  abstract get hash(): string;\n\n  abstract replaceState(state: any, title: string, url: string): void;\n\n  abstract pushState(state: any, title: string, url: string): void;\n\n  abstract forward(): void;\n\n  abstract back(): void;\n}\n\n/**\n * @description\n * Indicates when a location is initialized.\n *\n * @publicApi\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * @description\n * A serializable version of the event from `onPopState` or `onHashChange`\n *\n * @publicApi\n */\nexport interface LocationChangeEvent {\n  type: string;\n  state: any;\n}\n\n/**\n * @publicApi\n */\nexport interface LocationChangeListener { (event: LocationChangeEvent): any; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @publicApi\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nlet _DOM: DomAdapter = null !;\n\nexport function getDOM() {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  public resourceLoaderType: Type<any> = null !;\n  abstract hasProperty(element: any, name: string): boolean;\n  abstract setProperty(el: Element, name: string, value: any): any;\n  abstract getProperty(el: Element, name: string): any;\n  abstract invoke(el: Element, methodName: string, args: any[]): any;\n\n  abstract logError(error: any): any;\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n\n  /**\n   * Maps attribute names to their corresponding property names for cases\n   * where attribute name doesn't match property name.\n   */\n  get attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; }\n  set attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; }\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _attrToPropMap !: {[key: string]: string};\n\n  abstract contains(nodeA: any, nodeB: any): boolean;\n  abstract parse(templateHtml: string): any;\n  abstract querySelector(el: any, selector: string): any;\n  abstract querySelectorAll(el: any, selector: string): any[];\n  abstract on(el: any, evt: any, listener: any): any;\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract createMouseEvent(eventType: any): any;\n  abstract createEvent(eventType: string): any;\n  abstract preventDefault(evt: any): any;\n  abstract isPrevented(evt: any): boolean;\n  abstract getInnerHTML(el: any): string;\n  /** Returns content if el is a <template> element, null otherwise. */\n  abstract getTemplateContent(el: any): any;\n  abstract getOuterHTML(el: any): string;\n  abstract nodeName(node: any): string;\n  abstract nodeValue(node: any): string|null;\n  abstract type(node: any): string;\n  abstract content(node: any): any;\n  abstract firstChild(el: any): Node|null;\n  abstract nextSibling(el: any): Node|null;\n  abstract parentElement(el: any): Node|null;\n  abstract childNodes(el: any): Node[];\n  abstract childNodesAsList(el: any): Node[];\n  abstract clearNodes(el: any): any;\n  abstract appendChild(el: any, node: any): any;\n  abstract removeChild(el: any, node: any): any;\n  abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n  abstract remove(el: any): Node;\n  abstract insertBefore(parent: any, ref: any, node: any): any;\n  abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n  abstract insertAfter(parent: any, el: any, node: any): any;\n  abstract setInnerHTML(el: any, value: any): any;\n  abstract getText(el: any): string|null;\n  abstract setText(el: any, value: string): any;\n  abstract getValue(el: any): string;\n  abstract setValue(el: any, value: string): any;\n  abstract getChecked(el: any): boolean;\n  abstract setChecked(el: any, value: boolean): any;\n  abstract createComment(text: string): any;\n  abstract createTemplate(html: any): HTMLElement;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n  abstract createTextNode(text: string, doc?: any): Text;\n  abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n  abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n  abstract createShadowRoot(el: any): any;\n  abstract getShadowRoot(el: any): any;\n  abstract getHost(el: any): any;\n  abstract getDistributedNodes(el: any): Node[];\n  abstract clone /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n  abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n  abstract classList(element: any): any[];\n  abstract addClass(element: any, className: string): any;\n  abstract removeClass(element: any, className: string): any;\n  abstract hasClass(element: any, className: string): boolean;\n  abstract setStyle(element: any, styleName: string, styleValue: string): any;\n  abstract removeStyle(element: any, styleName: string): any;\n  abstract getStyle(element: any, styleName: string): string;\n  abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n  abstract tagName(element: any): string;\n  abstract attributeMap(element: any): Map<string, string>;\n  abstract hasAttribute(element: any, attribute: string): boolean;\n  abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n  abstract getAttribute(element: any, attribute: string): string|null;\n  abstract getAttributeNS(element: any, ns: string, attribute: string): string|null;\n  abstract setAttribute(element: any, name: string, value: string): any;\n  abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n  abstract removeAttribute(element: any, attribute: string): any;\n  abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n  abstract templateAwareRoot(el: any): any;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n  abstract getBoundingClientRect(el: any): any;\n  abstract getTitle(doc: Document): string;\n  abstract setTitle(doc: Document, newTitle: string): any;\n  abstract elementMatches(n: any, selector: string): boolean;\n  abstract isTemplateElement(el: any): boolean;\n  abstract isTextNode(node: any): boolean;\n  abstract isCommentNode(node: any): boolean;\n  abstract isElementNode(node: any): boolean;\n  abstract hasShadowRoot(node: any): boolean;\n  abstract isShadowRoot(node: any): boolean;\n  abstract importIntoDoc /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract adoptNode /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getHref(element: any): string;\n  abstract getEventKey(event: any): string;\n  abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n  abstract supportsDOMEvents(): boolean;\n  abstract supportsNativeShadowDOM(): boolean;\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n  abstract getHistory(): History;\n  abstract getLocation(): Location;\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n  abstract getUserAgent(): string;\n  abstract setData(element: any, name: string, value: string): any;\n  abstract getComputedStyle(element: any): any;\n  abstract getData(element: any, name: string): string|null;\n  abstract supportsWebAnimation(): boolean;\n  abstract performanceNow(): number;\n  abstract getAnimationPrefix(): string;\n  abstract getTransitionEnd(): string;\n  abstract supportsAnimation(): boolean;\n\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string|null;\n  abstract setCookie(name: string, value: string): any;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Éµglobal as global} from '@angular/core';\n\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  parse(templateHtml: string) { throw new Error('parse not implemented'); }\n  static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n  hasProperty(element: Node, name: string): boolean { return name in element; }\n  setProperty(el: Node, name: string, value: any) { (<any>el)[name] = value; }\n  getProperty(el: Node, name: string): any { return (<any>el)[name]; }\n  invoke(el: Node, methodName: string, args: any[]): any { (<any>el)[methodName](...args); }\n\n  // TODO(tbosch): move this into a separate environment class once we have it\n  logError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  get attrToPropMap(): any { return _attrToPropMap; }\n\n  contains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n  querySelector(el: HTMLElement, selector: string): any { return el.querySelector(selector); }\n  querySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n  on(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n  dispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n  createMouseEvent(eventType: string): MouseEvent {\n    const evt: MouseEvent = this.getDefaultDocument().createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  createEvent(eventType: any): Event {\n    const evt: Event = this.getDefaultDocument().createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  preventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n  isPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n  getInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n  getTemplateContent(el: Node): Node|null {\n    return 'content' in el && this.isTemplateElement(el) ? (<any>el).content : null;\n  }\n  getOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n  nodeName(node: Node): string { return node.nodeName; }\n  nodeValue(node: Node): string|null { return node.nodeValue; }\n  type(node: HTMLInputElement): string { return node.type; }\n  content(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return (<any>node).content;\n    } else {\n      return node;\n    }\n  }\n  firstChild(el: Node): Node|null { return el.firstChild; }\n  nextSibling(el: Node): Node|null { return el.nextSibling; }\n  parentElement(el: Node): Node|null { return el.parentNode; }\n  childNodes(el: any): Node[] { return el.childNodes; }\n  childNodesAsList(el: Node): any[] {\n    const childNodes = el.childNodes;\n    const res = new Array(childNodes.length);\n    for (let i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n  clearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n  appendChild(el: Node, node: Node) { el.appendChild(node); }\n  removeChild(el: Node, node: Node) { el.removeChild(node); }\n  replaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  insertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n  insertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n  insertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n  setInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n  getText(el: Node): string|null { return el.textContent; }\n  setText(el: Node, value: string) { el.textContent = value; }\n  getValue(el: any): string { return el.value; }\n  setValue(el: any, value: string) { el.value = value; }\n  getChecked(el: any): boolean { return el.checked; }\n  setChecked(el: any, value: boolean) { el.checked = value; }\n  createComment(text: string): Comment { return this.getDefaultDocument().createComment(text); }\n  createTemplate(html: any): HTMLElement {\n    const t = this.getDefaultDocument().createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createElementNS(ns: string, tagName: string, doc?: Document): Element {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElementNS(ns, tagName);\n  }\n  createTextNode(text: string, doc?: Document): Text {\n    doc = doc || this.getDefaultDocument();\n    return doc.createTextNode(text);\n  }\n  createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement {\n    doc = doc || this.getDefaultDocument();\n    const el = <HTMLScriptElement>doc.createElement('SCRIPT');\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n  createStyleElement(css: string, doc?: Document): HTMLStyleElement {\n    doc = doc || this.getDefaultDocument();\n    const style = <HTMLStyleElement>doc.createElement('style');\n    this.appendChild(style, this.createTextNode(css, doc));\n    return style;\n  }\n  createShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).createShadowRoot(); }\n  getShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).shadowRoot; }\n  getHost(el: HTMLElement): HTMLElement { return (<any>el).host; }\n  clone(node: Node): Node { return node.cloneNode(true); }\n  getElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n  getElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n  classList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n  addClass(element: any, className: string) { element.classList.add(className); }\n  removeClass(element: any, className: string) { element.classList.remove(className); }\n  hasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n  setStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n  removeStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n  getStyle(element: any, stylename: string): string { return element.style[stylename]; }\n  hasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n  tagName(element: any): string { return element.tagName; }\n  attributeMap(element: any): Map<string, string> {\n    const res = new Map<string, string>();\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const attrib = elAttrs.item(i);\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n  hasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n  hasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n  getAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n  getAttributeNS(element: Element, ns: string, name: string): string|null {\n    return element.getAttributeNS(ns, name);\n  }\n  setAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n  setAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n  removeAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n  removeAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n  templateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document { return document; }\n  getBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n  getTitle(doc: Document): string { return doc.title; }\n  setTitle(doc: Document, newTitle: string) { doc.title = newTitle || ''; }\n  elementMatches(n: any, selector: string): boolean {\n    if (this.isElementNode(n)) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n  isTemplateElement(el: Node): boolean {\n    return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n  }\n  isTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n  isCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n  isElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n  hasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n  isShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n  importIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n  adoptNode(node: Node): any { return document.adoptNode(node); }\n  getHref(el: Element): string { return el.getAttribute('href') !; }\n\n  getEventKey(event: any): string {\n    let key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = (_chromeNumKeyPadMap as any)[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History { return window.history; }\n  getLocation(): Location { return window.location; }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void { baseElement = null; }\n  getUserAgent(): string { return window.navigator.userAgent; }\n  setData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n  getData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n  getComputedStyle(element: any): any { return getComputedStyle(element); }\n  // TODO(tbosch): move this into a separate environment class once we have it\n  supportsWebAnimation(): boolean {\n    return typeof(<any>Element).prototype['animate'] === 'function';\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean { return true; }\n\n  getCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n\n  setCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base') !;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const cookie of cookieStr.split(';')) {\n    const eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomAdapter} from '../dom/dom_adapter';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  private _animationPrefix: string|null = null;\n  private _transitionEnd: string|null = null;\n  constructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n\n  getDistributedNodes(el: HTMLElement): Node[] { return (<any>el).getDistributedNodes(); }\n  resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n  supportsDOMEvents(): boolean { return true; }\n  supportsNativeShadowDOM(): boolean {\n    return typeof(<any>document.body).createShadowRoot === 'function';\n  }\n  getAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n  getTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n  supportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT as commonDOCUMENT} from '@angular/common';\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n * @publicApi\n */\nexport const DOCUMENT = commonDOCUMENT;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, Éµglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() { setTestabilityGetter(new BrowserGetTestability()); }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, PlatformLocation, ÉµPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, createPlatformFactory, platformCore, ÉµAPP_ROOT as APP_ROOT, ÉµConsole as Console} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT]},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\n/**\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  return document;\n}\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: APP_ROOT, useValue: true},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional, PLATFORM_ID} from '@angular/core';\n\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nconst __symbol__ =\n    (typeof Zone !== 'undefined') && (Zone as any)['__symbol__'] || function(v: string): string {\n      return '__zone_symbol__' + v;\n    };\nconst ADD_EVENT_LISTENER: 'addEventListener' = __symbol__('addEventListener');\nconst REMOVE_EVENT_LISTENER: 'removeEventListener' = __symbol__('removeEventListener');\n\nconst symbolNames: {[key: string]: string} = {};\n\nconst FALSE = 'FALSE';\nconst ANGULAR = 'ANGULAR';\nconst NATIVE_ADD_LISTENER = 'addEventListener';\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n\n// use the same symbol string which is used in zone.js\nconst stopSymbol = '__zone_symbol__propagationStopped';\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\n\nconst blackListedEvents: string[] =\n    (typeof Zone !== 'undefined') && (Zone as any)[__symbol__('BLACK_LISTED_EVENTS')];\nlet blackListedMap: {[eventName: string]: string};\nif (blackListedEvents) {\n  blackListedMap = {};\n  blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\n}\n\nconst isBlackListedEvent = function(eventName: string) {\n  if (!blackListedMap) {\n    return false;\n  }\n  return blackListedMap.hasOwnProperty(eventName);\n};\n\ninterface TaskData {\n  zone: any;\n  handler: Function;\n}\n\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nconst globalListener = function(event: Event) {\n  const symbolName = symbolNames[event.type];\n  if (!symbolName) {\n    return;\n  }\n  const taskDatas: TaskData[] = this[symbolName];\n  if (!taskDatas) {\n    return;\n  }\n  const args: any = [event];\n  if (taskDatas.length === 1) {\n    // if taskDatas only have one element, just invoke it\n    const taskData = taskDatas[0];\n    if (taskData.zone !== Zone.current) {\n      // only use Zone.run when Zone.current not equals to stored zone\n      return taskData.zone.run(taskData.handler, this, args);\n    } else {\n      return taskData.handler.apply(this, args);\n    }\n  } else {\n    // copy tasks as a snapshot to avoid event handlers remove\n    // itself or others\n    const copiedTasks = taskDatas.slice();\n    for (let i = 0; i < copiedTasks.length; i++) {\n      // if other listener call event.stopImmediatePropagation\n      // just break\n      if ((event as any)[stopSymbol] === true) {\n        break;\n      }\n      const taskData = copiedTasks[i];\n      if (taskData.zone !== Zone.current) {\n        // only use Zone.run when Zone.current not equals to stored zone\n        taskData.zone.run(taskData.handler, this, args);\n      } else {\n        taskData.handler.apply(this, args);\n      }\n    }\n  }\n};\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any, private ngZone: NgZone,\n      @Optional() @Inject(PLATFORM_ID) platformId: {}|null) {\n    super(doc);\n\n    if (!platformId || !isPlatformServer(platformId)) {\n      this.patchEvent();\n    }\n  }\n\n  private patchEvent() {\n    if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n      return;\n    }\n    if ((Event.prototype as any)[stopMethodSymbol]) {\n      // already patched by zone.js\n      return;\n    }\n    const delegate = (Event.prototype as any)[stopMethodSymbol] =\n        Event.prototype.stopImmediatePropagation;\n    Event.prototype.stopImmediatePropagation = function() {\n      if (this) {\n        this[stopSymbol] = true;\n      }\n\n      // should call native delegate in case\n      // in some environment part of the application\n      // will not use the patched Event\n      delegate && delegate.apply(this, arguments);\n    };\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    /**\n     * This code is about to add a listener to the DOM. If Zone.js is present, than\n     * `addEventListener` has been patched. The patched code adds overhead in both\n     * memory and speed (3x slower) than native. For this reason if we detect that\n     * Zone.js is present we use a simple version of zone aware addEventListener instead.\n     * The result is faster registration and the zone will be restored.\n     * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n     * will not be invoked\n     * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n     *\n     * NOTE: it is possible that the element is from different iframe, and so we\n     * have to check before we execute the method.\n     */\n    const self = this;\n    const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n    let callback: EventListener = handler as EventListener;\n    // if zonejs is loaded and current zone is not ngZone\n    // we keep Zone.current on target for later restoration.\n    if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n      let symbolName = symbolNames[eventName];\n      if (!symbolName) {\n        symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n      }\n      let taskDatas: TaskData[] = (element as any)[symbolName];\n      const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n      if (!taskDatas) {\n        taskDatas = (element as any)[symbolName] = [];\n      }\n\n      const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n      if (taskDatas.length === 0) {\n        taskDatas.push({zone: zone, handler: callback});\n      } else {\n        let callbackRegistered = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n          if (taskDatas[i].handler === callback) {\n            callbackRegistered = true;\n            break;\n          }\n        }\n        if (!callbackRegistered) {\n          taskDatas.push({zone: zone, handler: callback});\n        }\n      }\n\n      if (!globalListenerRegistered) {\n        element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n      }\n    } else {\n      element[NATIVE_ADD_LISTENER](eventName, callback, false);\n    }\n    return () => this.removeEventListener(element, eventName, callback);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n    // zone.js not loaded, use native removeEventListener\n    if (!underlyingRemove) {\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    let symbolName = symbolNames[eventName];\n    let taskDatas: TaskData[] = symbolName && target[symbolName];\n    if (!taskDatas) {\n      // addEventListener not using patched version\n      // just call native removeEventListener\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    // fix issue 20532, should be able to remove\n    // listener which was added inside of ngZone\n    let found = false;\n    for (let i = 0; i < taskDatas.length; i++) {\n      // remove listener from taskDatas if the callback equals\n      if (taskDatas[i].handler === callback) {\n        found = true;\n        taskDatas.splice(i, 1);\n        break;\n      }\n    }\n    if (found) {\n      if (taskDatas.length === 0) {\n        // all listeners are removed, we can remove the globalListener from target\n        underlyingRemove.apply(target, [eventName, globalListener, false]);\n      }\n    } else {\n      // not found in taskDatas, the callback may be added inside of ngZone\n      // use native remove listener to remove the callback\n      target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const PLATFORM_BROWSER_ID = 'browser';\nexport const PLATFORM_SERVER_ID = 'server';\nexport const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';\nexport const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';\n\n/**\n * Returns whether a platform id represents a browser platform.\n * @publicApi\n */\nexport function isPlatformBrowser(platformId: Object): boolean {\n  return platformId === PLATFORM_BROWSER_ID;\n}\n\n/**\n * Returns whether a platform id represents a server platform.\n * @publicApi\n */\nexport function isPlatformServer(platformId: Object): boolean {\n  return platformId === PLATFORM_SERVER_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker app platform.\n * @publicApi\n */\nexport function isPlatformWorkerApp(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_APP_ID;\n}\n\n/**\n * Returns whether a platform id represents a web worker UI platform.\n * @publicApi\n */\nexport function isPlatformWorkerUi(platformId: Object): boolean {\n  return platformId === PLATFORM_WORKER_UI_ID;\n}\n","import { Component, NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@Component({ selector: 'hello-world', template: 'Hello World!' })\nexport class AppComponent { }\n\n@NgModule({ declarations: [AppComponent], imports: [BrowserModule], bootstrap: [AppComponent] })\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowser } from '@angular/platform-browser';\nimport { AppModule } from './app.module';\n\nenableProdMode();\n\nplatformBrowser().bootstrapModule(AppModule).catch(err => console.error(err));\n"]}